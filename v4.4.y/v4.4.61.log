Check from v4.4.61 to v4.4.62
Commit count: 19
checking a80c068fbf43e22f099c0587b9e1a2337378a505 ......
checking 7d170f270a95639192cfd53dcb15e6d8530b4577 ......
	 orig commit -> 7b5967389f5a8dfb9d32843830f5e2717e20995d ......
checking ac0cbfbb1e4b84d426f210849492afadbc4b6bb9 ......
	 orig commit -> 7c3945bc2073554bb2ecf983e073dee686679c53 ......
checking 710f793a15de0213d4e15f123f327b2075a0c62b ......
	 orig commit -> 291c566a28910614ce42d0ffe82196eddd6346f4 ......
checking f1e6b1149e497dc61ceff290c1d3db259ebf7938 ......
	 orig commit -> 6496bbf0ec481966ef9ffe5b6660d8d1b55c60cc ......
checking 0a007f74b826836074de8bfcb1e197cada993718 ......
	 orig commit -> 22547c4cc4fe20698a6a85a55b8788859134b8e4 ......
checking f4522e36edaa9ec0cada0daa5c2628db762dd3d9 ......
	 orig commit -> 36e1f3d107867b25c616c2fd294f5a1c9d4e5d09 ......
checking d35f8fa0b93e61dd95b8f86928a783c4d8a32d3e ......
	 orig commit -> 2b6867c2ce76c596676bec7d2d525af525fdc6e2 ......
		 2b6867c2ce76c596676bec7d2d525af525fdc6e2 has problem. Fixes commit -> eb73190f4fbeedf762394e92d6a4ec9ace684c88
commit 2f59e1e852e80e70af5bf9d3bd96f39309071904
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jun 1 09:23:02 2018 -0700

    net/packet: refine check for priv area size
    
    [ Upstream commit eb73190f4fbeedf762394e92d6a4ec9ace684c88 ]
    
    syzbot was able to trick af_packet again [1]
    
    Various commits tried to address the problem in the past,
    but failed to take into account V3 header size.
    
    [1]
    
    tpacket_rcv: packet too big, clamped from 72 to 4294967224. macoff=96
    BUG: KASAN: use-after-free in prb_run_all_ft_ops net/packet/af_packet.c:1016 [inline]
    BUG: KASAN: use-after-free in prb_fill_curr_block.isra.59+0x4e5/0x5c0 net/packet/af_packet.c:1039
    Write of size 2 at addr ffff8801cb62000e by task kworker/1:2/2106
    
    CPU: 1 PID: 2106 Comm: kworker/1:2 Not tainted 4.17.0-rc7+ #77
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: ipv6_addrconf addrconf_dad_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b9/0x294 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_store2_noabort+0x17/0x20 mm/kasan/report.c:436
     prb_run_all_ft_ops net/packet/af_packet.c:1016 [inline]
     prb_fill_curr_block.isra.59+0x4e5/0x5c0 net/packet/af_packet.c:1039
     __packet_lookup_frame_in_block net/packet/af_packet.c:1094 [inline]
     packet_current_rx_frame net/packet/af_packet.c:1117 [inline]
     tpacket_rcv+0x1866/0x3340 net/packet/af_packet.c:2282
     dev_queue_xmit_nit+0x891/0xb90 net/core/dev.c:2018
     xmit_one net/core/dev.c:3049 [inline]
     dev_hard_start_xmit+0x16b/0xc10 net/core/dev.c:3069
     __dev_queue_xmit+0x2724/0x34c0 net/core/dev.c:3584
     dev_queue_xmit+0x17/0x20 net/core/dev.c:3617
     neigh_resolve_output+0x679/0xad0 net/core/neighbour.c:1358
     neigh_output include/net/neighbour.h:482 [inline]
     ip6_finish_output2+0xc9c/0x2810 net/ipv6/ip6_output.c:120
     ip6_finish_output+0x5fe/0xbc0 net/ipv6/ip6_output.c:154
     NF_HOOK_COND include/linux/netfilter.h:277 [inline]
     ip6_output+0x227/0x9b0 net/ipv6/ip6_output.c:171
     dst_output include/net/dst.h:444 [inline]
     NF_HOOK include/linux/netfilter.h:288 [inline]
     ndisc_send_skb+0x100d/0x1570 net/ipv6/ndisc.c:491
     ndisc_send_ns+0x3c1/0x8d0 net/ipv6/ndisc.c:633
     addrconf_dad_work+0xbef/0x1340 net/ipv6/addrconf.c:4033
     process_one_work+0xc1e/0x1b50 kernel/workqueue.c:2145
     worker_thread+0x1cc/0x1440 kernel/workqueue.c:2279
     kthread+0x345/0x410 kernel/kthread.c:240
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:412
    
    The buggy address belongs to the page:
    page:ffffea00072d8800 count:0 mapcount:-127 mapping:0000000000000000 index:0xffff8801cb620e80
    flags: 0x2fffc0000000000()
    raw: 02fffc0000000000 0000000000000000 ffff8801cb620e80 00000000ffffff80
    raw: ffffea00072e3820 ffffea0007132d20 0000000000000002 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801cb61ff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff8801cb61ff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    >ffff8801cb620000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                          ^
     ffff8801cb620080: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff8801cb620100: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    
    Fixes: 2b6867c2ce76 ("net/packet: fix overflow in check for priv area size")
    Fixes: dc808110bb62 ("packet: handle too big packets for PACKET_V3")
    Fixes: f6fb8f100b80 ("af-packet: TPACKET_V3 flexible buffer implementation.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking fd8bae310684b557c0b30ae9105420956a41494f ......
	 orig commit -> 40c98cb57cdbc377456116ad4582c89e329721b0 ......
checking ba7681e4eee6739e4f23a1ba21fb7737fe4ce4f4 ......
	 orig commit -> c25f8064c1d5731a2ce5664def890140dcdd3e5c ......
checking f017e58da4aba293e4a6ab62ca5d4801f79cc929 ......
	 orig commit -> 3cc3434fd6307d06b53b98ce83e76bf9807689b9 ......
checking b39b263816687fd71b10c31b3eb916defe8176f0 ......
	 orig commit -> dda45f701c9d7ad4ac0bb446e3a96f6df9a468d9 ......
		 dda45f701c9d7ad4ac0bb446e3a96f6df9a468d9 has problem. Fixes commit -> c25f8064c1d5731a2ce5664def890140dcdd3e5c
commit ba7681e4eee6739e4f23a1ba21fb7737fe4ce4f4
Author: Matt Redfearn <matt.redfearn@imgtec.com>
Date:   Wed Jan 25 17:00:25 2017 +0000

    MIPS: IRQ Stack: Fix erroneous jal to plat_irq_dispatch
    
    commit c25f8064c1d5731a2ce5664def890140dcdd3e5c upstream.
    
    Commit dda45f701c9d ("MIPS: Switch to the irq_stack in interrupts")
    changed both the normal and vectored interrupt handlers. Unfortunately
    the vectored version, "except_vec_vi_handler", was incorrectly modified
    to unconditionally jal to plat_irq_dispatch, rather than doing a jalr to
    the vectored handler that has been set up. This is ok for many platforms
    which set the vectored handler to plat_irq_dispatch anyway, but will
    cause problems with platforms that use other handlers.
    
    Fixes: dda45f701c9d ("MIPS: Switch to the irq_stack in interrupts")
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/15110/
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 93a82f8dbef8ee421fac80a1bd0564124a8ac41c ......
	 orig commit -> 510d86362a27577f5ee23f46cfb354ad49731e61 ......
checking 3363653512853754fcc7592d2c68c4769a4825c9 ......
	 orig commit -> d42d8d106b0275b027c1e8992c42aecf933436ea ......
checking d8b8b5528ea5a394074a91e37571bcca081b27e1 ......
	 orig commit -> fe8bd18ffea5327344d4ec2bf11f47951212abd0 ......
		 fe8bd18ffea5327344d4ec2bf11f47951212abd0 has problem. Fixes commit -> 72faa7a773ca59336f3c889e878de81445c5a85c
commit 5b98f0928666b8da3ff4a5fc412c55fb092e37d5
Author: Liu Xiang <liu.xiang6@zte.com.cn>
Date:   Sat Feb 16 17:12:24 2019 +0800

    MIPS: irq: Allocate accurate order pages for irq stack
    
    commit 72faa7a773ca59336f3c889e878de81445c5a85c upstream.
    
    The irq_pages is the number of pages for irq stack, but not the
    order which is needed by __get_free_pages().
    We can use get_order() to calculate the accurate order.
    
    Signed-off-by: Liu Xiang <liu.xiang6@zte.com.cn>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: fe8bd18ffea5 ("MIPS: Introduce irq_stack")
    Cc: linux-mips@vger.kernel.org
    Cc: stable@vger.kernel.org # v4.11+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5a527d80836e9ad0dc3dceee7de72f16c817fb8b ......
	 orig commit -> bd5d21310133921021d78995ad6346f908483124 ......
checking 297f55bcb62ad0b6b290b01177d9395305d57020 ......
	 orig commit -> de288e36fe33f7e06fa272bc8e2f85aa386d99aa ......
checking 8cfaf0ae1f566ddfcda661bd81b625a71b16459a ......
	 orig commit -> 8f68d591d4765b2e1ce9d916ac7bc5583285c4ad ......
checking cb0a2cba62d58caf6668f630858acc15ed40ee23 ......
	 orig commit -> 34dc8993eef63681b062871413a9484008a2a78f ......

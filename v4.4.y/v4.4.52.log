Check from v4.4.52 to v4.4.53
Commit count: 93
checking 49616e71506142f228efa7e017925d092d4c3279 ......
checking 9cee69465035dfabae0c9d7e4e9abca046edb8f7 ......
	 orig commit -> 8ea73db486cda442f0671f4bc9c03a76be398a28 ......
checking 1d316060cad53a5b62e2a3d722b3946e271658b4 ......
	 orig commit -> ae2f5e5ed04a17c1aa1f0a3714c725e12c21d2a9 ......
checking 4dd29050e46e6ef56c9058147ed54071c9bf95a3 ......
	 orig commit -> f9f1c8db1c37253805eaa32265e1e1af3ae7d0a4 ......
checking 15959b728d07c178c3ed1074daee1c4663e7c601 ......
	 orig commit -> c21a493a2b44650707d06741601894329486f2ad ......
checking afee78f03ee6fbd5f1c023c3205fb86d8b742809 ......
	 orig commit -> adee40b265d7568296e218f079f478197ffa15bf ......
checking 79a7ff1443bd85c02786732080dff8d0696a0d11 ......
	 orig commit -> a971df0b9d04674e325346c17de9a895425ca5e1 ......
checking 5a1f03f1ee9170f99760d7abcb68754f551b3187 ......
	 orig commit -> 03a9e24ef2aaa5f1f9837356aed79c860521407a ......
checking 037cd23726b38cf23fc22e520d3e31809d68ce4a ......
	 orig commit -> fb61bb82cb46a932ef2fc62e1c731c8e7e6640d5 ......
checking ee360e99dae09a4b735aa24cc84f792bb82eb0ab ......
	 orig commit -> a9422a19ce270a22fc520f2278fb7e80c58be508 ......
checking a0378b5bfc2700365829858e3ab95a5995a3f266 ......
	 orig commit -> ed92d8c137b7794c2c2aa14479298b9885967607 ......
checking 5d23e89065cd3c6a6fb5e5a90aa67b619a673490 ......
	 orig commit -> 6682c14bbe505a8b912c57faf544f866777ee48d ......
checking 52fb4bdcea4c0e1b81ed06641083e83ac53f6284 ......
	 orig commit -> a974deee477af89411e0f80456bfb344ac433c98 ......
		 a974deee477af89411e0f80456bfb344ac433c98 has problem. Fixes commit -> 366a1569bff3fe14abfdf9285e31e05e091745f5
commit 5424427100216e9ef949623ab781a33152da2cb8
Author: Kinglong Mee <kinglongmee@gmail.com>
Date:   Mon Mar 6 22:29:14 2017 +0800

    NFSv4: fix a reference leak caused WARNING messages
    
    commit 366a1569bff3fe14abfdf9285e31e05e091745f5 upstream.
    
    Because nfs4_opendata_access() has close the state when access is denied,
    so the state isn't leak.
    Rather than revert the commit a974deee47, I'd like clean the strange state close.
    
    [ 1615.094218] ------------[ cut here ]------------
    [ 1615.094607] WARNING: CPU: 0 PID: 23702 at lib/list_debug.c:31 __list_add_valid+0x8e/0xa0
    [ 1615.094913] list_add double add: new=ffff9d7901d9f608, prev=ffff9d7901d9f608, next=ffff9d7901ee8dd0.
    [ 1615.095458] Modules linked in: nfsv4(E) nfs(E) nfsd(E) tun bridge stp llc fuse ip_set nfnetlink vmw_vsock_vmci_transport vsock f2fs snd_seq_midi snd_seq_midi_event fscrypto coretemp ppdev crct10dif_pclmul crc32_pclmul ghash_clmulni_intel intel_rapl_perf vmw_balloon snd_ens1371 joydev gameport snd_ac97_codec ac97_bus snd_seq snd_pcm snd_rawmidi snd_timer snd_seq_device snd soundcore nfit parport_pc parport acpi_cpufreq tpm_tis tpm_tis_core tpm i2c_piix4 vmw_vmci shpchp auth_rpcgss nfs_acl lockd(E) grace sunrpc(E) xfs libcrc32c vmwgfx drm_kms_helper ttm drm crc32c_intel mptspi e1000 serio_raw scsi_transport_spi mptscsih mptbase ata_generic pata_acpi fjes [last unloaded: nfs]
    [ 1615.097663] CPU: 0 PID: 23702 Comm: fstest Tainted: G        W   E   4.11.0-rc1+ #517
    [ 1615.098015] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/02/2015
    [ 1615.098807] Call Trace:
    [ 1615.099183]  dump_stack+0x63/0x86
    [ 1615.099578]  __warn+0xcb/0xf0
    [ 1615.099967]  warn_slowpath_fmt+0x5f/0x80
    [ 1615.100370]  __list_add_valid+0x8e/0xa0
    [ 1615.100760]  nfs4_put_state_owner+0x75/0xc0 [nfsv4]
    [ 1615.101136]  __nfs4_close+0x109/0x140 [nfsv4]
    [ 1615.101524]  nfs4_close_state+0x15/0x20 [nfsv4]
    [ 1615.101949]  nfs4_close_context+0x21/0x30 [nfsv4]
    [ 1615.102691]  __put_nfs_open_context+0xb8/0x110 [nfs]
    [ 1615.103155]  put_nfs_open_context+0x10/0x20 [nfs]
    [ 1615.103586]  nfs4_file_open+0x13b/0x260 [nfsv4]
    [ 1615.103978]  do_dentry_open+0x20a/0x2f0
    [ 1615.104369]  ? nfs4_copy_file_range+0x30/0x30 [nfsv4]
    [ 1615.104739]  vfs_open+0x4c/0x70
    [ 1615.105106]  ? may_open+0x5a/0x100
    [ 1615.105469]  path_openat+0x623/0x1420
    [ 1615.105823]  do_filp_open+0x91/0x100
    [ 1615.106174]  ? __alloc_fd+0x3f/0x170
    [ 1615.106568]  do_sys_open+0x130/0x220
    [ 1615.106920]  ? __put_cred+0x3d/0x50
    [ 1615.107256]  SyS_open+0x1e/0x20
    [ 1615.107588]  entry_SYSCALL_64_fastpath+0x1a/0xa9
    [ 1615.107922] RIP: 0033:0x7fab599069b0
    [ 1615.108247] RSP: 002b:00007ffcf0600d78 EFLAGS: 00000246 ORIG_RAX: 0000000000000002
    [ 1615.108575] RAX: ffffffffffffffda RBX: 00007fab59bcfae0 RCX: 00007fab599069b0
    [ 1615.108896] RDX: 0000000000000200 RSI: 0000000000000200 RDI: 00007ffcf060255e
    [ 1615.109211] RBP: 0000000000040010 R08: 0000000000000000 R09: 0000000000000016
    [ 1615.109515] R10: 00000000000006a1 R11: 0000000000000246 R12: 0000000000041000
    [ 1615.109806] R13: 0000000000040010 R14: 0000000000001000 R15: 0000000000002710
    [ 1615.110152] ---[ end trace 96ed63b1306bf2f3 ]---
    
    Fixes: a974deee47 ("NFSv4: Fix memory and state leak in...")
    Signed-off-by: Kinglong Mee <kinglongmee@gmail.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Cc: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3ee4f442e5b37a537297b812557b1163f96b5399 ......
	 orig commit -> 783112f7401ff449d979530209b3f6c2594fdb4e ......
checking 6030493a3422ac145b28732db35a98d776c0982e ......
	 orig commit -> 758e99fefe1d9230111296956335cd35995c0eaf ......
checking 781e6a08381de1e042cdedc4002183548299f90b ......
	 orig commit -> 6773386f977ce5af339f9678fa2918909a946c6b ......
checking 6e10c33cb87a82e804aa8e52cf15dc052295e9fe ......
	 orig commit -> 40b368af4b750863b2cb66a3a9513241db2f0793 ......
		 40b368af4b750863b2cb66a3a9513241db2f0793 has problem. Fixes commit -> b8b8b16352cd90c6083033fd4487f04fae935c18
commit 51ba40fcfd6784c7576268aa9de23630c397f387
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Wed Sep 20 16:15:05 2017 -0500

    rtlwifi: rtl8821ae: Fix connection lost problem
    
    commit b8b8b16352cd90c6083033fd4487f04fae935c18 upstream.
    
    In commit 40b368af4b75 ("rtlwifi: Fix alignment issues"), the read
    of REG_DBI_READ was changed from 16 to 8 bits. For unknown reasonsi
    this change results in reduced stability for the wireless connection.
    This regression was located using bisection.
    
    Fixes: 40b368af4b75 ("rtlwifi: Fix alignment issues")
    Reported-and-tested-by: James Cameron <quozl@laptop.org>
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Cc: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 70a09029b7be8091499aef3ed39a91325d841ec4 ......
	 orig commit -> f38e5fb95a1f8feda88531eedc98f69b24748712 ......
checking 44dd30e04c1f59dff7115857e51bce4b6ddd2137 ......
	 orig commit -> f2625f7db4dd0bbd16a9c7d2950e7621f9aa57ad ......
checking 88326fe95f59e4a36f8c07f9895f619ac49a2ac2 ......
	 orig commit -> 55efcfcd7776165b294f8b5cd6e05ca00ec89b7c ......
checking f414af249f1e67f0fbb9fc80eb9425818b17f21a ......
	 orig commit -> d77044d142e960f7b5f814a91ecb8bcf86aa552c ......
		 d77044d142e960f7b5f814a91ecb8bcf86aa552c has problem. Fixes commit -> e9c18ae6eb2b312f16c63e34b43ea23926daa398
checking 9b45ab285388ef27b920408799c056b2fe3e9a58 ......
	 orig commit -> 20951c7535b5e6af46bc37b7142105f716df739c ......
		 20951c7535b5e6af46bc37b7142105f716df739c has problem. Fixes commit -> e9c18ae6eb2b312f16c63e34b43ea23926daa398
checking abaeda7f709ac1e518c9dc197efd4abfdcd46942 ......
	 orig commit -> 5a66fecbf6aa528e375cbebccb1061cc58d80c84 ......
		 5a66fecbf6aa528e375cbebccb1061cc58d80c84 has problem. Fixes commit -> e9c18ae6eb2b312f16c63e34b43ea23926daa398
checking 862d2b7d21d383d1b043bda57db38a7e3520f42e ......
	 orig commit -> 3c7630d35009e6635e5b58d62de554fd5b6db5df ......
checking 374907e8d11613e790328b109041dca9578e3b1f ......
	 orig commit -> 421b8f20d3c381b215f988b42428f56fc3b82405 ......
checking 80190fcc48f68b321e3fe65a1526da1ce2e3e6ba ......
	 orig commit -> 5528954a1a0c49c6974ef1b8d6eaceff536204d5 ......
checking 61e9e9bcfd7b7b5645db191434d922f3bd25fa88 ......
	 orig commit -> 5de4e1ea9a731cad195ce5152705c21daef3bbba ......
checking 900466a746f560c0c2032c2e2060fd538a899ea2 ......
	 orig commit -> a994ce2d7e66008381a0b184c73be9ae9b72eb5c ......
checking 89eb5ed1536ed8c8cb02cf9eb6e34ba3b744cd46 ......
	 orig commit -> 61cd1b4cd1e8f7f7642ab64529d9bd52e8374641 ......
checking 1df66c45247185f9fb006166e5933539c2121814 ......
	 orig commit -> d2ce4ea1a0b0162e5d2d7e7942ab6f5cc2063d5a ......
checking 20bc8a897e48043339d4a396e654c81c39900108 ......
	 orig commit -> 7c42631376306fb3f34d51fda546b50a9b6dd6ec ......
checking 3584716db12a3e6b9c1c51c86475b357c166bbeb ......
	 orig commit -> 9cf6cdba586ced75c69b8314b88b2d2f5ce9b3ed ......
checking 2ab6b8c7172c4f2711f9925301a738cb29d6c882 ......
	 orig commit -> 6a6e1d56a0769795a36c0461c64bf5e5b9bbb4c0 ......
checking e83a28c521a6a9df75c031166cf18b5a5202ecdb ......
	 orig commit -> 8f36ebaf21fdae99c091c67e8b6fab33969f2667 ......
checking d4a8db66b9464c4f1ceb88ae12b8d385cbf5e061 ......
	 orig commit -> 2e38bea99a80eab408adee27f873a188d57b76cb ......
checking 434ed4aff140f2283dac25df60a7973d1e12717b ......
	 orig commit -> 1c68bb0f62bf8de8bb30123ea840d5168f25abea ......
checking 7666ef1a36cc09b63b4f916a90250adfdda2bb2b ......
	 orig commit -> c9f1e32600816d695f817477d56490bfc2ba43c6 ......
checking 1aeced70f77def8a7ea790fd1f2a11bfd9d752b4 ......
	 orig commit -> 3a5e969bb2f6692a256352649355d56d018d6b88 ......
checking dc7bbf895e438014c15d21222d0ba7544e98999d ......
	 orig commit -> a70e1d6fd6b5e1a81fa6171600942bee34f5128f ......
checking 6af0acc0b69f96b28285ddd994555e5ac71f9bb5 ......
	 orig commit -> 01d4d673558985d9a118e1e05026633c3e2ade9b ......
checking 4a3c526ced412e509a5abc1ed500996b5e1f048b ......
	 orig commit -> 21aaa23b0ebbd19334fa461370c03cbb076b3295 ......
checking da259399e4874b3ba7a35040eb80ccb3656fe6cd ......
	 orig commit -> 916cafdc95843fb9af5fd5f83ca499d75473d107 ......
checking 6ad4196f1952ffb8e5cac931b5825997c8a39e75 ......
	 orig commit -> 4753d8a24d4588657bc0a4cd66d4e282dff15c8c ......
checking 9a79248c083d502958a7c833bcaa8879fbe09682 ......
	 orig commit -> 97abd7d4b5d9c48ec15c425485f054e1c15e591b ......
checking 6ec4583e9b03f64166902b4b4d8301d0f62b49bc ......
	 orig commit -> eb5efbcb762aee4b454b04f7115f73ccbcf8f0ef ......
checking 9d636818dbac53c07c1bf7aa006c06ec32253187 ......
	 orig commit -> 3b136499e906460919f0d21a49db1aaccf0ae963 ......
checking 8774c73cf6963310395823ed7077ea12943ea0f3 ......
	 orig commit -> cd648b8a8fd5071d232242d5ee7ee3c0815776af ......
checking a3068b3e80667294589c7f6e16358d69937f27a6 ......
	 orig commit -> 03e916fa8b5577d85471452a3d0c5738aa658dae ......
checking 3daefdae5f8bb0e57fc5a3e73e3678d51cc6c137 ......
	 orig commit -> 2a9b8cba62c0741109c33a2be700ff3d7703a7c2 ......
checking cd3db55c64ae1ee46c3522d9681e5999f83989d6 ......
	 orig commit -> e02898b423802b1f3a3aaa7f16e896da069ba8f7 ......
checking 356d71df739877f18aa0ce1e0d7cb050d8fe874c ......
	 orig commit -> ecdd09597a57251323b0de50e3d45e69298c4a83 ......
		 ecdd09597a57251323b0de50e3d45e69298c4a83 has problem. Fixes commit -> 1e047eaab3bb5564f25b41e9cd3a053009f4e789
e02898b423802b1f3a3aaa7f16e896da069ba8f7
commit cd3db55c64ae1ee46c3522d9681e5999f83989d6
Author: Omar Sandoval <osandov@fb.com>
Date:   Wed Mar 1 10:42:38 2017 -0800

    loop: fix LO_FLAGS_PARTSCAN hang
    
    commit e02898b423802b1f3a3aaa7f16e896da069ba8f7 upstream.
    
    loop_reread_partitions() needs to do I/O, but we just froze the queue,
    so we end up waiting forever. This can easily be reproduced with losetup
    -P. Fix it by moving the reread to after we unfreeze the queue.
    
    Fixes: ecdd09597a57 ("block/loop: fix race between I/O and set_status")
    Reported-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Reviewed-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 123d30649e328dd9f8823fa63db9f7c5f5a581e8
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Apr 6 10:03:17 2018 +0900

    block/loop: fix deadlock after loop_set_status
    
    commit 1e047eaab3bb5564f25b41e9cd3a053009f4e789 upstream.
    
    syzbot is reporting deadlocks at __blkdev_get() [1].
    
    ----------------------------------------
    [   92.493919] systemd-udevd   D12696   525      1 0x00000000
    [   92.495891] Call Trace:
    [   92.501560]  schedule+0x23/0x80
    [   92.502923]  schedule_preempt_disabled+0x5/0x10
    [   92.504645]  __mutex_lock+0x416/0x9e0
    [   92.510760]  __blkdev_get+0x73/0x4f0
    [   92.512220]  blkdev_get+0x12e/0x390
    [   92.518151]  do_dentry_open+0x1c3/0x2f0
    [   92.519815]  path_openat+0x5d9/0xdc0
    [   92.521437]  do_filp_open+0x7d/0xf0
    [   92.527365]  do_sys_open+0x1b8/0x250
    [   92.528831]  do_syscall_64+0x6e/0x270
    [   92.530341]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [   92.931922] 1 lock held by systemd-udevd/525:
    [   92.933642]  #0: 00000000a2849e25 (&bdev->bd_mutex){+.+.}, at: __blkdev_get+0x73/0x4f0
    ----------------------------------------
    
    The reason of deadlock turned out that wait_event_interruptible() in
    blk_queue_enter() got stuck with bdev->bd_mutex held at __blkdev_put()
    due to q->mq_freeze_depth == 1.
    
    ----------------------------------------
    [   92.787172] a.out           S12584   634    633 0x80000002
    [   92.789120] Call Trace:
    [   92.796693]  schedule+0x23/0x80
    [   92.797994]  blk_queue_enter+0x3cb/0x540
    [   92.803272]  generic_make_request+0xf0/0x3d0
    [   92.807970]  submit_bio+0x67/0x130
    [   92.810928]  submit_bh_wbc+0x15e/0x190
    [   92.812461]  __block_write_full_page+0x218/0x460
    [   92.815792]  __writepage+0x11/0x50
    [   92.817209]  write_cache_pages+0x1ae/0x3d0
    [   92.825585]  generic_writepages+0x5a/0x90
    [   92.831865]  do_writepages+0x43/0xd0
    [   92.836972]  __filemap_fdatawrite_range+0xc1/0x100
    [   92.838788]  filemap_write_and_wait+0x24/0x70
    [   92.840491]  __blkdev_put+0x69/0x1e0
    [   92.841949]  blkdev_close+0x16/0x20
    [   92.843418]  __fput+0xda/0x1f0
    [   92.844740]  task_work_run+0x87/0xb0
    [   92.846215]  do_exit+0x2f5/0xba0
    [   92.850528]  do_group_exit+0x34/0xb0
    [   92.852018]  SyS_exit_group+0xb/0x10
    [   92.853449]  do_syscall_64+0x6e/0x270
    [   92.854944]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [   92.943530] 1 lock held by a.out/634:
    [   92.945105]  #0: 00000000a2849e25 (&bdev->bd_mutex){+.+.}, at: __blkdev_put+0x3c/0x1e0
    ----------------------------------------
    
    The reason of q->mq_freeze_depth == 1 turned out that loop_set_status()
    forgot to call blk_mq_unfreeze_queue() at error paths for
    info->lo_encrypt_type != NULL case.
    
    ----------------------------------------
    [   37.509497] CPU: 2 PID: 634 Comm: a.out Tainted: G        W        4.16.0+ #457
    [   37.513608] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 05/19/2017
    [   37.518832] RIP: 0010:blk_freeze_queue_start+0x17/0x40
    [   37.521778] RSP: 0018:ffffb0c2013e7c60 EFLAGS: 00010246
    [   37.524078] RAX: 0000000000000000 RBX: ffff8b07b1519798 RCX: 0000000000000000
    [   37.527015] RDX: 0000000000000002 RSI: ffffb0c2013e7cc0 RDI: ffff8b07b1519798
    [   37.529934] RBP: ffffb0c2013e7cc0 R08: 0000000000000008 R09: 47a189966239b898
    [   37.532684] R10: dad78b99b278552f R11: 9332dca72259d5ef R12: ffff8b07acd73678
    [   37.535452] R13: 0000000000004c04 R14: 0000000000000000 R15: ffff8b07b841e940
    [   37.538186] FS:  00007fede33b9740(0000) GS:ffff8b07b8e80000(0000) knlGS:0000000000000000
    [   37.541168] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   37.543590] CR2: 00000000206fdf18 CR3: 0000000130b30006 CR4: 00000000000606e0
    [   37.546410] Call Trace:
    [   37.547902]  blk_freeze_queue+0x9/0x30
    [   37.549968]  loop_set_status+0x67/0x3c0 [loop]
    [   37.549975]  loop_set_status64+0x3b/0x70 [loop]
    [   37.549986]  lo_ioctl+0x223/0x810 [loop]
    [   37.549995]  blkdev_ioctl+0x572/0x980
    [   37.550003]  block_ioctl+0x34/0x40
    [   37.550006]  do_vfs_ioctl+0xa7/0x6d0
    [   37.550017]  ksys_ioctl+0x6b/0x80
    [   37.573076]  SyS_ioctl+0x5/0x10
    [   37.574831]  do_syscall_64+0x6e/0x270
    [   37.576769]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    ----------------------------------------
    
    [1] https://syzkaller.appspot.com/bug?id=cd662bc3f6022c0979d01a262c318fab2ee9b56f
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <bot+48594378e9851eab70bcd6f99327c7db58c5a28a@syzkaller.appspotmail.com>
    Fixes: ecdd09597a572513 ("block/loop: fix race between I/O and set_status")
    Cc: Ming Lei <tom.leiming@gmail.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: stable <stable@vger.kernel.org>
    Cc: Jens Axboe <axboe@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd3db55c64ae1ee46c3522d9681e5999f83989d6
Author: Omar Sandoval <osandov@fb.com>
Date:   Wed Mar 1 10:42:38 2017 -0800

    loop: fix LO_FLAGS_PARTSCAN hang
    
    commit e02898b423802b1f3a3aaa7f16e896da069ba8f7 upstream.
    
    loop_reread_partitions() needs to do I/O, but we just froze the queue,
    so we end up waiting forever. This can easily be reproduced with losetup
    -P. Fix it by moving the reread to after we unfreeze the queue.
    
    Fixes: ecdd09597a57 ("block/loop: fix race between I/O and set_status")
    Reported-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Reviewed-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 973f40f368f72e868af1799b656deeed89be021c ......
	 orig commit -> e112666b4959b25a8552d63bc564e1059be703e8 ......
checking c0ef1f537a9728a91475f8f73cf8b5764e7a9848 ......
	 orig commit -> 907565337ebf998a68cb5c5b2174ce5e5da065eb ......
checking ea240cfed99bda8fc1774801cb9da355e66dc7e1 ......
	 orig commit -> eb72d0bb84eee5d0dc3044fd17b75e7101dabb57 ......
checking 33950b56d2c20d10e85a0ab339e5368e8d029a2b ......
	 orig commit -> 857de6e00778738dc3d61f75acbac35bdc48e533 ......
checking 2dc9a859eb8918ff86efdd0f2a570bcb3d9d6973 ......
	 orig commit -> c421530bf848604e97d0785a03b3fe2c62775083 ......
		 c421530bf848604e97d0785a03b3fe2c62775083 has problem. Fixes commit -> 934767c56b0d9dbb95a40e9e6e4d9dcdc3a165ad
commit 83aa7d13df9f9cabc87ce1c70f86c5b35c0f5ead
Author: Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
Date:   Thu Mar 2 09:21:33 2017 -0800

    scsi: aacraid: Fix typo in blink status
    
    [ Upstream commit 934767c56b0d9dbb95a40e9e6e4d9dcdc3a165ad ]
    
    The return status of the adapter check on KERNEL_PANIC is supposed to be
    the upper 16 bits of the OMR status register.
    
    Fixes: c421530bf848604e (scsi: aacraid: Reorder Adpater status check)
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
    Reviewed-by: Dave Carroll <david.carroll@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 18dbfcae65a3ca26180bb0432a78f6760726cb70 ......
	 orig commit -> 40630f462824ee24bc00d692865c86c3828094e0 ......
checking 80bccab34a5765060a752a34aa758a89313176ed ......
	 orig commit -> bba5dc332ec2d3a685cb4dae668c793f6a3713a3 ......
checking 5cdc8193ac38cc5094918cd0095bf76cb1c4181a ......
	 orig commit -> 3cd6d3d9b1abab8dcdf0800224ce26daac24eea2 ......
checking 6a284310d5dd7faa9c185863583f55ab1b6679ce ......
	 orig commit -> 6085831883c25860264721df15f05bbded45e2a2 ......
checking fdea1f9721585c68a47ba3e34cb22e257ba4634f ......
	 orig commit -> ca763d0a53b264a650342cee206512bc92ac7050 ......
checking f0ae01568e0cf4b00071d1dfd27c90022c2b6d7e ......
	 orig commit -> 95e91b831f87ac8e1f8ed50c14d709089b4e01b8 ......
		 95e91b831f87ac8e1f8ed50c14d709089b4e01b8 has problem. Fixes commit -> a73ab244f0dad8fffb3291b905f73e2d3eaa7c00
commit bd4792b31a8ebdfbb3a5af03a903ee8da1e78656
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Fri May 25 14:47:27 2018 -0700

    Revert "ipc/shm: Fix shmat mmap nil-page protection"
    
    commit a73ab244f0dad8fffb3291b905f73e2d3eaa7c00 upstream.
    
    Patch series "ipc/shm: shmat() fixes around nil-page".
    
    These patches fix two issues reported[1] a while back by Joe and Andrea
    around how shmat(2) behaves with nil-page.
    
    The first reverts a commit that it was incorrectly thought that mapping
    nil-page (address=0) was a no no with MAP_FIXED.  This is not the case,
    with the exception of SHM_REMAP; which is address in the second patch.
    
    I chose two patches because it is easier to backport and it explicitly
    reverts bogus behaviour.  Both patches ought to be in -stable and ltp
    testcases need updated (the added testcase around the cve can be
    modified to just test for SHM_RND|SHM_REMAP).
    
    [1] lkml.kernel.org/r/20180430172152.nfa564pvgpk3ut7p@linux-n805
    
    This patch (of 2):
    
    Commit 95e91b831f87 ("ipc/shm: Fix shmat mmap nil-page protection")
    worked on the idea that we should not be mapping as root addr=0 and
    MAP_FIXED.  However, it was reported that this scenario is in fact
    valid, thus making the patch both bogus and breaks userspace as well.
    
    For example X11's libint10.so relies on shmat(1, SHM_RND) for lowmem
    initialization[1].
    
    [1] https://cgit.freedesktop.org/xorg/xserver/tree/hw/xfree86/os-support/linux/int10/linux.c#n347
    Link: http://lkml.kernel.org/r/20180503203243.15045-2-dave@stgolabs.net
    Fixes: 95e91b831f87 ("ipc/shm: Fix shmat mmap nil-page protection")
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Reported-by: Joe Lawrence <joe.lawrence@redhat.com>
    Reported-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c5c893e7c44ed8a9dee23cb7e93e93816bae4be4 ......
	 orig commit -> dd8416c47715cf324c9a16f13273f9fda87acfed ......
checking 66f43a5768799c1b33fde22fe2231645bb743e0f ......
	 orig commit -> e1587a4945408faa58d0485002c110eb2454740c ......
checking 612e4679b865ed0bb7cdf06f71cd2e59d181f572 ......
	 orig commit -> e02dc017c3032dcdce1b993af0db135462e1b4b7 ......
checking 31dac0e870ddeea463a0ed9fbaa63137c20976c4 ......
	 orig commit -> 21e722c4c8377b5bc82ad058fed12165af739c1b ......
checking 07852563dba6a4ecb565f948a0452257a739864c ......
	 orig commit -> aaa59306b0b7e0ca4ba92cc04c5db101cbb1c096 ......
checking 5cc0cd0e3a5a73c2d54dfe8c0f79556ffb970af0 ......
	 orig commit -> e42a46b6f52473661ad192f76a128a68fe301df4 ......
checking 272d60bfce0e8222d2b1fe479a98fdf3bf7e05d0 ......
	 orig commit -> 6e017006022abfea5d2466cad936065f45763ad1 ......
checking 8c8f42c9a4a771dd25e5f18819c80a938ac89836 ......
	 orig commit -> 29693efcea0f38cf40d0055d2401490a4f9bf8be ......
		 29693efcea0f38cf40d0055d2401490a4f9bf8be has problem. Fixes commit -> 986376b68dcc95bb7df60ad30c2353c1f7578fa5
checking cd585d3ba5c8815479e3d08e94c5b79bc6a8882d ......
	 orig commit -> 493de342748cc6f52938096f5480cf291da58a0b ......
checking 003aa343724f29f8cc6a6ea3b3df5fbf2c13616a ......
	 orig commit -> f3ac9f737603da80c2da3e84b89e74429836bb6d ......
checking 70dbc00f7e112a3647233251777edc7129854746 ......
	 orig commit -> 15c75b09f8d190f89ab4db463b87d411ca349dfe ......
		 15c75b09f8d190f89ab4db463b87d411ca349dfe has problem. Fixes commit -> f363a06642f28caaa78cb6446bbad90c73fe183c
commit ed00b613bbcb7af32fbdd87e3c985c00e2c9c5a3
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 20 10:08:19 2017 +0100

    ALSA: ctxfi: Fix the incorrect check of dma_set_mask() call
    
    commit f363a06642f28caaa78cb6446bbad90c73fe183c upstream.
    
    In the commit [15c75b09f8d1: ALSA: ctxfi: Fallback DMA mask to 32bit],
    I forgot to put "!" at dam_set_mask() call check in cthw20k1.c (while
    cthw20k2.c is OK).  This patch fixes that obvious bug.
    
    (As a side note: although the original commit was completely wrong,
     it's still working for most of machines, as it sets to 32bit DMA mask
     in the end.  So the bug severity is low.)
    
    Fixes: 15c75b09f8d1 ("ALSA: ctxfi: Fallback DMA mask to 32bit")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 9879f9d01a3c608f75596437f2c4ae4b218da9dd ......
	 orig commit -> 71321eb3f2d0df4e6c327e0b936eec4458a12054 ......
checking b9bf1f0657c55d91d681c362f4f8c51d6668e5fa ......
	 orig commit -> e7480b34ad1ab84a63540b2c884cb92c0764ab74 ......
checking 1f4f37076d520a9c21f0d319802f8162c32c7788 ......
	 orig commit -> 9f1bc2c4c58fcb2d86e0e26437dc8f3a18ac3276 ......
checking 6b1d7b6f54c7deb80a00b9271dc3abb7a5674b65 ......
	 orig commit -> 78162d48466d23c45a784034630c5928af631e3d ......
checking be83ed085fcd8808747bd6d2f416a5ecee0aa7e5 ......
	 orig commit -> ef8d02d4a2c36f7a93e74c95a9c419353b310117 ......
checking b401418c6cc3c7eeb3376d4ca57334680d1df8d9 ......
	 orig commit -> e3f0a4017c2143b4b813df6a93e8cf79e3f76936 ......
checking f3a0b20040802c24d9df042b22012660b38bb213 ......
	 orig commit -> e3bb3cddd177550d63a3e4909cf1a7782f13414d ......
checking b0bde9f6a057cf45624bae7c32d43f1633b6de80 ......
	 orig commit -> 17c341ec0115837a610b2da15e32546e26068234 ......
checking 5988e7320179492030512cc84735ec30dd1ab366 ......
	 orig commit -> 6ebf75774f823ddbdbd10921006989d4df222f4a ......
checking ab7546e4910022dc07223739f58daff2aee9b18b ......
	 orig commit -> 096a0de427ea333f56f0ee00328cff2a2731bcf1 ......
checking cc387ae0898ea97fa0935daf27e558e2f5fac16f ......
	 orig commit -> bb9bc4689b9c635714fbcd5d335bad9934a7ebfc ......
		 bb9bc4689b9c635714fbcd5d335bad9934a7ebfc has problem. Fixes commit -> cea8cd498f4f1c30ea27e3664b3c671e495c4fce
commit 0f951e1a4186372583e05850240e861d8ca8b6a2
Author: Matt Redfearn <matt.redfearn@imgtec.com>
Date:   Tue Aug 8 13:22:33 2017 +0100

    MIPS: microMIPS: Fix decoding of swsp16 instruction
    
    [ Upstream commit cea8cd498f4f1c30ea27e3664b3c671e495c4fce ]
    
    When the immediate encoded in the instruction is accessed, it is sign
    extended due to being a signed value being assigned to a signed integer.
    The ISA specifies that this operation is an unsigned operation.
    The sign extension leads us to incorrectly decode:
    
    801e9c8e:       cbf1            sw      ra,68(sp)
    
    As having an immediate of 1073741809.
    
    Since the instruction format does not specify signed/unsigned, and this
    is currently the only location to use this instuction format, change it
    to an unsigned immediate.
    
    Fixes: bb9bc4689b9c ("MIPS: Calculate microMIPS ra properly when unwinding the stack")
    Suggested-by: Paul Burton <paul.burton@imgtec.com>
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Reviewed-by: James Hogan <james.hogan@imgtec.com>
    Cc: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Cc: Miodrag Dinic <miodrag.dinic@imgtec.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: David Daney <david.daney@cavium.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/16957/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking d75d675a05525cd31047d414434129c047ffa585 ......
	 orig commit -> 67c75057709a6d85c681c78b9b2f9b71191f01a2 ......
checking 72a0cfae59b486352a79f05e99cf6bd7451b573d ......
	 orig commit -> b6c7a324df37bf05ef7a2c1580683cf10d082d97 ......
		 b6c7a324df37bf05ef7a2c1580683cf10d082d97 has problem. Fixes commit -> 2b424cfc69728224fcb5fad138ea7260728e0901
commit 861e9499505441980380703d7affed21f767c8ce
Author: Jun-Ru Chang <jrjang@realtek.com>
Date:   Tue Jan 29 11:56:07 2019 +0800

    MIPS: Remove function size check in get_frame_info()
    
    [ Upstream commit 2b424cfc69728224fcb5fad138ea7260728e0901 ]
    
    Patch (b6c7a324df37b "MIPS: Fix get_frame_info() handling of
    microMIPS function size.") introduces additional function size
    check for microMIPS by only checking insn between ip and ip + func_size.
    However, func_size in get_frame_info() is always 0 if KALLSYMS is not
    enabled. This causes get_frame_info() to return immediately without
    calculating correct frame_size, which in turn causes "Can't analyze
    schedule() prologue" warning messages at boot time.
    
    This patch removes func_size check, and let the frame_size check run
    up to 128 insns for both MIPS and microMIPS.
    
    Signed-off-by: Jun-Ru Chang <jrjang@realtek.com>
    Signed-off-by: Tony Wu <tonywu@realtek.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: b6c7a324df37b ("MIPS: Fix get_frame_info() handling of microMIPS function size.")
    Cc: <ralf@linux-mips.org>
    Cc: <jhogan@kernel.org>
    Cc: <macro@mips.com>
    Cc: <yamada.masahiro@socionext.com>
    Cc: <peterz@infradead.org>
    Cc: <mingo@kernel.org>
    Cc: <linux-mips@vger.kernel.org>
    Cc: <linux-kernel@vger.kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 2998bf60d3856b2eb95772ea0dc21d16b0a394a2 ......
	 orig commit -> a3552dace7d1d0cabf573e88fc3025cb90c4a601 ......
checking 0d45490221a2497a5257414aecc85cfe19068c54 ......
	 orig commit -> ccaf7caf2c73c6db920772bf08bf1d47b2170634 ......
checking f1be0f5814a6ef9f3542556cdc0b7da3c5d9d565 ......
	 orig commit -> 774f0c6419bb8f9d83901d33582c7fe3ba6a6cb3 ......
checking 093292b8f8f7fc5a5f1ae6a85e2e5e3aca3e892b ......
	 orig commit -> 884b426917e4b3c85f33b382c792a94305dfdd62 ......
checking b32e43cf3f74edf4d0285ff63212782ac45af148 ......
	 orig commit -> bdfdaf1a016ef09cb941f2edad485a713510b8d5 ......
checking 5636da7aba4d03201c8d1484da38335333704fa1 ......
	 orig commit -> 66fd848cadaa6be974a8c780fbeb328f0af4d3bd ......
checking faf6aa4b129d2edb80a95a4b61f955fda5a194f4 ......
	 orig commit -> 6bee835dd54e279f3d3ae2eca92a9c394b4fd028 ......

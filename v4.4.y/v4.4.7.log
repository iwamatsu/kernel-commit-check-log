Check from v4.4.7 to v4.4.8
Commit count: 137
checking 8c9aef03d3b540b6885e7534a885ea25f62dd9ed ......
checking 4b59a38da5983852008270e81140f611df6f0bfd ......
	 orig commit -> e5bdfd50d6f76077bf8441d130c606229e100d40 ......
checking 0d8c1f17e86919fbc645ae9283304738476dd67c ......
	 orig commit -> fa52bd506f274b7619955917abfde355e3d19ffe ......
checking 440e9a240ca22cbed85bca3d6950cd75e1349775 ......
	 orig commit -> 70bc916b2c80913753fb188d4daee50a64d21ba0 ......
checking c1491657c533307ac2f341e1b7ecdf156de3f647 ......
	 orig commit -> 6c777e8799a93e3bdb67bec622429e1b48dc90fb ......
checking 2d0d0011ff48f000ec789f9b7e3378886225ec68 ......
	 orig commit -> 67b4eab91caf2ad574cab1b17ae09180ea2e116e ......
checking fc9683f24bc4dce3ac67f78f8b393f3c4159319c ......
	 orig commit -> fe25d078874f2c29c38f4160467d74f5756537c9 ......
checking b66a7a3a0947ced3b8dff340e815b708cc4a98a7 ......
	 orig commit -> 972e6a993f278b416a8ee3ec65475724fc36feb2 ......
checking f174a1fd2c0e577646a1263f7c7d01e588ca28bd ......
	 orig commit -> 580549ef6b3e3fb3b958de490ca99f43a089a2cf ......
checking d622dad32621a1a33ba74b1b29a19cfd5abe069f ......
	 orig commit -> adcdd0d5a1cb779f6d455ae70882c19c527627a8 ......
checking 157fb2daebc0c42901432b8028488c5ebb4509b1 ......
	 orig commit -> b4203ff5464da00b7812e7b480192745b0d66bbf ......
checking 77ffc8a9e9b36c2311ee1443a9dc5f1a5cf534d3 ......
	 orig commit -> f03b24a851d32ca85dacab01785b24a7ee717d37 ......
checking f0cf5ccef6fc0390aa42987e822dd63732d4d2da ......
	 orig commit -> c636b95ec5980345674ad7960a3c67135a84b687 ......
checking c362f778f725a8d606e91403e830bc9d7fa10f57 ......
	 orig commit -> e549d190f7b5f94e9ab36bd965028112914d010d ......
checking 478c9f35a987a879189afedc1de1c6603487791a ......
	 orig commit -> f883982dc1b117f04579f0896821cd9f2e397f94 ......
checking 39bd2591a80eb0ccd291a5a97456e667083bbcd0 ......
	 orig commit -> 2ae955774f29bbd7d16149cb0ae8d0319bf2ecc4 ......
checking e16b94ab4ccd5b31fa160978c601206a169de2bc ......
	 orig commit -> 01d6b2a40a0fa73c90e05b1033f181a51fec9292 ......
checking 695ca6389e0949e44ce1bdbcd422b37e5eb38f4c ......
	 orig commit -> 28a967c3a2f99fa3b5f762f25cb2a319d933571b ......
checking 3c1a5d344e9721bed684382aab375ca5a143ef92 ......
	 orig commit -> 130056275ade730e7a79c110212c8815202773ee ......
		 130056275ade730e7a79c110212c8815202773ee has problem. Fixes commit -> 201c2f85bd0bc13b712d9c0b3d11251b182e06ae
commit 5796c70e5b1d62016bdc3b678346ffbd433d030a
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Mar 21 10:02:42 2016 +0200

    perf/core: Don't leak event in the syscall error path
    
    [ Upstream commit 201c2f85bd0bc13b712d9c0b3d11251b182e06ae ]
    
    In the error path, event_file not being NULL is used to determine
    whether the event itself still needs to be free'd, so fix it up to
    avoid leaking.
    
    Reported-by: Leon Yu <chianglungyu@gmail.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: 130056275ade ("perf: Do not double free")
    Link: http://lkml.kernel.org/r/87twk06yxp.fsf@ashishki-desk.ger.corp.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking f6dffe77180ba8ac38e94247cf2a323614f2e876 ......
	 orig commit -> cf0a25436f05753aca5151891aea4fd130556e2a ......
checking 1653a3b0e9436c10eb307c318776cf91fe18ff08 ......
	 orig commit -> 56f23fdbb600e6087db7b009775b95ce07cc3195 ......
checking ab6c5069d1b14ac316b8c9f6aeda986dfe87fe47 ......
	 orig commit -> eebb8034a5be8c2177cbf07ca2ecd2ff8a058958 ......
checking ee8516a130918aa1421d426ec978985240a672ed ......
	 orig commit -> c325a67c72903e1cc30e990a15ce745bda0dbfde ......
checking 321299a96e20cbc6aac615a4daae95f42235b467 ......
	 orig commit -> daf647d2dd58cec59570d7698a45b98e580f2076 ......
		 daf647d2dd58cec59570d7698a45b98e580f2076 has problem. Fixes commit -> 61157b24e60fb3cd1f85f2c76a7b1d628f970144
964edf66bf9ab70cb387b27946c0aef7b94c4d1b
commit 6e011c3af91cde044c0aac23ac0394709147b2c3
Author: Pan Bian <bianpan2016@163.com>
Date:   Mon Dec 3 23:28:02 2018 -0500

    ext4: fix possible use after free in ext4_quota_enable
    
    commit 61157b24e60fb3cd1f85f2c76a7b1d628f970144 upstream.
    
    The function frees qf_inode via iput but then pass qf_inode to
    lockdep_set_quota_inode on the failure path. This may result in a
    use-after-free bug. The patch frees df_inode only when it is never used.
    
    Fixes: daf647d2dd5 ("ext4: add lockdep annotations for i_data_sem")
    Cc: stable@kernel.org # 4.6
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking df041ded89c13d75f1408b768980fed31eef8dea ......
	 orig commit -> de17e793b104d690e1d007dfc5cb6b4f649598ca ......
checking fda9797a6aaad1a8044614fbbdb265dda4328c41 ......
	 orig commit -> be62a1a8fd116f5cd9e53726601f970e16e17558 ......
checking c452dfc33274832a0f23b80ff2829b6fae9dd95d ......
	 orig commit -> d101a125954eae1d397adda94ca6319485a50493 ......
checking a7ac655b62b8855116049726347a11d054efd01b ......
	 orig commit -> f08bb1e0dbdd0297258d0b8cd4dbfcc057e57b2a ......
checking 51789682df3111fa675c1bc0a8498e142fb97bdf ......
	 orig commit -> 95e7ff034175db7d8aefabe7716c4d42bea24fde ......
checking 5a103e7d6bf05ff4d053ee73a001d255bbc8951a ......
	 orig commit -> b475c59b113db1e66eb9527ffdec3c5241c847e5 ......
checking 82bd14ade909c156f297ad34f0e6935931c6149f ......
	 orig commit -> 2215f31dc6f88634c1916362e922b1ecdce0a6b3 ......
checking 01e647a4aec55a156efccdf542579830fd1516eb ......
	 orig commit -> 9b090a98e95c2530ef0ce474e3b6218621b8ae25 ......
checking 277882f94e1d2e82285eb3dc91944634174a9b18 ......
	 orig commit -> 4fccb0767fdbdb781a9c5b5c15ee7b219443c89d ......
checking 46e081b3015dd0d97e443babf0a7ec2058637d83 ......
	 orig commit -> 6490865c67825277b29638e839850882600b48ec ......
checking f10d159204b6cdfba4d111f52a2668e960f8dd10 ......
	 orig commit -> 894f2fc44f2f3f48c36c973b1123f6ab298be160 ......
checking d70ab4ad8769944e2e01e678d1c04318d15a5332 ......
	 orig commit -> 2a58d42c1e018ad514d4e23fd33fb2ded95d3ee6 ......
checking 542afcb4e070c96ddf87436b49034a0c89ccd95b ......
	 orig commit -> cf44012810ccdd8fd947518e965cb04b7b8498be ......
checking 2c0824ac94b5bce8d07c2aa806e311ddfdcd46fe ......
	 orig commit -> d321cd014e51baab475efbdec468255b9e0ec822 ......
checking 9da98ac378b2aaccdaa02ba10c87123eb997ff22 ......
	 orig commit -> 0ef049dc1167fe834d0ad5d63f89eddc5c70f6e4 ......
checking 7de4ebacd23756a6862e5691f326b807ccc4da91 ......
	 orig commit -> 62b14b241ca6f790a17ccd9dd9f62ce1b006d406 ......
checking 5f6e35c2f9464c8b67b54ea5a919105c5f46f514 ......
	 orig commit -> 05dbcb430795b2e1fb1d5c757f8619d3dbed0a1c ......
checking 06e2d7dd90cbafd2d911f86785b69cec1bcd3b02 ......
	 orig commit -> 2224d879c7c0f85c14183ef82eb48bd875ceb599 ......
checking e4f2138e3ce6dd2ab4f7cf0ebef8dd44320deedb ......
	 orig commit -> e34b6fcf9b09ec9d93503edd5f81489791ffd602 ......
checking 5da980e3a596b34825678f5892d2e8a23626049b ......
	 orig commit -> f6acfcdc5b8cdc9ddd53a459361820b9efe958c4 ......
checking 4d4b032bd7bb43650a71dd804eb9bbb589d3d818 ......
	 orig commit -> bc717d5e92c8c079280eb4acbe335c6f25041aa2 ......
checking 797e21364c9323ccdb2e8e712d5ef66e7f277798 ......
	 orig commit -> e8e3039f5b941f7825d335f8ca11c12a8104db11 ......
checking 5046b85eef40f725f509cae12a954f445c9c3e59 ......
	 orig commit -> ed940cd27416f9887864b95e1f8f8845aa9d6391 ......
checking 2e638de516983b9575c845e878e1c41f5bcd2509 ......
	 orig commit -> 9a4f424531dabd877259ae0071b8bcc4dede9eb5 ......
checking e7c6abc464ac71ca734ea57a778872793d51ff29 ......
	 orig commit -> 6ee334559324a55725e22463de633b99ad99fcad ......
checking 6bf00fff3c7b0ee91ccb9257ffadeb2f3a335069 ......
	 orig commit -> 5e7515ba78fff2f5407eaa2f97c1d5c07801ac3d ......
checking 8536e37882600eaf011663aafb8abeb556bfca86 ......
	 orig commit -> 0129801be4b87226bf502f18f5a9eabd356d1058 ......
checking 01f083c7e37adf613dca8e7177b460fc3e0a3e56 ......
	 orig commit -> e9adb336d0bf391be23e820975ca5cd12c31d781 ......
checking af22bb95d98c2df7eadecc9445c275b8847f54a9 ......
	 orig commit -> fa8ff601d72bad3078ddf5ef17a5547700d06908 ......
checking 84f2443e213727323064e581e281d778831fa859 ......
	 orig commit -> 14ebda3394fd3e5388747e742e510b0802a65d24 ......
checking 30d6a9fd6c11bd7b9e8f673da0f9caa22e2280fa ......
	 orig commit -> 321c5658c5e9192dea0d58ab67cf1791e45b2b26 ......
checking ac1373d660d5ceb65ee20e3fd9de727579efe98f ......
	 orig commit -> 29c6dd591bbd592472247441de9fa694acdabae8 ......
checking f9a6b3caddf3ab9b9b490648018c8b02de2171f2 ......
	 orig commit -> 1363074667a6b7d0507527742ccd7bbed5e3ceaa ......
checking 4337f6e548c1203c626740639b6826981d26beee ......
	 orig commit -> 198de51dbc3454d95b015ca0a055b673f85f01bb ......
		 198de51dbc3454d95b015ca0a055b673f85f01bb has problem. Fixes commit -> 593224ea77b1ca842f45cf76f4deeef44dfbacd1
commit b66baf41d0474bd5c46959767428ec36b43962f0
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue May 31 09:18:03 2016 +0200

    USB: uas: Fix slave queue_depth not being set
    
    commit 593224ea77b1ca842f45cf76f4deeef44dfbacd1 upstream.
    
    Commit 198de51dbc34 ("USB: uas: Limit qdepth at the scsi-host level")
    removed the scsi_change_queue_depth() call from uas_slave_configure()
    assuming that the slave would inherit the host's queue_depth, which
    that commit sets to the same value.
    
    This is incorrect, without the scsi_change_queue_depth() call the slave's
    queue_depth defaults to 1, introducing a performance regression.
    
    This commit restores the call, fixing the performance regression.
    
    Fixes: 198de51dbc34 ("USB: uas: Limit qdepth at the scsi-host level")
    Reported-by: Tom Yan <tom.ty89@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c1ea2d028ffb5b2aeaf183ac3207992f168c51a2 ......
	 orig commit -> 94a57f1f8a9de90ab4b0f8748361ff8be706c80c ......
checking 5598928f39fc1ffd86b43444c50b378fd08a449e ......
	 orig commit -> 3ba3458fb9c050718b95275a3310b74415e767e2 ......
checking 4f4de9ab660c0dca4030b74613d8ac3cea5747c9 ......
	 orig commit -> b6ee376cb0b7fb4e7e07d6cd248bd40436fb9ba6 ......
checking 9bd8af9979f543fb605fbfb79e0e8ceeffb88c9c ......
	 orig commit -> be447f305494e019dfc37ea4cdf3b0e4200b4eba ......
checking ad730152036610d28f6f47326393aae3044e4d2f ......
	 orig commit -> 5745b8232e942abd5e16e85fa9b27cc21324acf0 ......
checking 9daaadbe7ba903615811fdad3e50150eef8e222e ......
	 orig commit -> 016adb7260f481168c03e09f785184d6d5278894 ......
checking e137eeb38d2431ded3ec1aff84183258f1dd4162 ......
	 orig commit -> 5a5abb1fa3b05dd6aa821525832644c1e7d2905f ......
checking 18baf0e01eefd27156d8a8fc5ade1ad8930a1b3d ......
	 orig commit -> c57c7a95da842807b475b823ed2e5435c42cb3b0 ......
checking df371b19630cf045e00f1b09a721bb7103266796 ......
	 orig commit -> 5e263f712691615fb802f06c98d7638c378f5d11 ......
checking 26dd42ebff94ff481af56704cd1b4dd32ca8579f ......
	 orig commit -> 2d4212261fdf13e29728ddb5ea9d60c342cc92b5 ......
checking 9603d0a58d3069a1ec9fc94090d470ae520118f7 ......
	 orig commit -> e84810c7b85a2d7897797b3ad3e879168a8e032a ......
checking 759e8f3896d4e7b6d8f374216ab3ae8191e22213 ......
	 orig commit -> 071d36bf21bcc837be00cea55bcef8d129e7f609 ......
checking 046ea8180ecaf5d8b5823e17714a09526ad7d321 ......
	 orig commit -> 1f461dcdd296eecedaffffc6bae2bfa90bd7eb89 ......
		 1f461dcdd296eecedaffffc6bae2bfa90bd7eb89 has problem. Fixes commit -> 205e1e255c479f3fd77446415706463b282f94e4
commit 7a2b4ee54b3f23668fa366a4b0e04d351f809bb0
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue Jul 5 22:12:36 2016 -0700

    ppp: defer netns reference release for ppp channel
    
    commit 205e1e255c479f3fd77446415706463b282f94e4 upstream.
    
    Matt reported that we have a NULL pointer dereference
    in ppp_pernet() from ppp_connect_channel(),
    i.e. pch->chan_net is NULL.
    
    This is due to that a parallel ppp_unregister_channel()
    could happen while we are in ppp_connect_channel(), during
    which pch->chan_net set to NULL. Since we need a reference
    to net per channel, it makes sense to sync the refcnt
    with the life time of the channel, therefore we should
    release this reference when we destroy it.
    
    Fixes: 1f461dcdd296 ("ppp: take reference on channels netns")
    Reported-by: Matt Bennett <Matt.Bennett@alliedtelesis.co.nz>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: linux-ppp@vger.kernel.org
    Cc: Guillaume Nault <g.nault@alphalink.fr>
    Cc: Cyrill Gorcunov <gorcunov@openvz.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Cyrill Gorcunov <gorcunov@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: bmajal222 <bmajal222@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 80de2e4115130a392dd528fe023a2508c15617a4 ......
	 orig commit -> 4cfc86f3dae6ca38ed49cdd78f458a03d4d87992 ......
checking 2ddb181390475f4902406baa008c220f39aeaa69 ......
	 orig commit -> ad0ea1989cc4d5905941d0a9e62c63ad6d859cef ......
checking 8178211eb7948b40b1f730e2d0b9b0a7a2ed62d1 ......
	 orig commit -> fe30937b65354c7fec244caebbdaae68e28ca797 ......
checking 7a0e9a08642993bfde0dd03a5a3f825869cc4d06 ......
	 orig commit -> eee577232203842b4dcadb7ab477a298479633ed ......
checking a5ce25f61bce0ffb1ff59071c06b948277c90a28 ......
	 orig commit -> 2c9a266afefe137bff06bbe0fc48b4d3b3cb348c ......
checking bd33d14acf43bdb040f203555b13765cd2b23d9e ......
	 orig commit -> e316ea62e3203d524ff0239a40c56d3a39ad1b5c ......
checking 029464a380858e54ab750a5a536a0bdcd7180b1f ......
	 orig commit -> e8e56ffd9d2973398b60ece1f1bebb8d67b4d032 ......
checking a317579bb62ec6c1cb6bd7e5d0d8a25a746832f2 ......
	 orig commit -> 83d6f1f15f8cce844b0a131cbc63e444620e48b5 ......
checking 6e6ede49a9bdc8e6762216fe1760c4183791676c ......
	 orig commit -> e725a66c0202b5f36c2f9d59d26a65c53bbf21f7 ......
checking 13684fe9dc61c38b4241474ea4f9e28a59c9518c ......
	 orig commit -> baefd7015cdb304ce6c94f9679d0486c71954766 ......
checking 405f10a39443ae9ccacf51f18511dfc827e09108 ......
	 orig commit -> 34b88a68f26a75e4fded796f1a49c40f82234b7d ......
		 34b88a68f26a75e4fded796f1a49c40f82234b7d has problem. Fixes commit -> e623a9e9dec29ae811d11f83d0074ba254aba374
commit 49ed6307508e256402ee78c07bbaf432ec5c3612
Author: Maxime Jayat <maxime.jayat@mobile-devices.fr>
Date:   Tue Feb 21 18:35:51 2017 +0100

    net: socket: fix recvmmsg not returning error from sock_error
    
    [ Upstream commit e623a9e9dec29ae811d11f83d0074ba254aba374 ]
    
    Commit 34b88a68f26a ("net: Fix use after free in the recvmmsg exit path"),
    changed the exit path of recvmmsg to always return the datagrams
    variable and modified the error paths to set the variable to the error
    code returned by recvmsg if necessary.
    
    However in the case sock_error returned an error, the error code was
    then ignored, and recvmmsg returned 0.
    
    Change the error path of recvmmsg to correctly return the error code
    of sock_error.
    
    The bug was triggered by using recvmmsg on a CAN interface which was
    not up. Linux 4.6 and later return 0 in this case while earlier
    releases returned -ENETDOWN.
    
    Fixes: 34b88a68f26a ("net: Fix use after free in the recvmmsg exit path")
    Signed-off-by: Maxime Jayat <maxime.jayat@mobile-devices.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 54789759917f127cfadcca730f44ea67d557a9b0 ......
	 orig commit -> fbd40ea0180a2d328c5adc61414dc8bab9335ce2 ......
checking acbea202fbba11c52df2fd4040c19bb796fd37fa ......
	 orig commit -> 4c656c13b254d598e83e586b7b4d36a2043dad85 ......
checking c3d8f507e7fedeeab81bd9dafa2d63d82be159a3 ......
	 orig commit -> 88de1cd457e5cb664d6d437e2ea4750d089165f5 ......
checking 7d870cff8ece6088dd9e26f54a3fd1b4b899ddf9 ......
	 orig commit -> 869f63a4d28144c03c8f4a4c0d1e8f31f8c11a10 ......
checking a96f3553d5d1d6650f608f14162ed403d64e2b66 ......
	 orig commit -> 8e2ad4113ce4671686740f808ff2795395c39eef ......
checking b39af5aa111dd05472c8b1b0d3f114f4e34f61fe ......
	 orig commit -> 819bfe764dceec2f6b4551768453f374b4c60443 ......
checking 12dd6d869b22ae114f81962e346cd5428b358b72 ......
	 orig commit -> 5bf93251cee1fb66141d1d2eaff86e04a9397bdf ......
checking 8352a292fe92ae2397b60701495b576e9afbc012 ......
	 orig commit -> d0ba913488dc8c55d1880f5ed34f096dc45fb05d ......
checking a95fc0f757728d08acae89c6194f8ea9e89ec3fe ......
	 orig commit -> c1b7fca65070bfadca94dd53a4e6b71cd4f69715 ......
checking e8e43232627082328fa4016fab1960360360f167 ......
	 orig commit -> cdc4e47da8f4c32eeb6b2061a8a834f4362a12b7 ......
checking edb60bc7bb4ee6e3862aa8840a65cce47e09dcfe ......
	 orig commit -> 9ed988cd591500c040b2a6257bc68543e08ceeef ......
		 9ed988cd591500c040b2a6257bc68543e08ceeef has problem. Fixes commit -> b84bbaf7a6c8cca24f8acf25a2c8e46913a947ba
217e6fa24ce28ec87fca8da93c9016cb78028612
commit d9fb8cc230b2a4757e9fe4f81468f81212d4deaa
Author: Willem de Bruijn <willemb@google.com>
Date:   Fri May 11 13:24:25 2018 -0400

    packet: in packet_snd start writing at link layer allocation
    
    [ Upstream commit b84bbaf7a6c8cca24f8acf25a2c8e46913a947ba ]
    
    Packet sockets allow construction of packets shorter than
    dev->hard_header_len to accommodate protocols with variable length
    link layer headers. These packets are padded to dev->hard_header_len,
    because some device drivers interpret that as a minimum packet size.
    
    packet_snd reserves dev->hard_header_len bytes on allocation.
    SOCK_DGRAM sockets call skb_push in dev_hard_header() to ensure that
    link layer headers are stored in the reserved range. SOCK_RAW sockets
    do the same in tpacket_snd, but not in packet_snd.
    
    Syzbot was able to send a zero byte packet to a device with massive
    116B link layer header, causing padding to cross over into skb_shinfo.
    Fix this by writing from the start of the llheader reserved range also
    in the case of packet_snd/SOCK_RAW.
    
    Update skb_set_network_header to the new offset. This also corrects
    it for SOCK_DGRAM, where it incorrectly double counted reserve due to
    the skb_push in dev_hard_header.
    
    Fixes: 9ed988cd5915 ("packet: validate variable length ll headers")
    Reported-by: syzbot+71d74a5406d02057d559@syzkaller.appspotmail.com
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58691e5b4f277cf1876dc95654a794b093f88a0f
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Feb 7 15:57:20 2017 -0500

    net: introduce device min_header_len
    
    [ Upstream commit 217e6fa24ce28ec87fca8da93c9016cb78028612 ]
    
    The stack must not pass packets to device drivers that are shorter
    than the minimum link layer header length.
    
    Previously, packet sockets would drop packets smaller than or equal
    to dev->hard_header_len, but this has false positives. Zero length
    payload is used over Ethernet. Other link layer protocols support
    variable length headers. Support for validation of these protocols
    removed the min length check for all protocols.
    
    Introduce an explicit dev->min_header_len parameter and drop all
    packets below this value. Initially, set it to non-zero only for
    Ethernet and loopback. Other protocols can follow in a patch to
    net-next.
    
    Fixes: 9ed988cd5915 ("packet: validate variable length ll headers")
    Reported-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit d9fb8cc230b2a4757e9fe4f81468f81212d4deaa
Author: Willem de Bruijn <willemb@google.com>
Date:   Fri May 11 13:24:25 2018 -0400

    packet: in packet_snd start writing at link layer allocation
    
    [ Upstream commit b84bbaf7a6c8cca24f8acf25a2c8e46913a947ba ]
    
    Packet sockets allow construction of packets shorter than
    dev->hard_header_len to accommodate protocols with variable length
    link layer headers. These packets are padded to dev->hard_header_len,
    because some device drivers interpret that as a minimum packet size.
    
    packet_snd reserves dev->hard_header_len bytes on allocation.
    SOCK_DGRAM sockets call skb_push in dev_hard_header() to ensure that
    link layer headers are stored in the reserved range. SOCK_RAW sockets
    do the same in tpacket_snd, but not in packet_snd.
    
    Syzbot was able to send a zero byte packet to a device with massive
    116B link layer header, causing padding to cross over into skb_shinfo.
    Fix this by writing from the start of the llheader reserved range also
    in the case of packet_snd/SOCK_RAW.
    
    Update skb_set_network_header to the new offset. This also corrects
    it for SOCK_DGRAM, where it incorrectly double counted reserve due to
    the skb_push in dev_hard_header.
    
    Fixes: 9ed988cd5915 ("packet: validate variable length ll headers")
    Reported-by: syzbot+71d74a5406d02057d559@syzkaller.appspotmail.com
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking abd42587771aff48c39312116e8b8db851ea0fa5 ......
	 orig commit -> ea47781c26510e5d97f80f9aceafe9065bd5e3aa ......
checking 8b8d278aa4de9335682bbd4a3bb619af015c859e ......
	 orig commit -> 2793a23aacbd754dbbb5cb75093deb7e4103bace ......
checking cd8101d8ece8d776b79b7e0528cc8ba6d6c33562 ......
	 orig commit -> 6faac63a6986f29ef39827f460edd3a5ba64ad5c ......
checking 36b9c7cc09fc6d90e155f322f3f1d6fd3f53b0b7 ......
	 orig commit -> a9d99ce28ed359d68cf6f3c1a69038aefedf6d6a ......
checking 8a2226c17e0e2256f71e6b3175b6d3455b479f02 ......
	 orig commit -> 59dca1d8a6725a121dae6c452de0b2611d5865dc ......
checking 2d11623bd01a311c868d2e90fbdda8b5eec39a2f ......
	 orig commit -> 1666984c8625b3db19a9abc298931d35ab7bc64b ......
checking 3aaa64b61a787d0aedc5c3fe36102419fc4eeb93 ......
	 orig commit -> 48906f62c96cc2cd35753e59310cb70eb08cc6a5 ......
checking 32cb6781a96f24287a7b3c8716f47b0e8768709d ......
	 orig commit -> 4024fcf70556311521e7b6cf79fa50e16f31013a ......
checking b80398d91c2bdb23d503c5d742ba5c4541269112 ......
	 orig commit -> 5d150a985520bbe3cb2aa1ceef24a7e32f20c15f ......
checking 242fab1419e149ffc64b8b778fa1dabab34ff2ad ......
	 orig commit -> bf13c94ccb33c3182efc92ce4989506a0f541243 ......
checking 7da899cee1f19bdaf2649e5e8c36c0e65ace5a5c ......
	 orig commit -> f214fc402967e1bc94ad7f39faa03db5813d6849 ......
checking d9bbdcd83d63010fab254d5ed39116f9f58f1228 ......
	 orig commit -> 1837b2e2bcd23137766555a63867e649c0b637f0 ......
checking a87c65252bb82cc82ed226f70922aa83709ea2fe ......
	 orig commit -> 40b4f0fd74e46c017814618d67ec9127ff20f157 ......
		 40b4f0fd74e46c017814618d67ec9127ff20f157 has problem. Fixes commit -> 1071ec9d453a38023579714b64a951a2fb982071
commit 14c81b811aae69641253ae86b83b8eba7677509c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Apr 12 14:24:31 2018 +0800

    sctp: do not check port in sctp_inet6_cmp_addr
    
    
    [ Upstream commit 1071ec9d453a38023579714b64a951a2fb982071 ]
    
    pf->cmp_addr() is called before binding a v6 address to the sock. It
    should not check ports, like in sctp_inet_cmp_addr.
    
    But sctp_inet6_cmp_addr checks the addr by invoking af(6)->cmp_addr,
    sctp_v6_cmp_addr where it also compares the ports.
    
    This would cause that setsockopt(SCTP_SOCKOPT_BINDX_ADD) could bind
    multiple duplicated IPv6 addresses after Commit 40b4f0fd74e4 ("sctp:
    lack the check for ports in sctp_v6_cmp_addr").
    
    This patch is to remove af->cmp_addr called in sctp_inet6_cmp_addr,
    but do the proper check for both v6 addrs and v4mapped addrs.
    
    v1->v2:
      - define __sctp_v6_cmp_addr to do the common address comparison
        used for both pf and af v6 cmp_addr.
    
    Fixes: 40b4f0fd74e4 ("sctp: lack the check for ports in sctp_v6_cmp_addr")
    Reported-by: Jianwen Ji <jiji@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 44bc7d1b9777128656310c0c7b47cb952a7c7b2d ......
	 orig commit -> 9b368814b336b0a1a479135eb2815edbc00efd3c ......
checking 2f0bd0e69e5b0a4ac00fd69f6591301b43fdeaae ......
	 orig commit -> a4690afeb0d2d7ba4d60dfa98a89f3bb1ce60ecd ......
checking aad983b70b30a90d0e5fba4d8929d0db1191dd3f ......
	 orig commit -> 2b70bad23c89b121a3e4a00f8968d14ebb78887d ......
checking ea0519a2bc8d7e6244cc5201f7b92b896be60c07 ......
	 orig commit -> 65c38aa653c14df49e19faad74bd375f36e61c57 ......
checking 05b0ca3ec3a2e49f29bfc2879c87699eb5a90ee4 ......
	 orig commit -> ee50c130c82175eaa0820c96b6d3763928af2241 ......
checking e948c9adee31b56f90efd3eb240221fe257f5aba ......
	 orig commit -> a8c4a2522a0808c5c2143612909717d1115c40cf ......
checking 207485dc4f22f8da29d2ba5e9e41c4c9e84d4e01 ......
	 orig commit -> 5146d1f151122e868e594c7b45115d64825aee5f ......
checking d5322b91e61647630a91cacd7e22736c35dd98bd ......
	 orig commit -> 9bdfb3b79e61c60e1a3e2dc05ad164528afa6b8a ......
checking 0cc60c58ba3fcbc8467a3d56b98c664b0fc7d9bb ......
	 orig commit -> ff1e22e7a638a0782f54f81a6c9cb139aca2da35 ......
checking 40a8f74321fb892dec5757ca44ec3850bde26a24 ......
	 orig commit -> b634de4f446c062a0c95ec4d150b4cf7c85e3526 ......
checking 1e84f8b8dad8c270006b89385b4b60e1cc1ccf4c ......
	 orig commit -> d1518a1db31a25682ea09c4b135fa72d9883be42 ......
checking 0bccb7a91e02086d7fcdd61042d508e012ba87ef ......
	 orig commit -> 0e5585dc870af947fab2af96a88c2d8b4270247c ......
checking ddf58bfd05fc6b71858228962dffcaa91d1b4d53 ......
	 orig commit -> a64663d9870364bd2a2df62bf0d3a9fbe5ea62a8 ......
checking 1456f5cf1565ede6a0adcb43f27d66eede96876f ......
	 orig commit -> f971f2263deaa4a441e377b385c11aee0f3b3f9a ......
checking dd4fea89f865b0e36cb92c35377d97a82d620e4b ......
	 orig commit -> 72b9ff0612ad8fc969b910cd00ac16b57a1a9ba4 ......
	 orig commit -> ef4c6270bf2867e2f8032e9614d1a8cfc6c71663 ......
checking 7ed78a4894600f29f88f85d22d411c8116d27a8c ......
	 orig commit -> 7779c5e23c5132c22a219f1f5554ef81dd15ee91 ......
checking 6fcee661a2edbf40b6154aaad4166776a9bad294 ......
	 orig commit -> a6002ec5a8c68e69706b2efd6db6d682d0ab672c ......
checking d4429b81f68bc696535c455f2fd6e86d2b99dd4f ......
	 orig commit -> 95272c29378ee7dc15f43fa2758cb28a5913a06d ......
checking 966bf1bea449c9f0ef89051b2025c748d28baa2b ......
	 orig commit -> e5670563f588ed1c0603819350c0f02cec23f5c5 ......
checking fa07cf6613c9cfb744be453005db2268d1811e73 ......
	 orig commit -> 211291126698c8f047617565b2e2e7f822f86354 ......
checking d38ae1c2be13f28629ae08de79f7d511ab79d1ee ......
	 orig commit -> 08a5bb2921e490939f78f38fd0d02858bb709942 ......
checking fb4cfc6e0a465ccdeddd47567c42fbb197253aca ......
	 orig commit -> 6f25a14a7053b69917e2ebea0d31dd444cd31fd5 ......
checking 3495017eaaee88cd0e85742b710fee3bbc2b3d08 ......
	 orig commit -> 83a9efb5b8170b7cffef4f62656656e1d8ad2ccd ......
checking 0d55f19ac372fa3cad40df3ccf8ce463012d6748 ......
	 orig commit -> 9d4dc5840f93bcb002fa311693349deae7702bc5 ......
checking 4568babcf7b22fcde8574892a349cb7759e45b0b ......
	 orig commit -> 70cf2cbd685e218c3ffd105d9fb6cf0f8d767481 ......
checking 57f21bd260958fbfda2ef819a7fa8a0054df0c68 ......
	 orig commit -> 4a07083ed613644c96c34a7dd2853dc5d7c70902 ......
checking 4d6deebe06c5383dffe9cba859378ca708d4076d ......
	 orig commit -> 2ef4dfd9d9f288943e249b78365a69e3ea3ec072 ......
checking ec353a589df2b1bea7e001266e97e4fd4347e1bf ......
	 orig commit -> ef72f3110d8b19f4c098a0bff7ed7d11945e70c6 ......
checking 7cdf5d71b408f110657f2f441f7d37c2ebde2839 ......
	 orig commit -> e3893027a300927049efc1572f852201eb785142 ......
checking 19c1764a19cdb41afebc2e66d7a75a7064c0000f ......
	 orig commit -> e54358915d0a00399c11c2c23ae1be674cba188a ......
checking 63c22e8fe29efe1d03980d5cf933c4d7b9a72d09 ......
	 orig commit -> 3c2e2266a5bd2d1cef258e6e54dca1d99946379f ......

checking d3c67a52a66ba2d44bcf1b8262609148c7c73113 ......
checking 5e27a782d2cd82e7ac599b1769ad061370a55aff ......
	 orig commit -> 3d2c86e3057995270e08693231039d9d942871f0 ......
checking 2397ae1e4b9a914346fa77acfc9b066fdea00833 ......
	 orig commit -> 6098d7ddd62f532f80ee2a4b01aca500a8e4e9e4 ......
checking e375a05c5082d708bdd79eff150fe2e53cccf5e8 ......
	 orig commit -> fd29edc7232bc19f969e8f463138afc5472b3d5f ......
checking ed8c3cb1e66ac583ae461fef25b0cd01df1e50e7 ......
	 orig commit -> 59921b239056fb6389a865083284e00ce0518db6 ......
checking dc4bc70259daba144f799e40a99413a86c601006 ......
	 orig commit -> 3cd890dbe2a4f14cc44c85bb6cf37e5e22d4dd0e ......
checking adc143b97d06a3305707726e69b4247db050cb88 ......
	 orig commit -> 7f7ccc2ccc2e70c6054685f5e3522efa81556830 ......
checking 56941bb6400ca6ed0fdcaaa1f8c8183234bf199c ......
	 orig commit -> 272ddc8b37354c3fe111ab26d25e792629148eee ......
checking 079d9ea86202777cd57c69879a5ba8db6a2c1b1e ......
	 orig commit -> 6347e8d5bcce33fc36e651901efefbe2c93a43ef ......
checking 2b8143d6874b385c79b60257bb0f0ad328ee2194 ......
	 orig commit -> 442486ec1096781c50227b73f721a63974b0fdda ......
checking 8e50b8b07f462ab4b91bc1491b1c91bd75e4ad40 ......
	 orig commit -> 768ae309a96103ed02eb1e111e838c87854d8b51 ......
checking 3ec22a6bce3f06aa3b8a399ea456fb1cb3792584 ......
	 orig commit -> 7f23b3504a0df63b724180262c5f3f117f21bcae ......
checking ffe6376c1803b5e964f609e8bc01507642397641 ......
	 orig commit -> 3b913179c3fa89dd0e304193fa0c746fc0481447 ......
checking 2b29980eb75bc7dcb23ed0436fe805ac6e684542 ......
	 orig commit -> c164154f66f0c9b02673f07aa4f044f1d9c70274 ......
checking ff099ed77421a5dc8206bb61e5a598b28ab39ebb ......
checking ab424c8eb71ee9ea4ba798faaeaf62e84048cb9a ......
	 orig commit -> d4944b0ecec0af882483fe44b66729316e575208 ......
checking 6a3c9524df93e9597d30c2d32114950772fce58e ......
	 orig commit -> 859110d7497cdd0e6b21010d6f777049d676382c ......
checking 8aca77150a9a2f89aba94f62a09c95f9a00c2956 ......
	 orig commit -> f7068114d45ec55996b9040e98111afa56e010fe ......
checking c873dfa0ccbdb08e9fb42f497503e148f79cdebb ......
	 orig commit -> 7d63fb3af87aa67aa7d24466e792f9d7c57d8e79 ......
checking 0d547583faaa4371ec566bdd38488b1eba5e8a2d ......
	 orig commit -> 5df63c2a149ae65a9ec239e7c2af44efa6f79beb ......
checking 38d924e1d040a5632c023d7b9a3a6bfbaf4d49d1 ......
	 orig commit -> 63489f8e821144000e0bdca7e65a8d1cc23a7ee7 ......
		 63489f8e821144000e0bdca7e65a8d1cc23a7ee7 has problem. Fixes commit -> 5df63c2a149ae65a9ec239e7c2af44efa6f79beb
commit 0d547583faaa4371ec566bdd38488b1eba5e8a2d
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Thu Apr 5 16:18:21 2018 -0700

    hugetlbfs: fix bug in pgoff overflow checking
    
    commit 5df63c2a149ae65a9ec239e7c2af44efa6f79beb upstream.
    
    This is a fix for a regression in 32 bit kernels caused by an invalid
    check for pgoff overflow in hugetlbfs mmap setup.  The check incorrectly
    specified that the size of a loff_t was the same as the size of a long.
    The regression prevents mapping hugetlbfs files at offsets greater than
    4GB on 32 bit kernels.
    
    On 32 bit kernels conversion from a page based unsigned long can not
    overflow a loff_t byte offset.  Therefore, skip this check if
    sizeof(unsigned long) != sizeof(loff_t).
    
    Link: http://lkml.kernel.org/r/20180330145402.5053-1-mike.kravetz@oracle.com
    Fixes: 63489f8e8211 ("hugetlbfs: check for pgoff value overflow")
    Reported-by: Dan Rue <dan.rue@linaro.org>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Yisheng Xie <xieyisheng1@huawei.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Nic Losby <blurbdust@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f24fb9efea4df0376c5bda53a2e4b189a28dc09e ......
	 orig commit -> 045c7a3f53d9403b62d396b6d051c4be5044cdb4 ......
		 045c7a3f53d9403b62d396b6d051c4be5044cdb4 has problem. Fixes commit -> 63489f8e821144000e0bdca7e65a8d1cc23a7ee7
commit 38d924e1d040a5632c023d7b9a3a6bfbaf4d49d1
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Thu Mar 22 16:17:13 2018 -0700

    hugetlbfs: check for pgoff value overflow
    
    commit 63489f8e821144000e0bdca7e65a8d1cc23a7ee7 upstream.
    
    A vma with vm_pgoff large enough to overflow a loff_t type when
    converted to a byte offset can be passed via the remap_file_pages system
    call.  The hugetlbfs mmap routine uses the byte offset to calculate
    reservations and file size.
    
    A sequence such as:
    
      mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);
      remap_file_pages(0x20a00000, 0x600000, 0, 0x20000000000000, 0);
    
    will result in the following when task exits/file closed,
    
      kernel BUG at mm/hugetlb.c:749!
      Call Trace:
        hugetlbfs_evict_inode+0x2f/0x40
        evict+0xcb/0x190
        __dentry_kill+0xcb/0x150
        __fput+0x164/0x1e0
        task_work_run+0x84/0xa0
        exit_to_usermode_loop+0x7d/0x80
        do_syscall_64+0x18b/0x190
        entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    The overflowed pgoff value causes hugetlbfs to try to set up a mapping
    with a negative range (end < start) that leaves invalid state which
    causes the BUG.
    
    The previous overflow fix to this code was incomplete and did not take
    the remap_file_pages system call into account.
    
    [mike.kravetz@oracle.com: v3]
      Link: http://lkml.kernel.org/r/20180309002726.7248-1-mike.kravetz@oracle.com
    [akpm@linux-foundation.org: include mmdebug.h]
    [akpm@linux-foundation.org: fix -ve left shift count on sh]
    Link: http://lkml.kernel.org/r/20180308210502.15952-1-mike.kravetz@oracle.com
    Fixes: 045c7a3f53d9 ("hugetlbfs: fix offset overflow in hugetlbfs mmap")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reported-by: Nic Losby <blurbdust@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Yisheng Xie <xieyisheng1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 4.4: Use a conditional WARN() instead of VM_WARN()]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 30a2ae50aef84ce6bb6132859a04dca461dbafdd ......
	 orig commit -> ff8c0c53c47530ffea82c22a0a6df6332b56c957 ......
		 ff8c0c53c47530ffea82c22a0a6df6332b56c957 has problem. Fixes commit -> 045c7a3f53d9403b62d396b6d051c4be5044cdb4
commit f24fb9efea4df0376c5bda53a2e4b189a28dc09e
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Thu Apr 13 14:56:32 2017 -0700

    hugetlbfs: fix offset overflow in hugetlbfs mmap
    
    commit 045c7a3f53d9403b62d396b6d051c4be5044cdb4 upstream.
    
    If mmap() maps a file, it can be passed an offset into the file at which
    the mapping is to start.  Offset could be a negative value when
    represented as a loff_t.  The offset plus length will be used to update
    the file size (i_size) which is also a loff_t.
    
    Validate the value of offset and offset + length to make sure they do
    not overflow and appear as negative.
    
    Found by syzcaller with commit ff8c0c53c475 ("mm/hugetlb.c: don't call
    region_abort if region_chg fails") applied.  Prior to this commit, the
    overflow would still occur but we would luckily return ENOMEM.
    
    To reproduce:
    
       mmap(0, 0x2000, 0, 0x40021, 0xffffffffffffffffULL, 0x8000000000000000ULL);
    
    Resulted in,
    
      kernel BUG at mm/hugetlb.c:742!
      Call Trace:
       hugetlbfs_evict_inode+0x80/0xa0
       evict+0x24a/0x620
       iput+0x48f/0x8c0
       dentry_unlink_inode+0x31f/0x4d0
       __dentry_kill+0x292/0x5e0
       dput+0x730/0x830
       __fput+0x438/0x720
       ____fput+0x1a/0x20
       task_work_run+0xfe/0x180
       exit_to_usermode_loop+0x133/0x150
       syscall_return_slowpath+0x184/0x1c0
       entry_SYSCALL_64_fastpath+0xab/0xad
    
    Fixes: ff8c0c53c475 ("mm/hugetlb.c: don't call region_abort if region_chg fails")
    Link: http://lkml.kernel.org/r/1491951118-30678-1-git-send-email-mike.kravetz@oracle.com
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 954648ebf8e27fcbf23b7954b79a22a5cacc83b1 ......
	 orig commit -> 78c9c4dfbf8c04883941445a195276bb4bb92c76 ......
checking e47b9b2b005ab8b1b83bc0ac4aa2803cba57182a ......
	 orig commit -> b5a8ffcae4103a9d823ea3aa3a761f65779fbe2a ......
checking 1c74bd22e846b162ea6401e8d43172e0e7256ccf ......
	 orig commit -> af86ca4e3088fe5eacf2f7e58c01fa68ca067672 ......
checking 451624d47005aace4e314b488cb70ba3ee5dcce8 ......
checking 168cb9b7b2839e861278f9fde03820aba32c4ee0 ......
checking 3c4bb079e16e222324c68d7594b1ab6f699edfca ......
	 orig commit -> cedaf52693f02372010548c63b2e63228b959099 ......
checking ff3c3b181c5ee5930b9cc6ca59c4c985a3d93220 ......
	 orig commit -> bc226f07dcd3c9ef0b7f6236fe356ea4a9cb4769 ......
checking 3e3a1c2ee031cd3d1a8fe9a990b61c8f17a6dd83 ......
	 orig commit -> e7c587da125291db39ddf1f49b18e5970adbac17 ......
checking b5ec2b3f11993d843f75c2d2954ece20af96dc88 ......
	 orig commit -> ccbcd2674472a978b48c91c1fbfb66c0ff959f24 ......
checking 7f77d36ab3f3d3dc09af0afbc7b58198382e9941 ......
	 orig commit -> 15e6c22fd8e5a42c5ed6d487b7c9fe44c2517765 ......
checking 0109a1b0a5cababd514671b517722585302c0d4f ......
	 orig commit -> da39556f66f5cfe8f9c989206974f1cb16ca5d7c ......
checking 2658e4d66deca4c1fc6eb59514bded62dd0a7812 ......
	 orig commit -> 5cf687548705412da47c9cec342fd952d71ed3d5 ......
checking 67e326e034383857f0cd0a2bc92c6b525fc710e6 ......
	 orig commit -> 304ec1b050310548db33063e567123fae8fd0301 ......
checking 557cd0d20ec971f52e4b9482d551b41503bb3e55 ......
	 orig commit -> b5c4ae4f35325d520b230bab6eb3310613b72ac1 ......
checking 6d1d4fc34287da617b50bd7139e536a8d69c24ea ......
	 orig commit -> b3bbfb3fb5d25776b8e3f361d2eedaabb0b496cd ......
checking 45b871531cb6d2973d0c68083376719c50779a96 ......
	 orig commit -> de9e478b9d49f3a0214310d921450cf5bb4a21e6 ......
checking cc8c5450b6d7ac0cbc36d133ffa21a01dd21b3d8 ......
	 orig commit -> 11f1a4b9755f5dbc3e822a96502ebe9b044b14d8 ......
		 11f1a4b9755f5dbc3e822a96502ebe9b044b14d8 has problem. Fixes commit -> 2a418cf3f5f1caf911af288e978d61c9844b0695
commit e90171edbef7b43e3eab51906f5f499f131a2887
Author: Andy Lutomirski <luto@kernel.org>
Date:   Fri Feb 22 17:17:04 2019 -0800

    x86/uaccess: Don't leak the AC flag into __put_user() value evaluation
    
    commit 2a418cf3f5f1caf911af288e978d61c9844b0695 upstream.
    
    When calling __put_user(foo(), ptr), the __put_user() macro would call
    foo() in between __uaccess_begin() and __uaccess_end().  If that code
    were buggy, then those bugs would be run without SMAP protection.
    
    Fortunately, there seem to be few instances of the problem in the
    kernel. Nevertheless, __put_user() should be fixed to avoid doing this.
    Therefore, evaluate __put_user()'s argument before setting AC.
    
    This issue was noticed when an objtool hack by Peter Zijlstra complained
    about genregs_get() and I compared the assembly output to the C source.
    
     [ bp: Massage commit message and fixed up whitespace. ]
    
    Fixes: 11f1a4b9755f ("x86: reorganize SMAP handling in user space accesses")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20190225125231.845656645@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d0169c04fee013922a272a19f7950439a5e07230 ......
	 orig commit -> ecb586bd29c99fb4de599dec388658e74388daad ......
checking 89be8950bab799ddb9cc3777345e3c21bcb32dba ......
	 orig commit -> b2ac58f90540e39324e7a29a7ad471407ae0bf48 ......
checking fc6aae9f407810cb153a9133c28735871f9f0a16 ......
	 orig commit -> d28b387fb74da95d69d2615732f50cceb38e9a4d ......
		 d28b387fb74da95d69d2615732f50cceb38e9a4d has problem. Fixes commit -> ecb586bd29c99fb4de599dec388658e74388daad
commit d0169c04fee013922a272a19f7950439a5e07230
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Feb 22 16:43:17 2018 +0100

    KVM/x86: Remove indirect MSR op calls from SPEC_CTRL
    
    commit ecb586bd29c99fb4de599dec388658e74388daad upstream.
    
    Having a paravirt indirect call in the IBRS restore path is not a
    good idea, since we are trying to protect from speculative execution
    of bogus indirect branch targets.  It is also slower, so use
    native_wrmsrl() on the vmentry path too.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Cc: David Woodhouse <dwmw@amazon.co.uk>
    Cc: KarimAllah Ahmed <karahmed@amazon.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kvm@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: d28b387fb74da95d69d2615732f50cceb38e9a4d
    Link: http://lkml.kernel.org/r/20180222154318.20361-2-pbonzini@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [bwh: Backported to 4.4: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 337c26f50a7189f114fce87e45eadd8d6dd9560b ......
	 orig commit -> 28c1c9fabf48d6ad596273a11c46e0d0da3e14cd ......
		 28c1c9fabf48d6ad596273a11c46e0d0da3e14cd has problem. Fixes commit -> 1eaafe91a0df4157521b6417b3dd8430bf5f52f0
checking 4b3870c343a82cd2df7192cc5149c87205dcc611 ......
	 orig commit -> 15d45071523d89b3fb7372e2135fbd72f6af9506 ......
		 15d45071523d89b3fb7372e2135fbd72f6af9506 has problem. Fixes commit -> fd65d3142f734bc4376053c8d75670041903134d
checking 321fbb1fad297ccbac0efd28e58851a085ac29fa ......
	 orig commit -> 904e14fb7cb96401a7dc803ca2863fd5ba32ffe6 ......
checking 8f54df9756caed1d499bc8f412ab736a8928dc39 ......
	 orig commit -> f21f165ef922c2146cc5bdc620f542953c41714b ......
checking 81cd492667c69020b3f55bed8eb5bfa4bebf7895 ......
	 orig commit -> de3a0021a60635de96aa92713c1a31a96747d72c ......
checking 1bec1a14bb080e86af254984135cd83e76f1f91d ......
	 orig commit -> c9f04407f2e0b3fc9ff7913c65fcfcb0a4b61570 ......
checking e90c6ad207bcb7a599c259596c9a9e1bb15eb7bb ......
	 orig commit -> d048c098218e91ed0e10dfa1f0f80e2567fe4ef7 ......
checking 8420459f1d938a02b060bde1e161fdd1de212fac ......
	 orig commit -> e11f0f90a626f93899687b1cc909ee37dd6c5809 ......
		 e11f0f90a626f93899687b1cc909ee37dd6c5809 has problem. Fixes commit -> de168981384097f810d3ecfb4bcfa5019cc7c160
checking 7f0324fb34c4736bf12ae8a5137e6913772749cc ......
	 orig commit -> 70ad35db3321a6d129245979de4ac9d06eed897c ......
		 70ad35db3321a6d129245979de4ac9d06eed897c has problem. Fixes commit -> b77fa617a2ff4d6beccad3d3d4b3a1f2d10368aa
checking 466570dc30cf556a0f27c9d823341e249b2000a9 ......
	 orig commit -> 164f7e586739d07eb56af6f6d66acebb11f315c8 ......
checking 5d8fe653a9340cf2a4daca908e1a56984f1c0909 ......
	 orig commit -> 8de456cf87ba863e028c4dd01bae44255ce3d835 ......
checking 168a1537ca6f5058243cc88c025a55ac87f22fd3 ......
	 orig commit -> c7d7d620dcbd2a1c595092280ca943f2fced7bbd ......
checking 736ba5cba268c3b2b6abd16947cf42ff5ad96164 ......
	 orig commit -> ce96a407adef126870b3f4a1b73529dd8aa80f49 ......
checking 9549f09b02ade613e233d61c1a058bee8a584425 ......
	 orig commit -> e21e57445a64598b29a6f629688f9b9a39e7242a ......
checking 8f1ee7557959af3367d573ec11d376f4a94e1f5e ......
	 orig commit -> 31ffa563833576bd49a8bf53120568312755e6e2 ......
checking b1ef956a8ba5d57c7209539b149e7e4b1d22c208 ......
	 orig commit -> c5a94f434c82529afda290df3235e4d85873c5b4 ......
checking 26e081481506908e75a202ac91d15b484be7b27c ......
	 orig commit -> 72791ac854fea36034fa7976b748fde585008e78 ......
checking 0f1b4c748370a567c6d0ecc0a48a079a450861a0 ......
	 orig commit -> 300625620314194d9e6d4f6dda71f2dc9cf62d9f ......
checking 573f19f1517bee0dd16ebf629c0746a2dfc20461 ......
	 orig commit -> c758940158bf29fe14e9d0f89d5848f227b48134 ......
checking 553c8675f5fea8c9fbf178c3a2187a2423b4af38 ......
	 orig commit -> a8bf879af7b1999eba36303ce9cc60e0e7dd816c ......
checking 6a1fb1bf8e6db1da631f14f790b5fc776cb93c7a ......
	 orig commit -> 24a6d2dd263bc910de018c78d1148b3e33b94512 ......
checking afca87e81681a55a1db525e1ea66cbf601a6fee9 ......
	 orig commit -> 354cb410d87314e2eda344feea84809e4261570a ......
checking 026e6bd1a41b375b40c013ee9e1dfa8afba3859d ......
	 orig commit -> 2c2322fbcab8102b8cadc09d66714700a2da42c2 ......
checking 09542b329dbf6dc12f3d7590adfe02429791cf49 ......
	 orig commit -> 6ca6695f576b8453fe68865e84d25946d63b10ad ......
checking 39d5919321d360227862a08a0788b205d9335b14 ......
	 orig commit -> 99f700366fcea1aa2fa3c49c99f371670c3c62f8 ......
checking a20d7a308fa2191256c1734499c7fb85a5e6f92d ......
	 orig commit -> 286afdde1640d8ea8916a0f05e811441fbbf4b9d ......
checking ac86c99ca19ae57ba955312f5183e1a49aa9372e ......
	 orig commit -> 1efb6ee3edea57f57f9fb05dba8dcb3f7333f61f ......
checking d4327131dbe0147d0f07c5f0a65a0cb079bd2caa ......
	 orig commit -> 2084ac6c505a58f7efdec13eba633c6aaa085ca5 ......
checking 476bea0f653c47228d22975a16858a080de04993 ......
	 orig commit -> ffdcc3638c58d55a6fa68b6e5dfd4fb4109652eb ......
checking 3aa69785b7d5c0257a0d7c88c746d26c96a46e66 ......
	 orig commit -> 373a500e34aea97971c9d71e45edad458d3da98f ......
checking 44b0243956db138911bafd0bc1ff8427a24b53e8 ......
	 orig commit -> a4390aee72713d9e73f1132bcdeb17d72fbbf974 ......
checking b9b45f496f3ee085d6f8439f993124ef94fb13e9 ......
	 orig commit -> 09aaf6813cfca4c18034fda7a43e68763f34abb1 ......
checking fd103a69b40023d38e8b93bfdc6a8c7522db0efd ......
	 orig commit -> 882eab6c28d23a970ae73b7eb831b169a672d456 ......
checking 15d8d7246173d11e7b75e34bc0226682468f9a8c ......
	 orig commit -> 38cd989ee38c16388cde89db5b734f9d55b905f9 ......
checking 9ba7a303ff290d21bade27317337505640e556c0 ......
	 orig commit -> 613a41b0d16e617f46776a93b975a1eeea96417c ......
checking c65b63a085c86d23b439f1a2831628c3c3ae4f94 ......
	 orig commit -> c4b7d1ba7d263b74bb72e9325262a67139605cde ......
checking d7589b83d628eeb0850d61c354dbf47e15befc10 ......
	 orig commit -> cec83ff1241ec98113a19385ea9e9cfa9aa4125b ......
checking d2f642b05832f54e46bb7cc601068038c27901ea ......
	 orig commit -> eef3dc34a1e0b01d53328b88c25237bcc7323777 ......
checking a56de6cd69bd700e0db0ad3e02e45a7910319cec ......
	 orig commit -> e6ac64d4c4d095085d7dd71cbd05704ac99829b2 ......
checking 2da7c7b22b33ea0e240b1627e10b76212cba94aa ......
	 orig commit -> 35b827b6d06199841a83839e8bb69c0cd13a28be ......
checking ed7748bcf290ad8f80020217d832f458ac9bae7f ......
	 orig commit -> b2b7af861122a0c0f6260155c29a1b2e594cd5b5 ......
checking 266b50e76449bf4a2391aabd9cc8ec364f8e0589 ......
	 orig commit -> 688838934c231bb08f46db687e57f6d8bf82709c ......
checking d7519c01c9b83129530434baa3d78ee23078400c ......
	 orig commit -> 9410d386d0a829ace9558336263086c2fbbe8aed ......
checking a1ec658a588b6d18c1cc1a5760c34e1dcfca1696 ......
	 orig commit -> d2a36971ef595069b7a600d1144c2e0881a930a1 ......
checking 8832e33045b5219357fe7c859fda385902c1d052 ......
	 orig commit -> a5d4a89245ead1f37ed135213653c5beebea4237 ......
checking 298e11444788a49c7b8b26abe2761e26d0426a01 ......
	 orig commit -> 66033f47ca60294a95fc85ec3a3cc909dab7b765 ......

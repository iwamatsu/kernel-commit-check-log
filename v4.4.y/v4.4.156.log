Check from v4.4.156 to v4.4.157
Commit count: 57
checking d9560919689d588beccf719452086b5cdf6d6c22 ......
checking 88d6918401a4ecdc50fe77df3e1e77c1e49d8579 ......
	 orig commit -> 7a9cdebdcc17e426fb5287e4a82db1dfe86339b2 ......
		 7a9cdebdcc17e426fb5287e4a82db1dfe86339b2 has problem. Fixes commit -> 28e2c4bb99aa40f9d5f07ac130cbc4da0ea93079
commit 0f0ad8d548588419b5f1b8ca36673af32d3dafdf
Author: Jann Horn <jannh@google.com>
Date:   Fri Oct 5 15:52:03 2018 -0700

    mm/vmstat.c: fix outdated vmstat_text
    
    commit 28e2c4bb99aa40f9d5f07ac130cbc4da0ea93079 upstream.
    
    7a9cdebdcc17 ("mm: get rid of vmacache_flush_all() entirely") removed the
    VMACACHE_FULL_FLUSHES statistics, but didn't remove the corresponding
    entry in vmstat_text.  This causes an out-of-bounds access in
    vmstat_show().
    
    Luckily this only affects kernels with CONFIG_DEBUG_VM_VMACACHE=y, which
    is probably very rare.
    
    Link: http://lkml.kernel.org/r/20181001143138.95119-1-jannh@google.com
    Fixes: 7a9cdebdcc17 ("mm: get rid of vmacache_flush_all() entirely")
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Christoph Lameter <clameter@sgi.com>
    Cc: Kemi Wang <kemi.wang@intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e29c75d4fb491a7b1890293302f7ab40be7ce586 ......
checking 4bdac2526df0ea4fad8a78958fe462f1ab4a17dd ......
	 orig commit -> 0633da48f0793aeba27f82d30605624416723a91 ......
checking da7d5af64afd3f18b727c8d7787265c555e2fded ......
	 orig commit -> 7233982ade15eeac05c6f351e8d347406e6bcd2f ......
checking f1b13e97e451975fdd7ff9452afa53092feb37af ......
	 orig commit -> 0522236d4f9c5ab2e79889cb020d1acbe5da416e ......
checking 21de2732aaab31df375184ebd3d4c53a0247526d ......
	 orig commit -> 5817f977527e5cdbea9ca56d2b95824f59c8747d ......
checking b3179842575a1d650b8b5f018252fce947f0e99f ......
	 orig commit -> 86e1d5adcef961eb383ce4eacbe0ef22f06e2045 ......
checking d02c870872ffb9f0ee605319da46cc52797f837e ......
	 orig commit -> 552165bcf7060b998b4a9b5b86110b6a5e04dfd9 ......
checking f9845426f4427eb0031b562dfd5c0ffe99cba644 ......
	 orig commit -> e466af75c074e76107ae1cd5a2823e9c61894ffb ......
checking a3b92ee6fc171d7c9d9b6b829b7fef169210440c ......
checking c72a42d38b1f516b3533400a2d7ac90388b35e6c ......
	 orig commit -> 44a182b9d17765514fa2b1cc911e4e65134eef93 ......
		 44a182b9d17765514fa2b1cc911e4e65134eef93 has problem. Fixes commit -> d850c1658328e757635a46763783c6fd56390dcb
2278446e2b7cd33ad894b32e7eb63afc7db6c86e
commit d57a6bb22085ed9bebe300497da8cae1dcb4f266
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon May 14 11:57:23 2018 +0300

    xhci: Fix USB3 NULL pointer dereference at logical disconnect.
    
    commit 2278446e2b7cd33ad894b32e7eb63afc7db6c86e upstream.
    
    Hub driver will try to disable a USB3 device twice at logical disconnect,
    racing with xhci_free_dev() callback from the first port disable.
    
    This can be triggered with "udisksctl power-off --block-device <disk>"
    or by writing "1" to the "remove" sysfs file for a USB3 device
    in 4.17-rc4.
    
    USB3 devices don't have a similar disabled link state as USB2 devices,
    and use a U3 suspended link state instead. In this state the port
    is still enabled and connected.
    
    hub_port_connect() first disconnects the device, then later it notices
    that device is still enabled (due to U3 states) it will try to disable
    the port again (set to U3).
    
    The xhci_free_dev() called during device disable is async, so checking
    for existing xhci->devs[i] when setting link state to U3 the second time
    was successful, even if device was being freed.
    
    The regression was caused by, and whole thing revealed by,
    Commit 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    which sets xhci->devs[i]->udev to NULL before xhci_virt_dev() returned.
    and causes a NULL pointer dereference the second time we try to set U3.
    
    Fix this by checking xhci->devs[i]->udev exists before setting link state.
    
    The original patch went to stable so this fix needs to be applied there as
    well.
    
    Fixes: 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    Cc: <stable@vger.kernel.org>
    Reported-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Tested-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit d57a6bb22085ed9bebe300497da8cae1dcb4f266
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon May 14 11:57:23 2018 +0300

    xhci: Fix USB3 NULL pointer dereference at logical disconnect.
    
    commit 2278446e2b7cd33ad894b32e7eb63afc7db6c86e upstream.
    
    Hub driver will try to disable a USB3 device twice at logical disconnect,
    racing with xhci_free_dev() callback from the first port disable.
    
    This can be triggered with "udisksctl power-off --block-device <disk>"
    or by writing "1" to the "remove" sysfs file for a USB3 device
    in 4.17-rc4.
    
    USB3 devices don't have a similar disabled link state as USB2 devices,
    and use a U3 suspended link state instead. In this state the port
    is still enabled and connected.
    
    hub_port_connect() first disconnects the device, then later it notices
    that device is still enabled (due to U3 states) it will try to disable
    the port again (set to U3).
    
    The xhci_free_dev() called during device disable is async, so checking
    for existing xhci->devs[i] when setting link state to U3 the second time
    was successful, even if device was being freed.
    
    The regression was caused by, and whole thing revealed by,
    Commit 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    which sets xhci->devs[i]->udev to NULL before xhci_virt_dev() returned.
    and causes a NULL pointer dereference the second time we try to set U3.
    
    Fix this by checking xhci->devs[i]->udev exists before setting link state.
    
    The original patch went to stable so this fix needs to be applied there as
    well.
    
    Fixes: 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    Cc: <stable@vger.kernel.org>
    Reported-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Tested-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ff75cdadf1e4eb196eab01ad31588033a0b647fc ......
	 orig commit -> 643d213a9a034fa04f5575a40dfc8548e33ce04f ......
checking d04f1b44f64416a4b2a9ba35b6d0610325163349 ......
	 orig commit -> d4da0e97baea8768b3d66ccef3967bebd50dfc3b ......
checking e498af87075ae63b39bb90cdc67e35b9fe592acb ......
	 orig commit -> c77ec61ca0a49544ca81881cc5d5529858f7e196 ......
checking ab140bd2316d587161350768ff3c6fb434e33a24 ......
	 orig commit -> c2b1509c77a99a0dcea0a9051ca743cb88385f50 ......
checking 22fa0358a99afb20946e6e03cc0cd04ffd8cb304 ......
	 orig commit -> 46583e8c48c5a094ba28060615b3a7c8c576690f ......
checking a169d7c844a9ed24d110ae4333ed1edf451bf22f ......
	 orig commit -> 14cb2c8a6c5dae57ee3e2da10fa3db2b9087e39e ......
checking 77d3c98f661ed3bb9d675b9af9763c01d82ebc9c ......
	 orig commit -> d43fdae7bac2def8c4314b5a49822cb7f08a45f1 ......
checking af39fa735a44f950e65ea04513cb5e2d70f35e67 ......
	 orig commit -> 36f5d9ef26e52edff046b4b097855db89bf0cd4a ......
checking bde99d93a6aed76ec2039bd9d800346083289d10 ......
	 orig commit -> 08193d1a893c802c4b807e4d522865061f4e9f4f ......
checking 7ffa0928ce29480c6a9b55cf9e343333107e32cd ......
	 orig commit -> b1259519e618d479ede8a0db5474b3aff99f5056 ......
checking 3d7d5919a51a7f8d0c8c51f7250cd5c4d9f3598e ......
	 orig commit -> 8466baf788ec3e18836bd9c91ba0b1a07af25878 ......
checking 931ed0a5d3d7bc51947aaa379b8eff2d629cae49 ......
	 orig commit -> 4bf4eed44bfe288f459496eaf38089502ef91a79 ......
checking cf8f39692c14db469b90299a33968eb2822bd732 ......
	 orig commit -> 6863ea0cda8725072522cd78bda332d9a0b73150 ......
		 6863ea0cda8725072522cd78bda332d9a0b73150 has problem. Fixes commit -> a65c88e16f32aa9ef2e8caa68ea5c29bd5eb0ff0
checking 362990d8aaea6dedb1d2a28a7caf868cc3c4ec02 ......
	 orig commit -> b3cadaa485f0c20add1644a5c877b0765b285c0c ......
checking a820e7709f7d6f338b21a41e163366b344ab02ab ......
	 orig commit -> 673bc519c55843c68c3aecff71a4101e79d28d2b ......
checking 3f5885f4ce3f300bf3f3d92a6e2a3b0adf368382 ......
	 orig commit -> 4dc98c1995482262e70e83ef029135247fafe0f2 ......
checking 58e91e96fdb2cacd96d89baba3ec9d8e1b937896 ......
	 orig commit -> 2dbb3ec29a6c069035857a2fc4c24e80e5dfe3cc ......
checking 41038bf29f25291f0a04d18dc4b9354c41cf26a1 ......
	 orig commit -> 0494d7ffdcebc6935410ea0719b24ab626675351 ......
checking 2071bd1ca7f588a1c08b157026577d5366388233 ......
	 orig commit -> 3f259111583801013cb605bb4414aa529adccf1c ......
checking 805841279cb02cab5c15913db5f4438ba7649403 ......
	 orig commit -> 576d5290d678a651b9f36050fc1717e0573aca13 ......
checking 2d926fe3c2557d6b0e956fe26565823a48b15479 ......
	 orig commit -> 32cd3ee511f4e07ca25d71163b50e704808d22f4 ......
checking 5c228c2f0c595925872ec306b689a0dfc3ebbfa4 ......
	 orig commit -> 21b8732eb4479b579bda9ee38e62b2c312c2a0e5 ......
checking f5be08ed5e393ddb75e8b7b14b3fa8b6d236b9fa ......
	 orig commit -> 3611ce9911267cb93d364bd71ddea6821278d11f ......
checking 0a93d88d6638bcf1d85917cf60ba812826b41a01 ......
	 orig commit -> 0419056ec8fd01ddf5460d2dba0491aad22657dd ......
checking 57533bacbc5606d12322dbb738f5f335fc835c33 ......
	 orig commit -> f019f07ecf6a6b8bd6d7853bce70925d90af02d1 ......
		 f019f07ecf6a6b8bd6d7853bce70925d90af02d1 has problem. Fixes commit -> 432798195bbce1f8cd33d1c0284d0538835e25fb
commit 1582f07e886d94a2d214b4978de740205f469cdd
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Oct 26 10:19:51 2018 +0300

    uio: Fix an Oops on load
    
    commit 432798195bbce1f8cd33d1c0284d0538835e25fb upstream.
    
    I was trying to solve a double free but I introduced a more serious
    NULL dereference bug.  The problem is that if there is an IRQ which
    triggers immediately, then we need "info->uio_dev" but it's not set yet.
    
    This patch puts the original initialization back to how it was and just
    sets info->uio_dev to NULL on the error path so it should solve both
    the Oops and the double free.
    
    Fixes: f019f07ecf6a ("uio: potential double frees if __uio_register_device() fails")
    Reported-by: Mathias Thore <Mathias.Thore@infinera.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Mathias Thore <Mathias.Thore@infinera.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 7c075f0a0b37e8d868da9cc7dde23f27e341e193 ......
	 orig commit -> 81ae962d7f180c0092859440c82996cccb254976 ......
checking ccae23ff45ccd3e9c610c46ee8449c2617118daa ......
	 orig commit -> d63e2fc804c46e50eee825c5d3a7228e07048b47 ......
checking 44dc4734a7810e7ee24fc8942a93ca5b8521a24b ......
	 orig commit -> 6a64f6e1591322beb8ce16e952a53582caf2a15c ......
checking bf748acafd58fe15bc74e0646bc95b4c3fdcb4c3 ......
	 orig commit -> 40b25bce0adbe641a744d1291bc0e51fb7f3c3d8 ......
checking 5824d86b50b8c5f9ecd725f2d74381a23ab1c63b ......
	 orig commit -> 6c3711ec64fd23a9abc8aaf59a9429569a6282df ......
checking 61537b3398df88c0ca70ea6bccca0e00de5ab172 ......
	 orig commit -> d89d41556141a527030a15233135ba622ba3350d ......
checking fb9dabb6fca85a6af11ce8669c812dfed0660ca0 ......
	 orig commit -> a39284ae9d2ad09975c8ae33f1bd0f05fbfbf6ee ......
checking e3efb7699a873bd47950e4fdcfd1052afd1ab578 ......
	 orig commit -> c83532fb0fe053d2e43e9387354cb1b52ba26427 ......
checking d914882c936d9c3a1fa4c10d5950c5f0a7d32d79 ......
	 orig commit -> 50972fe78f24f1cd0b9d7bbf1f87d2be9e4f412e ......
checking 97557d161572172d1d6ea317f254e501a4585c41 ......
	 orig commit -> 476accbe2f6ef69caeebe99f52a286e12ac35aee ......
checking 70cc08c44fb55b587c7485a15549e9f9a12c9405 ......
	 orig commit -> 9c29c31830a4eca724e137a9339137204bbb31be ......
checking 29a2875cf481b8db367a0a8aed54d4b30640558e ......
	 orig commit -> e00f4f4d0ff7e13b9115428a245b49108d625f09 ......
checking 035c3ea1608e2f7a7cc43a46179f10add479c9df ......
	 orig commit -> 88a5b39b69ab1828fd4130e2baadd184109cea69 ......
checking 227e5d4b86e64e9807fe5ae507b0755229c2876a ......
	 orig commit -> 498c4b4e9c23855d17ecc2a108d949bb68020481 ......
checking 8ecd71cd152bd3e08dc650c67ac7c600386a6a41 ......
	 orig commit -> b0f5a8f32e8bbdaae1abb8abe2d3cbafaba57e08 ......
checking 798ef283a8dd73dea2ae8f817abe75255fde772c ......
	 orig commit -> 4d6501dce079c1eb6bf0b1d8f528a5e81770109e ......
		 4d6501dce079c1eb6bf0b1d8f528a5e81770109e has problem. Fixes commit -> b0f5a8f32e8bbdaae1abb8abe2d3cbafaba57e08
commit 8ecd71cd152bd3e08dc650c67ac7c600386a6a41
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Mon May 29 09:22:07 2017 +0200

    kthread: fix boot hang (regression) on MIPS/OpenRISC
    
    commit b0f5a8f32e8bbdaae1abb8abe2d3cbafaba57e08 upstream.
    
    This fixes a regression in commit 4d6501dce079 where I didn't notice
    that MIPS and OpenRISC were reinitialising p->{set,clear}_child_tid to
    NULL after our initialisation in copy_process().
    
    We can simply get rid of the arch-specific initialisation here since it
    is now always done in copy_process() before hitting copy_thread{,_tls}().
    
    Review notes:
    
     - As far as I can tell, copy_process() is the only user of
       copy_thread_tls(), which is the only caller of copy_thread() for
       architectures that don't implement copy_thread_tls().
    
     - After this patch, there is no arch-specific code touching
       p->set_child_tid or p->clear_child_tid whatsoever.
    
     - It may look like MIPS/OpenRISC wanted to always have these fields be
       NULL, but that's not true, as copy_process() would unconditionally
       set them again _after_ calling copy_thread_tls() before commit
       4d6501dce079.
    
    Fixes: 4d6501dce079c1eb6bf0b1d8f528a5e81770109e ("kthread: Fix use-after-free if kthread fork fails")
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net> # MIPS only
    Acked-by: Stafford Horne <shorne@gmail.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: Jonas Bonn <jonas@southpole.se>
    Cc: Stefan Kristiansson <stefan.kristiansson@saunalahti.fi>
    Cc: openrisc@lists.librecores.org
    Cc: Jamie Iles <jamie.iles@oracle.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 39223f841425da99c2b0174d8bc42ee1bb29a5ad ......
	 orig commit -> b3193bc0dca9bb69c8ba1ec1a318105c76eb4172 ......
checking c9125a2116c75383ca0b37d9eecefa3c6235bb4e ......
	 orig commit -> 16037643969e095509cd8446a3f8e406a6dc3a2c ......
checking d811b40d010822eda1fd70d734caf8db1b21ec5f ......
	 orig commit -> 851a15114895c5bce163a6f2d57e0aa4658a1be4 ......
checking ad53f98feee72e1805a02b78022919ef5a998b58 ......
	 orig commit -> ae7304c3ea28a3ba47a7a8312c76c654ef24967e ......

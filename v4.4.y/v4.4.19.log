Check from v4.4.19 to v4.4.20
Commit count: 114
checking 2cb99ded2f551c78506e5f7bbf6c0d7613351ab1 ......
checking 625ddb785d013221458ab851ac718495eba1dcbf ......
	 orig commit -> 17d0774f80681020eccc9638d925a23f1fc4f671 ......
		 17d0774f80681020eccc9638d925a23f1fc4f671 has problem. Fixes commit -> c8a139d001a1aab1ea8734db14b22dac9dd143b6
commit 69d8d58bf50d9cd1bb6f000bbdf54026e74717a3
Author: NeilBrown <neilb@suse.com>
Date:   Mon Apr 3 11:30:34 2017 +1000

    sysfs: be careful of error returns from ops->show()
    
    commit c8a139d001a1aab1ea8734db14b22dac9dd143b6 upstream.
    
    ops->show() can return a negative error code.
    Commit 65da3484d9be ("sysfs: correctly handle short reads on PREALLOC attrs.")
    (in v4.4) caused this to be stored in an unsigned 'size_t' variable, so errors
    would look like large numbers.
    As a result, if an error is returned, sysfs_kf_read() will return the
    value of 'count', typically 4096.
    
    Commit 17d0774f8068 ("sysfs: correctly handle read offset on PREALLOC attrs")
    (in v4.8) extended this error to use the unsigned large 'len' as a size for
    memmove().
    Consequently, if ->show returns an error, then the first read() on the
    sysfs file will return 4096 and could return uninitialized memory to
    user-space.
    If the application performs a subsequent read, this will trigger a memmove()
    with extremely large count, and is likely to crash the machine is bizarre ways.
    
    This bug can currently only be triggered by reading from an md
    sysfs attribute declared with __ATTR_PREALLOC() during the
    brief period between when mddev_put() deletes an mddev from
    the ->all_mddevs list, and when mddev_delayed_delete() - which is
    scheduled on a workqueue - completes.
    Before this, an error won't be returned by the ->show()
    After this, the ->show() won't be called.
    
    I can reproduce it reliably only by putting delay like
            usleep_range(500000,700000);
    early in mddev_delayed_delete(). Then after creating an
    md device md0 run
      echo clear > /sys/block/md0/md/array_state; cat /sys/block/md0/md/array_state
    
    The bug can be triggered without the usleep.
    
    Fixes: 65da3484d9be ("sysfs: correctly handle short reads on PREALLOC attrs.")
    Fixes: 17d0774f8068 ("sysfs: correctly handle read offset on PREALLOC attrs")
    Signed-off-by: NeilBrown <neilb@suse.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Reported-and-tested-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking dde898fba89069f78be1d0174f5184dc939cce5f ......
	 orig commit -> 5d17d3b4bbf3becb89fd48b74340a50a39736f6d ......
checking a2d9e40c8fdc8d206ebee3ec8066bf240a340c65 ......
	 orig commit -> b027d11263836a0cd335520175257dcb99b43757 ......
checking d21befeb0d9ad10a69850969963de00a46eb992a ......
	 orig commit -> adc8a43a6d6688272ebffa81789fa857e603dec6 ......
checking 85db22a1079b6e10d30b83aca749c98b612d2867 ......
	 orig commit -> 7e4379eae0e31994ea645db1d13006ea8e5ce539 ......
checking 37e16dc96556fbcba12b6bb1d151df5a769e7928 ......
	 orig commit -> 702b07fcc9b264c9afd372676bbdd50a762dcde0 ......
checking a37b834402b27800d028b06b8e0c1275b607ff37 ......
	 orig commit -> f18ebc211e259d4f591e39e74b2aa2de226c9a1d ......
checking b0917f5dae67620aaab79e98cdb53a5620570e58 ......
	 orig commit -> 5331d9cab32ef640b4cd38a43b0858874fbb7168 ......
checking 0b21b21b58706dc35102b24a566bb578c32218df ......
	 orig commit -> 3feab13c919f99b0a17d0ca22ae00cf90f5d3fd1 ......
checking fbde41faa1c043f465fb3d435c2fd34e82e7b88a ......
	 orig commit -> 5ca05345c56cb979e1a25ab6146437002f95cac8 ......
checking b03ee3d047cafd407896b4a2ad018338387ec8e7 ......
	 orig commit -> f0f4b0cc3a8cffd983f5940d46cd0227f3f5710a ......
checking fd514089133a2a6cb98d4a615237015cd8075e12 ......
	 orig commit -> 403fe7f34e3327ddac2e06a15e76a293d613381e ......
checking bc93350cb49857d013c1011a56a0042274f82555 ......
	 orig commit -> 80e162ee9b31d77d851b10f8c5299132be1e120f ......
checking 1b3b122f598ff1020447935b0c908626ea2b8782 ......
	 orig commit -> 40d9c32525cba79130612650b1abc47c0c0f19a8 ......
checking fed48a260b0cbc571d4ba50aeb1833d652cc677a ......
	 orig commit -> 6695593e4a7659db49ac6eca98c164f7b5589f72 ......
checking 201cb6d48be510dba6161d56c1179a91684c6c5d ......
	 orig commit -> 3b7c7e52efda0d4640060de747768360ba70a7c0 ......
checking e5d33f1036d4d145495952079e9b023624d0b7c4 ......
	 orig commit -> 5a5a1d614287a647b36dff3f40c2b0ceabbc83ec ......
checking 6e0b5f821c318f58e5b5c82f308adfd0b9ddb929 ......
	 orig commit -> 6c73358c83ce870c0cf32413e5cadb3b9a39c606 ......
checking 8136b595bfa36a09a6e1b357f280d368df3d1cc5 ......
	 orig commit -> c4e94174983a86c935be1537a73e496b778b0287 ......
checking 5ab968f27aee23f03ddd0401a77c2ba81dc73ad0 ......
	 orig commit -> 53e5f36fbd2453ad69a3369a1db62dc06c30a4aa ......
checking e879dae59e057343a15091f55c54a354623d8142 ......
	 orig commit -> 626d2f07de89bf6be3d7301524d0ab3375b81b9c ......
checking ac069deaaae26656a726af9c45a3dbeeea15c917 ......
	 orig commit -> 10bb087ce381c812cd81a65ffd5e6f83e6399291 ......
checking 71d27af29aa5ef06716a8aab15b3bb5144281dc4 ......
	 orig commit -> e514cc0a492a3f39ef71b31590a7ef67537ee04b ......
checking 9781b971f456189f3664d6f5bd2d5643893c0408 ......
	 orig commit -> 47af45d684b5f3ae000ad448db02ce4f13f73273 ......
checking 11dd037e42590ee224658ddddfb715e5ce1d328a ......
	 orig commit -> 4097461897df91041382ff6fcd2bfa7ee6b2448c ......
		 4097461897df91041382ff6fcd2bfa7ee6b2448c has problem. Fixes commit -> 47af45d684b5f3ae000ad448db02ce4f13f73273
commit 9781b971f456189f3664d6f5bd2d5643893c0408
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Aug 16 17:38:54 2016 -0700

    Input: i8042 - set up shared ps2_cmd_mutex for AUX ports
    
    commit 47af45d684b5f3ae000ad448db02ce4f13f73273 upstream.
    
    The commit 4097461897df ("Input: i8042 - break load dependency ...")
    correctly set up ps2_cmd_mutex pointer for the KBD port but forgot to do
    the same for AUX port(s), which results in communication on KBD and AUX
    ports to clash with each other.
    
    Fixes: 4097461897df ("Input: i8042 - break load dependency ...")
    Reported-by: Bruno Wolff III <bruno@wolff.to>
    Tested-by: Bruno Wolff III <bruno@wolff.to>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d6720176bc99535858a5dfffbea0046a89842262 ......
	 orig commit -> fae16989be77b09bab86c79233e4b511ea769cea ......
checking cc79d3982d9c77f36cebe8f1033e6715c55ac726 ......
	 orig commit -> d2c609b834d62f1e91f1635a27dca29f7806d3d6 ......
		 d2c609b834d62f1e91f1635a27dca29f7806d3d6 has problem. Fixes commit -> 8d9eddad19467b008e0c881bc3133d7da94b7ec1
commit 1f5adadcd03266a461ebe752964c40a3dc95bf2f
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Nov 24 02:09:04 2016 +0000

    Btrfs: fix qgroup rescan worker initialization
    
    commit 8d9eddad19467b008e0c881bc3133d7da94b7ec1 upstream.
    
    We were setting the qgroup_rescan_running flag to true only after the
    rescan worker started (which is a task run by a queue). So if a user
    space task starts a rescan and immediately after asks to wait for the
    rescan worker to finish, this second call might happen before the rescan
    worker task starts running, in which case the rescan wait ioctl returns
    immediatley, not waiting for the rescan worker to finish.
    
    This was making the fstest btrfs/022 fail very often.
    
    Fixes: d2c609b834d6 (btrfs: properly track when rescan worker is running)
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f31d48a091877f7580c0c6aa70e3d35d9b6e8625 ......
	 orig commit -> d06f23d6a947c9abae41dc46be69a56baf36f436 ......
checking 104b0d196dc23023dfd8401574585f16ce7ca57a ......
	 orig commit -> 088bf2ff5d12e2e32ee52a4024fec26e582f44d3 ......
checking 3e7c26db216b565040f2e100cbe4ef6a4af33026 ......
	 orig commit -> 2527ecc9195e9c66252af24c4689e8a67cd4ccb9 ......
checking 133716877986567ccdd3d3446458bc404e04a709 ......
	 orig commit -> 3295235fd70ed6d594aadee8c892a14f6a4b2d2e ......
checking bbaf7193761eb2e7d43a6e3e23e23b923dfee26e ......
	 orig commit -> e7f851684efb3377e9c93aca7fae6e76212e5680 ......
checking 7386f927cf74aa8c829323706ff70c7a53b32619 ......
	 orig commit -> ce7c6c9e1d997a2670aead3a7b87f4df32c11118 ......
checking af889001ff22390aa739ee5f15a1ed563f75486f ......
	 orig commit -> add125054b8727103631dce116361668436ef6a7 ......
checking d489412c69e3ff624413c516cfb7bea18eed6a6c ......
	 orig commit -> 4d01d88019261d05ec3bff5f1a6013393faa3b9e ......
checking d91c348e4c3a011849e309cb76a6fdc714935ea4 ......
	 orig commit -> 9798ac6d32c1a32d6d92d853ff507d2d39c4300c ......
checking e4878ef66e5b8d01d6734b1952f9abb3eeea454c ......
	 orig commit -> fa00c437eef8dc2e7b25f8cd868cfa405fcc2bb3 ......
checking 03551c85c1c01bf7ec58218a2afb225d98da0b97 ......
	 orig commit -> 45c3b08a117e2232fc8d7b9e849ead36386f4f96 ......
checking e44f5b5386f49f00d8d62880c28a814e8220c8ed ......
	 orig commit -> 18b43e89d295cc65151c505c643c98fb2c320e59 ......
checking 45a945050dfa9619c3223add776c1b9d595a0655 ......
	 orig commit -> 86147e3cfa5e118b61e78f4f0bf29e920dcbd477 ......
checking 413d5877ef6f634f4f0346d75ccfca537b04518a ......
	 orig commit -> 20d780374c81cf237834af2202c26df2100ddd69 ......
checking 137f6bac13992163e26a682fe114878c4066fea4 ......
	 orig commit -> 3871f42a57efcdc6a9da751a8cb6fa196c212289 ......
checking d6af5abb8d5d0690149ff2dab62c830521c6b795 ......
	 orig commit -> 1f703e6679f373f5bba4efe7093aa82e91af4037 ......
checking 2d4ab6c1368a8bdf2d4c8a2980f028f6f0fb142e ......
	 orig commit -> 10ea9434065e56fe14287f89258ecf2fb684ed1a ......
checking 2b2627113eee3050a0744a98940b987ad1341c0b ......
	 orig commit -> 611a1507fe8569ce1adab3abc982ea58ab559fb9 ......
checking 9c22155c5a39dc452c59534195712f57f512b063 ......
	 orig commit -> e1718d97aa88ea44a6a8f50ff464253dd0dacf01 ......
checking 65317dbcf37367350276967ff9e3b4647054cb64 ......
	 orig commit -> 815d27a46f3119f74fe01fe10bf683aa5bc55597 ......
checking 4e9db9e6bfdf926bb96780cbc4ae842ea1cc3edf ......
	 orig commit -> cab0b8d50e9bbef62c04067072c953433a87a9ff ......
checking 6cb6e951522723e17cad4419eef2cdc75c7ecc95 ......
	 orig commit -> fcf68f3c0bb2a541aa47a2a38b8939edf84fd529 ......
		 fcf68f3c0bb2a541aa47a2a38b8939edf84fd529 has problem. Fixes commit -> 5dba4b14bafe801083d01e1f400816df7e5a8f2e
commit 73c165a6f3828c61d2a0e725597ffc6e07c0c40b
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Sep 5 15:39:06 2016 +0100

    iio: ensure ret is initialized to zero before entering do loop
    
    commit 5dba4b14bafe801083d01e1f400816df7e5a8f2e upstream.
    
    A recent fix to iio_buffer_read_first_n_outer removed ret from being set by
    a return from wait_event_interruptible and also added a continue in a loop
    which causes the variable ret to not be set when it reaches the end of the
    loop.  Fix this by initializing ret to zero.
    
    Also remove extraneous white space at the end of the loop.
    
    Fixes: fcf68f3c0bb2a5 ("fix sched WARNING "do not call blocking ops when !TASK_RUNNING")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 15abaa07a2f0dabb66dfa637162fdaa66b839141 ......
	 orig commit -> 444969223c81c7d0a95136b7b4cfdcfbc96ac5bd ......
checking c3cf68ec5595e30c28d44b0080f236af94e0e8da ......
	 orig commit -> 173be9a14f7b2e901cf77c18b1aafd4d672e9d9e ......
checking 51ed10c4ffd7742d160c02f7dd6bab634b2c03ef ......
	 orig commit -> 34276bb062b8449b3b0a208c9b848a1a27920075 ......
checking df4fe6f8c7b793adcab7b423a6efd989e195b4b3 ......
	 orig commit -> 78ec79bfd59e126e1cb394302bfa531a420b3ecd ......
checking ed6625cfdbe6bb9bc9561934361abdca43be551a ......
	 orig commit -> 6b07d9ca9b5363dda959b9582a3fc9c0b89ef3b5 ......
checking 1473e6afbb1a37adba91aed61a62bbc0dd78634b ......
	 orig commit -> 9ba333dc55cbb9523553df973adb3024d223e905 ......
checking 07adb640aa87c454cb0334a119111d5e5dfb13b7 ......
	 orig commit -> 993f88f1cc7f0879047ff353e824e5cc8f10adfc ......
checking b518b0c8534fb09760605253b53b44c97f2963d9 ......
	 orig commit -> 8cf4345575a416e6856a6856ac6eaa31ad883126 ......
checking d860213f8baf27ef0c014737aa4162b21ad734df ......
	 orig commit -> 5bc0a11664e17e9f9551983f5b660bd48b57483c ......
checking aef62956c81d90456a9b3c051c21f679126a5d56 ......
	 orig commit -> aea2037e0d3e23c3be1498feae29f71ca997d9e6 ......
checking d360081c4bd4361d7df6f879c0f31262ba4f2525 ......
	 orig commit -> 3ec60043f7c02e1f79e4a90045ff2d2e80042941 ......
checking 433ccf1fb43735e2f8d8cc10bdb78ead132edca0 ......
	 orig commit -> 0caf6b33452112e5a1186c8c964e90310e49e6bd ......
checking 1d816d0bbf8f5d94ff08cdfd69b44ed242dcc3a7 ......
	 orig commit -> 6977495c06f7f47636a076ee5a0ca571279d9697 ......
checking 6d77ca311e41b374835d9bca8444b854041488f1 ......
	 orig commit -> ae34d12cc1e212ffcd92e069030e54dae69c832f ......
checking 8ed7b7d02b707490242d55a5662b00e35b6991a3 ......
	 orig commit -> 01d7956b58e644ea0d2e8d9340c5727a8fc39d70 ......
checking 340391d39c01597e8986322bd471c5f9ad60506c ......
	 orig commit -> cf1b18030de29e4e5b0a57695ae5db4a89da0ff7 ......
checking 697c84be4b37d85a244051beadfb6f0e0bbd54d3 ......
	 orig commit -> 647024a7df36014bbc4479d92d88e6b77c0afcf6 ......
checking c5a6d60b93315ecf7d2d446045a7295f0825e6fc ......
	 orig commit -> f1f6d9a8b540df22b87a5bf6bc104edaade81f47 ......
checking 262d059872a93c1bdaa3371602c921f1ce758f1d ......
	 orig commit -> 88716a93766b8f095cdef37a8e8f2c93aa233b21 ......
checking 76ba94f74c8e064afbd192646b5c198c7fa0379a ......
	 orig commit -> 33be126510974e2eb9679f1ca9bca4f67ee4c4c7 ......
checking 8fd5243e5f01b6f5ad1457c348d0c9e3353b7745 ......
	 orig commit -> 327b21da884fe1a29f733e41792ddd53e4a30379 ......
checking e9caf24cdf4b505d1204e109c9d41defdf57e197 ......
	 orig commit -> 7442e6db5bdd0dce4615205508301f9b22e502d6 ......
checking 391738b9a371412a3c394975f18696d908971b69 ......
	 orig commit -> aed9d65ac3278d4febd8665bd7db59ef53e825fe ......
		 aed9d65ac3278d4febd8665bd7db59ef53e825fe has problem. Fixes commit -> fb5ee84ea72c5f1b6cabdd1c9d6e8648995ca7c6
6c73358c83ce870c0cf32413e5cadb3b9a39c606
commit 6e0b5f821c318f58e5b5c82f308adfd0b9ddb929
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Aug 22 16:58:53 2016 -0400

    USB: fix typo in wMaxPacketSize validation
    
    commit 6c73358c83ce870c0cf32413e5cadb3b9a39c606 upstream.
    
    The maximum value allowed for wMaxPacketSize of a high-speed interrupt
    endpoint is 1024 bytes, not 1023.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: aed9d65ac327 ("USB: validate wMaxPacketValue entries in endpoint descriptors")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit c6ed907bcd2a20b0cf11dc844c4b2213757fcc62
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu May 3 11:04:48 2018 -0400

    USB: Accept bulk endpoints with 1024-byte maxpacket
    
    commit fb5ee84ea72c5f1b6cabdd1c9d6e8648995ca7c6 upstream.
    
    Some non-compliant high-speed USB devices have bulk endpoints with a
    1024-byte maxpacket size.  Although such endpoints don't work with
    xHCI host controllers, they do work with EHCI controllers.  We used to
    accept these invalid sizes (with a warning), but we no longer do
    because of an unintentional change introduced by commit aed9d65ac327
    ("USB: validate wMaxPacketValue entries in endpoint descriptors").
    
    This patch restores the old behavior, so that people with these
    peculiar devices can use them without patching their kernels by hand.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Suggested-by: Elvinas <elvinas@veikia.lt>
    Fixes: aed9d65ac327 ("USB: validate wMaxPacketValue entries in endpoint descriptors")
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e0b5f821c318f58e5b5c82f308adfd0b9ddb929
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Aug 22 16:58:53 2016 -0400

    USB: fix typo in wMaxPacketSize validation
    
    commit 6c73358c83ce870c0cf32413e5cadb3b9a39c606 upstream.
    
    The maximum value allowed for wMaxPacketSize of a high-speed interrupt
    endpoint is 1024 bytes, not 1023.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: aed9d65ac327 ("USB: validate wMaxPacketValue entries in endpoint descriptors")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 365a5f484c89142aceee3e9ff2968c8c017a3abf ......
	 orig commit -> 700aa7ff8d2c2b9cc669c99375e2ccd06d3cd38d ......
checking b8032e6952f0d228b058c8fdb6e3392e19a61c27 ......
	 orig commit -> 9ab967e6db7412b675ecbff80d5371d53c82cb2e ......
checking 4a6eff809af0a1662917338c47bf9291f77d62cc ......
	 orig commit -> 07d316a22e119fa301fd7dba7f1e1adfd4f72c05 ......
checking 52217416177820e2c2a1350be31e071db4ccd305 ......
	 orig commit -> ca5cbc8b02f9b21cc8cd1ab36668763ec34f9ee8 ......
checking 7edabddaea5c46241aa76672fee0e45e9bf11b77 ......
	 orig commit -> 6bb47e8ab98accb1319bd43c64966340ba3bba9a ......
checking dbb9fe1fc7a73bf99976e0cb12fdbd2a0106731c ......
	 orig commit -> 8a1b2725a60d3267135c15e80984b4406054f650 ......
checking 13af8c64ee5c05407d523fa79517a6b841f4fdc8 ......
	 orig commit -> c7de573471832dff7d31f0c13b0f143d6f017799 ......
checking 7dc7ec87feb4b926f8f7fc0cf7f86455b124b017 ......
	 orig commit -> 4491ed5042f0419b22a4b08331adb54af31e2caa ......
checking 97b23f9de12f36cd8f50201f4572bf80cdc6becf ......
	 orig commit -> 539587511835ea12d8daa444cbed766cf2bc3612 ......
checking cb68ec1ce547aef16a9f257ce025b2489c59f227 ......
	 orig commit -> bc337b51508beb2d039aff5074a76cfe1c212030 ......
checking 161427073a79db33d6a99223ce50a25386e27c21 ......
	 orig commit -> 2fdea258fde036a87d3396ec9c0ef66f10768530 ......
checking 1595854f53a0aac0835ac7b1e3cfc6e0e0153441 ......
	 orig commit -> 1d2d87e81ea21f64c19b95ef228b865a6880e17e ......
checking e0a9e843cad4aaacc1e806d0f57c69fae79c4197 ......
	 orig commit -> a0118c8b2be9297aed8e915c60b4013326b256d4 ......
checking 6722e247878e1a6ba99be420a062611d7b6361c5 ......
	 orig commit -> f3b0946d629c8bfbd3e5f038e30cb9c711a35f10 ......
		 f3b0946d629c8bfbd3e5f038e30cb9c711a35f10 has problem. Fixes commit -> 08d85f3ea99f1eeafc4e8507936190e86a16ee8c
checking fd59f98be0a7dcc668006e2d7efbf637c67f15fc ......
	 orig commit -> b6140914fd079e43ea75a53429b47128584f033a ......
checking fcdcf9773ea89860a14b31154592d37651c08202 ......
	 orig commit -> dad2232844073295c64e9cc2d734a0ade043e0f6 ......
checking 5f009361d67ddf6d8a26e5605f083e795d49c0f4 ......
	 orig commit -> 2324d15447a9db168b1f85e3feac635b1ff8edb8 ......
checking cd84d3158f21dca9dde35f6cfb51f31dc2f4bde9 ......
	 orig commit -> 8343c40d3de32ebfe8f48b043964e4ba0e7701f7 ......
checking a3043ecef71f5b880fe1b1d2aa77b3a896b86a0c ......
	 orig commit -> 6e1c7d6103fe7031035cec321307c6356809adf4 ......
checking 0bbe3343438ea9ffe661ff267e0fe35afb7c42cc ......
	 orig commit -> c2e771b02792d222cbcd9617fe71482a64f52647 ......
checking 6bd24be19f0c5cdeee8a0782d770b9fec23ac4a2 ......
	 orig commit -> 69874ec233871a62e1bc8c89e643993af93a8630 ......
checking 2d8ffbfa2d1ef639160798d2465d474917a735ee ......
	 orig commit -> 9f33a2ae59f24452c1076749deb615bccd435ca9 ......
checking 657170ec1fcdd8799230caac1aaf66e002ed198f ......
	 orig commit -> a755e169031dac9ebaed03302c4921687c271d62 ......
checking c7308f636b523f435725aa50286b0498084c36c0 ......
	 orig commit -> c20aecf6963d1273d8f6d61c042b4845441ca592 ......
checking d5537e988eeca346438116a37d6001d7e60d04a9 ......
checking bb404d159f78a89bcdb6b77c3daf23dd11a258a4 ......
	 orig commit -> a52ff34e5ec61749c62c6618b76a9d6dbecee450 ......
checking 47f972e0973cfddcafcb85b8284c76c85c7733b4 ......
	 orig commit -> 68202c9f0ad6e16ee806fbadbc5838d55fe5aa5c ......
checking 8f5b7e3f415c208962b3fe4308486c4484d37b9f ......
	 orig commit -> 3d918fb13abdbeca7947578f5d7e426eafad7f5e ......
checking b4ddd78fb95ea9da6ca317806681481fae2c6dfc ......
	 orig commit -> c8952a707556e04374d7b2fdb3a079d63ddf6f2f ......
checking fa54eea35b3882b18da94d932b78c519c3972bd8 ......
	 orig commit -> 58625edf9e2515ed41dac2a24fa8004030a87b87 ......
checking 9dddd02de0366eee747488e8b6829e265b3bf385 ......
	 orig commit -> 3eb53b20d7bd1374598cfb1feaa081fcac0e76cd ......
checking 4919b2a3b4a906869e0e2563028b5c4d47172a2e ......
	 orig commit -> 3146bc64d12377a74dbda12b96ea32da3774ae07 ......
checking 602857f223868365265e2d0f818b7bbbf31d48da ......
	 orig commit -> 41f5e3bdbf706a9e98194bf0c4b62a875c02f170 ......
checking 23d399881f32bb3dedb19d53ea7a1c3d816c6dc8 ......
	 orig commit -> 7627e40c66b5547e12b6c5673646ceea84797a74 ......
checking 93ed332bd4105e8af3e12e12fa510728147badfc ......
	 orig commit -> 949e9b827eb4736d96df520c67d07a54c64e99b8 ......
checking 94e88c12e0fed8f5f8c86769260f284f2a4ac798 ......
	 orig commit -> 9130b8dbc6ac20f2dc5846e1647f5b60eafab6e3 ......
		 9130b8dbc6ac20f2dc5846e1647f5b60eafab6e3 has problem. Fixes commit -> 1cded9d2974fe4fe339fc0ccd6638b80d465ab2c
commit 8dc821b9f67d9abf2d5baca3eb92a70d91c0dbe0
Author: NeilBrown <neilb@suse.com>
Date:   Mon Dec 5 15:10:11 2016 +1100

    SUNRPC: fix refcounting problems with auth_gss messages.
    
    commit 1cded9d2974fe4fe339fc0ccd6638b80d465ab2c upstream.
    
    There are two problems with refcounting of auth_gss messages.
    
    First, the reference on the pipe->pipe list (taken by a call
    to rpc_queue_upcall()) is not counted.  It seems to be
    assumed that a message in pipe->pipe will always also be in
    pipe->in_downcall, where it is correctly reference counted.
    
    However there is no guaranty of this.  I have a report of a
    NULL dereferences in rpc_pipe_read() which suggests a msg
    that has been freed is still on the pipe->pipe list.
    
    One way I imagine this might happen is:
    - message is queued for uid=U and auth->service=S1
    - rpc.gssd reads this message and starts processing.
      This removes the message from pipe->pipe
    - message is queued for uid=U and auth->service=S2
    - rpc.gssd replies to the first message. gss_pipe_downcall()
      calls __gss_find_upcall(pipe, U, NULL) and it finds the
      *second* message, as new messages are placed at the head
      of ->in_downcall, and the service type is not checked.
    - This second message is removed from ->in_downcall and freed
      by gss_release_msg() (even though it is still on pipe->pipe)
    - rpc.gssd tries to read another message, and dereferences a pointer
      to this message that has just been freed.
    
    I fix this by incrementing the reference count before calling
    rpc_queue_upcall(), and decrementing it if that fails, or normally in
    gss_pipe_destroy_msg().
    
    It seems strange that the reply doesn't target the message more
    precisely, but I don't know all the details.  In any case, I think the
    reference counting irregularity became a measureable bug when the
    extra arg was added to __gss_find_upcall(), hence the Fixes: line
    below.
    
    The second problem is that if rpc_queue_upcall() fails, the new
    message is not freed. gss_alloc_msg() set the ->count to 1,
    gss_add_msg() increments this to 2, gss_unhash_msg() decrements to 1,
    then the pointer is discarded so the memory never gets freed.
    
    Fixes: 9130b8dbc6ac ("SUNRPC: allow for upcalls for same uid but different gss service")
    Link: https://bugzilla.opensuse.org/show_bug.cgi?id=1011250
    Signed-off-by: NeilBrown <neilb@suse.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e3f2840dbab5996a1ab45cf071a68e72b39f3a9a ......
	 orig commit -> 1f4c17a03ba7f430d63dba8c8e08ff1e2712581d ......
checking b529544b0165e8b4bf2b6a9b32a7efa5eb4bdc99 ......
	 orig commit -> d8d378fa1a0c98ecb50ca52c9bf3bc14e25aa2d2 ......
checking 77b0e10991abb866b832a7caa470c95e7117befa ......
	 orig commit -> 68187872c76a96ed4db7bfb064272591f02e208b ......
checking ebabe4ad97125e061396869fb038fa434c57a22a ......
	 orig commit -> 5cf0791da5c162ebc14b01eb01631cfa7ed4fa6e ......
checking 8ef7c21dd8130e6ce469bbe2747fbc0a5d3e0488 ......
	 orig commit -> c17b1f42594eb71b8d3eb5a6dfc907a7eb88a51d ......

Check from v4.4.79 to v4.4.80
Commit count: 91
checking 09e69607e47ce9f422da4310c68d7a9b399d4f8c ......
checking 2f8e6140bb6ad439ec3e32e4bd4e06af9c3f43cd ......
	 orig commit -> 9f169b9f52a4afccdab7a7d2311b0c53a78a1e6b ......
checking 32b850a626c5cc2895826a856bc7872d3b04efe0 ......
	 orig commit -> 0371adcdaca92912baaa3256ed13e058a016e62d ......
checking 27eb77b5544ef30e9532bef984b637f9039f4e28 ......
	 orig commit -> 9698b6f473555a722bf81a3371998427d5d27bde ......
checking 0866aed4fa64da184e234000c664240c616a0966 ......
	 orig commit -> 08f9572671c8047e7234cbf150869aa3c3d59a97 ......
checking cab7c045f5fd2c269490c50469966e5fdff1aa53 ......
	 orig commit -> 13a6c8328e6056932dc680e447d4c5e8ad9add17 ......
checking 8ced91a2e920ec00394274a13e46e15305a82e9f ......
	 orig commit -> 71eae1ca77fd6be218d8a952d97bba827e56516d ......
checking fe1da3b785b3b188c7a8fc6ba81d69bc0bc5a0fb ......
	 orig commit -> 14ba972842f9e84e6d3264bc0302101b8a792288 ......
checking e76426857b3e6741a053910993f420804313e64b ......
	 orig commit -> 6ef4fb387d50fa8f3bffdffc868b57e981cdd709 ......
checking dc48ebe330636439198ac4645fb2ec001e38b4af ......
	 orig commit -> e19f32da5ded958238eac1bbe001192acef191a2 ......
checking 93794239c6b93622e722434bfb78b7780e6a790e ......
	 orig commit -> 4dcd19bfabaee8f9f4bcf203afba09b98ccbaf76 ......
checking 1286e959a59a5de214a2b812b67c40ea62106c1c ......
	 orig commit -> 7934c98a6e04028eb34c1293bfb5a6b0ab630b66 ......
checking cc8b62fce96bb532d919f4d141d6fcbbfc0bf19a ......
	 orig commit -> 30a9c6444810429aa2b7cbfbd453ce339baaadbf ......
checking ce9b76665ecdd7c292f460176b3e183b37263b74 ......
	 orig commit -> 4c86d77743a54fb2d8a4d18a037a074c892bb3be ......
checking 4b8adea2e3cd49d81fc5a45f7b10fc4f0a248187 ......
	 orig commit -> 074859184d770824f4437dca716bdeb625ae8b1c ......
checking 786fd31f6001c0f429797b10e8ff16838794fce2 ......
	 orig commit -> c2931667c83ded6504b3857e99cc45b21fa496fb ......
checking 7ea3cc440ec9f3c53fdc54f59248d19f2d29106c ......
	 orig commit -> 43aef5c2ca90535b3227e97e71604291875444ed ......
checking f4a42f8492bdca120e296348f615f8f8c0250a07 ......
	 orig commit -> c2a6bbaf0c5f90463a7011a295bbdb7e33c80b51 ......
		 c2a6bbaf0c5f90463a7011a295bbdb7e33c80b51 has problem. Fixes commit -> fdad4e7a876a2cb3d2c1f04e5418c324e79fffef
checking 8c065e76fbc5e962db614d4d2d1a8eda461ca9d5 ......
	 orig commit -> 3ef01c968fbfb21c2f16281445d30a865ee4412c ......
checking fcee67d7d6181f7b2f2fa4f91bb9232c2164bcd0 ......
	 orig commit -> c415f9e8304a1d235ef118d912f374ee2e46c45d ......
checking 4bd1d0b1a1704c6f5f73bb4ddef5881631ba33fc ......
	 orig commit -> 4ea2a6be9565455f152c12f80222af1582ede0c7 ......
checking a07d8c1318989f59c436c7af683e4f61e4d75967 ......
	 orig commit -> 75bdc7f31a3a6e9a12e218b31a44a1f54a91554c ......
checking 328a9cdcbab906014b154ef5adb81dfce8d57923 ......
	 orig commit -> 34a31f0af84158955a9747fb5c6712da5bbb5331 ......
checking 6c0d9f0212f8eb407930ce327d2de608a4a2792a ......
	 orig commit -> 1594c18fd297a8edcc72bc4b161f3f52603ebb92 ......
checking 65dab1d8af6c8b33d560cc56cb0f218d9be7c8ff ......
	 orig commit -> 086cc1c31a0ec075dac02425367c871bb65bc2c9 ......
checking 4c1ea6a51acdd9090effa9086df1b86354298cef ......
	 orig commit -> 88e20c74ee020f9e0c99dfce0dd9aa61c3f0cca0 ......
checking 1a734b39857e0321573e11b1d3f762f3551fb5a8 ......
	 orig commit -> a1792cda51300e15b03549cccf0b09f3be82e697 ......
checking 152684089ea39e38b17feb1dfb366bf3f2fb146a ......
	 orig commit -> 13288bdf4adbaa6bd1267f10044c1bc25d90ce7f ......
checking dc19e98eb86e37371a0c7817abd1f2a19480187c ......
	 orig commit -> 63c3194b82530bd71fd49db84eb7ab656b8d404a ......
checking fc6c41f0b921a7c6a8b4a14f63b0e22df9bc06de ......
	 orig commit -> 2f884e6e688a0deb69e6c9552e51aef8b7e3f5f1 ......
checking 1704a969506259e6e363b6416f16e93a89e472fd ......
	 orig commit -> 45e869714489431625c569d21fc952428d761476 ......
checking 7de922c14e838c46b3ce3ff4719bbb82ee307e8d ......
	 orig commit -> a6cb3b864b21b7345f824a4faa12b723c8aaf099 ......
checking b54e58ccceb794176b37037e76df3a7ed876b360 ......
	 orig commit -> 88b333b0ed790f9433ff542b163bf972953b74d3 ......
checking cbc80312fd7089c155bd3de373591e5e27832716 ......
	 orig commit -> c1d5f8ff80ea84768f5fae1ca9d1abfbb5e6bbaa ......
checking 3865040045044c4d995819abca3d1ade511b69a6 ......
	 orig commit -> e4c5e13aa45c23692e4acf56f0b3533f328199b2 ......
		 e4c5e13aa45c23692e4acf56f0b3533f328199b2 has problem. Fixes commit -> a5cb659bbc1c8644efa0c3138a757a1e432a4880
commit 0c787041504edd1739a5f8bd04bdd36b8fcb093c
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Mon Jun 19 13:03:43 2017 +0200

    net: account for current skb length when deciding about UFO
    
    
    [ Upstream commit a5cb659bbc1c8644efa0c3138a757a1e432a4880 ]
    
    Our customer encountered stuck NFS writes for blocks starting at specific
    offsets w.r.t. page boundary caused by networking stack sending packets via
    UFO enabled device with wrong checksum. The problem can be reproduced by
    composing a long UDP datagram from multiple parts using MSG_MORE flag:
    
      sendto(sd, buff, 1000, MSG_MORE, ...);
      sendto(sd, buff, 1000, MSG_MORE, ...);
      sendto(sd, buff, 3000, 0, ...);
    
    Assume this packet is to be routed via a device with MTU 1500 and
    NETIF_F_UFO enabled. When second sendto() gets into __ip_append_data(),
    this condition is tested (among others) to decide whether to call
    ip_ufo_append_data():
    
      ((length + fragheaderlen) > mtu) || (skb && skb_is_gso(skb))
    
    At the moment, we already have skb with 1028 bytes of data which is not
    marked for GSO so that the test is false (fragheaderlen is usually 20).
    Thus we append second 1000 bytes to this skb without invoking UFO. Third
    sendto(), however, has sufficient length to trigger the UFO path so that we
    end up with non-UFO skb followed by a UFO one. Later on, udp_send_skb()
    uses udp_csum() to calculate the checksum but that assumes all fragments
    have correct checksum in skb->csum which is not true for UFO fragments.
    
    When checking against MTU, we need to add skb->len to length of new segment
    if we already have a partially filled skb and fragheaderlen only if there
    isn't one.
    
    In the IPv6 case, skb can only be null if this is the first segment so that
    we have to use headersize (length of the first IPv6 header) rather than
    fragheaderlen (length of IPv6 header of further fragments) for skb == NULL.
    
    Fixes: e89e9cf539a2 ("[IPv4/IPv6]: UFO Scatter-gather approach")
    Fixes: e4c5e13aa45c ("ipv6: Should use consistent conditional judgement for
            ip6 fragment between __ip6_append_data and ip6_finish_output")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Acked-by: Vlad Yasevich <vyasevic@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit fab61468402b5189bb843cff96066693d03a716b
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Mon Jun 19 13:03:43 2017 +0200

    net: account for current skb length when deciding about UFO
    
    commit a5cb659bbc1c8644efa0c3138a757a1e432a4880 upstream.
    
    Our customer encountered stuck NFS writes for blocks starting at specific
    offsets w.r.t. page boundary caused by networking stack sending packets via
    UFO enabled device with wrong checksum. The problem can be reproduced by
    composing a long UDP datagram from multiple parts using MSG_MORE flag:
    
      sendto(sd, buff, 1000, MSG_MORE, ...);
      sendto(sd, buff, 1000, MSG_MORE, ...);
      sendto(sd, buff, 3000, 0, ...);
    
    Assume this packet is to be routed via a device with MTU 1500 and
    NETIF_F_UFO enabled. When second sendto() gets into __ip_append_data(),
    this condition is tested (among others) to decide whether to call
    ip_ufo_append_data():
    
      ((length + fragheaderlen) > mtu) || (skb && skb_is_gso(skb))
    
    At the moment, we already have skb with 1028 bytes of data which is not
    marked for GSO so that the test is false (fragheaderlen is usually 20).
    Thus we append second 1000 bytes to this skb without invoking UFO. Third
    sendto(), however, has sufficient length to trigger the UFO path so that we
    end up with non-UFO skb followed by a UFO one. Later on, udp_send_skb()
    uses udp_csum() to calculate the checksum but that assumes all fragments
    have correct checksum in skb->csum which is not true for UFO fragments.
    
    When checking against MTU, we need to add skb->len to length of new segment
    if we already have a partially filled skb and fragheaderlen only if there
    isn't one.
    
    In the IPv6 case, skb can only be null if this is the first segment so that
    we have to use headersize (length of the first IPv6 header) rather than
    fragheaderlen (length of IPv6 header of further fragments) for skb == NULL.
    
    Fixes: e89e9cf539a2 ("[IPv4/IPv6]: UFO Scatter-gather approach")
    Fixes: e4c5e13aa45c ("ipv6: Should use consistent conditional judgement for
            ip6 fragment between __ip6_append_data and ip6_finish_output")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Acked-by: Vlad Yasevich <vyasevic@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54fc0c32307d6805304858be92994b76a0b5b0d6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 11 09:14:09 2017 -0700

    revert "net: account for current skb length when deciding about UFO"
    
    This reverts commit ef09c9ff343122a0b245416066992d096416ff19 which is
    commit a5cb659bbc1c8644efa0c3138a757a1e432a4880 upstream as it causes
    merge issues with later patches that are much more important...
    
    Cc: Michal Kubecek <mkubecek@suse.cz>
    Cc: Vlad Yasevich <vyasevic@redhat.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ed3e4a43533952f642a1551ba8af830b8977309a ......
	 orig commit -> 4cf48f1d7520a4d325af58eded4d8090e1b40be7 ......
checking 7cff0699f47e04f8a2a88fad3712de11ff3e8841 ......
	 orig commit -> 610c908773d30907c950ca3b2ee8ac4b2813537b ......
checking 6b99f1a84d5cc3215668e524ab2016d49d78772c ......
	 orig commit -> 0dad3a3014a0b9e72521ff44f17e0054f43dcdea ......
checking f7e0f7f86ce0cf83e3e352399eec5d3b23566824 ......
	 orig commit -> 15516788e581eb32ec1c50e5f00aba3faf95d817 ......
checking 7e789223932762e1e7ffdb63f3fd1b42dbeeb789 ......
	 orig commit -> 13b47cfcfc60495cde216eef4c01040d76174cbe ......
checking 366f50133bb66bb368fb933c90f2dd2b07d35162 ......
	 orig commit -> a24fa22ce22ae302b3bf8f7008896d52d5d57b8d ......
checking 53f5772477388e2b1eea839c913ad1e1f7506234 ......
	 orig commit -> 71df1d7ccad1c36f7321d6b3b48f2ea42681c363 ......
checking 62208707b466cc3c6ce951a7c4b7b4bb9b9192f6 ......
	 orig commit -> 3d89e5478bf550a50c99e93adf659369798263b0 ......
checking fa57125e8ec40cdb00607b9e4a1dca2a30612084 ......
	 orig commit -> 6e7bc478c9a006c701c14476ec9d389a484b4864 ......
checking fa7773191046237079dd88ac89b527bb4138aaea ......
	 orig commit -> e9a330c4289f2ba1ca4bf98c2b430ab165a8931b ......
checking 9ece74e1006e1706a7c239fd158f93f126c04c2e ......
	 orig commit -> 76d5692a58031696e282384cbd893832bc92bd76 ......
		 76d5692a58031696e282384cbd893832bc92bd76 has problem. Fixes commit -> e9a330c4289f2ba1ca4bf98c2b430ab165a8931b
commit fa7773191046237079dd88ac89b527bb4138aaea
Author: Kees Cook <keescook@chromium.org>
Date:   Sun Mar 5 22:08:58 2017 -0800

    pstore: Use dynamic spinlock initializer
    
    commit e9a330c4289f2ba1ca4bf98c2b430ab165a8931b upstream.
    
    The per-prz spinlock should be using the dynamic initializer so that
    lockdep can correctly track it. Without this, under lockdep, we get a
    warning at boot that the lock is in non-static memory.
    
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Fixes: 76d5692a5803 ("pstore: Correctly initialize spinlock and flags")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking aca5b1e3c5b7e73f20b686ca712cb4cf9fccb219 ......
	 orig commit -> 663deb47880f2283809669563c5a52ac7c6aef1a ......
		 663deb47880f2283809669563c5a52ac7c6aef1a has problem. Fixes commit -> 76d5692a58031696e282384cbd893832bc92bd76
commit 9ece74e1006e1706a7c239fd158f93f126c04c2e
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Feb 9 15:43:44 2017 -0800

    pstore: Correctly initialize spinlock and flags
    
    commit 76d5692a58031696e282384cbd893832bc92bd76 upstream.
    
    The ram backend wasn't always initializing its spinlock correctly. Since
    it was coming from kzalloc memory, though, it was harmless on
    architectures that initialize unlocked spinlocks to 0 (at least x86 and
    ARM). This also fixes a possibly ignored flag setting too.
    
    When running under CONFIG_DEBUG_SPINLOCK, the following Oops was visible:
    
    [    0.760836] persistent_ram: found existing buffer, size 29988, start 29988
    [    0.765112] persistent_ram: found existing buffer, size 30105, start 30105
    [    0.769435] persistent_ram: found existing buffer, size 118542, start 118542
    [    0.785960] persistent_ram: found existing buffer, size 0, start 0
    [    0.786098] persistent_ram: found existing buffer, size 0, start 0
    [    0.786131] pstore: using zlib compression
    [    0.790716] BUG: spinlock bad magic on CPU#0, swapper/0/1
    [    0.790729]  lock: 0xffffffc0d1ca9bb0, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
    [    0.790742] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc2+ #913
    [    0.790747] Hardware name: Google Kevin (DT)
    [    0.790750] Call trace:
    [    0.790768] [<ffffff900808ae88>] dump_backtrace+0x0/0x2bc
    [    0.790780] [<ffffff900808b164>] show_stack+0x20/0x28
    [    0.790794] [<ffffff9008460ee0>] dump_stack+0xa4/0xcc
    [    0.790809] [<ffffff9008113cfc>] spin_dump+0xe0/0xf0
    [    0.790821] [<ffffff9008113d3c>] spin_bug+0x30/0x3c
    [    0.790834] [<ffffff9008113e28>] do_raw_spin_lock+0x50/0x1b8
    [    0.790846] [<ffffff9008a2d2ec>] _raw_spin_lock_irqsave+0x54/0x6c
    [    0.790862] [<ffffff90083ac3b4>] buffer_size_add+0x48/0xcc
    [    0.790875] [<ffffff90083acb34>] persistent_ram_write+0x60/0x11c
    [    0.790888] [<ffffff90083aab1c>] ramoops_pstore_write_buf+0xd4/0x2a4
    [    0.790900] [<ffffff90083a9d3c>] pstore_console_write+0xf0/0x134
    [    0.790912] [<ffffff900811c304>] console_unlock+0x48c/0x5e8
    [    0.790923] [<ffffff900811da18>] register_console+0x3b0/0x4d4
    [    0.790935] [<ffffff90083aa7d0>] pstore_register+0x1a8/0x234
    [    0.790947] [<ffffff90083ac250>] ramoops_probe+0x6b8/0x7d4
    [    0.790961] [<ffffff90085ca548>] platform_drv_probe+0x7c/0xd0
    [    0.790972] [<ffffff90085c76ac>] driver_probe_device+0x1b4/0x3bc
    [    0.790982] [<ffffff90085c7ac8>] __device_attach_driver+0xc8/0xf4
    [    0.790996] [<ffffff90085c4bfc>] bus_for_each_drv+0xb4/0xe4
    [    0.791006] [<ffffff90085c7414>] __device_attach+0xd0/0x158
    [    0.791016] [<ffffff90085c7b18>] device_initial_probe+0x24/0x30
    [    0.791026] [<ffffff90085c648c>] bus_probe_device+0x50/0xe4
    [    0.791038] [<ffffff90085c35b8>] device_add+0x3a4/0x76c
    [    0.791051] [<ffffff90087d0e84>] of_device_add+0x74/0x84
    [    0.791062] [<ffffff90087d19b8>] of_platform_device_create_pdata+0xc0/0x100
    [    0.791073] [<ffffff90087d1a2c>] of_platform_device_create+0x34/0x40
    [    0.791086] [<ffffff900903c910>] of_platform_default_populate_init+0x58/0x78
    [    0.791097] [<ffffff90080831fc>] do_one_initcall+0x88/0x160
    [    0.791109] [<ffffff90090010ac>] kernel_init_freeable+0x264/0x31c
    [    0.791123] [<ffffff9008a25bd0>] kernel_init+0x18/0x11c
    [    0.791133] [<ffffff9008082ec0>] ret_from_fork+0x10/0x50
    [    0.793717] console [pstore-1] enabled
    [    0.797845] pstore: Registered ramoops as persistent store backend
    [    0.804647] ramoops: attached 0x100000@0xf7edc000, ecc: 0/0
    
    Fixes: 663deb47880f ("pstore: Allow prz to control need for locking")
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Reported-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ff013a624258e868d37ec75bad5c9afe5a63a91a ......
	 orig commit -> 308453aa9156a3b8ee382c0949befb507a32b0c1 ......
checking e8aff60373182f48f5191b147894e954a591a521 ......
	 orig commit -> 51d7b120418e99d6b3bf8df9eb3cc31e8171dee4 ......
checking 14ae9c4b5ae235bdaa74bb1c40de9a42ca691566 ......
	 orig commit -> 34dbbcdbf63360661ff7bda6c5f52f99ac515f92 ......
checking b3ddb091c77fae247b98b167e306da5b768ad612 ......
	 orig commit -> a2370ba2752538404e363346b339869c9973aeac ......
checking 407669f2c9fe9f32aeb39f715d748fe456718aac ......
	 orig commit -> 49d31c2f389acfe83417083e1208422b4091cd9e ......
checking 9909e61c100621792be24cc255253cf8352ed925 ......
	 orig commit -> 860f01e96981a68553f3ca49f574ff14fe955e72 ......
checking 81845c2f61bf7520bd6a08a7aa571bfe46698b83 ......
	 orig commit -> c13c43d54f2c6a3be1c675766778ac1ad8dfbfcc ......
checking c4af40a7218ef2aeb82572cb4448a66b63829ac8 ......
	 orig commit -> 5a7a88f1b488e4ee49eb3d5b82612d4d9ffdf2c3 ......
checking c7ca61734ba7241d1e6f4d516d6cbc1cb82417bc ......
	 orig commit -> 975e83cfb8dc16e7a2fdc58188c77c0c605876c2 ......
checking 0e0967e26241147e43723be660f64a291c2f5f27 ......
	 orig commit -> 96b777452d8881480fd5be50112f791c17db4b6b ......
checking 9402c626670435ff573c517f7221a367facae44a ......
	 orig commit -> 575ced7f8090c1a4e91e2daf8da9352a6a1fc7a7 ......
checking 19ba0e65d60b2859c6c55ff16a4637d2158d708b ......
	 orig commit -> 60bcabd080f53561efa9288be45c128feda1a8bb ......
checking 658f9c65ee8ce70662b8301291310ba12b0dac7a ......
	 orig commit -> 5ec8a1753bc29efa7e4b1391d691c9c719b30257 ......
checking 63c9c49c04a174b5cb05814ea3883afb6454f0d7 ......
	 orig commit -> cb710ab1d8a23f68ff8f45aedf3e552bb90e70de ......
checking 21ab579fbae675905fccfd08386663b561a7ff41 ......
	 orig commit -> cc6eeaa3029a6dbcb4ad41b1f92876483bd88965 ......
checking 686494443dd3189cd17cba43c2d1d54ce3e77152 ......
	 orig commit -> c61b781ee084e69855477d23dd33e7e6caad652c ......
checking 461b44fdf02f17bc98480a521dd754d016f19f67 ......
	 orig commit -> dfb5b098e0f40b68aa07f2ec55f4dd762efefbfa ......
checking 91cc7296913720b86e4bb8d226ea1469d9fd83e5 ......
	 orig commit -> 18ae68fff392e445af3c2d8be9bef8a16e1c72a7 ......
checking d4b159f14d612132fdb1ade6d5015ee03a263e62 ......
	 orig commit -> 9f5af546e6acc30f075828cb58c7f09665033967 ......
checking 633763ed93c493863f45455dfc50daaa602b386e ......
	 orig commit -> e8f4ae85439f34bec3b0ab69223a41809dab28c9 ......
checking 71a165f6397df07a06ce643de5c2dbae29bd3cfb ......
	 orig commit -> 0878fff1f42c18e448ab5b8b4f6a3eb32365b5b6 ......
checking 8335b312c7cc3653a6808e3041d76a50b3935a01 ......
	 orig commit -> b6355fb3f5f40bbce165847d277e64896cab8f95 ......
checking 56548b6f505a6df1c43dcb151a18d6190c250ed6 ......
	 orig commit -> 04197b341f23b908193308b8d63d17ff23232598 ......
checking eb0760deee89b70d5ae919083337d06cde439ef2 ......
	 orig commit -> f952eaceb089b691eba7c4e13686e742a8f26bf5 ......
checking 0ce32f8944c64695a0c565a8069f10c9206baa6f ......
	 orig commit -> 622b7a47b843c78626f40c1d1aeef8483383fba2 ......
checking 33f3bc42fc2357625b60f1d0580bed8207bcfbab ......
	 orig commit -> ee14ac0ef6827cd6f9a572cc83dd0191ea17812c ......
checking 01ac8afc6c8f87da7b61fc8047a356c8cc03b5a8 ......
	 orig commit -> e1717e0485af4f47fc4da1e979ac817f9ad61b0f ......
checking 8255d26322a38fbf677161931d47f3a6a11b38a8 ......
	 orig commit -> 4f7b0d263833928e947e172eff2d2997179c5cb9 ......
checking 5ec9d83b2b541c24b8136be78bb681a5fb2a218c ......
	 orig commit -> c1d4b38c93069dca6b419a3b88907e01e2c3abf7 ......
checking 0354df9578b4f8ac374f8ba9fea29e087844ecfd ......
	 orig commit -> 0a346629f5304a8390004a91e8d4f1206b87792b ......
checking b5a48676e7a2ee4ea0e2e02ce60ab2d0151916e0 ......
	 orig commit -> bf279ece37d2a3eaaa9813fcd7a1d8a81eb29c20 ......
checking 0c335d55cee6c632008a1b0cf34c2d12d3ee14e7 ......
	 orig commit -> 8c92870bdbf20b5fa5150a2c8bf53ab498516b24 ......
	 orig commit -> ba4a648f12f4cd0a8003dd229b6ca8a53348ee4b ......
checking fcd35f5a3f850a5644bf1759e85d0811dfe4d6d2 ......
	 orig commit -> 7ceaa6dcd8c6f59588428cec37f3c8093dd1011f ......
checking 17d381054b1d6f4adc3db623b2066fff41b4dc1a ......
checking f5b29db247d4b16a165903a1b29a0a5dbc9aa41c ......
	 orig commit -> 4c3bb4ccd074e1a0552078c0bf94c662367a1658 ......
checking 339fa4af4133f0b7972029fb99aa96ecedee12ef ......
	 orig commit -> ca8efa1df1d15a1795a2da57f9f6aada6ed6b946 ......
checking 29da136fbbd978a8bd6f11d5b0a522c54456cb01 ......
	 orig commit -> 38bcb208f60924a031b9f809f7cd252ea4a94e5f ......
checking fde885f19986a53c2e14147cf111907ca34e74d5 ......
	 orig commit -> fcfffdd8f98ac305285dca568b5065ef86be6458 ......
checking 376830c340eca3f6c2f872a50b90afc0ebf88c72 ......
	 orig commit -> 7e96d559634b73a8158ee99a7abece2eacec2668 ......
checking 2148e9ab0cac6fc4ef6a8eadd5e9fdba32255187 ......
	 orig commit -> 41cdf7a45389e01991ee31e3301ed83cb3e3f7dc ......
checking c4efb7434a2ac4dfc26568e09e9b8fe91160834b ......
	 orig commit -> 4fd1bd443e80b12f0a01a45fb9a793206b41cb72 ......
checking fdbcb81b5a319dd3e34105a2793c1189bdbfa646 ......
	 orig commit -> b2504a5dbef3305ef41988ad270b0e8ec289331c ......
		 b2504a5dbef3305ef41988ad270b0e8ec289331c has problem. Fixes commit -> 8d63bee643f1fb53e472f0e135cae4eb99d62d19
6e7bc478c9a006c701c14476ec9d389a484b4864
commit 37d5c6e8d38d674b1c25741fdf033f7f00b5ed5f
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Aug 8 14:22:55 2017 -0400

    net: avoid skb_warn_bad_offload false positives on UFO
    
    
    [ Upstream commit 8d63bee643f1fb53e472f0e135cae4eb99d62d19 ]
    
    skb_warn_bad_offload triggers a warning when an skb enters the GSO
    stack at __skb_gso_segment that does not have CHECKSUM_PARTIAL
    checksum offload set.
    
    Commit b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    observed that SKB_GSO_DODGY producers can trigger the check and
    that passing those packets through the GSO handlers will fix it
    up. But, the software UFO handler will set ip_summed to
    CHECKSUM_NONE.
    
    When __skb_gso_segment is called from the receive path, this
    triggers the warning again.
    
    Make UFO set CHECKSUM_UNNECESSARY instead of CHECKSUM_NONE. On
    Tx these two are equivalent. On Rx, this better matches the
    skb state (checksum computed), as CHECKSUM_NONE here means no
    checksum computed.
    
    See also this thread for context:
    http://patchwork.ozlabs.org/patch/799015/
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa57125e8ec40cdb00607b9e4a1dca2a30612084
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Feb 3 14:29:42 2017 -0800

    net: skb_needs_check() accepts CHECKSUM_NONE for tx
    
    commit 6e7bc478c9a006c701c14476ec9d389a484b4864 upstream.
    
    My recent change missed fact that UFO would perform a complete
    UDP checksum before segmenting in frags.
    
    In this case skb->ip_summed is set to CHECKSUM_NONE.
    
    We need to add this valid case to skb_needs_check()
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 37d5c6e8d38d674b1c25741fdf033f7f00b5ed5f
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Aug 8 14:22:55 2017 -0400

    net: avoid skb_warn_bad_offload false positives on UFO
    
    
    [ Upstream commit 8d63bee643f1fb53e472f0e135cae4eb99d62d19 ]
    
    skb_warn_bad_offload triggers a warning when an skb enters the GSO
    stack at __skb_gso_segment that does not have CHECKSUM_PARTIAL
    checksum offload set.
    
    Commit b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    observed that SKB_GSO_DODGY producers can trigger the check and
    that passing those packets through the GSO handlers will fix it
    up. But, the software UFO handler will set ip_summed to
    CHECKSUM_NONE.
    
    When __skb_gso_segment is called from the receive path, this
    triggers the warning again.
    
    Make UFO set CHECKSUM_UNNECESSARY instead of CHECKSUM_NONE. On
    Tx these two are equivalent. On Rx, this better matches the
    skb state (checksum computed), as CHECKSUM_NONE here means no
    checksum computed.
    
    See also this thread for context:
    http://patchwork.ozlabs.org/patch/799015/
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa57125e8ec40cdb00607b9e4a1dca2a30612084
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Feb 3 14:29:42 2017 -0800

    net: skb_needs_check() accepts CHECKSUM_NONE for tx
    
    commit 6e7bc478c9a006c701c14476ec9d389a484b4864 upstream.
    
    My recent change missed fact that UFO would perform a complete
    UDP checksum before segmenting in frags.
    
    In this case skb->ip_summed is set to CHECKSUM_NONE.
    
    We need to add this valid case to skb_needs_check()
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 08408f7ae5cdc7b8ef439f29b8d3dff9f1389c25 ......
	 orig commit -> 109704492ef637956265ec2eb72ae7b3b39eb6f4 ......
		 109704492ef637956265ec2eb72ae7b3b39eb6f4 has problem. Fixes commit -> e9a330c4289f2ba1ca4bf98c2b430ab165a8931b
76d5692a58031696e282384cbd893832bc92bd76
commit 9ece74e1006e1706a7c239fd158f93f126c04c2e
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Feb 9 15:43:44 2017 -0800

    pstore: Correctly initialize spinlock and flags
    
    commit 76d5692a58031696e282384cbd893832bc92bd76 upstream.
    
    The ram backend wasn't always initializing its spinlock correctly. Since
    it was coming from kzalloc memory, though, it was harmless on
    architectures that initialize unlocked spinlocks to 0 (at least x86 and
    ARM). This also fixes a possibly ignored flag setting too.
    
    When running under CONFIG_DEBUG_SPINLOCK, the following Oops was visible:
    
    [    0.760836] persistent_ram: found existing buffer, size 29988, start 29988
    [    0.765112] persistent_ram: found existing buffer, size 30105, start 30105
    [    0.769435] persistent_ram: found existing buffer, size 118542, start 118542
    [    0.785960] persistent_ram: found existing buffer, size 0, start 0
    [    0.786098] persistent_ram: found existing buffer, size 0, start 0
    [    0.786131] pstore: using zlib compression
    [    0.790716] BUG: spinlock bad magic on CPU#0, swapper/0/1
    [    0.790729]  lock: 0xffffffc0d1ca9bb0, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
    [    0.790742] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc2+ #913
    [    0.790747] Hardware name: Google Kevin (DT)
    [    0.790750] Call trace:
    [    0.790768] [<ffffff900808ae88>] dump_backtrace+0x0/0x2bc
    [    0.790780] [<ffffff900808b164>] show_stack+0x20/0x28
    [    0.790794] [<ffffff9008460ee0>] dump_stack+0xa4/0xcc
    [    0.790809] [<ffffff9008113cfc>] spin_dump+0xe0/0xf0
    [    0.790821] [<ffffff9008113d3c>] spin_bug+0x30/0x3c
    [    0.790834] [<ffffff9008113e28>] do_raw_spin_lock+0x50/0x1b8
    [    0.790846] [<ffffff9008a2d2ec>] _raw_spin_lock_irqsave+0x54/0x6c
    [    0.790862] [<ffffff90083ac3b4>] buffer_size_add+0x48/0xcc
    [    0.790875] [<ffffff90083acb34>] persistent_ram_write+0x60/0x11c
    [    0.790888] [<ffffff90083aab1c>] ramoops_pstore_write_buf+0xd4/0x2a4
    [    0.790900] [<ffffff90083a9d3c>] pstore_console_write+0xf0/0x134
    [    0.790912] [<ffffff900811c304>] console_unlock+0x48c/0x5e8
    [    0.790923] [<ffffff900811da18>] register_console+0x3b0/0x4d4
    [    0.790935] [<ffffff90083aa7d0>] pstore_register+0x1a8/0x234
    [    0.790947] [<ffffff90083ac250>] ramoops_probe+0x6b8/0x7d4
    [    0.790961] [<ffffff90085ca548>] platform_drv_probe+0x7c/0xd0
    [    0.790972] [<ffffff90085c76ac>] driver_probe_device+0x1b4/0x3bc
    [    0.790982] [<ffffff90085c7ac8>] __device_attach_driver+0xc8/0xf4
    [    0.790996] [<ffffff90085c4bfc>] bus_for_each_drv+0xb4/0xe4
    [    0.791006] [<ffffff90085c7414>] __device_attach+0xd0/0x158
    [    0.791016] [<ffffff90085c7b18>] device_initial_probe+0x24/0x30
    [    0.791026] [<ffffff90085c648c>] bus_probe_device+0x50/0xe4
    [    0.791038] [<ffffff90085c35b8>] device_add+0x3a4/0x76c
    [    0.791051] [<ffffff90087d0e84>] of_device_add+0x74/0x84
    [    0.791062] [<ffffff90087d19b8>] of_platform_device_create_pdata+0xc0/0x100
    [    0.791073] [<ffffff90087d1a2c>] of_platform_device_create+0x34/0x40
    [    0.791086] [<ffffff900903c910>] of_platform_default_populate_init+0x58/0x78
    [    0.791097] [<ffffff90080831fc>] do_one_initcall+0x88/0x160
    [    0.791109] [<ffffff90090010ac>] kernel_init_freeable+0x264/0x31c
    [    0.791123] [<ffffff9008a25bd0>] kernel_init+0x18/0x11c
    [    0.791133] [<ffffff9008082ec0>] ret_from_fork+0x10/0x50
    [    0.793717] console [pstore-1] enabled
    [    0.797845] pstore: Registered ramoops as persistent store backend
    [    0.804647] ramoops: attached 0x100000@0xf7edc000, ecc: 0/0
    
    Fixes: 663deb47880f ("pstore: Allow prz to control need for locking")
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Reported-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit fa7773191046237079dd88ac89b527bb4138aaea
Author: Kees Cook <keescook@chromium.org>
Date:   Sun Mar 5 22:08:58 2017 -0800

    pstore: Use dynamic spinlock initializer
    
    commit e9a330c4289f2ba1ca4bf98c2b430ab165a8931b upstream.
    
    The per-prz spinlock should be using the dynamic initializer so that
    lockdep can correctly track it. Without this, under lockdep, we get a
    warning at boot that the lock is in non-static memory.
    
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Fixes: 76d5692a5803 ("pstore: Correctly initialize spinlock and flags")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ece74e1006e1706a7c239fd158f93f126c04c2e
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Feb 9 15:43:44 2017 -0800

    pstore: Correctly initialize spinlock and flags
    
    commit 76d5692a58031696e282384cbd893832bc92bd76 upstream.
    
    The ram backend wasn't always initializing its spinlock correctly. Since
    it was coming from kzalloc memory, though, it was harmless on
    architectures that initialize unlocked spinlocks to 0 (at least x86 and
    ARM). This also fixes a possibly ignored flag setting too.
    
    When running under CONFIG_DEBUG_SPINLOCK, the following Oops was visible:
    
    [    0.760836] persistent_ram: found existing buffer, size 29988, start 29988
    [    0.765112] persistent_ram: found existing buffer, size 30105, start 30105
    [    0.769435] persistent_ram: found existing buffer, size 118542, start 118542
    [    0.785960] persistent_ram: found existing buffer, size 0, start 0
    [    0.786098] persistent_ram: found existing buffer, size 0, start 0
    [    0.786131] pstore: using zlib compression
    [    0.790716] BUG: spinlock bad magic on CPU#0, swapper/0/1
    [    0.790729]  lock: 0xffffffc0d1ca9bb0, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
    [    0.790742] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc2+ #913
    [    0.790747] Hardware name: Google Kevin (DT)
    [    0.790750] Call trace:
    [    0.790768] [<ffffff900808ae88>] dump_backtrace+0x0/0x2bc
    [    0.790780] [<ffffff900808b164>] show_stack+0x20/0x28
    [    0.790794] [<ffffff9008460ee0>] dump_stack+0xa4/0xcc
    [    0.790809] [<ffffff9008113cfc>] spin_dump+0xe0/0xf0
    [    0.790821] [<ffffff9008113d3c>] spin_bug+0x30/0x3c
    [    0.790834] [<ffffff9008113e28>] do_raw_spin_lock+0x50/0x1b8
    [    0.790846] [<ffffff9008a2d2ec>] _raw_spin_lock_irqsave+0x54/0x6c
    [    0.790862] [<ffffff90083ac3b4>] buffer_size_add+0x48/0xcc
    [    0.790875] [<ffffff90083acb34>] persistent_ram_write+0x60/0x11c
    [    0.790888] [<ffffff90083aab1c>] ramoops_pstore_write_buf+0xd4/0x2a4
    [    0.790900] [<ffffff90083a9d3c>] pstore_console_write+0xf0/0x134
    [    0.790912] [<ffffff900811c304>] console_unlock+0x48c/0x5e8
    [    0.790923] [<ffffff900811da18>] register_console+0x3b0/0x4d4
    [    0.790935] [<ffffff90083aa7d0>] pstore_register+0x1a8/0x234
    [    0.790947] [<ffffff90083ac250>] ramoops_probe+0x6b8/0x7d4
    [    0.790961] [<ffffff90085ca548>] platform_drv_probe+0x7c/0xd0
    [    0.790972] [<ffffff90085c76ac>] driver_probe_device+0x1b4/0x3bc
    [    0.790982] [<ffffff90085c7ac8>] __device_attach_driver+0xc8/0xf4
    [    0.790996] [<ffffff90085c4bfc>] bus_for_each_drv+0xb4/0xe4
    [    0.791006] [<ffffff90085c7414>] __device_attach+0xd0/0x158
    [    0.791016] [<ffffff90085c7b18>] device_initial_probe+0x24/0x30
    [    0.791026] [<ffffff90085c648c>] bus_probe_device+0x50/0xe4
    [    0.791038] [<ffffff90085c35b8>] device_add+0x3a4/0x76c
    [    0.791051] [<ffffff90087d0e84>] of_device_add+0x74/0x84
    [    0.791062] [<ffffff90087d19b8>] of_platform_device_create_pdata+0xc0/0x100
    [    0.791073] [<ffffff90087d1a2c>] of_platform_device_create+0x34/0x40
    [    0.791086] [<ffffff900903c910>] of_platform_default_populate_init+0x58/0x78
    [    0.791097] [<ffffff90080831fc>] do_one_initcall+0x88/0x160
    [    0.791109] [<ffffff90090010ac>] kernel_init_freeable+0x264/0x31c
    [    0.791123] [<ffffff9008a25bd0>] kernel_init+0x18/0x11c
    [    0.791133] [<ffffff9008082ec0>] ret_from_fork+0x10/0x50
    [    0.793717] console [pstore-1] enabled
    [    0.797845] pstore: Registered ramoops as persistent store backend
    [    0.804647] ramoops: attached 0x100000@0xf7edc000, ecc: 0/0
    
    Fixes: 663deb47880f ("pstore: Allow prz to control need for locking")
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Reported-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b627f60019489332a47ae9028c4891b4ed563f23 ......
	 orig commit -> 89e357d83c06b6fac581c3ca7f0ee3ae7e67109e ......

Check from v4.4.129 to v4.4.130
Commit count: 51
checking 34a220d573fcb5d66ad466611eb80f65b6af98d4 ......
checking 36773797e9b466bcbe5a7672f5e4cbdba3e8ae15 ......
	 orig commit -> 783c3b53b9506db3e05daacfe34e0287eebb09d8 ......
checking 58f1678c43f2270092406518711bebb9f40a7854 ......
	 orig commit -> af2e460ade0b0180d0f3812ca4f4f59cc9597f3e ......
checking e47611257d7b46bfdc70726a8a236881180cf990 ......
	 orig commit -> 9de4ee40547fd315d4a0ed1dd15a2fa3559ad707 ......
checking f0ffbef2003775400c14108ee38acbf69e611767 ......
	 orig commit -> 94e5395d2403c8bc2504a7cbe4c4caaacb7b8b84 ......
checking b1785e844a02e770d3cb7458a6f15d2e7c1f927b ......
	 orig commit -> aa8f8778493c85fff480cdf8b349b1e1dcb5f243 ......
checking ab3828313863194e445d439ce7eae65563b774bd ......
	 orig commit -> 5171b37d959641bbc619781caf62e61f7b940871 ......
checking 8be2d38bb3579b3da34ff326e6c87e4cb0b740f4 ......
	 orig commit -> 7212303268918b9a203aebeacfdbd83b5e87b20d ......
checking 0eb338b22c800e27af7dc60812d82b76a27d1514 ......
	 orig commit -> 53b76cdf7e8fecec1d09e38aad2f8579882591a8 ......
checking 761b54e09947ac15b0d688ab3ecf430c890b6bfe ......
	 orig commit -> ec518f21cb1a1b1f8a516499ea05c60299e04963 ......
checking 50083b76de998479d45d3bd0f117a8d27d7b17af ......
	 orig commit -> 3a04ce7130a7e5dad4e78d45d50313747f8c830f ......
checking ddebd5d78238a78aac4051317f456e672308ce9f ......
	 orig commit -> f7e43672683b097bb074a8fe7af9bc600a23f231 ......
		 f7e43672683b097bb074a8fe7af9bc600a23f231 has problem. Fixes commit -> 3a04ce7130a7e5dad4e78d45d50313747f8c830f
commit 50083b76de998479d45d3bd0f117a8d27d7b17af
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Apr 19 21:54:34 2018 -0700

    llc: fix NULL pointer deref for SOCK_ZAPPED
    
    
    [ Upstream commit 3a04ce7130a7e5dad4e78d45d50313747f8c830f ]
    
    For SOCK_ZAPPED socket, we don't need to care about llc->sap,
    so we should just skip these refcount functions in this case.
    
    Fixes: f7e43672683b ("llc: hold llc_sap before release_sock()")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 14c81b811aae69641253ae86b83b8eba7677509c ......
	 orig commit -> 1071ec9d453a38023579714b64a951a2fb982071 ......
		 1071ec9d453a38023579714b64a951a2fb982071 has problem. Fixes commit -> d625329b06e46bd20baf9ee40847d11982569204
commit 9982c6090d7e23782542f919ebbfdb2f72c1c1d1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Apr 26 14:13:57 2018 +0800

    sctp: handle two v4 addrs comparison in sctp_inet6_cmp_addr
    
    [ Upstream commit d625329b06e46bd20baf9ee40847d11982569204 ]
    
    Since sctp ipv6 socket also supports v4 addrs, it's possible to
    compare two v4 addrs in pf v6 .cmp_addr, sctp_inet6_cmp_addr.
    
    However after Commit 1071ec9d453a ("sctp: do not check port in
    sctp_inet6_cmp_addr"), it no longer calls af1->cmp_addr, which
    in this case is sctp_v4_cmp_addr, but calls __sctp_v6_cmp_addr
    where it handles them as two v6 addrs. It would cause a out of
    bounds crash.
    
    syzbot found this crash when trying to bind two v4 addrs to a
    v6 socket.
    
    This patch fixes it by adding the process for two v4 addrs in
    sctp_inet6_cmp_addr.
    
    Fixes: 1071ec9d453a ("sctp: do not check port in sctp_inet6_cmp_addr")
    Reported-by: syzbot+cd494c1dd681d4d93ebb@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3f74460e5b3333e49bc175ef3eab175cb42c0ce0 ......
	 orig commit -> 7ce2367254e84753bceb07327aaf5c953cfce117 ......
checking dedf29a064e94fa5bf9dca8f91898f6152c86498 ......
	 orig commit -> a49e2f5d5fb141884452ddb428f551b123d436b5 ......
checking 183f20fb01dcbc1e4b1d821c83e37d3fff144893 ......
	 orig commit -> a6361f0ca4b25460f2cdf3235ebe8115f622901e ......
checking c3da49b83774683f8e78a1592170f76395d537c6 ......
	 orig commit -> 9cf2f437ca5b39828984064fad213e68fc17ef11 ......
checking 8e6805ab7822a6112e2ee230c55cc62ef532fca7 ......
	 orig commit -> 4fb0534fb7bbc2346ba7d3a072b538007f4135a5 ......
		 4fb0534fb7bbc2346ba7d3a072b538007f4135a5 has problem. Fixes commit -> 2fdeee2549231b1f989f011bb18191f5660d3745
commit bd49916ee0f793cc25e9b501cc9dfef121146f51
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Feb 11 21:59:51 2019 -0800

    team: avoid complex list operations in team_nl_cmd_options_set()
    
    [ Upstream commit 2fdeee2549231b1f989f011bb18191f5660d3745 ]
    
    The current opt_inst_list operations inside team_nl_cmd_options_set()
    is too complex to track:
    
        LIST_HEAD(opt_inst_list);
        nla_for_each_nested(...) {
            list_for_each_entry(opt_inst, &team->option_inst_list, list) {
                if (__team_option_inst_tmp_find(&opt_inst_list, opt_inst))
                    continue;
                list_add(&opt_inst->tmp_list, &opt_inst_list);
            }
        }
        team_nl_send_event_options_get(team, &opt_inst_list);
    
    as while we retrieve 'opt_inst' from team->option_inst_list, it could
    be added to the local 'opt_inst_list' for multiple times. The
    __team_option_inst_tmp_find() doesn't work, as the setter
    team_mode_option_set() still calls team->ops.exit() which uses
    ->tmp_list too in __team_options_change_check().
    
    Simplify the list operations by moving the 'opt_inst_list' and
    team_nl_send_event_options_get() into the nla_for_each_nested() loop so
    that it can be guranteed that we won't insert a same list entry for
    multiple times. Therefore, __team_option_inst_tmp_find() can be removed
    too.
    
    Fixes: 4fb0534fb7bb ("team: avoid adding twice the same option to the event list")
    Fixes: 2fcdb2c9e659 ("team: allow to send multiple set events in one message")
    Reported-by: syzbot+4d4af685432dc0e56c91@syzkaller.appspotmail.com
    Reported-by: syzbot+68ee510075cf64260cc4@syzkaller.appspotmail.com
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Reviewed-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 09a37b3661f6d3cf701950dd6944f24d559449f7 ......
	 orig commit -> 7e5a206ab686f098367b61aca989f5cdfa8114a3 ......
checking 6ebd6a11b297191078aa86b6f563f65d7cb53993 ......
	 orig commit -> b905ef9ab90115d001c1658259af4b1c65088779 ......
checking d6e78baf1df18ec01f7fea0c389600e2f5faad75 ......
	 orig commit -> 7dd07c143a4b54d050e748bee4b4b9e94a7b1744 ......
checking ddecae8696b96cf56154692298fa4511bc7f70d5 ......
	 orig commit -> eb1c28c05894a4b1f6b56c5bf072205e64cfa280 ......
checking 153e9cdb7e9277d63cf5eed5fb5c3694310f6ca9 ......
	 orig commit -> 9c438d7a3a52dcc2b9ed095cb87d3a5e83cf7e60 ......
checking 654fecaea1759bf3e48bd0322034b24b0d2adb6b ......
	 orig commit -> ddea788c63094f7c483783265563dd5b50052e28 ......
checking 01d5df5443aae5cf99dae6d9563eba4fedcf67a5 ......
	 orig commit -> 6cf09958f32b9667bb3ebadf74367c791112771b ......
checking c2d46e7be467d06ee217fad41261d999fee777fb ......
	 orig commit -> 6a3d1e81a434fc311f224b8be77258bafc18ccc6 ......
checking 6aa300a00e7e6dfdbd4e914e7bbe4864d30a76b5 ......
	 orig commit -> d424986f1d6b16079b3231db0314923f4f8deed1 ......
		 d424986f1d6b16079b3231db0314923f4f8deed1 has problem. Fixes commit -> 4253b0e0627ee3461e64c2495c616f1c8f6b127b
commit c617e74f5b3e027f622eb109d94ab909cd69cdfa
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed May 23 18:21:33 2018 +0200

    s390: move spectre sysfs attribute code
    
    [ Upstream commit 4253b0e0627ee3461e64c2495c616f1c8f6b127b ]
    
    The nospec-branch.c file is compiled without the gcc options to
    generate expoline thunks. The return branch of the sysfs show
    functions cpu_show_spectre_v1 and cpu_show_spectre_v2 is an indirect
    branch as well. These need to be compiled with expolines.
    
    Move the sysfs functions for spectre reporting to a separate file
    and loose an '.' for one of the messages.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: d424986f1d ("s390: add sysfs attributes for spectre")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 6fbb47b1f94ab8b7b0ed0ce3d2e709f45d422432 ......
	 orig commit -> bc035599718412cfba9249aa713f90ef13f13ee9 ......
checking 768da41f91799d8237aa07c8951e434b0b65ccd3 ......
	 orig commit -> 6e179d64126b909f0b288fa63cdbf07c531e9b1d ......
		 6e179d64126b909f0b288fa63cdbf07c531e9b1d has problem. Fixes commit -> 6a3d1e81a434fc311f224b8be77258bafc18ccc6
commit c2d46e7be467d06ee217fad41261d999fee777fb
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:37:01 2018 +0200

    s390: correct nospec auto detection init order
    
    [ Upstream commit 6a3d1e81a434fc311f224b8be77258bafc18ccc6 ]
    
    With CONFIG_EXPOLINE_AUTO=y the call of spectre_v2_auto_early() via
    early_initcall is done *after* the early_param functions. This
    overwrites any settings done with the nobp/no_spectre_v2/spectre_v2
    parameters. The code patching for the kernel is done after the
    evaluation of the early parameters but before the early_initcall
    is done. The end result is a kernel image that is patched correctly
    but the kernel modules are not.
    
    Make sure that the nospec auto detection function is called before the
    early parameters are evaluated and before the code patching is done.
    
    Fixes: 6e179d64126b ("s390: add automatic detection of the spectre defense")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5298e6f9ed6ee427ccd5b53afee67a84ed216dc8 ......
	 orig commit -> b2e2f43a01bace1a25bdbae04c9f9846882b727a ......
checking ec440c15314e9770b93bdf0c8f90add8dd04e716 ......
	 orig commit -> d3f468963cd6fd6d2aa5e26aed8b24232096d0e1 ......
checking bbf89d7832ed4b94b7d689165f90dc38bba350ca ......
	 orig commit -> d5feec04fe578c8dbd9e2e1439afc2f0af761ed4 ......
checking f3303788c0514ef43151b7272c7309740ed88dc8 ......
	 orig commit -> 2cb370d615e9fbed9e95ed222c2c8f337181aa90 ......
checking d6e925eca0f971476baf4def542580b37e0df80d ......
	 orig commit -> f19fbd5ed642dc31c809596412dab1ed56f2f156 ......
		 f19fbd5ed642dc31c809596412dab1ed56f2f156 has problem. Fixes commit -> 9f18fff63cfd6f559daa1eaae60640372c65f84b
c50c84c3ac4d5db683904bdb3257798b6ef980ae
23a4d7fd34856da8218c4cfc23dba7a6ec0a423a
97489e0663fa700d6e7febddc43b58df98d7bcda
467a3bf219cee12259182c5cb4821f88fd518a51
6dd85fbb87d1d6b87a3b1f02ca28d7b2abd2e7ba
6cf09958f32b9667bb3ebadf74367c791112771b
dc24b7b49a53c7ee5502c877b133558acec0b3f8
2cb370d615e9fbed9e95ed222c2c8f337181aa90
commit b4ab3567f276ef0603ddd205d4eaa39b417808be
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed Apr 25 18:35:26 2018 +0200

    s390/ftrace: use expoline for indirect branches
    
    commit 23a4d7fd34856da8218c4cfc23dba7a6ec0a423a upstream.
    
    The return from the ftrace_stub, _mcount, ftrace_caller and
    return_to_handler functions is done with "br %r14" and "br %r1".
    These are indirect branches as well and need to use execute
    trampolines for CONFIG_EXPOLINE=y.
    
    The ftrace_caller function is a special case as it returns to the
    start of a function and may only use %r0 and %r1. For a pre z10
    machine the standard execute trampoline uses a LARL + EX to do
    this, but this requires *two* registers in the range %r1..%r15.
    To get around this the 'br %r1' located in the lowcore is used,
    then the EX instruction does not need an address register.
    But the lowcore trick may only be used for pre z14 machines,
    with noexec=on the mapping for the first page may not contain
    instructions. The solution for that is an ALTERNATIVE in the
    expoline THUNK generated by 'GEN_BR_THUNK %r1' to switch to
    EXRL, this relies on the fact that a machine that supports
    noexec=on has EXRL as well.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90305465afd422e50afdaa1d614dc335418cd19e
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed May 23 18:21:32 2018 +0200

    s390/kernel: use expoline for indirect branches
    
    [ Upstream commit c50c84c3ac4d5db683904bdb3257798b6ef980ae ]
    
    The assember code in arch/s390/kernel uses a few more indirect branches
    which need to be done with execute trampolines for CONFIG_EXPOLINE=y.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Reviewed-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ce9dc0f76519ac7ef2d861172ae280fc9d6c3e2
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed May 23 18:21:30 2018 +0200

    s390/lib: use expoline for indirect branches
    
    [ Upstream commit 97489e0663fa700d6e7febddc43b58df98d7bcda ]
    
    The return from the memmove, memset, memcpy, __memset16, __memset32 and
    __memset64 functions are done with "br %r14". These are indirect branches
    as well and need to use execute trampolines for CONFIG_EXPOLINE=y.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Reviewed-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73bf2b1c5b3219f3497c1023e7add82eb1d1bd4b
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed May 23 18:21:29 2018 +0200

    s390: move expoline assembler macros to a header
    
    [ Upstream commit 6dd85fbb87d1d6b87a3b1f02ca28d7b2abd2e7ba ]
    
    To be able to use the expoline branches in different assembler
    files move the associated macros from entry.S to a new header
    nospec-insn.h.
    
    While we are at it make the macros a bit nicer to use.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01d5df5443aae5cf99dae6d9563eba4fedcf67a5
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:37:02 2018 +0200

    s390: correct module section names for expoline code revert
    
    [ Upstream commit 6cf09958f32b9667bb3ebadf74367c791112771b ]
    
    The main linker script vmlinux.lds.S for the kernel image merges
    the expoline code patch tables into two section ".nospec_call_table"
    and ".nospec_return_table". This is *not* done for the modules,
    there the sections retain their original names as generated by gcc:
    ".s390_indirect_call", ".s390_return_mem" and ".s390_return_reg".
    
    The module_finalize code has to check for the compiler generated
    section names, otherwise no code patching is done. This slows down
    the module code in case of "spectre_v2=off".
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3303788c0514ef43151b7272c7309740ed88dc8
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Fri Apr 27 07:36:54 2018 +0200

    s390: Replace IS_ENABLED(EXPOLINE_*) with IS_ENABLED(CONFIG_EXPOLINE_*)
    
    [ Upstream commit 2cb370d615e9fbed9e95ed222c2c8f337181aa90 ]
    
    I've accidentally stumbled upon the IS_ENABLED(EXPOLINE_*) lines, which
    obviously always evaluate to false. Fix this.
    
    Fixes: f19fbd5ed642 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit b4ab3567f276ef0603ddd205d4eaa39b417808be
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed Apr 25 18:35:26 2018 +0200

    s390/ftrace: use expoline for indirect branches
    
    commit 23a4d7fd34856da8218c4cfc23dba7a6ec0a423a upstream.
    
    The return from the ftrace_stub, _mcount, ftrace_caller and
    return_to_handler functions is done with "br %r14" and "br %r1".
    These are indirect branches as well and need to use execute
    trampolines for CONFIG_EXPOLINE=y.
    
    The ftrace_caller function is a special case as it returns to the
    start of a function and may only use %r0 and %r1. For a pre z10
    machine the standard execute trampoline uses a LARL + EX to do
    this, but this requires *two* registers in the range %r1..%r15.
    To get around this the 'br %r1' located in the lowcore is used,
    then the EX instruction does not need an address register.
    But the lowcore trick may only be used for pre z14 machines,
    with noexec=on the mapping for the first page may not contain
    instructions. The solution for that is an ALTERNATIVE in the
    expoline THUNK generated by 'GEN_BR_THUNK %r1' to switch to
    EXRL, this relies on the fact that a machine that supports
    noexec=on has EXRL as well.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90305465afd422e50afdaa1d614dc335418cd19e
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed May 23 18:21:32 2018 +0200

    s390/kernel: use expoline for indirect branches
    
    [ Upstream commit c50c84c3ac4d5db683904bdb3257798b6ef980ae ]
    
    The assember code in arch/s390/kernel uses a few more indirect branches
    which need to be done with execute trampolines for CONFIG_EXPOLINE=y.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Reviewed-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ce9dc0f76519ac7ef2d861172ae280fc9d6c3e2
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed May 23 18:21:30 2018 +0200

    s390/lib: use expoline for indirect branches
    
    [ Upstream commit 97489e0663fa700d6e7febddc43b58df98d7bcda ]
    
    The return from the memmove, memset, memcpy, __memset16, __memset32 and
    __memset64 functions are done with "br %r14". These are indirect branches
    as well and need to use execute trampolines for CONFIG_EXPOLINE=y.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Reviewed-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73bf2b1c5b3219f3497c1023e7add82eb1d1bd4b
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed May 23 18:21:29 2018 +0200

    s390: move expoline assembler macros to a header
    
    [ Upstream commit 6dd85fbb87d1d6b87a3b1f02ca28d7b2abd2e7ba ]
    
    To be able to use the expoline branches in different assembler
    files move the associated macros from entry.S to a new header
    nospec-insn.h.
    
    While we are at it make the macros a bit nicer to use.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa376a12da18f847d9f76695a6f3d891fc6224de
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Tue Apr 24 11:18:49 2018 +0200

    s390: remove indirect branch from do_softirq_own_stack
    
    commit 9f18fff63cfd6f559daa1eaae60640372c65f84b upstream.
    
    The inline assembly to call __do_softirq on the irq stack uses
    an indirect branch. This can be replaced with a normal relative
    branch.
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Reviewed-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01d5df5443aae5cf99dae6d9563eba4fedcf67a5
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:37:02 2018 +0200

    s390: correct module section names for expoline code revert
    
    [ Upstream commit 6cf09958f32b9667bb3ebadf74367c791112771b ]
    
    The main linker script vmlinux.lds.S for the kernel image merges
    the expoline code patch tables into two section ".nospec_call_table"
    and ".nospec_return_table". This is *not* done for the modules,
    there the sections retain their original names as generated by gcc:
    ".s390_indirect_call", ".s390_return_mem" and ".s390_return_reg".
    
    The module_finalize code has to check for the compiler generated
    section names, otherwise no code patching is done. This slows down
    the module code in case of "spectre_v2=off".
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2d863392f86b01ae0a578f72062ef8c5a27d651c ......
	 orig commit -> 6b73044b2b0081ee3dd1cd6eaab7dee552601efb ......
checking 76c45c1be03c60f9d983aed017182760dbd8bbf9 ......
	 orig commit -> d768bd892fc8f066cd3aa000eb1867bcf32db0ee ......
checking bc650e567c9997293ed6421a058517e270d77e4c ......
	 orig commit -> cf1489984641369611556bf00c48f945c77bcf02 ......
checking cf6bc919fa35e91dfc2055ad862ee8f68eafb1d9 ......
	 orig commit -> e2dd833389cc4069a96b57bdd24227b5f52288f5 ......
checking e24d6c4b5e19d6c168d8ca34e1859c83b30189d5 ......
	 orig commit -> 7041d28115e91f2144f811ffe8a195c696b1e1d0 ......
		 7041d28115e91f2144f811ffe8a195c696b1e1d0 has problem. Fixes commit -> d3f468963cd6fd6d2aa5e26aed8b24232096d0e1
commit ec440c15314e9770b93bdf0c8f90add8dd04e716
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Fri Apr 27 07:36:56 2018 +0200

    s390/entry.S: fix spurious zeroing of r0
    
    [ Upstream commit d3f468963cd6fd6d2aa5e26aed8b24232096d0e1 ]
    
    when a system call is interrupted we might call the critical section
    cleanup handler that re-does some of the operations. When we are between
    .Lsysc_vtime and .Lsysc_do_svc we might also redo the saving of the
    problem state registers r0-r7:
    
    .Lcleanup_system_call:
    [...]
    0:      # update accounting time stamp
            mvc     __LC_LAST_UPDATE_TIMER(8),__LC_SYNC_ENTER_TIMER
            # set up saved register r11
            lg      %r15,__LC_KERNEL_STACK
            la      %r9,STACK_FRAME_OVERHEAD(%r15)
            stg     %r9,24(%r11)            # r11 pt_regs pointer
            # fill pt_regs
            mvc     __PT_R8(64,%r9),__LC_SAVE_AREA_SYNC
    --->    stmg    %r0,%r7,__PT_R0(%r9)
    
    The problem is now, that we might have already zeroed out r0.
    The fix is to move the zeroing of r0 after sysc_do_svc.
    
    Reported-by: Farhan Ali <alifm@linux.vnet.ibm.com>
    Fixes: 7041d28115e91 ("s390: scrub registers on kernel entry and KVM exit")
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 1482b96a97296bc2a0d738461c52eda957bc881e ......
	 orig commit -> 35b3fde6203b932b2b1a5b53b3d8808abc9c4f60 ......
checking 243f3abcfd64a5cfa774eb32aa0a349693bf6eaa ......
	 orig commit -> 049a2c2d486e8cc82c5cd79fa479c5b105b109e9 ......
checking 4eaf8dace704fb5392b330a01dbf579d3190b0b3 ......
	 orig commit -> 686140a1a9c41d85a4212a1c26d671139b76404b ......
checking 8cd93573813bb6f00093ae826a457fbbddf393b8 ......
	 orig commit -> 55cc11da69895a680940c1733caabc37be685f5e ......
checking 87dfe99e129679c23bebda36b83cb223285afc2a ......
	 orig commit -> dbfcef6b0f4012c57bc0b6e0e660d5ed12a5eaed ......
checking 9441c6de4d4af57c8f160b9f7f688bf0983ddd7f ......
	 orig commit -> a34d0a0da1abae46a5f6ebd06fb0ec484ca099d9 ......
checking 666f5e34967960f3848a0b46926f1fc4da0a833a ......
	 orig commit -> 74c82dae6c474933f2be401976e1530b5f623221 ......
checking 79658ce8e820d037808a221f013e67aebcfa53e0 ......
	 orig commit -> 90841047a01b452cc8c3f9b990698b264143334a ......
checking e1df9302a2f43b29312d0f6ccbde52f7211eca97 ......
	 orig commit -> 2ef230531ee171a475fc3ddad5516dd7e09a8a77 ......
checking 585af47e21ba3c2ac1f7a20fff17744b51af884f ......
	 orig commit -> 78b562fbfa2cf0a9fcb23c3154756b690f4905c1 ......
checking 624786b91e56fa9346935af25f97cd193a738a3c ......
	 orig commit -> d3878e164dcd3925a237a20e879432400e369172 ......
checking 5f3a3e86bede7d16c5e4250870402707be40a3fd ......
	 orig commit -> 1d0cffa674cfa7d185a302c8c6850fc50b893bed ......

Check from v4.4.18 to v4.4.19
Commit count: 137
checking 85184740541c2b80b72ebfa46cfe065ec1d1058f ......
checking cc4860773f6f8f35a178bc9615ec52c3fbc86ca4 ......
	 orig commit -> b8612e517c3c9809e1200b72c474dbfd969e5a83 ......
checking bc2318cc76df4fb80c3b5b9ec0e1633627dabb54 ......
	 orig commit -> bca014caaa6130e57f69b5bf527967aa8ee70fdd ......
checking c6ec712c44c9f12cded15bff56ab045e844d503b ......
	 orig commit -> 99f3c90d0d85708e7401a81ce3314e50bf7f2819 ......
		 99f3c90d0d85708e7401a81ce3314e50bf7f2819 has problem. Fixes commit -> 299f6230bc6d0ccd5f95bb0fb865d80a9c7d5ccc
commit 00918eaca8e2a8ed80034060a6100ae23f50b467
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Wed Aug 24 21:12:58 2016 -0400

    dm flakey: fix reads to be issued if drop_writes configured
    
    commit 299f6230bc6d0ccd5f95bb0fb865d80a9c7d5ccc upstream.
    
    v4.8-rc3 commit 99f3c90d0d ("dm flakey: error READ bios during the
    down_interval") overlooked the 'drop_writes' feature, which is meant to
    allow reads to be issued rather than errored, during the down_interval.
    
    Fixes: 99f3c90d0d ("dm flakey: error READ bios during the down_interval")
    Reported-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ef60c9aa980b59a61c5464cc38fdfaecdec61e47 ......
	 orig commit -> 70c96dfac0e231424e17743bd52f6cd2ff1f2439 ......
checking 74d55e5d96aaecbff198b3f7bcdc10c1c865ce71 ......
	 orig commit -> 05a05872c8d4b4357c9d913e6d73ae64882bddf5 ......
checking 6b1f21a1112e96e419b075406e54dc915b4eade6 ......
	 orig commit -> e1191bd4f62d9086a1a47adc286e7fcffc1fa55c ......
checking 32b04db4f2565382a3cded17290068a4691880a4 ......
	 orig commit -> bb27570525a71f48347ed0e0c265063e7952bb61 ......
checking a57a55b50558b6134a6465e61655f3d67bfa395c ......
	 orig commit -> 9ac0108c2bac3f1d0255f64fb89fc27e71131b24 ......
checking 23e0fce7b2e31a9672137e0887d521068f467b04 ......
	 orig commit -> 3ef06653987d4c4536b408321edf0e5caa2a317f ......
checking 0b37e9799616c34e2cd9eb8c9174e952e2825b64 ......
	 orig commit -> 07d69579e7fec27e371296d8ca9d6076fc401b5c ......
checking e86d99f90b6fe8beb72f024e99c107fd42b65235 ......
	 orig commit -> 4f53989b0652ffe2605221c81ca8ffcfc90aed2a ......
checking 7bda3b121a7f44f34b0470c1ac3496a78769d019 ......
	 orig commit -> db1bb44c4c7e8d49ed674dc59e5222d99c698088 ......
checking 7484fbecff63dd81e396565cdbe28ba598219fdd ......
	 orig commit -> 2de4fcc64685def3e586856a2dc636df44532395 ......
checking f5ba9a6e48bfb2b00a912a648b69063501637ed3 ......
	 orig commit -> 410c29dfbfdf73d0d0b5d14a21868ab038eca703 ......
checking 51d841908029ff6b892a93e4df8175162ca8dcc8 ......
	 orig commit -> ea263c7fada4af8ec7fe5fcfd6e7d7705a89351b ......
	 orig commit -> 8a9ebe717a133ba7bc90b06047f43cc6b8bcb8b3 ......
checking f318588b758514c35f0a9227195178a3b2b4b733 ......
	 orig commit -> 064cdd2d91c2805d788876082f31cc63506f22c3 ......
		 064cdd2d91c2805d788876082f31cc63506f22c3 has problem. Fixes commit -> 32e36bfbcf31452a854263e7c7f32fbefc4b44d8
commit 5c6e7bd3a627edef58ad4480cd7cf323f2bca6ed
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Jan 25 10:34:56 2019 -0800

    scsi: target/iscsi: Avoid iscsit_release_commands_from_conn() deadlock
    
    commit 32e36bfbcf31452a854263e7c7f32fbefc4b44d8 upstream.
    
    When using SCSI passthrough in combination with the iSCSI target driver
    then cmd->t_state_lock may be obtained from interrupt context. Hence, all
    code that obtains cmd->t_state_lock from thread context must disable
    interrupts first. This patch avoids that lockdep reports the following:
    
    WARNING: inconsistent lock state
    4.18.0-dbg+ #1 Not tainted
    --------------------------------
    inconsistent {HARDIRQ-ON-W} -> {IN-HARDIRQ-W} usage.
    iscsi_ttx/1800 [HC1[1]:SC0[2]:HE0:SE0] takes:
    000000006e7b0ceb (&(&cmd->t_state_lock)->rlock){?...}, at: target_complete_cmd+0x47/0x2c0 [target_core_mod]
    {HARDIRQ-ON-W} state was registered at:
     lock_acquire+0xd2/0x260
     _raw_spin_lock+0x32/0x50
     iscsit_close_connection+0x97e/0x1020 [iscsi_target_mod]
     iscsit_take_action_for_connection_exit+0x108/0x200 [iscsi_target_mod]
     iscsi_target_rx_thread+0x180/0x190 [iscsi_target_mod]
     kthread+0x1cf/0x1f0
     ret_from_fork+0x24/0x30
    irq event stamp: 1281
    hardirqs last  enabled at (1279): [<ffffffff970ade79>] __local_bh_enable_ip+0xa9/0x160
    hardirqs last disabled at (1281): [<ffffffff97a008a5>] interrupt_entry+0xb5/0xd0
    softirqs last  enabled at (1278): [<ffffffff977cd9a1>] lock_sock_nested+0x51/0xc0
    softirqs last disabled at (1280): [<ffffffffc07a6e04>] ip6_finish_output2+0x124/0xe40 [ipv6]
    
    other info that might help us debug this:
    Possible unsafe locking scenario:
    
          CPU0
          ----
     lock(&(&cmd->t_state_lock)->rlock);
     <Interrupt>
       lock(&(&cmd->t_state_lock)->rlock);
checking 60ba156dda2c11ff7a44d78ec64abd21b9813115 ......
	 orig commit -> 5e2c956b8aa24d4f33ff7afef92d409eed164746 ......
checking 6492c1c5b95658bc070d5d231bc32568b84b49bb ......
	 orig commit -> dff0ca9ea7dc8be2181a62df4a722c32ce68ff4a ......
checking 862312014cfd0770418760d24f980b2f45095e93 ......
	 orig commit -> 8abc718de6e9e52d8a6bfdb735060554aeae25e4 ......
checking 4056337b1e81a1b137aa562133dc5430cd2fd19e ......
	 orig commit -> 714fb87e8bc05ff78255afc0dca981e8c5242785 ......
checking 79d6bc128c0b3370acbfedf7da44e64678c25c27 ......
	 orig commit -> bc743f34dfa011e62edd0ea4ae8455be06c083b5 ......
checking 752aaae53df7cf134f02285505174a74a2215e3e ......
	 orig commit -> 4946784bd3924b1374f05eebff2fd68660bae866 ......
checking 2c00c2171c0d525f49e8c36d79082ee33fba8b10 ......
	 orig commit -> d9fc880723321dbf16b2981e3f3e916b73942210 ......
checking fd8c10a80ee746348a59c9a98dd6a7eeec73fc28 ......
	 orig commit -> 5b420d9cf7382c6e1512e96e02d18842d272049c ......
checking d057209617da2af6e2d40dc1473c85813fb443f8 ......
	 orig commit -> a6100603a4a87fc436199362bdb81cb849faaf6e ......
checking 155c27dd5575e9a5466587ece499c61d9089615a ......
	 orig commit -> f2940e2c76bb554a7fbdd28ca5b90904117a9e96 ......
checking 1d13a91a689fc8b7f6bdbc00adc5322dc9e338d0 ......
	 orig commit -> 5ed935e861a4cbf2158ad3386d6d26edd60d2658 ......
checking 9bb807338af3c4dcef05ad979394ec4effffeb56 ......
	 orig commit -> 61c78eea9516a921799c17b4c20558e2aa780fd3 ......
checking 041a8254284b766ba90425b1576f86f72b7dfbf2 ......
	 orig commit -> 0f377d86252d11bfea941852785e3094b93601a7 ......
checking d1859e0e73e50397d958cc27d53129c2a33e6880 ......
	 orig commit -> 2788cf3bd90af3791c3195c52391bcf34fa67b40 ......
checking f868cae619b0b6e56afca0d6ee5377d5855f64f1 ......
	 orig commit -> c9b254955b9f8814966f5dabd34c39d0e0a2b437 ......
checking a25be0f972d74aa4bd3efe8951eb3c66d605c650 ......
	 orig commit -> 3c4c37746c919c983e439ac6a7328cd2d48c10ed ......
checking cbbfde038e42029e4dfbb303ab5f825fd743973e ......
	 orig commit -> 0540d8148d419bf769e5aa99c77027febd8922f0 ......
checking bae7400e1e13b1ce617eae73227218d7bff3d829 ......
	 orig commit -> 9ea578528656e191c1097798a771ff08bab6f323 ......
checking 02773ea7eddad4b35bc2812d3e7743ee48430d4b ......
	 orig commit -> e3353c268b06236d6c40fa1714c114f21f44451c ......
checking 148a19e60566ac9a72381bbfd51d00a8c264949b ......
	 orig commit -> 59ec4b57bcaede46546d54d037a21004b9aa5cef ......
		 59ec4b57bcaede46546d54d037a21004b9aa5cef has problem. Fixes commit -> 2f726aec19a9d2c63bec9a8a53a3910ffdcd09f8
commit ce3dcfdbff04bab023806ef7a342c657ec08915d
Author: Hui Wang <hui.wang@canonical.com>
Date:   Fri Mar 31 10:31:40 2017 +0800

    ALSA: hda - fix a problem for lineout on a Dell AIO machine
    
    commit 2f726aec19a9d2c63bec9a8a53a3910ffdcd09f8 upstream.
    
    On this Dell AIO machine, the lineout jack does not work.
    
    We found the pin 0x1a is assigned to lineout on this machine, and in
    the past, we applied ALC298_FIXUP_DELL1_MIC_NO_PRESENCE to fix the
    heaset-set mic problem for this machine, this fixup will redefine
    the pin 0x1a to headphone-mic, as a result the lineout doesn't
    work anymore.
    
    After consulting with Dell, they told us this machine doesn't support
    microphone via headset jack, so we add a new fixup which only defines
    the pin 0x18 as the headset-mic.
    
    [rearranged the fixup insertion position by tiwai in order to make the
     merge with other branches easier -- tiwai]
    
    Fixes: 59ec4b57bcae ("ALSA: hda - Fix headset mic detection problem for two dell machines")
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f39db7fb96a0f2ab9d0fb34b9cc64c272abd6c21 ......
	 orig commit -> fd48331f9b71d2add941adaee3619f5b8527182d ......
checking 39d505450f84aef77377c1fe0757e6b906132112 ......
	 orig commit -> dd9aa335c88003d131ac874e7f6809902de0b847 ......
checking 7e4a2f979dd707742352dce6409916bc5788d7f8 ......
	 orig commit -> 33baefe5e72f17a6df378e48196cd8cada11deec ......
checking 4733b66d45d4452155a123b12dfeba3edba0facd ......
	 orig commit -> 649920c6ab93429b94bc7c1aa7c0e8395351be32 ......
checking 7928de5185f04b970dc9505cb8caa1cb5e46fa07 ......
	 orig commit -> 144f4c98399e2c0ca60eb414c15a2c68125c18b8 ......
checking 0d301856de347a43fa87833dba61d3239211429f ......
	 orig commit -> df08c32ce3be5be138c1dbfcba203314a3a7cd6f ......
checking 01daea925d04909561bf7c39c76e71d13ddcb2ec ......
	 orig commit -> 20bd723ec6a3261df5e02250cd3a1fbb09a343f2 ......
checking 8660eadce2bafd16b2b2d0100190c5ac76519caf ......
	 orig commit -> 6154c187b97ee7513046bb4eb317a89f738f13ef ......
checking 84f8a24ade96a8c1499823b160a0591199cf9d12 ......
	 orig commit -> b2e1c26f0b62531636509fbcb6dab65617ed8331 ......
checking cfb466bd40d7822446ca0abbac263ed6be7306d7 ......
	 orig commit -> 37cf99e08c6fb4dcea0f9ad2b13b6daa8c76a711 ......
checking 24cdeed2d3b2c66d3846a74707a9a829dcd2e880 ......
	 orig commit -> 196f954e250943df414efd3d632254c29be38e59 ......
		 196f954e250943df414efd3d632254c29be38e59 has problem. Fixes commit -> 06998a756a3865817b87a129a7e5d5bb66dc1ec3
commit 5b7ed414974320d7ebda71d18c85f505f3d959c0
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sun Feb 18 16:53:59 2018 +0800

    drm/edid: Add 6 bpc quirk for CPT panel in Asus UX303LA
    
    commit 06998a756a3865817b87a129a7e5d5bb66dc1ec3 upstream.
    
    Similar to commit e10aec652f31 ("drm/edid: Add 6 bpc quirk for display
    AEO model 0."), the EDID reports "DFP 1.x compliant TMDS" but it support
    6bpc instead of 8 bpc.
    
    Hence, use 6 bpc quirk for this panel.
    
    Fixes: 196f954e2509 ("drm/i915/dp: Revert "drm/i915/dp: fall back to 18 bpp when sink capability is unknown"")
    BugLink: https://bugs.launchpad.net/bugs/1749420
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reviewed-by: Mario Kleiner <mario.kleiner.de@gmail.com>
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180218085359.7817-1-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3b30197a63f93c0c315b46d73120cca0d55e4973 ......
	 orig commit -> a7b4667a00025ac28300737c868bd4818b6d8c4d ......
checking 794c90b25b332391517e3fe131cf0b8e8db87be9 ......
	 orig commit -> e10aec652f31ec61d6a0b4d00d8ef8d2b66fa0fd ......
checking 1df3e60664af6e494119509e740b074630902f8c ......
	 orig commit -> 396f5d62d1a5fd99421855a08ffdef8edb43c76e ......
	 orig commit -> afcd950cafea6e27b739fe7772cbbeed37d05b8b ......
		 afcd950cafea6e27b739fe7772cbbeed37d05b8b has problem. Fixes commit -> 396f5d62d1a5fd99421855a08ffdef8edb43c76e
commit 1df3e60664af6e494119509e740b074630902f8c
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Jul 7 09:41:12 2016 +0100

    drm: Restore double clflush on the last partial cacheline
    
    commit 396f5d62d1a5fd99421855a08ffdef8edb43c76e upstream.
    
    This effectively reverts
    
    commit afcd950cafea6e27b739fe7772cbbeed37d05b8b
    Author: Chris Wilson <chris@chris-wilson.co.uk>
    Date:   Wed Jun 10 15:58:01 2015 +0100
    
        drm: Avoid the double clflush on the last cache line in drm_clflush_virt_range()
    
    as we have observed issues with serialisation of the clflush operations
    on Baytrail+ Atoms with partial updates. Applying the double flush on the
    last cacheline forces that clflush to be ordered with respect to the
    previous clflush, and the mfence then protects against prefetches crossing
    the clflush boundary.
    
    The same issue can be demonstrated in userspace with igt/gem_exec_flush.
    
    Fixes: afcd950cafea6 (drm: Avoid the double clflush on the last cache...)
    Testcase: igt/gem_concurrent_blit
    Testcase: igt/gem_partial_pread_pwrite
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=92845
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: dri-devel@lists.freedesktop.org
    Cc: Akash Goel <akash.goel@intel.com>
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Jason Ekstrand <jason.ekstrand@intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1467880930-23082-6-git-send-email-chris@chris-wilson.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 702117fe1ecde2bef728146e0a5fff689731c8c5 ......
	 orig commit -> 28668f43b8e421634e1623f72a879812288dd06b ......
checking 77f424903037180d485b6ed40273f5d8f9dccb1a ......
	 orig commit -> d0e62ef6ed257715a88d0e5d7cd850a1695429e2 ......
checking 21f36ec95dcd59365ea8ab1c49739bc2abcff32e ......
	 orig commit -> 0e67bed2c765ff0fdaec62c963881f5416fe3692 ......
checking 4cb688506f91f53a7f1a6864524e088fb4992a65 ......
	 orig commit -> d3200be6c423afa1c34f7e39e9f6d04dd5b0af9d ......
checking f1cb5eb8ff01c79d8c022a1d6fce68bc28638bce ......
	 orig commit -> 3edc38a0facef45ee22af8afdce3737f421f36ab ......
checking 943682861f55e9b979aaca4be3a2d75afe7831d9 ......
	 orig commit -> 14ff8d48f2235295dfb3117693008e367b49cdb5 ......
checking ada3815fab5191d1c96ff07ed6c0c77ecd34dfd0 ......
	 orig commit -> d814b24fb74cb9797d70cb8053961447c5879a5c ......
checking 4925cf140ff6208894feb0e81984c7f320025f2e ......
	 orig commit -> 7f555c8e5a84b348c2b76f4ca78eae7222354c03 ......
checking 672138e0ce66e47b33171096dddfe296e948de37 ......
	 orig commit -> a8a04c994d41a489eb0f2899893209e04e030153 ......
checking 3281d1055ca82a240e6f38c5b011bc1f3f28d4b6 ......
	 orig commit -> 23a1a9e54e71593fe5657e883662995d181d2d6b ......
checking ca7eb0c3080cc3e1b6e04e04ed60ed63e6fb5667 ......
	 orig commit -> dba6c4fa26ccf47661be5b68dba87e746fa137d8 ......
checking 2c10a2c5cef3f3ae7dd7cd931398014c2b4c290f ......
	 orig commit -> b636a1b3d624b49b23cc1be2f9f6bcbb89aca855 ......
checking 8f811d101bd2b1c606b5ee1c3a8bd59a4f48cb8d ......
	 orig commit -> f81eb1a349d47694fe1e688336ca1b40ea3e248a ......
checking bedd8d6037247002091d85d8abf4aa7e6c92ff24 ......
	 orig commit -> ecfaf0c42fc4306b5ec4bf6be01b66f8fe9a9733 ......
checking 4a3e88a02e71cbc1dacfb958d8bffe0547d8fa2e ......
	 orig commit -> 0e0e36774081534783aa8eeb9f6fbddf98d3c061 ......
checking 225ecdbca37ab7b8a6ec38e72739980c80c218e7 ......
	 orig commit -> fc51b632c7b047c25807023b76f3877aed19c770 ......
checking 53eaa3910ae67e497fb33188d515c14ed17a7a0e ......
	 orig commit -> 43761473c254b45883a64441dd0bc85a42f3645c ......
checking c5612d4370098aa0528dfe20cc5698acaf94c4af ......
	 orig commit -> 3254de6bf74fe94c197c9f819fe62a3a3c36f073 ......
checking df8eaed22590a484a64e4a6f2af266f59a692aed ......
	 orig commit -> b548e786ce47017107765bbeb0f100202525ea83 ......
checking 51e94ff8d90804ec1912fd71b2c7e22902a61585 ......
	 orig commit -> cda7005ba2cbd0744fea343dd5b2aa637eba5b9e ......
checking 28a5f4cbb18b86ad40be5da53263bc1704dbdb6f ......
	 orig commit -> 5c365d18a73d3979db37006eaacefc0008869c0f ......
checking bd78d819b4abaf1b471ea6da8b440730d24ac897 ......
	 orig commit -> b54b874fbaf5e024723e50dfb035a9916d6752b4 ......
checking fa89ad55304a0053d6e9900bc76599d77b8abb50 ......
	 orig commit -> 78c3d5fa7354774b7c8638033d46c042ebae41fb ......
checking 37cbe5b6d12580c6bb189dc3be418b681ce7d5a1 ......
	 orig commit -> dd257933fa4b9fea66a1195f8a15111029810abc ......
checking 6dfc20babd386b8990c9ad99fa9e3afe875cba1f ......
	 orig commit -> 42691398be08bd1fe99326911a0aa31f2c041d53 ......
		 42691398be08bd1fe99326911a0aa31f2c041d53 has problem. Fixes commit -> f46c445b79906a9da55c13e0a6f6b6a006b892fe
commit 6ea627b20205fcf7e8191b28f9207c97a69bf58f
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Sat Oct 29 18:19:03 2016 -0400

    nfsd: Fix general protection fault in release_lock_stateid()
    
    commit f46c445b79906a9da55c13e0a6f6b6a006b892fe upstream.
    
    When I push NFSv4.1 / RDMA hard, (xfstests generic/089, for example),
    I get this crash on the server:
    
    Oct 28 22:04:30 klimt kernel: general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC
    Oct 28 22:04:30 klimt kernel: Modules linked in: cts rpcsec_gss_krb5 iTCO_wdt iTCO_vendor_support sb_edac edac_core x86_pkg_temp_thermal intel_powerclamp coretemp kvm_intel kvm btrfs irqbypass crct10dif_pclmul crc32_pclmul ghash_clmulni_intel aesni_intel lrw gf128mul glue_helper ablk_helper cryptd xor pcspkr raid6_pq i2c_i801 i2c_smbus lpc_ich mfd_core sg mei_me mei ioatdma shpchp wmi ipmi_si ipmi_msghandler rpcrdma ib_ipoib rdma_ucm acpi_power_meter acpi_pad ib_ucm ib_uverbs ib_umad rdma_cm ib_cm iw_cm nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs libcrc32c mlx4_ib mlx4_en ib_core sr_mod cdrom sd_mod ast drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ttm drm crc32c_intel igb ahci libahci ptp mlx4_core pps_core dca libata i2c_algo_bit i2c_core dm_mirror dm_region_hash dm_log dm_mod
    Oct 28 22:04:30 klimt kernel: CPU: 7 PID: 1558 Comm: nfsd Not tainted 4.9.0-rc2-00005-g82cd754 #8
    Oct 28 22:04:30 klimt kernel: Hardware name: Supermicro Super Server/X10SRL-F, BIOS 1.0c 09/09/2015
    Oct 28 22:04:30 klimt kernel: task: ffff880835c3a100 task.stack: ffff8808420d8000
    Oct 28 22:04:30 klimt kernel: RIP: 0010:[<ffffffffa05a759f>]  [<ffffffffa05a759f>] release_lock_stateid+0x1f/0x60 [nfsd]
    Oct 28 22:04:30 klimt kernel: RSP: 0018:ffff8808420dbce0  EFLAGS: 00010246
    Oct 28 22:04:30 klimt kernel: RAX: ffff88084e6660f0 RBX: ffff88084e667020 RCX: 0000000000000000
    Oct 28 22:04:30 klimt kernel: RDX: 0000000000000007 RSI: 0000000000000000 RDI: ffff88084e667020
    Oct 28 22:04:30 klimt kernel: RBP: ffff8808420dbcf8 R08: 0000000000000001 R09: 0000000000000000
    Oct 28 22:04:30 klimt kernel: R10: ffff880835c3a100 R11: ffff880835c3aca8 R12: 6b6b6b6b6b6b6b6b
    Oct 28 22:04:30 klimt kernel: R13: ffff88084e6670d8 R14: ffff880835f546f0 R15: ffff880835f1c548
    Oct 28 22:04:30 klimt kernel: FS:  0000000000000000(0000) GS:ffff88087bdc0000(0000) knlGS:0000000000000000
    Oct 28 22:04:30 klimt kernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    Oct 28 22:04:30 klimt kernel: CR2: 00007ff020389000 CR3: 0000000001c06000 CR4: 00000000001406e0
    Oct 28 22:04:30 klimt kernel: Stack:
    Oct 28 22:04:30 klimt kernel: ffff88084e667020 0000000000000000 ffff88084e6670d8 ffff8808420dbd20
    Oct 28 22:04:30 klimt kernel: ffffffffa05ac80d ffff880835f54548 ffff88084e640008 ffff880835f545b0
    Oct 28 22:04:30 klimt kernel: ffff8808420dbd70 ffffffffa059803d ffff880835f1c768 0000000000000870
    Oct 28 22:04:30 klimt kernel: Call Trace:
    Oct 28 22:04:30 klimt kernel: [<ffffffffa05ac80d>] nfsd4_free_stateid+0xfd/0x1b0 [nfsd]
    Oct 28 22:04:30 klimt kernel: [<ffffffffa059803d>] nfsd4_proc_compound+0x40d/0x690 [nfsd]
    Oct 28 22:04:30 klimt kernel: [<ffffffffa0583114>] nfsd_dispatch+0xd4/0x1d0 [nfsd]
    Oct 28 22:04:30 klimt kernel: [<ffffffffa047bbf9>] svc_process_common+0x3d9/0x700 [sunrpc]
    Oct 28 22:04:30 klimt kernel: [<ffffffffa047ca64>] svc_process+0xf4/0x330 [sunrpc]
    Oct 28 22:04:30 klimt kernel: [<ffffffffa05827ca>] nfsd+0xfa/0x160 [nfsd]
    Oct 28 22:04:30 klimt kernel: [<ffffffffa05826d0>] ? nfsd_destroy+0x170/0x170 [nfsd]
    Oct 28 22:04:30 klimt kernel: [<ffffffff810b367b>] kthread+0x10b/0x120
    Oct 28 22:04:30 klimt kernel: [<ffffffff810b3570>] ? kthread_stop+0x280/0x280
    Oct 28 22:04:30 klimt kernel: [<ffffffff8174e8ba>] ret_from_fork+0x2a/0x40
    Oct 28 22:04:30 klimt kernel: Code: c3 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 55 48 89 e5 41 55 41 54 53 48 8b 87 b0 00 00 00 48 89 fb 4c 8b a0 98 00 00 00 <49> 8b 44 24 20 48 8d b8 80 03 00 00 e8 10 66 1a e1 48 89 df e8
    Oct 28 22:04:30 klimt kernel: RIP  [<ffffffffa05a759f>] release_lock_stateid+0x1f/0x60 [nfsd]
    Oct 28 22:04:30 klimt kernel: RSP <ffff8808420dbce0>
    Oct 28 22:04:30 klimt kernel: ---[ end trace cf5d0b371973e167 ]---
    
    Jeff Layton says:
    > Hm...now that I look though, this is a little suspicious:
    >
    >    struct nfs4_openowner *oo = openowner(stp->st_openstp->st_stateowner);
    >
    > I wonder if it's possible for the openstateid to have already been
    > destroyed at this point.
    >
    > We might be better off doing something like this to get the client pointer:
    >
    >    stp->st_stid.sc_client;
    >
    > ...which should be more direct and less dependent on other stateids
    > staying valid.
    
    With the suggested change, I am no longer able to reproduce the above oops.
    
    v2: Fix unhash_lock_stateid() as well
    
    Fix-suggested-by: Jeff Layton <jlayton@redhat.com>
    Fixes: 42691398be08 ('nfsd: Fix race between FREE_STATEID and LOCK')
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Cc: Christian Theune <ct@flyingcircus.io>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3d6562fded3ce875b8a7fc30eeed73b16366d77e ......
	 orig commit -> 149a4fddd0a72d526abbeac0c8deaab03559836a ......
checking 4fa571ebe60f311c885b37a3dcfbf961e5fbd57d ......
	 orig commit -> 9b731bcfdec4c159ad2e4312e25d69221709b96a ......
checking e93dbb1cb6a1ed00c020f257780aac4750ef1c8e ......
	 orig commit -> 0741f52d1b980dbeb290afe67d88fc2928edd8ab ......
checking f26fac101c44492ca80d7ec65d484589299d8c99 ......
	 orig commit -> 8985d50382359e5bf118fdbefc859d0dbf6cebc7 ......
checking ed7e1dd5abb39e0d6ce71e4914be365062bb1711 ......
	 orig commit -> c604cffa93478f8888bec62b23d6073dad03d43a ......
checking f48dd2d0a75c6facd044c36fe86251027c12f0eb ......
	 orig commit -> 4b44f2d18a330565227a7348844493c59366171e ......
checking 529025b1293b2af844348d700cf22fa585c1f2b6 ......
	 orig commit -> 9b4d008787f864f17d008c9c15bbe8a0f7e2fc24 ......
checking f41fc0bfede5bbeca4f09d75c76c4db5d6c0d2ee ......
	 orig commit -> 3371f3da08cff4b75c1f2dce742d460539d6566d ......
checking adc58bfd4d75183a65f806b1b5354d1b65f832c6 ......
	 orig commit -> 7893242e2465aea6f2cbc2639da8fa5ce96e8cc2 ......
checking 047617448daecf05e57498d8697acd3dbd38672d ......
	 orig commit -> bd975d1eead2558b76e1079e861eacf1f678b73b ......
checking 36e6321056ba24f004bfc16d4398e65a6651f843 ......
	 orig commit -> 8d9535b6efd86e6c07da59f97e68f44efb7fe080 ......
checking a636a9b1306587bbfab54b1e435461289a4c2c35 ......
	 orig commit -> a6b5058fafdf508904bbf16c29b24042cef3c496 ......
		 a6b5058fafdf508904bbf16c29b24042cef3c496 has problem. Fixes commit -> c988de29ca161823db6a7125e803d597ef75b49c
commit 122775d733a01970741c59fb8078cdfc22c807a0
Author: Paulo Alcantara <palcantara@suse.com>
Date:   Thu Nov 15 15:20:52 2018 +0100

    cifs: Fix separator when building path from dentry
    
    commit c988de29ca161823db6a7125e803d597ef75b49c upstream.
    
    Make sure to use the CIFS_DIR_SEP(cifs_sb) as path separator for
    prefixpath too. Fixes a bug with smb1 UNIX extensions.
    
    Fixes: a6b5058fafdf ("fs/cifs: make share unaccessible at root level mountable")
    Signed-off-by: Paulo Alcantara <palcantara@suse.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 564e0f8b22814e1b811bbc77953c9554e2a08328 ......
	 orig commit -> abcfb5d979892fc8b12574551fc907c05fe1b11b ......
checking f2aa5d3771351ed45cf9f5ce73bc4695a09318be ......
	 orig commit -> 3925a16ae980c79d1a8fd182d7f9487da1edd4dc ......
checking 3633bd8220a778e41de3e75930aa21f8a51a1629 ......
	 orig commit -> d2e12e66a939c54ed84e5f1b6947f0c45f6c56eb ......
checking 54c4ddcbab7396c58e1fc745663417ad7e872137 ......
	 orig commit -> 76bc8e2843b66f8205026365966b49ec6da39ae7 ......
checking 7a2cfda740e60097c1369c274d2772af9d073b76 ......
	 orig commit -> 67f8ecc550b5bda03335f845dc869b8501d25fd0 ......
checking 02808fd9e78d31e8e3e41cab06acc0a1153b0ef6 ......
	 orig commit -> bba142957e04c400440d2df83c1b3b2dfc42e220 ......
checking 5c93b99d27ffe7d1a3c6d43429bd1966b4c353dc ......
	 orig commit -> 23bc6ab0a0912146fd674a0becc758c3162baabc ......
checking 663c26074f48d08683877dc8b4256dc12ffcfe0e ......
	 orig commit -> 152bc19e2fc2b7fce7ffbc2a9cea94b147223702 ......
checking 3f32fd3a3a49780994d4f1b32816adfba75777cb ......
	 orig commit -> 7dd91d52a813f99a95d20f539b777e9e6198b931 ......
checking 31edf03971c2dd1189024f87b349f66a473aeb4b ......
	 orig commit -> 6311f1261f59ce5e51fbe5cc3b5e7737197316ac ......
checking bddb6876b6e40d9c787b04087bcb2de2cf044fb6 ......
	 orig commit -> 29debab0a94035a390801d1f177d171d014b7765 ......
checking fdec508104e768a64ac0a7d8571ceb52689deed2 ......
	 orig commit -> fc8a601e1175ae351f662506030f9939cb7fdbfe ......
checking fb76628b66f88b6c8206fa906f524362869b5c03 ......
	 orig commit -> eaf9a7361f47727b166688a9f2096854eef60fbe ......
checking 1fe16eaeb94068fbe002ec75cb4799a2474108fd ......
	 orig commit -> 6a8588156657e607fcfdffd46c1daae8ba88a1e5 ......
checking f8ad7cb60062a5a0514eb720b44f164276ebc4e0 ......
	 orig commit -> af766ee005c496b8567976dc3eed7676443ed6de ......
checking 8dbd7a3684fa0c33ed9448a237e1b0ac2cb3d52e ......
	 orig commit -> bbdb34c90aeb8b2253eae88029788ebe1d7f2fd4 ......
checking 33201bcbc309af1d90372b078b8cc5017e5fff33 ......
	 orig commit -> 126f40298446a82116e1f92a1aaf72b8c8228fae ......
checking 175845952ef0b36f89032fe4bad455e898571f52 ......
	 orig commit -> 83934b75c368f529d084815c463a7ef781dc9751 ......
checking 9e416faea82dd9231228ba5025c9d62f041e7726 ......
	 orig commit -> ca6e6126db5494f18c6c6615060d4d803b528bff ......
checking ddc35199f2ad8e30c3a018e5a71c56dc60a791cd ......
	 orig commit -> 2a00932f082aff93c3a55426e0c7af6d0ec03997 ......
checking 43ef3b69698bfcd23c6608b511cd055bee491df1 ......
	 orig commit -> f37be01e6dc606f2fcc5e95c9933d948ce19bd35 ......
checking 0f984405d09114d07886850868a2a17232ab0f32 ......
	 orig commit -> 9835f1b70bb3890d38308b9be4fb9d7451ba67f1 ......
checking 695c69bf304d7874e0b918684818711f0d7830f9 ......
	 orig commit -> 5fc8f707a2aa40c767c3a338738b9b6fcd151ac1 ......
checking e990e8ba92c63136f7678a8bbd656af53318343b ......
	 orig commit -> 0f5d050ceaa31b2229102211d60c149f920df3aa ......
	 orig commit -> 1bc6664bdfb949bc69a08113801e7d6acbf6bc3f ......
		 1bc6664bdfb949bc69a08113801e7d6acbf6bc3f has problem. Fixes commit -> 0f5d050ceaa31b2229102211d60c149f920df3aa
commit e990e8ba92c63136f7678a8bbd656af53318343b
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Tue Jul 12 19:57:57 2016 +0200

    s390/cio: allow to reset channel measurement block
    
    commit 0f5d050ceaa31b2229102211d60c149f920df3aa upstream.
    
    Prior to commit 1bc6664bdfb949bc69a08113801e7d6acbf6bc3f a call to
    enable_cmf for a device for which channel measurement was already
    enabled resulted in a reset of the measurement data.
    
    What looked like bugs at the time (a 2nd allocation was triggered
    but failed, reset was called regardless of previous failures, and
    errors have not been reported to userspace) was actually something
    at least one userspace tool depended on. Restore that behavior in
    a sane way.
    
    Fixes: 1bc6664bdfb ("s390/cio: use device_lock during cmb activation")
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 144941bd9907d0e616229f0b6dddcad512030407 ......
	 orig commit -> 2f1fe81123f59271bddda673b60116bde9660385 ......
checking 6bd2820f906f75c4a05484a5b446e50a1f1b0e34 ......
	 orig commit -> b244c9fc251e14a083a1cbf04bef10bd99303a76 ......
checking b9ab0b3614fca6b363b2f2cfa918e7b7f74592ea ......
	 orig commit -> 30b072ce0356e8b141f4ca6da7220486fa3641d9 ......
checking 41490064ad279e8364d993e0cb1117209799fd80 ......
	 orig commit -> 93d17397e4e2182fdaad503e2f9da46202c0f1c3 ......
checking e1a90eb8afa42b02f46897b881b9e19d3594159c ......
	 orig commit -> f024ee098476a3e620232e4a78cfac505f121245 ......
checking be7acd281e5ab34c87f4cc930f42c3fdf49ee33d ......
	 orig commit -> 04a848106193b134741672f7e4e444b50c70b631 ......
checking 6d894c3f0f1cadd5649364556a9de30a9e8c0f74 ......
	 orig commit -> ad1cfdf518976447e6b0d31517bad4e3ebbce6bb ......
checking 4c3b381fadc08342a2f4b1182c9f710983ab299c ......
	 orig commit -> 0bd50d719b004110e791800450ad204399100a86 ......
checking e5cf298670b360550a9b772b02aaafd13652fe74 ......
	 orig commit -> 32b9ccbc3522811c0e483637b85ae25f5491296f ......
checking 0b3ff17cabc6b06226f45b63c1d62fc186f3080d ......
	 orig commit -> 3dbd3212f81b2b410a34a922055e2da792864829 ......
checking 4a2773383ff778fc050e45f975adbcdc79df003d ......
	 orig commit -> a246b8198f776a16d1d3a3bbfc2d437bad766b29 ......
checking 580b1bbcc94e37d24e7469b3778338e4e988b190 ......
	 orig commit -> 0058f0871efe7b01c6f2b3046c68196ab73e96da ......
		 0058f0871efe7b01c6f2b3046c68196ab73e96da has problem. Fixes commit -> b389f173aaa1204d6dc1f299082a162eb0491545
commit 990a142ee0d3b504a0a3c23a16e2cda41c5d45cf
Author: Richard Genoud <richard.genoud@gmail.com>
Date:   Tue Dec 6 13:05:33 2016 +0100

    tty/serial: atmel: RS485 half duplex w/DMA: enable RX after TX is done
    
    commit b389f173aaa1204d6dc1f299082a162eb0491545 upstream.
    
    When using RS485 in half duplex, RX should be enabled when TX is
    finished, and stopped when TX starts.
    
    Before commit 0058f0871efe7b01c6 ("tty/serial: atmel: fix RS485 half
    duplex with DMA"), RX was not disabled in atmel_start_tx() if the DMA
    was used. So, collisions could happened.
    
    But disabling RX in atmel_start_tx() uncovered another bug:
    RX was enabled again in the wrong place (in atmel_tx_dma) instead of
    being enabled when TX is finished (in atmel_complete_tx_dma), so the
    transmission simply stopped.
    
    This bug was not triggered before commit 0058f0871efe7b01c6
    ("tty/serial: atmel: fix RS485 half duplex with DMA") because RX was
    never disabled before.
    
    Moving atmel_start_rx() in atmel_complete_tx_dma() corrects the problem.
    
    Reported-by: Gil Weber <webergil@gmail.com>
    Fixes: 0058f0871efe7b01c6
    Tested-by: Gil Weber <webergil@gmail.com>
    Signed-off-by: Richard Genoud <richard.genoud@gmail.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Tested-by: Bryan Evenson <bevenson@melinkcorp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8af97d26ce2054f4914eb382be2ab1d7c994b190 ......
	 orig commit -> e51e4d8a185de90424b03f30181b35f29c46a25a ......
checking 79b8ddbebf7420fa71c76d4f5f892b21ef1e4456 ......
	 orig commit -> 30acf549ca1e81859a67590ab9ecfce3d1050a0b ......
checking ec2fdbebceb9d98fcf2f94a6d5a6f644491f2f76 ......
	 orig commit -> 9113c2aa05e9848cd4f1154abee17d4f265f012d ......
checking f4a65209ddfce90381787859b97034f405820d63 ......
	 orig commit -> 2ce39ad15182604beb6c8fa8bed5e46b59fd1082 ......
checking a5a095803c2469cd3d1fc5a11acc1a8150b7c9f4 ......
	 orig commit -> e19a6ee2460bdd0d0055a6029383422773f9999a ......
checking 4077ef4797a8ff007a2de091c9befee4882c4790 ......
	 orig commit -> 681fef8380eb818c0b845fca5d2ab1dcbab114ee ......
checking 97917f45211d7e5c0afd5f4dc33982c096a26722 ......
	 orig commit -> 4fdef698383db07d829da567e0e405fc41ff3a89 ......
checking 3ab02b35d5ce7a161ff8ad141db207837015ad6c ......
	 orig commit -> 3c0415fa08548e3bc63ef741762664497ab187ed ......
checking 558b4adac08dc14106af03b87216723f1f98d08c ......
	 orig commit -> 9cad39fe4e4a4fe95d8ea5a7b0692b0a6e89e38b ......
checking 09796e2cfa937e7c8a0c8f87cdae21a7168477c8 ......
	 orig commit -> 25b1f9acc452209ae0fcc8c1332be852b5c52f53 ......
checking 0927c5f9515278458c1b0d93ed7aa8fea66d798b ......
	 orig commit -> 15e4292a2d21e9997fdb2b8c014cc461b3f268f0 ......
checking f1d7992894fafb62b790b5112630b4f081b3b454 ......
	 orig commit -> 0015f9156092d07b3ec06d37d014328419d5832e ......
checking bbd7cf3d188c2cae5784703d767900c0a9740db7 ......
	 orig commit -> ffeee83aa0461992e8a99a59db2df31933e60362 ......

Check from v4.4.40 to v4.4.41
Commit count: 59
checking cdd86b9722657feffdca5a12ecc34c30be64e618 ......
checking 9f11a0ab6a9650de4b458b2a8759a32c2e4e89f0 ......
	 orig commit -> 8354491c9d5b06709384cea91d13019bf5e61449 ......
checking d85727365859108cbcf832c2b3c38358ddc7638b ......
	 orig commit -> 128394eff343fc6d2f32172f03e24829539c5835 ......
checking 7fb5a936457dff3616644d1725f28002048819f7 ......
	 orig commit -> 79e51b5c2deea542b3bb8c66e0d502230b017dde ......
checking e321f384d8a58e546469cc8d3ca04257ef474d4c ......
	 orig commit -> d0905ca757bc40bd1ebc261a448a521b064777d7 ......
checking e5de1c724c060bb8a963aaed8e09e7d1a5f3ad1c ......
	 orig commit -> 80f23935cadb1c654e81951f5a8b7ceae0acc1b4 ......
checking cadaba838f1bfe74ea4ab21bb675f56a32e4efca ......
	 orig commit -> 6dff5b67054e17c91bd630bcdda17cfca5aa4215 ......
checking 8a2bcaae1bc7a33d51d668d0661e0636a4aa7bc8 ......
	 orig commit -> c0cf3ef5e0f47e385920450b245d22bead93e7ad ......
checking b66e3126569e25e11bc3913e41f6f39445508338 ......
	 orig commit -> 5c056fdc5b474329037f2aa18401bd73033e0ce0 ......
		 5c056fdc5b474329037f2aa18401bd73033e0ce0 has problem. Fixes commit -> 0fd3fd0a9bb0b02b6435bb7070e9f7b82a23f068
commit 82774efd6d34167fdb260cd74ee37fcbf323dda0
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Tue Feb 5 20:30:27 2019 +0100

    libceph: handle an empty authorize reply
    
    commit 0fd3fd0a9bb0b02b6435bb7070e9f7b82a23f068 upstream.
    
    The authorize reply can be empty, for example when the ticket used to
    build the authorizer is too old and TAG_BADAUTHORIZER is returned from
    the service.  Calling ->verify_authorizer_reply() results in an attempt
    to decrypt and validate (somewhat) random data in au->buf (most likely
    the signature block from calc_signature()), which fails and ends up in
    con_fault_finish() with !con->auth_retry.  The ticket isn't invalidated
    and the connection is retried again and again until a new ticket is
    obtained from the monitor:
    
      libceph: osd2 192.168.122.1:6809 bad authorize reply
      libceph: osd2 192.168.122.1:6809 bad authorize reply
      libceph: osd2 192.168.122.1:6809 bad authorize reply
      libceph: osd2 192.168.122.1:6809 bad authorize reply
    
    Let TAG_BADAUTHORIZER handler kick in and increment con->auth_retry.
    
    Cc: stable@vger.kernel.org
    Fixes: 5c056fdc5b47 ("libceph: verify authorize reply on connect")
    Link: https://tracker.ceph.com/issues/20164
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Sage Weil <sage@redhat.com>
    [idryomov@gmail.com: backport to 4.4: extra arg, no CEPHX_V2]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking edfe6a79f905a1252ac6783771b90b64572109a8 ......
	 orig commit -> 6496ebd7edf446fccf8266a1a70ffcb64252593e ......
checking 8db00756afbdfbe3392a0678971f783b8dbad868 ......
	 orig commit -> 5a8a6b89c15766446d845671d574a9243b6d8786 ......
checking 44685f03dd5648407c5cf8d5a1a0eefd24036a27 ......
	 orig commit -> 5fc4b067ec082c3127e0156f800769b7e0dce078 ......
checking 952a9f5af9f8565abd50cb8daee178176f2e3aeb ......
	 orig commit -> fba332b079029c2f4f7e84c1c1cd8e3867310c90 ......
checking b7f73ada92a396b7ca987695af3243944c757295 ......
	 orig commit -> d3a2418ee36a59bc02e9d454723f3175dcf4bfd9 ......
checking 7b13692156167666ba9bc5e30e41fe0eecd86bd0 ......
	 orig commit -> 11b642b84e8c43e8597de031678d15c08dd057bc ......
checking 0de381ca35b5e997903c25297f0b0c7ecc74342e ......
	 orig commit -> 2fe2f378dd45847d2643638c07a7658822087836 ......
checking e945df4c6bc2e3e188e02b199ce1766f557890e5 ......
	 orig commit -> 794de08a16cf1fc1bf785dc48f66d36218cf6d88 ......
checking 88e41441ccd45eb6d2f68b6260a62b8d8e6e0316 ......
	 orig commit -> e74e259939275a5dd4e0d02845c694f421e249ad ......
checking 2ef502e860f12b9e305151eef3bbb9ea4009a60d ......
	 orig commit -> 847fa1a6d3d00f3bdf68ef5fa4a786f644a0dd67 ......
checking 19aa9c14989e7a3fe04b444f146a05ff857b058e ......
	 orig commit -> ef85b67385436ddc1998f45f1d6a210f935b3388 ......
checking 129e4323df377297408f2da99a0e48e01a7c60fd ......
	 orig commit -> f064a0de1579fabded8990bed93971e30deb9ecb ......
checking ddf5718adfb873ecf41b38e46197498bcc8e2262 ......
	 orig commit -> 0d808df06a44200f52262b6eb72bcb6042f5a7c5 ......
checking 1c8841c9b7d27da058c62da21c189f4bad4edac2 ......
	 orig commit -> e8d7c33232e5fdfa761c3416539bc5b4acd12db5 ......
checking d78006d2345f87889918a8a7aa3764628ff84263 ......
	 orig commit -> 04da73803c05dc1150ccc31cbf93e8cd56679c09 ......
checking b988320dab539678a19466834012f75d7883cfc7 ......
	 orig commit -> 5457e03de918f7a3e294eb9d26a608ab8a579976 ......
checking 656c9abd574bc4be3890cd2d104a422dd93ca3aa ......
	 orig commit -> 2e700f8d85975f516ccaad821278c1fe66b2cc98 ......
checking 429a533a3d9ac849b4c9c3ceed14aa4282301748 ......
	 orig commit -> 08fe007968b2b45e831daf74899f79a54d73f773 ......
checking dbb67e1d585d81a720fa75cee767e49dc4a50164 ......
	 orig commit -> d2a145252c52792bc59e4767b486b26c430af4bb ......
checking 565ae61d8995916da836b98f8c2f12a4192525fa ......
	 orig commit -> 6f2ce1c6af37191640ee3ff6e8fc39ea10352f4c ......
		 6f2ce1c6af37191640ee3ff6e8fc39ea10352f4c has problem. Fixes commit -> fe67888fc007a76b81e37da23ce5bd8fb95890b0
ab31fd0ce65ec93828b617123792c1bb7c6dcc42
commit 6e9abbc96411ba65236dd363949c5106f7845e88
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Oct 13 15:40:07 2017 +0200

    scsi: zfcp: fix erp_action use-before-initialize in REC action trace
    
    commit ab31fd0ce65ec93828b617123792c1bb7c6dcc42 upstream.
    
    v4.10 commit 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN
    recovery") extended accessing parent pointer fields of struct
    zfcp_erp_action for tracing.  If an erp_action has never been enqueued
    before, these parent pointer fields are uninitialized and NULL. Examples
    are zfcp objects freshly added to the parent object's children list,
    before enqueueing their first recovery subsequently. In
    zfcp_erp_try_rport_unblock(), we iterate such list. Accessing erp_action
    fields can cause a NULL pointer dereference.  Since the kernel can read
    from lowcore on s390, it does not immediately cause a kernel page
    fault. Instead it can cause hangs on trying to acquire the wrong
    erp_action->adapter->dbf->rec_lock in zfcp_dbf_rec_action_lvl()
                          ^bogus^
    while holding already other locks with IRQs disabled.
    
    Real life example from attaching lots of LUNs in parallel on many CPUs:
    
    crash> bt 17723
    PID: 17723  TASK: ...               CPU: 25  COMMAND: "zfcperp0.0.1800"
     LOWCORE INFO:
      -psw      : 0x0404300180000000 0x000000000038e424
      -function : _raw_spin_lock_wait_flags at 38e424
    ...
     #0 [fdde8fc90] zfcp_dbf_rec_action_lvl at 3e0004e9862 [zfcp]
     #1 [fdde8fce8] zfcp_erp_try_rport_unblock at 3e0004dfddc [zfcp]
     #2 [fdde8fd38] zfcp_erp_strategy at 3e0004e0234 [zfcp]
     #3 [fdde8fda8] zfcp_erp_thread at 3e0004e0a12 [zfcp]
     #4 [fdde8fe60] kthread at 173550
     #5 [fdde8feb8] kernel_thread_starter at 10add2
    
    zfcp_adapter
     zfcp_port
      zfcp_unit <address>, 0x404040d600000000
      scsi_device NULL, returning early!
    zfcp_scsi_dev.status = 0x40000000
    0x40000000 ZFCP_STATUS_COMMON_RUNNING
    
    crash> zfcp_unit <address>
    struct zfcp_unit {
      erp_action = {
        adapter = 0x0,
        port = 0x0,
        unit = 0x0,
      },
    }
    
    zfcp_erp_action is always fully embedded into its container object. Such
    container object is never moved in its object tree (only add or delete).
    Hence, erp_action parent pointers can never change.
    
    To fix the issue, initialize the erp_action parent pointers before
    adding the erp_action container to any list and thus before it becomes
    accessible from outside of its initializing function.
    
    In order to also close the time window between zfcp_erp_setup_act()
    memsetting the entire erp_action to zero and setting the parent pointers
    again, drop the memset and instead explicitly initialize individually
    all erp_action fields except for parent pointers. To be extra careful
    not to introduce any other unintended side effect, even keep zeroing the
    erp_action fields for list and timer. Also double-check with
    WARN_ON_ONCE that erp_action parent pointers never change, so we get to
    know when we would deviate from previous behavior.
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN recovery")
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit d8007fb2e81618e08c4cd44ea8d63f5872ce5840
Author: Steffen Maier <maier@linux.ibm.com>
Date:   Tue Mar 26 14:36:58 2019 +0100

    scsi: zfcp: fix rport unblock if deleted SCSI devices on Scsi_Host
    
    commit fe67888fc007a76b81e37da23ce5bd8fb95890b0 upstream.
    
    An already deleted SCSI device can exist on the Scsi_Host and remain there
    because something still holds a reference.  A new SCSI device with the same
    H:C:T:L and FCP device, target port WWPN, and FCP LUN can be created.  When
    we try to unblock an rport, we still find the deleted SCSI device and
    return early because the zfcp_scsi_dev of that SCSI device is not
    ZFCP_STATUS_COMMON_UNBLOCKED. Hence we miss to unblock the rport, even if
    the new proper SCSI device would be in good state.
    
    Therefore, skip deleted SCSI devices when iterating the sdevs of the shost.
    [cf. __scsi_device_lookup{_by_target}() or scsi_device_get()]
    
    The following abbreviated trace sequence can indicate such problem:
    
    Area           : REC
    Tag            : ersfs_3
    LUN            : 0x4045400300000000
    WWPN           : 0x50050763031bd327
    LUN status     : 0x40000000     not ZFCP_STATUS_COMMON_UNBLOCKED
    Ready count    : n              not incremented yet
    Running count  : 0x00000000
    ERP want       : 0x01
    ERP need       : 0xc1           ZFCP_ERP_ACTION_NONE
    
    Area           : REC
    Tag            : ersfs_3
    LUN            : 0x4045400300000000
    WWPN           : 0x50050763031bd327
    LUN status     : 0x41000000
    Ready count    : n+1
    Running count  : 0x00000000
    ERP want       : 0x01
    ERP need       : 0x01
    
    ...
    
    Area           : REC
    Level          : 4              only with increased trace level
    Tag            : ertru_l
    LUN            : 0x4045400300000000
    WWPN           : 0x50050763031bd327
    LUN status     : 0x40000000
    Request ID     : 0x0000000000000000
    ERP status     : 0x01800000
    ERP step       : 0x1000
    ERP action     : 0x01
    ERP count      : 0x00
    
    NOT followed by a trace record with tag "scpaddy"
    for WWPN 0x50050763031bd327.
    
    Signed-off-by: Steffen Maier <maier@linux.ibm.com>
    Fixes: 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN recovery")
    Cc: <stable@vger.kernel.org> #2.6.32+
    Reviewed-by: Jens Remus <jremus@linux.ibm.com>
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e9abbc96411ba65236dd363949c5106f7845e88
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Oct 13 15:40:07 2017 +0200

    scsi: zfcp: fix erp_action use-before-initialize in REC action trace
    
    commit ab31fd0ce65ec93828b617123792c1bb7c6dcc42 upstream.
    
    v4.10 commit 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN
    recovery") extended accessing parent pointer fields of struct
    zfcp_erp_action for tracing.  If an erp_action has never been enqueued
    before, these parent pointer fields are uninitialized and NULL. Examples
    are zfcp objects freshly added to the parent object's children list,
    before enqueueing their first recovery subsequently. In
    zfcp_erp_try_rport_unblock(), we iterate such list. Accessing erp_action
    fields can cause a NULL pointer dereference.  Since the kernel can read
    from lowcore on s390, it does not immediately cause a kernel page
    fault. Instead it can cause hangs on trying to acquire the wrong
    erp_action->adapter->dbf->rec_lock in zfcp_dbf_rec_action_lvl()
                          ^bogus^
    while holding already other locks with IRQs disabled.
    
    Real life example from attaching lots of LUNs in parallel on many CPUs:
    
    crash> bt 17723
    PID: 17723  TASK: ...               CPU: 25  COMMAND: "zfcperp0.0.1800"
     LOWCORE INFO:
      -psw      : 0x0404300180000000 0x000000000038e424
      -function : _raw_spin_lock_wait_flags at 38e424
    ...
     #0 [fdde8fc90] zfcp_dbf_rec_action_lvl at 3e0004e9862 [zfcp]
     #1 [fdde8fce8] zfcp_erp_try_rport_unblock at 3e0004dfddc [zfcp]
     #2 [fdde8fd38] zfcp_erp_strategy at 3e0004e0234 [zfcp]
     #3 [fdde8fda8] zfcp_erp_thread at 3e0004e0a12 [zfcp]
     #4 [fdde8fe60] kthread at 173550
     #5 [fdde8feb8] kernel_thread_starter at 10add2
    
    zfcp_adapter
     zfcp_port
      zfcp_unit <address>, 0x404040d600000000
      scsi_device NULL, returning early!
    zfcp_scsi_dev.status = 0x40000000
    0x40000000 ZFCP_STATUS_COMMON_RUNNING
    
    crash> zfcp_unit <address>
    struct zfcp_unit {
      erp_action = {
        adapter = 0x0,
        port = 0x0,
        unit = 0x0,
      },
    }
    
    zfcp_erp_action is always fully embedded into its container object. Such
    container object is never moved in its object tree (only add or delete).
    Hence, erp_action parent pointers can never change.
    
    To fix the issue, initialize the erp_action parent pointers before
    adding the erp_action container to any list and thus before it becomes
    accessible from outside of its initializing function.
    
    In order to also close the time window between zfcp_erp_setup_act()
    memsetting the entire erp_action to zero and setting the parent pointers
    again, drop the memset and instead explicitly initialize individually
    all erp_action fields except for parent pointers. To be extra careful
    not to introduce any other unintended side effect, even keep zeroing the
    erp_action fields for list and timer. Also double-check with
    WARN_ON_ONCE that erp_action parent pointers never change, so we get to
    know when we would deviate from previous behavior.
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN recovery")
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3b3739dfa69cf5ada8e5a999990e0fb51f00e6b8 ......
	 orig commit -> 56d23ed7adf3974f10e91b643bd230e9c65b5f79 ......
checking 1cc0f9488b913a798a53eb7e4a73211c4d64a24c ......
	 orig commit -> dac37e15b7d511e026a9313c8c46794c144103cd ......
checking bccd78746f8838db63ddd7fea65e4f76ec0434d5 ......
	 orig commit -> d5573584429254a14708cf8375c47092b5edaf2c ......
checking 49ea06561154e7f9610fb212d55cc1eadc66f726 ......
	 orig commit -> 18e1c7f68a5814442abad849abe6eacbf02ffd7c ......
checking edf1169bbbaaebba9e0d08cf97004b6c411e0041 ......
	 orig commit -> 31b5929d533f5183972cf57a7844b456ed996f3c ......
checking f4f02a856a92e1a2990a8d0f55d08a78a29c3cc0 ......
	 orig commit -> af309226db916e2c6e08d3eba3fa5c34225200c4 ......
checking abb78811e242b5692fb4d8a53014b27831bb9173 ......
	 orig commit -> d5f8e166c25750adc147b0adf64a62a91653438a ......
checking 1f9c91a37542b24374c160c0139b8943183124bb ......
	 orig commit -> 298360af3dab45659810fdc51aba0c9f4097e4f6 ......
checking 970dc8cdec9c4c8c91590071123275df2e80d1a2 ......
	 orig commit -> 0a97c81a9717431e6c57ea845b59c3c345edce67 ......
checking 0e0b70f581fc8aeaf7ca7907daceb536a56c21f2 ......
	 orig commit -> 8729675c00a8d13cb2094d617d70a4a4da7d83c5 ......
checking 62a272498dbe3ac3945bdd5bbe0428188b71ffa3 ......
	 orig commit -> 6b16cf7785a4200b1bddf4f70c9dda2efc49e278 ......
		 6b16cf7785a4200b1bddf4f70c9dda2efc49e278 has problem. Fixes commit -> d74c67dd7800fc7aae381f272875c337f268806c
commit b32128386bf87d8d632164ad2d432774f4933b9a
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Wed Feb 15 11:28:45 2017 +0900

    drm/radeon: Use mode h/vdisplay fields to hide out of bounds HW cursor
    
    commit d74c67dd7800fc7aae381f272875c337f268806c upstream.
    
    The crtc_h/vdisplay fields may not match the CRTC viewport dimensions
    with special modes such as interlaced ones.
    
    Fixes the HW cursor disappearing in the bottom half of the screen with
    interlaced modes.
    
    Fixes: 6b16cf7785a4 ("drm/radeon: Hide the HW cursor while it's out of bounds")
    Reported-by: Ashutosh Kumar <ashutosh.kumar@amd.com>
    Tested-by: Sonny Jiang <sonny.jiang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking deac395e0ba87af72167b22f66892cde85968b8d ......
	 orig commit -> dcab0fa64e300afa18f39cd98d05e0950f652adf ......
checking cb8d63d885e978f72bb4b3204cde2ac04d4ac42c ......
	 orig commit -> 5b3800a6b763874e4a23702fb9628d3bd3315ce9 ......
checking adea4a7b0f2b5534712cf69b699dfc071447269f ......
	 orig commit -> b27add13f500469127afdf011dbcc9c649e16e54 ......
checking d32d4b3d7c9f6164170c0277740fd45bcd364bf6 ......
	 orig commit -> f4e65efc88b64c1dbca275d42a188edccedb56c6 ......
checking 3a2990e67b056d2f9fe8053569cc9752b000e8fa ......
	 orig commit -> 5dc7f4aa9d84ea94b54a9bfcef095f0289f1ebda ......
checking a163451c80b028d97b5224c74517dbf67ac45f2c ......
	 orig commit -> 768e847759d551c96e129e194588dbfb11a1d576 ......
checking 69e236e70ead32e8cc2b84ce075dbe1319ca166b ......
	 orig commit -> 6276e53fa8c06a3a5cf7b95b77b079966de9ad66 ......
		 6276e53fa8c06a3a5cf7b95b77b079966de9ad66 has problem. Fixes commit -> fd25ea29093e275195d0ae8b2573021a1c98959f
checking 2c2375e40d28b3d0fd961448fd12963f66b4b452 ......
	 orig commit -> 350fa038c31b056fc509624efb66348ac2c1e3d0 ......
checking 01b6089b5622bbcb2c77ce655a218fb7b8ccd77d ......
	 orig commit -> 857a661020a2de3a0304edf33ad656abee100891 ......
checking 5283a7bedbcbdfa654c8a4d7fb314d734a56e544 ......
	 orig commit -> 655c4d442d1213b617926cc6d54e2a9a793fb46b ......
checking e692edec93c10b480a7cbd3c76de90da93b82075 ......
	 orig commit -> f37fabb8643eaf8e3b613333a72f683770c85eca ......
checking 9d9541d44a26dea009247e001ebd7775e2feeb37 ......
	 orig commit -> 68af4fa8f39b542a6cde7ac19518d88e9b3099dc ......
checking e01b04be3eb00456d65278cfa56cfd8103872bfb ......
	 orig commit -> 9c1645727b8fa90d07256fdfcc45bf831242a3ab ......
checking 96ea1b9ea0996a563b3dd983f636424e92c11143 ......
	 orig commit -> 295070e9aa015abb9b92cccfbb1e43954e938133 ......
checking 842ec27cd3f2d9d1f4a8c5900f2e41be864e9d49 ......
	 orig commit -> 61e53bd0047d58caee0c7170613045bf96de4458 ......
checking dae7cb41483423e2a64b128d73718b8ae5e96d2c ......
	 orig commit -> 79e57dd113d307a6c74773b8aaecf5442068988a ......
checking b63929e8e130a97303dfacc28f558262f0605708 ......
	 orig commit -> e6f462df9acd2a3295e5d34eb29e2823220cf129 ......
checking 05f4183ab5a450de5fd0033c8cfd41223cbd942d ......
	 orig commit -> ba9f93f82abafe2552eac942ebb11c2df4f8dd7f ......
		 ba9f93f82abafe2552eac942ebb11c2df4f8dd7f has problem. Fixes commit -> 60f59ce0278557f7896d5158ae6d12a4855a72cc
commit a82ac399bcf289d5152613afa644846ae2320e23
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Wed Dec 21 11:18:55 2016 -0600

    rtlwifi: rtl_usb: Fix missing entry in USB driver's private data
    
    commit 60f59ce0278557f7896d5158ae6d12a4855a72cc upstream.
    
    These drivers need to be able to reference "struct ieee80211_hw" from
    the driver's private data, and vice versa. The USB driver failed to
    store the address of ieee80211_hw in the private data. Although this
    bug has been present for a long time, it was not exposed until
    commit ba9f93f82aba ("rtlwifi: Fix enter/exit power_save").
    
    Fixes: ba9f93f82aba ("rtlwifi: Fix enter/exit power_save")
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Cc: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f5d90f434c9a622a23719347677da010bc1e6d12 ......
	 orig commit -> 8052d7245b6089992343c80b38b14dbbd8354651 ......

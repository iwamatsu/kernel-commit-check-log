Check from v4.4.102 to v4.4.103
Commit count: 98
checking 08c15ad2e6278a5fe1b209e8fcdbd2d235c48f34 ......
checking 3d7214a338d72a66739e83b32fe6e78688051ecc ......
	 orig commit -> 2a0e60907e54dad75e9b3568d02bec11d6e74f6b ......
	 orig commit -> df80cd9b28b9ebaa284a41df611dbf3a2d05ca74 ......
checking c73eb1e0cc5675ebb584b3824b71f5c20ca33fc9 ......
	 orig commit -> 639b08810d6ad74ded2c5f6e233c4fcb9d147168 ......
checking eedd29f51078395ce8db909cf1130bd468d70ec8 ......
	 orig commit -> cabab3f9f5ca077535080b3252e6168935b914af ......
checking 681b2239862dd88abf28b73e17e4f48af443f72e ......
	 orig commit -> 1cab2a84f470e15ecc8e5143bfe9398c6e888032 ......
checking b63209c78f9ec90b1cb43e458918b89f53e0db1b ......
	 orig commit -> 73ba39ab9307340dc98ec3622891314bbc09cc2e ......
checking e88f3fb0e34059c6d697802dc385c756129c17a1 ......
	 orig commit -> 0ea617a298dcdc2251b4e10f83ac3f3e627b66e3 ......
checking 47b99a3306d08c03467b0efe13fc1bc1721afa15 ......
	 orig commit -> 3e38df136e453aa69eb4472108ebce2fb00b1ba6 ......
checking a1e4f6a151035a549d1192c03ff82c3d81da18ce ......
	 orig commit -> c2e756ff9e699865d294cdc112acfc36419cf5cc ......
checking 85f286d6f8cddb199d40fbf6a0dfba2eb4f94bd5 ......
	 orig commit -> dadab2d4e3cf708ceba22ecddd94aedfecb39199 ......
checking 8537e96e4351dc80efe1b713c058da488b3afd29 ......
	 orig commit -> 91ca1a8c584f55857b1f6ab20a1d3a1ce7a559bb ......
checking 266913b390c38f101971dfc6c1a5084e37fd41a7 ......
	 orig commit -> db4e5376d058af8924fafd0520a0942d92538d0e ......
checking 7e927748d4db4d248e919e44f4dd4891ba6b4d42 ......
	 orig commit -> 11197d006bcfabf0173a7820a163fcaac420d10e ......
checking 9825826ed7bd7ab22e835b88508f00057b2848c0 ......
	 orig commit -> 76f43b4c0a9337af22827d78de4f2b8fd5328489 ......
		 76f43b4c0a9337af22827d78de4f2b8fd5328489 has problem. Fixes commit -> 57629915d568c522ac1422df7bba4bee5b5c7a7c
commit 75252bfe9e493a314d62e820aea07a6c48dea833
Author: Ilan peer <ilan.peer@intel.com>
Date:   Mon Dec 26 18:17:36 2016 +0200

    mac80211: Fix addition of mesh configuration element
    
    commit 57629915d568c522ac1422df7bba4bee5b5c7a7c upstream.
    
    The code was setting the capabilities byte to zero,
    after it was already properly set previously. Fix it.
    
    The bug was found while debugging hwsim mesh tests failures
    that happened since the commit mentioned below.
    
    Fixes: 76f43b4c0a93 ("mac80211: Remove invalid flag operations in mesh TSF synchronization")
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Reviewed-by: Masashi Honma <masashi.honma@gmail.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Cc: Richard Sch√ºtz <rschuetz@uni-koblenz.de>
    Cc: Mathias Kretschmer <mathias.kretschmer@fit.fraunhofer.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f0d8fb74479b25ad56d25530ea5efc2881b02ad9 ......
	 orig commit -> 3db93756b501e5f0a3951c79cfa9ed43c26d3455 ......
checking 31447ebb1a863b611676e2787db7160e19bd7e3c ......
	 orig commit -> 972aa2c708703c21f14eb958b37e82aae2530e44 ......
checking 7e920566c352c9434010cbaf6a5ccd82c3ce73cf ......
	 orig commit -> 7cfe0455ee1218add152e986b89b4bb8dbeafcdd ......
checking ef751ca54602d380873b33580eb1f1da19c6b592 ......
	 orig commit -> 097e46d2ae90265d1afe141ba6208ba598b79e01 ......
checking b24769300a00453fb4d12a319c70516fe030354e ......
	 orig commit -> d2e202c06ca42d353d95df12437740921a6d05b5 ......
		 d2e202c06ca42d353d95df12437740921a6d05b5 has problem. Fixes commit -> 7be52c03bbf7c8f53211ed13810d64dcb2bc7168
checking 64b22ee723eed2e35265b9431db0e7587c53141f ......
	 orig commit -> 88407beb1b1462f706a1950a355fd086e1c450b6 ......
checking c4cf731af838706523c3746fafe49afaa323887c ......
	 orig commit -> 7357f89954b6d005df6ab8929759e78d7d9a80f9 ......
checking 7f69dc100400482425c108a0dc0102101e192a21 ......
	 orig commit -> 107fded7bf616ad6f46823d98b8ed6405d7adf2d ......
checking 609797646f9b1fbfa6817aec31ca1d0ea64efa19 ......
	 orig commit -> 6b6bbb5922a4b1d4b58125a572da91010295fba3 ......
checking d7c3d5333e39a3089ad259222b767a965963a693 ......
	 orig commit -> 7bb387c5ab12aeac3d5eea28686489ff46b53ca9 ......
checking 778395506a7f5744dce0cc14876c2f45ac779dea ......
	 orig commit -> fc318d64f3d91e15babac00e08354b1beb650b57 ......
checking 37a48e6d83f513c0edabe4f12a80cb9fc4b8286b ......
	 orig commit -> 977509f7c5c6fb992ffcdf4291051af343b91645 ......
checking 57d2ce1603101ce3f30d0ccdc35b98af08d2ed88 ......
	 orig commit -> 584a8279a44a800dea5a5c1e9d53a002e03016b4 ......
checking bbb1fc744894bdba5a94b46b3e178cfb2330831d ......
	 orig commit -> 19110cfbb34d4af0cdfe14cd243f3b09dc95b013 ......
		 19110cfbb34d4af0cdfe14cd243f3b09dc95b013 has problem. Fixes commit -> 4e7dc08e57c95673d2edaba8983c3de4dd1f65f5
4110e02eb45ea447ec6f5459c9934de0a273fb91
commit 905e863aa5bbb7ca36e29c1467d63914094abaf3
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Tue Feb 20 15:12:00 2018 +0900

    e1000e: Fix check_for_link return value with autoneg off
    
    [ Upstream commit 4e7dc08e57c95673d2edaba8983c3de4dd1f65f5 ]
    
    When autoneg is off, the .check_for_link callback functions clear the
    get_link_status flag and systematically return a "pseudo-error". This means
    that the link is not detected as up until the next execution of the
    e1000_watchdog_task() 2 seconds later.
    
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf9f240627b4b732c9aedfcdcf54ffcdcda911ad
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Mon Dec 11 16:26:40 2017 +0900

    e1000e: Fix e1000_check_for_copper_link_ich8lan return value.
    
    commit 4110e02eb45ea447ec6f5459c9934de0a273fb91 upstream.
    
    e1000e_check_for_copper_link() and e1000_check_for_copper_link_ich8lan()
    are the two functions that may be assigned to mac.ops.check_for_link when
    phy.media_type == e1000_media_type_copper. Commit 19110cfbb34d ("e1000e:
    Separate signaling for link check/link up") changed the meaning of the
    return value of check_for_link for copper media but only adjusted the first
    function. This patch adjusts the second function likewise.
    
    Reported-by: Christian Hesse <list@eworm.de>
    Reported-by: Gabriel C <nix.or.die@gmail.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=198047
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Tested-by: Christian Hesse <list@eworm.de>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 905e863aa5bbb7ca36e29c1467d63914094abaf3
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Tue Feb 20 15:12:00 2018 +0900

    e1000e: Fix check_for_link return value with autoneg off
    
    [ Upstream commit 4e7dc08e57c95673d2edaba8983c3de4dd1f65f5 ]
    
    When autoneg is off, the .check_for_link callback functions clear the
    get_link_status flag and systematically return a "pseudo-error". This means
    that the link is not detected as up until the next execution of the
    e1000_watchdog_task() 2 seconds later.
    
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf9f240627b4b732c9aedfcdcf54ffcdcda911ad
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Mon Dec 11 16:26:40 2017 +0900

    e1000e: Fix e1000_check_for_copper_link_ich8lan return value.
    
    commit 4110e02eb45ea447ec6f5459c9934de0a273fb91 upstream.
    
    e1000e_check_for_copper_link() and e1000_check_for_copper_link_ich8lan()
    are the two functions that may be assigned to mac.ops.check_for_link when
    phy.media_type == e1000_media_type_copper. Commit 19110cfbb34d ("e1000e:
    Separate signaling for link check/link up") changed the meaning of the
    return value of check_for_link for copper media but only adjusted the first
    function. This patch adjusts the second function likewise.
    
    Reported-by: Christian Hesse <list@eworm.de>
    Reported-by: Gabriel C <nix.or.die@gmail.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=198047
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Tested-by: Christian Hesse <list@eworm.de>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5df4097cfc7049f64cc0896ede59e94087abaefe ......
	 orig commit -> d3509f8bc7b0560044c15f0e3ecfde1d9af757a6 ......
checking fbb2d8000a8f2a257f33ecb2d1fc346dcfe2e09f ......
	 orig commit -> c4c40e51f9c32c6dd8adf606624c930a1c4d9bbb ......
checking d6968bc56e4469324482b31fa3304fff0e196c46 ......
	 orig commit -> 7978db344719dab1e56d05e6fc04aaaddcde0a5e ......
checking fd3c395d4d466a8d76c6afd01c9a0e718daf6ca4 ......
	 orig commit -> 9523feac272ccad2ad8186ba4fcc89103754de52 ......
checking 91bd72dd8c72c603132bbbfd348a4216b8c83f58 ......
	 orig commit -> a0b3bc855374c50b5ea85273553485af48caf2f7 ......
checking cb1831a83e54cd3269a2420fce81c4fd8ae6f667 ......
	 orig commit -> 4bdced5c9a2922521e325896a7bbbf0132c94e56 ......
		 4bdced5c9a2922521e325896a7bbbf0132c94e56 has problem. Fixes commit -> 364f56653708ba8bcdefd4f0da2a42904baa8eeb
ad0f1d9d65938aec72a698116cd73a980916895e
f73c52a5bcd1710994e53fbccc378c42b97a06b6
commit af9de1a10f93f8d2c9ee5dce67c3abcd53ef7de5
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Jan 23 20:45:37 2018 -0500

    sched/rt: Use container_of() to get root domain in rto_push_irq_work_func()
    
    commit ad0f1d9d65938aec72a698116cd73a980916895e upstream.
    
    When the rto_push_irq_work_func() is called, it looks at the RT overloaded
    bitmask in the root domain via the runqueue (rq->rd). The problem is that
    during CPU up and down, nothing here stops rq->rd from changing between
    taking the rq->rd->rto_lock and releasing it. That means the lock that is
    released is not the same lock that was taken.
    
    Instead of using this_rq()->rd to get the root domain, as the irq work is
    part of the root domain, we can simply get the root domain from the irq work
    that is passed to the routine:
    
     container_of(work, struct root_domain, rto_push_work)
    
    This keeps the root domain consistent.
    
    Reported-by: Pavan Kondeti <pkondeti@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 4bdced5c9a292 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/CAEU1=PkiHO35Dzna8EQqNSKW1fr1y1zRQ5y66X117MG06sQtNA@mail.gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af36d95af55f4bac94128875491671771d3d4916
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Sat Dec 2 13:04:54 2017 -0500

    sched/rt: Do not pull from current CPU if only one CPU to pull
    
    commit f73c52a5bcd1710994e53fbccc378c42b97a06b6 upstream.
    
    Daniel Wagner reported a crash on the BeagleBone Black SoC.
    
    This is a single CPU architecture, and does not have a functional
    arch_send_call_function_single_ipi() implementation which can crash
    the kernel if that is called.
    
    As it only has one CPU, it shouldn't be called, but if the kernel is
    compiled for SMP, the push/pull RT scheduling logic now calls it for
    irq_work if the one CPU is overloaded, it can use that function to call
    itself and crash the kernel.
    
    Ideally, we should disable the SCHED_FEAT(RT_PUSH_IPI) if the system
    only has a single CPU. But SCHED_FEAT is a constant if sched debugging
    is turned off. Another fix can also be used, and this should also help
    with normal SMP machines. That is, do not initiate the pull code if
    there's only one RT overloaded CPU, and that CPU happens to be the
    current CPU that is scheduling in a lower priority task.
    
    Even on a system with many CPUs, if there's many RT tasks waiting to
    run on a single CPU, and that CPU schedules in another RT task of lower
    priority, it will initiate the PULL logic in case there's a higher
    priority RT task on another CPU that is waiting to run. But if there is
    no other CPU with waiting RT tasks, it will initiate the RT pull logic
    on itself (as it still has RT tasks waiting to run). This is a wasted
    effort.
    
    Not only does this help with SMP code where the current CPU is the only
    one with RT overloaded tasks, it should also solve the issue that
    Daniel encountered, because it will prevent the PULL logic from
    executing, as there's only one CPU on the system, and the check added
    here will cause it to exit the RT pull code.
    
    Reported-by: Daniel Wagner <wagi@monom.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-rt-users <linux-rt-users@vger.kernel.org>
    Fixes: 4bdced5c9 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/20171202130454.4cbbfe8d@vmware.local.home
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 911357aed6e35b4c094a5ca419ca987dc48bfbfb
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Jan 23 20:45:38 2018 -0500

    sched/rt: Up the root domain ref count when passing it around via IPIs
    
    commit 364f56653708ba8bcdefd4f0da2a42904baa8eeb upstream.
    
    When issuing an IPI RT push, where an IPI is sent to each CPU that has more
    than one RT task scheduled on it, it references the root domain's rto_mask,
    that contains all the CPUs within the root domain that has more than one RT
    task in the runable state. The problem is, after the IPIs are initiated, the
    rq->lock is released. This means that the root domain that is associated to
    the run queue could be freed while the IPIs are going around.
    
    Add a sched_get_rd() and a sched_put_rd() that will increment and decrement
    the root domain's ref count respectively. This way when initiating the IPIs,
    the scheduler will up the root domain's ref count before releasing the
    rq->lock, ensuring that the root domain does not go away until the IPI round
    is complete.
    
    Reported-by: Pavan Kondeti <pkondeti@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 4bdced5c9a292 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/CAEU1=PkiHO35Dzna8EQqNSKW1fr1y1zRQ5y66X117MG06sQtNA@mail.gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af9de1a10f93f8d2c9ee5dce67c3abcd53ef7de5
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Jan 23 20:45:37 2018 -0500

    sched/rt: Use container_of() to get root domain in rto_push_irq_work_func()
    
    commit ad0f1d9d65938aec72a698116cd73a980916895e upstream.
    
    When the rto_push_irq_work_func() is called, it looks at the RT overloaded
    bitmask in the root domain via the runqueue (rq->rd). The problem is that
    during CPU up and down, nothing here stops rq->rd from changing between
    taking the rq->rd->rto_lock and releasing it. That means the lock that is
    released is not the same lock that was taken.
    
    Instead of using this_rq()->rd to get the root domain, as the irq work is
    part of the root domain, we can simply get the root domain from the irq work
    that is passed to the routine:
    
     container_of(work, struct root_domain, rto_push_work)
    
    This keeps the root domain consistent.
    
    Reported-by: Pavan Kondeti <pkondeti@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 4bdced5c9a292 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/CAEU1=PkiHO35Dzna8EQqNSKW1fr1y1zRQ5y66X117MG06sQtNA@mail.gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af36d95af55f4bac94128875491671771d3d4916
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Sat Dec 2 13:04:54 2017 -0500

    sched/rt: Do not pull from current CPU if only one CPU to pull
    
    commit f73c52a5bcd1710994e53fbccc378c42b97a06b6 upstream.
    
    Daniel Wagner reported a crash on the BeagleBone Black SoC.
    
    This is a single CPU architecture, and does not have a functional
    arch_send_call_function_single_ipi() implementation which can crash
    the kernel if that is called.
    
    As it only has one CPU, it shouldn't be called, but if the kernel is
    compiled for SMP, the push/pull RT scheduling logic now calls it for
    irq_work if the one CPU is overloaded, it can use that function to call
    itself and crash the kernel.
    
    Ideally, we should disable the SCHED_FEAT(RT_PUSH_IPI) if the system
    only has a single CPU. But SCHED_FEAT is a constant if sched debugging
    is turned off. Another fix can also be used, and this should also help
    with normal SMP machines. That is, do not initiate the pull code if
    there's only one RT overloaded CPU, and that CPU happens to be the
    current CPU that is scheduling in a lower priority task.
    
    Even on a system with many CPUs, if there's many RT tasks waiting to
    run on a single CPU, and that CPU schedules in another RT task of lower
    priority, it will initiate the PULL logic in case there's a higher
    priority RT task on another CPU that is waiting to run. But if there is
    no other CPU with waiting RT tasks, it will initiate the RT pull logic
    on itself (as it still has RT tasks waiting to run). This is a wasted
    effort.
    
    Not only does this help with SMP code where the current CPU is the only
    one with RT overloaded tasks, it should also solve the issue that
    Daniel encountered, because it will prevent the PULL logic from
    executing, as there's only one CPU on the system, and the check added
    here will cause it to exit the RT pull code.
    
    Reported-by: Daniel Wagner <wagi@monom.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-rt-users <linux-rt-users@vger.kernel.org>
    Fixes: 4bdced5c9 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/20171202130454.4cbbfe8d@vmware.local.home
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5a11b8458b35da1ad797973aa3d81120dd42cce8 ......
	 orig commit -> 9cac9d2fb2fe0e0cadacdb94415b3fe49e3f724f ......
checking 0870fb4c3566088dc222e582e43edbc9ececbce4 ......
	 orig commit -> 6c3b047fa2d2286d5e438bcb470c7b1a49f415f6 ......
checking d758f4d8bf20e74f2afc6dfd0120d332d0fb9217 ......
	 orig commit -> 3e45067f94bbd61dec0619b1c32744eb0de480c8 ......
checking 878c0f9a7c693b238b30a85f870e5334a66a3935 ......
	 orig commit -> b3120d2cc447ee77b9d69bf4ad7b452c9adb4d39 ......
checking a2943ce580f57d75df763c37846e9e478861e0fd ......
	 orig commit -> 46725b17f1c6c815a41429259b3f070c01e71bc1 ......
checking 937a91cd399220c11f513e899218b26b226ee334 ......
	 orig commit -> 05f016d2ca7a4fab99d5d5472168506ddf95e74f ......
checking aef7cdb6a6ffa07da7f713d9164d50f954df10b6 ......
	 orig commit -> 0a9a17e3bb4564caf4bfe2a6783ae1287667d188 ......
checking bb923a81c33e543ead08420ac03e7d704243d6b0 ......
	 orig commit -> 7b8edcc685b5e2c3c37aa13dc50a88e84a5bfef8 ......
checking b4ca98b7a8030a154478cfdf48fadb6ddbb2b04b ......
	 orig commit -> f72271e2a0ae4277d53c4053f5eed8bb346ba38a ......
checking a8e699dfca04191e209a63d484e347aa921422e2 ......
	 orig commit -> ae0c585d93dfaf923d2c7eb44b2c3ab92854ea9b ......
checking 2f7de4d5f525fc39c83e6c423e12f1954106bf38 ......
	 orig commit -> 1e1f9ca546556e508d021545861f6b5fc75a95fe ......
checking 391cdaaaa9d9ce6b4cdc659d94ae59f9384f5e37 ......
	 orig commit -> c4cb99185b4cc96c0a1c70104dc21ae14d7e7f28 ......
checking 146d533713859f7990703021e33ab63c8f7bcb1d ......
	 orig commit -> 52c6912fde0133981ee50ba08808f257829c4c93 ......
checking 76c389ca1331aeec038d7a69cb1b8a0f3719dd72 ......
	 orig commit -> c45e3e4c5b134b081e8af362109905427967eb19 ......
checking ecc5e8914766d6d2c14f06e5dac0bfd173505d85 ......
	 orig commit -> 8a0d18c62121d3c554a83eb96e2752861d84d937 ......
checking 3e32b40435b9d5e073c788dcfebb679c8a6ace1e ......
	 orig commit -> c70ca38960399a63d5c048b7b700612ea321d17e ......
checking 54a8d930b93f171acaffbac83a1d0f595fa277bd ......
	 orig commit -> c1fb3542074fd0c4d901d778bd52455111e4eb6f ......
checking 4dae2f771fa72083cf247ea44bcdb7096409527d ......
	 orig commit -> b18d4b8a25af6fe83d7692191d6ff962ea611c4f ......
checking 037646313522559a65e91952c2e1ec623abf5147 ......
	 orig commit -> 33ec6dbc5a02677509d97fe36cd2105753f0f0ea ......
checking eca460c485f93de1474352d1d509e1a3e9f1d407 ......
	 orig commit -> 660e1551939931657808d47838a3f443c0e83fd0 ......
		 660e1551939931657808d47838a3f443c0e83fd0 has problem. Fixes commit -> 33ec6dbc5a02677509d97fe36cd2105753f0f0ea
commit 037646313522559a65e91952c2e1ec623abf5147
Author: Johan Hovold <johan@kernel.org>
Date:   Sat Nov 11 17:29:29 2017 +0100

    clk: ti: dra7-atl-clock: fix child-node lookups
    
    commit 33ec6dbc5a02677509d97fe36cd2105753f0f0ea upstream.
    
    Fix child node-lookup during probe, which ended up searching the whole
    device tree depth-first starting at parent rather than just matching on
    its children.
    
    Note that the original premature free of the parent node has already
    been fixed separately, but that fix was apparently never backported to
    stable.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Fixes: 660e15519399 ("clk: ti: dra7-atl-clock: Fix of_node reference counting")
    Cc: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 36d2f19430e2711a1b327ac1734de4a52c67abd2 ......
	 orig commit -> e9d4bf219c83d09579bc62512fea2ca10f025d93 ......
checking a694b1f85aeafb674ad3c47e2efa3c3de69abf5e ......
	 orig commit -> 15038e14724799b8c205beb5f20f9e54896013c3 ......
checking 8293dc75de475ae9b6b0071f8dcf3585cb8be42a ......
	 orig commit -> 21f2d551183847bc7fbe8d866151d00cdad18752 ......
checking 4e426ed57cd24b8d6621a4cf60d715d7a7da9a76 ......
	 orig commit -> 1c79df1f349fb6050016cea4ef1dfbc3853a5685 ......
checking 63bfc4c90a878df5fcb4a80a06390393dbee1519 ......
	 orig commit -> 3fc9fb13a4b2576aeab86c62fd64eb29ab68659c ......
checking 8709c5386109557e6cb9e3c38f011ce627fe3ce8 ......
	 orig commit -> 8ee031631546cf2f7859cc69593bd60bbdd70b46 ......
checking 1b11593eb742ab6b69b1c23110fba024c5257101 ......
	 orig commit -> 11d49e9d089ccec81be87c2386dfdd010d7f7f6e ......
checking 509ab500a240f42fd35a696e735ca8e787668791 ......
	 orig commit -> 2d7fe6185722b0817bb345f62ab06b76a7b26542 ......
checking ef67455316481c4a418542495636505a0ab8c88e ......
	 orig commit -> 3d4e8303f2c747c8540a0a0126d0151514f6468b ......
checking 3532750d20f56f0165bd196aee3c6bb9fb5c1fdb ......
	 orig commit -> 0a62d6c966956d77397c32836a5bbfe3af786fc1 ......
checking 0b6cede2e45500452c5c49d9cfb7d10cb1aca437 ......
	 orig commit -> f658f17b5e0e339935dca23e77e0f3cad591926b ......
checking d1316b9d83de1f0ce969206aaa5d3a1a60dc5c37 ......
	 orig commit -> d937cd6790a2bef2d07b500487646bd794c039bb ......
checking b71cf750ddd3ab64e8596b9b07ff78a8a669ef30 ......
	 orig commit -> 20e3f985bb875fea4f86b04eba4b6cc29bfd6b71 ......
checking db12d9b5a18143712362b5ccc4b077bf57b040ec ......
	 orig commit -> 51e3ae81ec58e95f10a98ef3dd6d7bce5d8e35a2 ......
checking 189bc689547a57100cb0c5d0e689a8555e98b547 ......
	 orig commit -> f1601113ddc0339a745e702f4fb1ca37d4875e65 ......
checking f1be21021099046fbe288ae957cd75ab1c7a0daf ......
	 orig commit -> 3f2a162fab15aee243178b5308bb5d1206fc4043 ......
checking 3c260c60d20c51283904462015069063f78b065d ......
	 orig commit -> 519ce2f933fa14acf69d5c8cabcc18711943d629 ......
checking a8b8ab79ca4fd69182f5864ddcd59994717e0186 ......
	 orig commit -> 95da1b3a5aded124dd1bda1e3cdb876184813140 ......
checking 2a2d4b41472c73439adc6b8b55fed212d85f4faa ......
	 orig commit -> c05cefcc72416a37eba5a2b35f0704ed758a9145 ......
checking ab33df42eb3c53711c487c839d36379ffca3aeb9 ......
	 orig commit -> f02fee227e5f21981152850744a6084ff3fa94ee ......
checking 4e23be6169767d21f95d5bfd5df8a2c6274ee2d7 ......
	 orig commit -> 34be4dbf87fc3e474a842305394534216d428f5d ......
checking 85c79043808d400ace74c99526fb9f4f67253102 ......
	 orig commit -> 91af8300d9c1d7c6b6a2fd754109e08d4798b8d8 ......
checking 9c093a258350e86f781f23fbbef4e3d761c6b1e3 ......
	 orig commit -> db86be3a12d0b6e5c5b51c2ab2a48f06329cb590 ......
checking 7d7b05e4ffd5ad7cf54b57dfc2f377d9a543c8c6 ......
	 orig commit -> 31ccb1f7ba3cfe29631587d451cf5bb8ab593550 ......
checking 9a4e08c634cebe28bfb96ec9482ed309f7c9b679 ......
	 orig commit -> ecc0c469f27765ed1e2b967be0aa17cee1a60b76 ......
		 ecc0c469f27765ed1e2b967be0aa17cee1a60b76 has problem. Fixes commit -> 302ec300ef8a545a7fc7f667e5fd743b091c2eeb
commit c60db4f68593e381571fdf9e2111363e1793cdf4
Author: NeilBrown <neilb@suse.com>
Date:   Thu Dec 14 15:32:38 2017 -0800

    autofs: fix careless error in recent commit
    
    commit 302ec300ef8a545a7fc7f667e5fd743b091c2eeb upstream.
    
    Commit ecc0c469f277 ("autofs: don't fail mount for transient error") was
    meant to replace an 'if' with a 'switch', but instead added the 'switch'
    leaving the case in place.
    
    Link: http://lkml.kernel.org/r/87zi6wstmw.fsf@notabene.neil.brown.name
    Fixes: ecc0c469f277 ("autofs: don't fail mount for transient error")
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: NeilBrown <neilb@suse.com>
    Cc: Ian Kent <raven@themaw.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 153142963ca1fa2b2f3bf3f687e00ef1a63bff5f ......
	 orig commit -> 56a46acf62af5ba44fca2f3f1c7c25a2d5385b19 ......
checking 00fd53bc378fdeec3caece086de4eadd798b2346 ......
	 orig commit -> 547da673173de51f73887377eb275304775064ad ......
checking 4e82464aa4a398207e2ecbc4877c82319ecdbafa ......
	 orig commit -> b9a41d21dceadf8104812626ef85dc56ee8a60ed ......
checking 36c4819abc92e6cb22de81568407a92cdb8e9363 ......
	 orig commit -> 74d4108d9e681dbbe4a2940ed8fdff1f6868184c ......
checking a9f066404fd096351320a16660dd47a8a868a220 ......
	 orig commit -> 9ceace3c9c18c67676e75141032a65a8e01f9a7a ......
checking 0c1faf9df0c840df75a4e1ee6a1c967f6ff10428 ......
	 orig commit -> 05a67cc258e75ac9758e6f13d26337b8be51162a ......
checking 84c785ed786a61dfd35ea3e818ead7dc0adddfd2 ......
	 orig commit -> 8ef4b43cd3794d63052d85898e42424fd3b14d24 ......
checking 36a082ce590f4e2625453d24dfcf98f74d2fe8c7 ......
	 orig commit -> 3b0c0c922ff4be275a8beb87ce5657d16f355b54 ......
checking 5f8046f7c9e3049000bbe610c15390bf698d681e ......
	 orig commit -> 400eeffaffc7232c0ae1134fe04e14ae4fb48d8c ......
checking 29c4b6b4f46d4cc53b4f8c2b45e218ccfa1eea68 ......
	 orig commit -> 12a78d43de767eaf8fb272facb7a7b6f2dc6a9df ......
checking 4fdb1637b2083824403de119b07c6bfe6560915d ......
	 orig commit -> 1d9ddde12e3c9bab7f3d3484eb9446315e3571ca ......
checking 8ff3471878f3f8161bff92f73b3ecb35d6c397dc ......
	 orig commit -> 7c2102e56a3f7d85b5d8f33efbd7aecc1f36fdd8 ......
checking 3223ea129170a7799b92ee24862275aa7f6b9d1b ......
	 orig commit -> 499fde662f1957e3cb8d192a94a099ebe19c714b ......
checking df24d6c224602ec23ad2626b07e13c40d018cbbc ......
	 orig commit -> f7f9b5e7f8eccfd68ffa7b8d74b07c478bb9e7f0 ......
checking 2417da3f4d6bc4fc6c77f613f0e2264090892aa5 ......
	 orig commit -> 76da0704507bbc51875013f6557877ab308cfd0a ......
checking 5c2607d3e7cd8d1e4ee96fdc8d18d49a57f9500f ......
	 orig commit -> b192571d1ae375e0bbe0aa3ccfa1a3c3704454b9 ......
		 b192571d1ae375e0bbe0aa3ccfa1a3c3704454b9 has problem. Fixes commit -> 26f4e759ef9b8a2bab1823d692ed6d56d40b66e3
checking 4337fa2425f6b00ba0977444a12dc5439858cb38 ......
	 orig commit -> 5c50538752af7968f53924b22dede8ed4ce4cb3b ......
checking 04bc7a273264ce3a528b97af72a6473bc4a13fd7 ......
	 orig commit -> d6e646ad7cfa7034d280459b2b2546288f247144 ......
checking 7ddbe701076d4ff2ba15c1a111bd41681594819e ......
	 orig commit -> a1c5befc1c24eb9c1ee83f711e0f21ee79cbb556 ......

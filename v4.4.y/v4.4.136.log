Check from v4.4.136 to v4.4.137
Commit count: 25
checking ed90fd0cfe4ee5faa42a39605f430f13f39556da ......
checking 7ab4c1a11e55264d67d03473623bc23c1869f689 ......
	 orig commit -> 5b5e7a0de2bbf2a1afcd9f49e940010e9fb80d53 ......
checking e9e037088fbd12119862c08f0b6959992ccaa1aa ......
	 orig commit -> 79fb218d97980d4fee9a64f4c8ff05289364ba25 ......
checking d80cbf9f5f5219a9351d19310baad9107a01f773 ......
	 orig commit -> 644c7eebbfd59e72982d11ec6cc7d39af12450ae ......
checking d3078b97f653097d33fabae24ba4d457a288e007 ......
	 orig commit -> 25ea66544bfd1d9df1b7e1502f8717e85fa1e6e6 ......
checking d22856ee8fd3f5ee81054f125d24582af6331d9d ......
	 orig commit -> d546b67cda015fb92bfee93d5dc0ceadb91deaee ......
checking 4119db110139be30ef94a18bbd2eb2f299efc45e ......
	 orig commit -> fdd13dd350dda1826579eb5c333d76b14513b812 ......
checking 7666b7098d5a6fb28202540e062bc98a9c713b9e ......
	 orig commit -> 9aad13b087ab0a588cd68259de618f100053360e ......
checking 163258f23a20bb85031ba4066a6c44d08777ade8 ......
	 orig commit -> 9f7c728332e8966084242fcd951aa46583bc308c ......
checking 2f59e1e852e80e70af5bf9d3bd96f39309071904 ......
	 orig commit -> eb73190f4fbeedf762394e92d6a4ec9ace684c88 ......
		 eb73190f4fbeedf762394e92d6a4ec9ace684c88 has problem. Fixes commit -> 4576cd469d980317c4edd9173f8b694aa71ea3a3
commit 62c4e369c9b98480a4b75b3a74a962a6b298120b
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Aug 6 10:38:34 2018 -0400

    packet: refine ring v3 block size test to hold one frame
    
    commit 4576cd469d980317c4edd9173f8b694aa71ea3a3 upstream.
    
    TPACKET_V3 stores variable length frames in fixed length blocks.
    Blocks must be able to store a block header, optional private space
    and at least one minimum sized frame.
    
    Frames, even for a zero snaplen packet, store metadata headers and
    optional reserved space.
    
    In the block size bounds check, ensure that the frame of the
    chosen configuration fits. This includes sockaddr_ll and optional
    tp_reserve.
    
    Syzbot was able to construct a ring with insuffient room for the
    sockaddr_ll in the header of a zero-length frame, triggering an
    out-of-bounds write in dev_parse_header.
    
    Convert the comparison to less than, as zero is a valid snap len.
    This matches the test for minimum tp_frame_size immediately below.
    
    Fixes: f6fb8f100b80 ("af-packet: TPACKET_V3 flexible buffer implementation.")
    Fixes: eb73190f4fbe ("net/packet: refine check for priv area size")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 55a2ed39404f96e6aacef19d895ad40698fb1286 ......
	 orig commit -> 75d4e704fa8d2cf33ff295e5b441317603d7f9fd ......
checking 4c5ea1ddf3f446b6060efe91108443ae0ee0d23b ......
	 orig commit -> 6009d1fe6ba3bb2dab55921da60465329cc1cd89 ......
checking b3c9189166378457c5825dcfcd7844bc89d41436 ......
	 orig commit -> 730c54d59403658a62af6517338fa8d4922c1b28 ......
checking 53075e7abd39ef17e6b94c23451948641e935adb ......
	 orig commit -> 848235edb5c93ed086700584c8ff64f6d7fc778d ......
checking 489f1f04a66e389ee9c945ccd8ff6e88c6edd49c ......
	 orig commit -> 322eaa06d55ebc1402a4a8d140945cff536638b4 ......
checking 44f4aec06c4aae796d1182db154efdcfeca77f5f ......
	 orig commit -> 2677d20677314101293e6da0094ede7b5526d2b1 ......
checking d6494acbe6a1c2b507b108c77a7cf609e6a9a359 ......
	 orig commit -> dd612f18a49b63af8b3a5f572d999bdb197385bc ......
checking a1b993e1cf9f61b6493fee3f06598b90f9545501 ......
	 orig commit -> 9b9322db5c5a1917a66c71fe47c3848a9a31227e ......
checking 12958d0ffa66d84ae899156383b01ba9dfcff595 ......
	 orig commit -> 76ef6b28ea4f81c3d511866a9b31392caa833126 ......
checking 66824bdf4c9f039466ec2834037f10ffaa056a12 ......
	 orig commit -> 47c7d0b19502583120c3f396c7559e7a77288a68 ......
checking 3165890915c7e5e8a443ea1736882e72a55c95b3 ......
	 orig commit -> 2ae89c7a82ea9d81a19b4fc2df23bef4b112f24e ......
checking 6ea1dc96a03ab74261776b538609cb73d22d3d64 ......
	 orig commit -> 423913ad4ae5b3e8fb8983f70969fb522261ba26 ......
checking bd2f9ce5bacb15ad54fc6c345480c4df0c76c3ee ......
	 orig commit -> be83bbf806822b1b89e0a0f23cd87cddc409e429 ......
		 be83bbf806822b1b89e0a0f23cd87cddc409e429 has problem. Fixes commit -> 423913ad4ae5b3e8fb8983f70969fb522261ba26
76ef6b28ea4f81c3d511866a9b31392caa833126
commit 12958d0ffa66d84ae899156383b01ba9dfcff595
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue May 15 13:38:15 2018 +1000

    drm: set FMODE_UNSIGNED_OFFSET for drm files
    
    commit 76ef6b28ea4f81c3d511866a9b31392caa833126 upstream.
    
    Since we have the ttm and gem vma managers using a subset
    of the file address space for objects, and these start at
    0x100000000 they will overflow the new mmap checks.
    
    I've checked all the mmap routines I could see for any
    bad behaviour but overall most people use GEM/TTM VMA
    managers even the legacy drivers have a hashtable.
    
    Reported-and-Tested-by: Arthur Marsh (amarsh04 on #radeon)
    Fixes: be83bbf8068 (mmap: introduce sane default mmap limits)
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 12958d0ffa66d84ae899156383b01ba9dfcff595
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue May 15 13:38:15 2018 +1000

    drm: set FMODE_UNSIGNED_OFFSET for drm files
    
    commit 76ef6b28ea4f81c3d511866a9b31392caa833126 upstream.
    
    Since we have the ttm and gem vma managers using a subset
    of the file address space for objects, and these start at
    0x100000000 they will overflow the new mmap checks.
    
    I've checked all the mmap routines I could see for any
    bad behaviour but overall most people use GEM/TTM VMA
    managers even the legacy drivers have a hashtable.
    
    Reported-and-Tested-by: Arthur Marsh (amarsh04 on #radeon)
    Fixes: be83bbf8068 (mmap: introduce sane default mmap limits)
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ea1dc96a03ab74261776b538609cb73d22d3d64
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 19 09:29:11 2018 -0700

    mmap: relax file size limit for regular files
    
    commit 423913ad4ae5b3e8fb8983f70969fb522261ba26 upstream.
    
    Commit be83bbf80682 ("mmap: introduce sane default mmap limits") was
    introduced to catch problems in various ad-hoc character device drivers
    doing mmap and getting the size limits wrong.  In the process, it used
    "known good" limits for the normal cases of mapping regular files and
    block device drivers.
    
    It turns out that the "s_maxbytes" limit was less "known good" than I
    thought.  In particular, /proc doesn't set it, but exposes one regular
    file to mmap: /proc/vmcore.  As a result, that file got limited to the
    default MAX_INT s_maxbytes value.
    
    This went unnoticed for a while, because apparently the only thing that
    needs it is the s390 kernel zfcpdump, but there might be other tools
    that use this too.
    
    Vasily suggested just changing s_maxbytes for all of /proc, which isn't
    wrong, but makes me nervous at this stage.  So instead, just make the
    new mmap limit always be MAX_LFS_FILESIZE for regular files, which won't
    affect anything else.  It wasn't the regular file case I was worried
    about.
    
    I'd really prefer for maxsize to have been per-inode, but that is not
    how things are today.
    
    Fixes: be83bbf80682 ("mmap: introduce sane default mmap limits")
    Reported-by: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 459e0c3b6f3a5758fa7f18715db55f7da7c9e166 ......
	 orig commit -> 0803d7befa15cab5717d667a97a66214d2a4c083 ......
checking c7d581820c86b2b2e8c6eaa38bddb76273a2ca28 ......
	 orig commit -> b5d0ebc99bf5d0801a5ecbe958caa3d68b8eaee8 ......

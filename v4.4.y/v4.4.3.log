Check from v4.4.3 to v4.4.4
Commit count: 343
checking c252409a688a831385fb71097db7a86ffe595b74 ......
checking 74e579764007b3ef63d791116c7d252e0032cc1e ......
	 orig commit -> 5e56276e7555b34550d51459a801ff75eca8b907 ......
checking 3beb469074ec66079f3fcbed1c6cf06ca8bbc873 ......
	 orig commit -> 006bda75d81fd27a583a3b310e9444fea2aa6ef2 ......
checking 8a55831546e7d558e7cb14e1c40c6d403d779c10 ......
	 orig commit -> 62d7476d958ce06d7a10b02bdb30006870286fe2 ......
checking d19573e8499198a75c2f7a0b22053bdd8eb48050 ......
	 orig commit -> a1cdb1c59c8c203de2731fc6910598ed19c97e41 ......
checking e4a5a335105a557b5a78c1513650d1cf7c9f2edb ......
	 orig commit -> 3dfb7d8cdbc7ea0c2970450e60818bb3eefbad69 ......
checking 9315bf18bec590aa0c4be5b54de55da21d31ac96 ......
	 orig commit -> 649367735ee5dedb128d9fac0b86ba7e0fe7ae3b ......
checking 996c591227d988ed82e76080ebf4ed0f1f33e0f1 ......
	 orig commit -> 98229aa36caa9c769b13565523de9b813013c703 ......
		 98229aa36caa9c769b13565523de9b813013c703 has problem. Fixes commit -> 551adc60573cb68e3d55cacca9ba1b7437313df7
commit dc1441612fdb4ca221e3a4aa32e39e74d020e386
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Mar 14 09:40:46 2016 +0100

    x86/irq: Cure live lock in fixup_irqs()
    
    commit 551adc60573cb68e3d55cacca9ba1b7437313df7 upstream.
    
    Harry reported, that he's able to trigger a system freeze with cpu hot
    unplug. The freeze turned out to be a live lock caused by recent changes in
    irq_force_complete_move().
    
    When fixup_irqs() and from there irq_force_complete_move() is called on the
    dying cpu, then all other cpus are in stop machine an wait for the dying cpu
    to complete the teardown. If there is a move of an interrupt pending then
    irq_force_complete_move() sends the cleanup IPI to the cpus in the old_domain
    mask and waits for them to clear the mask. That's obviously impossible as
    those cpus are firmly stuck in stop machine with interrupts disabled.
    
    I should have known that, but I completely overlooked it being concentrated on
    the locking issues around the vectors. And the existance of the call to
    __irq_complete_move() in the code, which actually sends the cleanup IPI made
    it reasonable to wait for that cleanup to complete. That call was bogus even
    before the recent changes as it was just a pointless distraction.
    
    We have to look at two cases:
    
    1) The move_in_progress flag of the interrupt is set
    
       This means the ioapic has been updated with the new vector, but it has not
       fired yet. In theory there is a race:
    
       set_ioapic(new_vector) <-- Interrupt is raised before update is effective,
                                  i.e. it's raised on the old vector.
    
       So if the target cpu cannot handle that interrupt before the old vector is
       cleaned up, we get a spurious interrupt and in the worst case the ioapic
       irq line becomes stale, but my experiments so far have only resulted in
       spurious interrupts.
    
       But in case of cpu hotplug this should be a non issue because if the
       affinity update happens right before all cpus rendevouz in stop machine,
       there is no way that the interrupt can be blocked on the target cpu because
       all cpus loops first with interrupts enabled in stop machine, so the old
       vector is not yet cleaned up when the interrupt fires.
    
       So the only way to run into this issue is if the delivery of the interrupt
       on the apic/system bus would be delayed beyond the point where the target
       cpu disables interrupts in stop machine. I doubt that it can happen, but at
       least there is a theroretical chance. Virtualization might be able to
       expose this, but AFAICT the IOAPIC emulation is not as stupid as the real
       hardware.
    
       I've spent quite some time over the weekend to enforce that situation,
       though I was not able to trigger the delayed case.
    
    2) The move_in_progress flag is not set and the old_domain cpu mask is not
       empty.
    
       That means, that an interrupt was delivered after the change and the
       cleanup IPI has been sent to the cpus in old_domain, but not all CPUs have
       responded to it yet.
    
    In both cases we can assume that the next interrupt will arrive on the new
    vector, so we can cleanup the old vectors on the cpus in the old_domain cpu
    mask.
    
    Fixes: 98229aa36caa "x86/irq: Plug vector cleanup race"
    Reported-by: Harry Junior <harryjr@outlook.fr>
    Tested-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Joe Lawrence <joe.lawrence@stratus.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.11.1603140931430.3657@nanos
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4f45a0edf314c4f7f4be658bf58e0b7bc477723c ......
	 orig commit -> 90a2282e23f0522e4b3f797ad447c5e91bf7fe32 ......
checking 950c362bdfb191aa3b149493c0447c89845f3a87 ......
	 orig commit -> 56d7d2f4bbd00fb198b7907cb3ab657d06115a42 ......
checking 00bb447126d363fbf401d973548b193828c83fb2 ......
	 orig commit -> 5da0c1217f05d2ccc9a8ed6e6e5c23a8a1d24dd6 ......
checking c2b56b62c26ec51f64edea8d20b133efeddd2d0c ......
	 orig commit -> c1684f5035b60e9f98566493e869496fb5de1d89 ......
checking 550ac3f791f5cdf26021dfa6011adcb5f38856b6 ......
	 orig commit -> 847667ef10356b824a11c853fc8a8b1b437b6a8d ......
checking c655fd016c2917c5f88c4c694bdcdf9e68f4f661 ......
	 orig commit -> ab25ac02148b600e645f77cfb8b8ea415ed75bb4 ......
checking 2636de2fc22c1f5e1b24ba7d9e6f6615ed9569a5 ......
	 orig commit -> 9ac15b7a8af4cf3337a101498c0ed690d23ade75 ......
checking 4af6a215154b213835420c6cd2442c0436abbad5 ......
	 orig commit -> 3716fd27a604d61a91cda47083504971486b80f1 ......
checking cb987d4822d38f8540b7cd580c33628858d38120 ......
	 orig commit -> 95ffeb4b5baca266e1d0d2bc90f1513e6f419cdd ......
checking f6e9ce2b061408d16ba052e6d7612b4660dbc1c8 ......
	 orig commit -> 433cbd57d190a1cdd02f243df41c3d7f55ec4b94 ......
checking cf2e82af2d53bf7894911a9a11fa2fdf0d17ab91 ......
	 orig commit -> 8a580f70f6936ec095da217018cdeeb5835c0207 ......
checking 053c8ecc225a14ff2522f8d493ebc94c1ca7dc48 ......
	 orig commit -> 36f34c8c63da3e272fd66f91089228c22d2b6e8b ......
checking e4d1544b1e35ae7d3c6a5b5ed2af1328fce2c9ec ......
	 orig commit -> 111abeba67e0dbdc26537429de9155e4f1d807d8 ......
checking 7df19ad4a9f2e4845dce66b6049bbc7a796a7895 ......
	 orig commit -> e23b257c293ce4bcc8cabb2aa3097b6ed8a8261a ......
checking eeb241d4f8a1d0c343e0a19c99490e66b7eff346 ......
	 orig commit -> 3d44d51bd339766f0178f0cf2e8d048b4a4872aa ......
checking 04100683e8f2792d9c715d5a253a260cb30fa3e3 ......
	 orig commit -> 9bf148cb0812595bfdf5100bd2c07e9bec9c6ef5 ......
checking 04d946904c63586c577139964e77601097acbbbd ......
	 orig commit -> b6853f78e763d42c7a158d8de3549c9827c604ab ......
checking d57c0477f842af4fdcfa93454bc2ad94d73b7158 ......
	 orig commit -> 5129fa482b16615fd4464d2f5d23acb1b7056c66 ......
checking 6f4b352f004c696439c5b5d75a4edc3d0823e770 ......
	 orig commit -> a7f775428b8f5808815c0e3004020cedb94cbe3b ......
checking 9108b130f74d13a37e67a96cc0a8642464578a0a ......
	 orig commit -> 4d8c8bd6f2062c9988817183a91fe2e623c8aa5e ......
checking 4cf5aa2ffe17403385d75a5b1d9d97071500ea18 ......
	 orig commit -> d159457b84395927b5a52adb72f748dd089ad5e5 ......
checking d52a24819677bbb45eb1ce93a42daa1ae6c4d61d ......
	 orig commit -> 8d47065f7d1980dde52abb874b301054f3013602 ......
checking e32b123feea78479f8a60a9abf1a645f9c3ee728 ......
	 orig commit -> f285aa8db7cc4432c1a03f8b55ff34fe96317c11 ......
checking 392abe33d5e5d3d9b822149558eb3da5debc9cd2 ......
	 orig commit -> 52ba0746b3b44c86aee121babf3b2fd9b8f84090 ......
checking 362deccacfef46e1c78acc79ba9721829605a883 ......
	 orig commit -> 5e45a2589d24573c564630990c88ac93659f8fe4 ......
checking 8b78924f123e7cbb08d9dd25cb793c2a2e58741d ......
	 orig commit -> 3f315c5b850fa7aff73f50de8e316b98f611a32b ......
checking 80d18c0026eb6fc9cd9fb5a36540bfaa8a00fb47 ......
	 orig commit -> c80567c82ae4814a41287618e315a60ecf513be6 ......
checking f634ac98bd9218feb31868b43f56e7a5999ce98e ......
	 orig commit -> 59ceeaaf355fa0fb16558ef7c24413c804932ada ......
checking dc16b4393fc6226af463fd8c1d92411e5c349cf0 ......
	 orig commit -> b7052cd7bcf3c1478796e93e3dff2b44c9e82943 ......
checking 36b53e8b2abf1f514e83e2c3207e36e71c8176de ......
	 orig commit -> d045437a169f899dfb0f6f7ede24cc042543ced9 ......
checking 222473f70b2c913445c3173ddcf7bbc5375b93b7 ......
	 orig commit -> f6bf0fa14cf848ae770e0b7842c9b11ce2f01645 ......
checking 4aa584e4200f63450b513900ef5a61a8bc04e245 ......
	 orig commit -> 17e4bce0ae63c7e03f3c7fa8d80890e7af3d4971 ......
checking de5b55f616a7ba97e72e33f52ac0cde6c8c47527 ......
	 orig commit -> 0c1d77f4ba5cc9c05a29adca3d6466cdf4969b70 ......
checking fc90441e728aa461a8ed1cfede08b0b9efef43fb ......
	 orig commit -> 172b2386ed16a9143d9a456aae5ec87275c61489 ......
		 172b2386ed16a9143d9a456aae5ec87275c61489 has problem. Fixes commit -> 70e4da7a8ff62f2775337b705f45c804bb450454
commit 25e8618619a5a46aae253e1cc68eeaa0d44d2f52
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Feb 26 12:28:40 2016 +0100

    KVM: x86: fix root cause for missed hardware breakpoints
    
    commit 70e4da7a8ff62f2775337b705f45c804bb450454 upstream.
    
    Commit 172b2386ed16 ("KVM: x86: fix missed hardware breakpoints",
    2016-02-10) worked around a case where the debug registers are not loaded
    correctly on preemption and on the first entry to KVM_RUN.
    
    However, Xiao Guangrong pointed out that the root cause must be that
    KVM_DEBUGREG_BP_ENABLED is not being set correctly.  This can indeed
    happen due to the lazy debug exit mechanism, which does not call
    kvm_update_dr7.  Fix it by replacing the existing loop (more or less
    equivalent to kvm_update_dr0123) with calls to all the kvm_update_dr*
    functions.
    
    Fixes: 172b2386ed16a9143d9a456aae5ec87275c61489
    Reviewed-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d62cca1106558209021273b68118a4b102ac07cf ......
	 orig commit -> 236cf17c2502007a9d2dda3c39fb0d9a6bd03cc2 ......
checking 85212a3690a3eb53ae02219e3153e9d14216e164 ......
	 orig commit -> d7444794a02ff655eda87e3cc54e86b940e7736f ......
checking e1d61091db0ba3ef805510bb5fee46dedd7c8734 ......
	 orig commit -> 5d589d81acf974d23af98044aac56c6339d659f8 ......
checking b8558ada696e26f51cbde1d24cdf291bbc7ec79b ......
	 orig commit -> d9dfd8d741683347ee159d25f5b50c346a0df557 ......
checking fd921e575636438b8996df1e3d885dea9be5b25c ......
	 orig commit -> 50ab8ec74a153eb30db26529088bc57dd700b24c ......
checking 68a9185526f3b0738118c0c87abea9cda38be841 ......
	 orig commit -> 7ddc971f86aa0a4cee9f6886c356a052461957ae ......
checking 3e643b5cbef9d7d3112e3f64c64e3f3f7b024979 ......
	 orig commit -> 2d99b55d378c996b9692a0c93dd25f4ed5d58934 ......
checking 023e29e467fc46f7f19c6ac96ee5135c2a56e51e ......
	 orig commit -> 1a1503c5396eb7f2edf4b8ef6067853014478c0c ......
checking be683dfd4c253e11a8e9d9263f5dd0fed8c21de3 ......
	 orig commit -> b82fcabe212a11698fd4b3e604d2f81d929d22f6 ......
checking 7c465723d0b6f2621f6c712035b117d744a51a8b ......
	 orig commit -> 5ff8eaac1636bf6deae86491f4818c4c69d1a9ac ......
		 5ff8eaac1636bf6deae86491f4818c4c69d1a9ac has problem. Fixes commit -> a1a0e23e49037c23ea84bc8cc146a03584d13577
commit c5cbbec54fe71c4de2d34f8c0ec8fbfdd7f17339
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Feb 29 18:28:53 2016 -0500

    writeback: flush inode cgroup wb switches instead of pinning super_block
    
    commit a1a0e23e49037c23ea84bc8cc146a03584d13577 upstream.
    
    If cgroup writeback is in use, inodes can be scheduled for
    asynchronous wb switching.  Before 5ff8eaac1636 ("writeback: keep
    superblock pinned during cgroup writeback association switches"), this
    could race with umount leading to super_block being destroyed while
    inodes are pinned for wb switching.  5ff8eaac1636 fixed it by bumping
    s_active while wb switches are in flight; however, this allowed
    in-flight wb switches to make umounts asynchronous when the userland
    expected synchronosity - e.g. fsck immediately following umount may
    fail because the device is still busy.
    
    This patch removes the problematic super_block pinning and instead
    makes generic_shutdown_super() flush in-flight wb switches.  wb
    switches are now executed on a dedicated isw_wq so that they can be
    flushed and isw_nr_in_flight keeps track of the number of in-flight wb
    switches so that flushing can be avoided in most cases.
    
    v2: Move cgroup_writeback_umount() further below and add MS_ACTIVE
        check in inode_switch_wbs() as Jan an Al suggested.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Tahsin Erdogan <tahsin@google.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Al Viro <viro@ZenIV.linux.org.uk>
    Link: http://lkml.kernel.org/g/CAAeU0aNCq7LGODvVGRU-oU_o-6enii5ey0p1c26D1ZzYwkDc5A@mail.gmail.com
    Fixes: 5ff8eaac1636 ("writeback: keep superblock pinned during cgroup writeback association switches")
    Reviewed-by: Jan Kara <jack@suse.cz>
    Tested-by: Tahsin Erdogan <tahsin@google.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4cbd196324c05809338c7f118b6f374d3c2db7a0 ......
	 orig commit -> aa226ff4a1ce79f229c6b7a4c0a14e17fececd01 ......
checking fff4dc84e72419196623f118312f571a2e057196 ......
	 orig commit -> e93ad19d05648397ef3bcb838d26aec06c245dc0 ......
checking a2d25804cd78be1c4f824de13827f3a0e8bf26e1 ......
	 orig commit -> 4ae2182b1e3407de369f8c5d799543b7db74221b ......
checking 1de8f1bcb5321bdc35b64bafe4f4a9c389942167 ......
	 orig commit -> bb143f814ea488769ca2e79e0b376139cb5f134b ......
checking 0bdce40ce0402ab4d46e33f452eb0c29470e0dc6 ......
	 orig commit -> cbfe74a753e877b49dc54e9b04d5d42230ca0aed ......
checking aff4514876f47a45a84118aeaa2b81b33d6f0e29 ......
	 orig commit -> 8eee1d3ed5b6fc8e14389567c9a6f53f82bb7224 ......
checking 921d439c6720c22ad94da1c3354ee4522781809d ......
	 orig commit -> cb43285ff7039fe3c4b0bc476e6d6569c31104f3 ......
checking 44c7d7625f76a987f59b588fcb8727c7b286b99d ......
	 orig commit -> 70f340df24518d36eeaefb6652d492f250115c19 ......
checking b9d992021215ef0361105c3735aa5625ad261937 ......
	 orig commit -> 310d3d314be7f0a84011ebdc4bdccbcae9755a87 ......
checking fb6a326e303451078ee93c1293918aa2e044cff8 ......
	 orig commit -> 0f4a943168f31d29a1701908931acaba518b131a ......
checking 547551e5a591ce744845202ecfa8b54366832b60 ......
	 orig commit -> ebde1ca5a908b10312db4ecd7553e3ba039319ab ......
checking 91583a21641d148b281ae48e909a56c23c5978f6 ......
	 orig commit -> a6d9bb1c9605cd4f44e2d8290dc4d0e88f20292d ......
checking 3b493f9f06d19056669fe94b0933aaea06f3fee6 ......
	 orig commit -> febe562c20dfa8f33bee7d419c6b517986a5aa33 ......
checking 7cb32ae09a6490c27bc3c110ee42d808a5670142 ......
	 orig commit -> 3b43b71f05d3ecd01c4116254666d9492301697d ......
checking 1436e689caee2b92ea30813d587598afea1d0e6b ......
	 orig commit -> 7e31a0159461818a1bda49662921b98a29c1187b ......
checking 6684710434d07dfd7e512e5ecc77eefb5a30151e ......
	 orig commit -> 041bd12e272c53a35c54c13875839bcb98c999ce ......
checking 21b34b4574f8619907eb751b37c1831bfa3f2440 ......
	 orig commit -> d6e022f1d207a161cd88e08ef0371554680ffc46 ......
checking 81bb655358726b0abf888c54d33135dae3a07c12 ......
	 orig commit -> 4fa11ec726a32ea6dd768dbb2e2af3453a98ec0a ......
checking 33bf18e4aa06f4b31eb21c1f77d4286f49dfc72e ......
	 orig commit -> 6736fde9672ff6717ac576e9bba2fd5f3dfec822 ......
checking d024d46ec5203664fac872a20f7d75125db952da ......
	 orig commit -> 1ca8ec532fc2d986f1f4a319857bb18e0c9739b4 ......
checking e43193617315070ca9a6ca55794760e328fe4e9b ......
	 orig commit -> 3f416f22d1e21709a631189ba169f76fd267b374 ......
checking 19964740ebb3f69fb65a8e10dadb4863dd8a8dfe ......
	 orig commit -> e912e685f372ab62a2405a1acd923597f524e94a ......
checking f021f05c1223ce0424d9bd9bddb013aa68b88801 ......
	 orig commit -> b64a1cbef6df47c986ad622b5b2e4d3d1940070c ......
checking 16d9f52201f330b4438467724a0b0691dcf45cc3 ......
	 orig commit -> 327b882d3bcc1fba82dbd39b5cf5a838c81218e2 ......
checking f313f1d809fb055eb9707e6dfd2c77fb4d9cc4ee ......
	 orig commit -> d0eb20a863ba7dc1d3f4b841639671f134560be2 ......
		 d0eb20a863ba7dc1d3f4b841639671f134560be2 has problem. Fixes commit -> 6b7e9cde49691e04314342b7dce90c67ad567fcc
commit 9814eb75495bcd2fd2fc234bd474f0c395407c4c
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Thu May 12 22:17:34 2016 -0400

    sd: Fix rw_max for devices that report an optimal xfer size
    
    commit 6b7e9cde49691e04314342b7dce90c67ad567fcc upstream.
    
    For historic reasons, io_opt is in bytes and max_sectors in block layer
    sectors. This interface inconsistency is error prone and should be
    fixed. But for 4.4--4.7 let's make the unit difference explicit via a
    wrapper function.
    
    Fixes: d0eb20a863ba ("sd: Optimal I/O size is in bytes, not sectors")
    Reported-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Tested-by: Andrew Patterson <andrew.patterson@hpe.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Juerg Haefliger <juerg.haefliger@hpe.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 01c3c0f921c8a2743e3d066108081c14618ee98c ......
	 orig commit -> cd8140c673d9ba9be3591220e1b2226d9e1e40d3 ......
checking 10dada9dad8fbc36840ef5266419bb0fce5945a0 ......
	 orig commit -> dbc0d3caff5b7591e0cf8e34ca686ca6f4479ee1 ......
checking 50c6a283a713c62e6430e6dcc27ecaa91c46ba80 ......
	 orig commit -> e7a88e82fe380459b864e05b372638aeacb0f52d ......
checking ee834473805f5fd77a3d2625a40552159641029e ......
	 orig commit -> 67645d7619738e51c668ca69f097cb90b5470422 ......
checking df86161e4460cfd4ba504d5c5fd6ba218c75d4aa ......
	 orig commit -> 103502a35cfce0710909da874f092cb44823ca03 ......
checking 0ac4a2a8bae9838d69be6dec3212e3630fb5773c ......
	 orig commit -> e4b133cc4b30b48d488e4e4fffb132f173ce4358 ......
checking 286ab25d69068cef7c97e305af347288b9f1ab4a ......
	 orig commit -> fb2a24a1c6457d21df9fae0dd66b20c63ba56077 ......
checking 5c2bd0c61ca8a5af85370c71f9c7e05e1e434132 ......
	 orig commit -> acc146943957d7418a6846f06e029b2c5e87e0d5 ......
checking 4bbd7acd014a4432b8d15372840184dce62b1002 ......
	 orig commit -> 000e0949148382c4962489593a2f05504c2a6771 ......
checking 0ff7850139c4e104b974edc09d5cfdb0dc616da9 ......
	 orig commit -> 6220f4ebd7b4db499238c2dc91268a9c473fd01c ......
checking 27f356149d599d1ee55318641f9d3ed69e66174a ......
	 orig commit -> 4511f7166a2deb5f7a578cf87fd2fe1ae83527e3 ......
checking a67208e94d945ad890f8dc4734ec5fdb3219cc03 ......
	 orig commit -> ff140fea847e1c2002a220571ab106c2456ed252 ......
checking 774ac8b7eff69e0786970157de2157e68b22f456 ......
	 orig commit -> bb431ba26c5cd0a17c941ca6c3a195a3a6d5d461 ......
checking 2f59395e47008b7a6fafbf56b657222c57b1a92a ......
	 orig commit -> 9f17768611ebf81dfac69948dd12622b6f2e45fc ......
checking e759d3185f48fbeb6e4e3f741120c7689741decd ......
	 orig commit -> fbbeb8632bf0b46ab44cfcedc4654cd7831b7161 ......
checking 7bf68a0afc0f367118ac765081f19c8cfd93823f ......
	 orig commit -> 09dc9cd6528f5b52bcbd3292a6312e762c85260f ......
checking e97bff5116d8ba6a25848691063d3370b939a4af ......
	 orig commit -> 4bfdf635c668869c69fd18ece37ec66fb6f38fcf ......
checking 556dfd8dae7d66b35121ffa8198465e55a34d64d ......
	 orig commit -> ee1cdcdae59563535485a5f56ee72c894ab7d7ad ......
checking f4fa3d6f9e84d5009d78c732a0a81251b8bfe0b4 ......
	 orig commit -> 611dcadb01c89d1d3521450c05a4ded332e5a32d ......
checking 7ed338d4a9f58d88cd9fda055425bc6e0b8f3865 ......
	 orig commit -> 2895b2cad6e7a95104cf396e5330054453382ae1 ......
		 2895b2cad6e7a95104cf396e5330054453382ae1 has problem. Fixes commit -> ee1cdcdae59563535485a5f56ee72c894ab7d7ad
commit 556dfd8dae7d66b35121ffa8198465e55a34d64d
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Feb 10 15:59:42 2016 +0200

    dmaengine: dw: disable BLOCK IRQs for non-cyclic xfer
    
    commit ee1cdcdae59563535485a5f56ee72c894ab7d7ad upstream.
    
    The commit 2895b2cad6e7 ("dmaengine: dw: fix cyclic transfer callbacks")
    re-enabled BLOCK interrupts with regard to make cyclic transfers work. However,
    this change becomes a regression for non-cyclic transfers as interrupt counters
    under stress test had been grown enormously (approximately per 4-5 bytes in the
    UART loop back test).
    
    Taking into consideration above enable BLOCK interrupts if and only if channel
    is programmed to perform cyclic transfer.
    
    Fixes: 2895b2cad6e7 ("dmaengine: dw: fix cyclic transfer callbacks")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mans Rullgard <mans@mansr.com>
    Tested-by: Mans Rullgard <mans@mansr.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4f29e5445382110d6801fedaa9b0582c00beccc8 ......
	 orig commit -> df3bb8a0e619d501cd13334c3e0586edcdcbc716 ......
checking ef1fb7d12ac8863557390ead966566ed3477b023 ......
	 orig commit -> 6697b2cf69d4363266ca47eaebc49ef13dabc1c9 ......
checking 5066e4475fe82ba77afd521bf373c7ee8faac0c8 ......
	 orig commit -> 2c3033a0664dfae91e1dee7fabac10f24354b958 ......
checking eac1122b727753dd6ea32a852d926f228ace6f66 ......
	 orig commit -> b186b4dcb79b1914c3dadb27ac72dafaa4267998 ......
checking 8b819bf125bb410e265275f9660d98986a9fa802 ......
	 orig commit -> b21f2e81bd3fd8ed260590e72901254bca2193cd ......
checking e85dc751231a3b8853e9983363521bdb17f31271 ......
	 orig commit -> de588b8ff057d4de0751f337b930f90ca522bab2 ......
checking 96ee50f3b366a0b547dfac776a43af15ccc322e0 ......
	 orig commit -> 5b57167749274961baf15ed1f05a4996b3ab0487 ......
checking 7712c014b16f64d344239b190ea9c126123cb14f ......
	 orig commit -> a9cf8284b45110a4d98aea180a89c857e53bf850 ......
checking 906bf4dd14c187ee258961a8f0723e4820bfd084 ......
	 orig commit -> 6b31de3e698582fe0b8f7f4bab15831b73204800 ......
checking 8d065375e5a40ef7722d2d0ae59d4034938b8e0a ......
	 orig commit -> edde316acb5f07c04abf09a92f59db5d2efd14e2 ......
checking e3fb82079c460f979ff99b3e033442e9a948a37f ......
	 orig commit -> bae5336f0aaedffa115dab9cb3d8a4e4aed3a26a ......
checking bcb1875a069043c70af27dc9f0f5e075a09d76b1 ......
	 orig commit -> 3ed47db34f480df7caf44436e3e63e555351ae9a ......
checking a83b349814dee660caff0a40a22ac2f166c94a8b ......
	 orig commit -> 39d4275058baf53e89203407bf3841ff2c74fa32 ......
checking a72eb45c3342c56bebe9c81c931f0431b71e7a32 ......
	 orig commit -> 2b8341b3f917c108b47f6a8a771a40d226c57883 ......
checking dcf9ef2709b728f6c591d51c5bbf745df319a139 ......
	 orig commit -> bb74fc1bf3072bd3ab4ed5f43afd287a63baf2d7 ......
checking 439c9942ce4f0ced30e24f4864d8b2209215521b ......
	 orig commit -> c61934ed9a0e3911a9935df26858726a7ec35ec0 ......
checking 6f84d997be26c01ccb6965d802c919987ce85161 ......
	 orig commit -> 99b8e71597fadd6b2ac85e6e10f221f79dd9c1c1 ......
checking 57c0829490bffc6a8488dbd4da3903e902b3ded3 ......
	 orig commit -> e8235891b33799d597ff4ab5e45afe173a65da30 ......
checking 96e87f46f186b51e246fece96aa18ae39d535a98 ......
	 orig commit -> bc3f5d8c4ca01555820617eb3b6c0857e4df710d ......
checking b78bd121b4978a8378c8300e0fb2e12c88a05a85 ......
	 orig commit -> 34855706c30d52b0a744da44348b5d1cc39fbe51 ......
checking 0f44b766c9b773b43e073259933f78d505badcc1 ......
	 orig commit -> ed3f9fd1e865975ceefdb2a43b453e090b1fd787 ......
checking 222d0fa4e86370e58e6d4f2e2cf02d76d4003992 ......
	 orig commit -> 26f6f2d301c1fb46acb1138ee155125815239b0d ......
checking 7a35478f900a01650f00e39423722956d04daedd ......
	 orig commit -> 4db3a2448ec8902310acb78de39b6227a9a56ac8 ......
checking 2f1e7d5f8f6b3f21db1423e15167e4350bd959d7 ......
	 orig commit -> 3d849b02336be103d312c1574d6f7314d5c0bc9f ......
checking feba77fdca12991dc953c133fda6524b086df87c ......
	 orig commit -> 6f94b6dd006909a5ef6435cc0af557e945240f48 ......
checking 6de4682d2845d6aa8883ae62e3ed1b2f915df4e8 ......
	 orig commit -> 5efd407674068dede403551bea3b0b134c32513a ......
	 orig commit -> 996a2239f93b03c5972923f04b097f65565c5bed ......
checking f39741673c3d54bc84ec30b4e1d21daa75bbcb02 ......
	 orig commit -> 935a0ff0e1ea62a116848c0a187b13838f7b9cee ......
checking 741598a5bce0a7bb07006cfbcd8044a3c7b91c31 ......
	 orig commit -> f5949141a21ee16edf1beaf95cbae7e419171ab5 ......
	 orig commit -> ac9b8236551d1177fd07b56aef9b565d1864420d ......
		 ac9b8236551d1177fd07b56aef9b565d1864420d has problem. Fixes commit -> f5949141a21ee16edf1beaf95cbae7e419171ab5
commit 741598a5bce0a7bb07006cfbcd8044a3c7b91c31
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Jan 13 11:55:28 2016 +0100

    drm/i915: Init power domains early in driver load
    
    commit f5949141a21ee16edf1beaf95cbae7e419171ab5 upstream.
    
    Since
    
    commit ac9b8236551d1177fd07b56aef9b565d1864420d
    Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Date:   Fri Nov 27 18:55:26 2015 +0200
    
        drm/i915: Introduce a gmbus power domain
    
    gmbus also needs the power domain infrastructure right from the start,
    since as soon as we register the i2c controllers someone can use them.
    
    v2: Adjust cleanup paths too (Chris).
    
    v3: Rebase onto -nightly (totally bogus tree I had lying around) and
    also move dpio init head (Ville).
    
    v4: Ville instead suggested to move gmbus setup later in the sequence,
    since it's only needed by the modeset code.
    
    v5: Move even close to the actual user, right next to the comment that
    states where we really need gmbus (and interrupts!).
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Patrik Jakobsson <patrik.jakobsson@linux.intel.com>
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Meelis Roos <mroos@linux.ee>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Fixes: ac9b8236551d ("drm/i915: Introduce a gmbus power domain")
    References: http://www.spinics.net/lists/intel-gfx/msg83075.html
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1452682528-19437-1-git-send-email-daniel.vetter@ffwll.ch
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 82ed1aba70ce938097629c41f316826e0a715865 ......
	 orig commit -> 2dc2f761dea65069485110d24eaa5b0d5d808b07 ......
checking 383652ce4ab5504e57fb2ec82cb6eb799cf68db1 ......
	 orig commit -> 06ef83a705a98da63797a5a570220b6ca36febd4 ......
	 orig commit -> 6702cf16e0ba8b0129f5aa1b6609d4e9c70bc13b ......
checking de2e68f48bc441cb59b7190b2f53793359ce220c ......
	 orig commit -> dabe19540af9e563d526113bb102e1b9b9fa73f9 ......
checking bd4419f7ee1978a1dba107a0f112b797b024ce1d ......
	 orig commit -> f6ff4f67cdf8455d0a4226eeeaf5af17c37d05eb ......
checking 9bf88217c3e18f28482921ad7902ffa178163126 ......
	 orig commit -> c5244987394648913ae1a03879c58058a2fc2cee ......
checking f4eb8334b571b1633b5df06cd56f2e665e8e19da ......
	 orig commit -> 4b0e4e4af6c6dc8354dcb72182d52c1bc55f12fc ......
checking ac6f949bbbd922f5d16fea936522bef7663971ea ......
	 orig commit -> fe6fc1f132b4300c1f6defd43a5d673eb60a820d ......
checking c38554e8df027f43558b59f6f1205c63b1fdff4a ......
	 orig commit -> a64c9dab1c4d05c87ec8a1cb9b48915816462143 ......
checking 3bbb4a052d9a891e529c2a54f1782b03b3441aa2 ......
	 orig commit -> c9a392eac18409f51a071520cf508c0b4ad990e2 ......
checking 46414c46e79de89588afbbd58f4df16ee4857ed8 ......
	 orig commit -> cc78eb22885bba64445cde438ba098de0104920f ......
checking 557761e927e79011ce59f07f91e7a0a58788ea62 ......
	 orig commit -> 0eb1c3d4084eeb6fb3a703f88d6ce1521f8fcdd1 ......
checking 6f4e77b9e3fc1a2c6a2908e107c90553fe265c19 ......
	 orig commit -> ac4a9350abddc51ccb897abf0d9f3fd592b97e0b ......
checking b36e52c44ce6728824546d8b5f05b844cede96f1 ......
	 orig commit -> dbb17a21c131eca94eb31136eee9a7fe5aff00d9 ......
checking 7d124d8895ec1345b565f7872e0dbe33b51b1c0f ......
	 orig commit -> 42ef344c0994cc453477afdc7a8eadc578ed0257 ......
checking 381e33c23c0acc1eb64fb1fe3a245b72da9484ea ......
	 orig commit -> 91a25e463130c8e19bdb42f2d827836c7937992e ......
		 91a25e463130c8e19bdb42f2d827836c7937992e has problem. Fixes commit -> fd2d2bac6e79b0be91ab86a6075a0c46ffda658a
commit b752a2713709ac1f56e95a50868b89df6eaf0c1e
Author: Andrey Grodzovsky <Andrey.Grodzovsky@amd.com>
Date:   Wed May 25 16:45:43 2016 -0400

    drm/dp/mst: Always clear proposed vcpi table for port.
    
    commit fd2d2bac6e79b0be91ab86a6075a0c46ffda658a upstream.
    
    Not clearing mst manager's proposed vcpis table for destroyed connectors when the manager is stopped leaves it pointing to unrefernced memory, this causes pagefault when the manager is restarted when plugging back a branch.
    
    Fixes: 91a25e463130 ("drm/dp/mst: deallocate payload on port destruction")
    Signed-off-by: Andrey Grodzovsky <Andrey.Grodzovsky@amd.com>
    Reviewed-by: Lyude <cpaul@redhat.com>
    Cc: Mykola Lysenko <Mykola.Lysenko@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking a252d13f411ff3dc7697da09a991f1a4a7065d23 ......
	 orig commit -> c175cd16df272119534058f28cbd5eeac6ff2d24 ......
checking ad9421d86ecd22e8bd9eddbca2ac93980a7b836e ......
	 orig commit -> 5e93b8208d3c419b515fb75e2601931c027e12ab ......
checking 6cd43e68d937462d063fae86be892ec10125e545 ......
	 orig commit -> a9ebb3e46c7ef6112c0da466ef0954673ad36832 ......
checking b870070037823bea90709ea6b4b8a2c8ffcdc5f5 ......
	 orig commit -> 64566b5e767f9bc3161055ca1b443a51afb52aad ......
checking 2e614c50122b2c2470c6c0c79bcdad43bae8021b ......
	 orig commit -> 7a11a334aa6af4c65c6a0d81b60c97fc18673532 ......
checking 7b713e9ed440bed2d255aa5d247e40c7a8a3fe1b ......
	 orig commit -> 75af4c8c4c0f60d7ad135419805798f144e9baf9 ......
checking 1596315171d84391fcf90d5942231cefaf691cee ......
	 orig commit -> 1f16ee7fa13649f4e55aa48ad31c3eb0722a62d3 ......
checking c9e8a98ebe2e6d2633e79f76e353fef1db1f1bcd ......
	 orig commit -> bd9343208704fcc70a5b919f228a7d26ae472727 ......
checking 4323b4dbfc7c02f4dda376088c08e6314ff8e5b1 ......
	 orig commit -> 870571a5698b2e9d0f4d2e5c6245967b582aab45 ......
checking 2168fe3d7bfe2738d9095e1ed8eaefea2011686a ......
	 orig commit -> 95664e66fad964c3dd7945d6edfb1d0931844664 ......
checking a6976c7be5b193b4efd95fb16b2d8599dd98364e ......
	 orig commit -> ff683df7bf34f90766a50c7e7454e219aef2710e ......
checking 61392a0d006b9a3feae3b3afd36cbe8daca0bce7 ......
	 orig commit -> 0a882cadbc63fd2da3994af7115b4ada2fcbd638 ......
checking 32c021915d41a56f58c42b1075238b75894cd29a ......
	 orig commit -> 8e7cedc6f7fe762ffe6e348502be34b11fa79298 ......
checking ae4fa0cb5ff9ed89f83cc25a85aff69e0103e05d ......
	 orig commit -> e1d09dc0ccc6c91e3916476f636edb76da1f65bb ......
checking 8fb49d08fa1bb7a38545d0e7e7eeb2f8feae31f6 ......
	 orig commit -> 09ccbb74b6718ad4d1290de3f5669212c0ac7d4b ......
checking 4d6bc4fa3202a28dab7a4c03c22a569b87f98f84 ......
	 orig commit -> cc1de6e800c253172334f8774c419dc64401cd2e ......
checking 7a42e7cd29f4c9d59fab1a8e306e21d77f57a0a5 ......
	 orig commit -> a8d81b36267366603771431747438d18f32ae2d5 ......
checking 978b8b828d357197f4f209c9b3a0337a1a7aa7fd ......
	 orig commit -> b19763d0d867eb863953500a5c87f2fd663863b8 ......
checking 94703402213a01ce0fb0aa4e646cdfc2610f17b5 ......
	 orig commit -> ca19852884c8937eed89560f924f5a34cfcc22af ......
checking 4474b85771139f2da8f8f4f443e6fad08081e99e ......
	 orig commit -> dba280b20bfd1c2bed8a07ce3f75a6da8ba7d247 ......
checking b8b1ad305f8de05b241a57707d5b3de3692dbdfa ......
	 orig commit -> 97dde76a30c2e67fa5fb9cb6a4072c0178c9df26 ......
checking 73b424c77ce34fe8343c32feae15cc9f3dc82356 ......
	 orig commit -> 8878d8548ac7fae43cd6d82579f966eb8825e282 ......
checking 2b840f690ab4a782ec8947d7ab00a57fd5309015 ......
	 orig commit -> 72b459c8f716ef03a8a0c78078547ce64d8d29a2 ......
checking 321dfc30923a07ac90052af222cb40694d00ab2f ......
	 orig commit -> 8f3c162961fc2d92ec73a66496aab69eb2e19c36 ......
checking d60703ca942e8d044d61360bc9792fcab54b95d0 ......
	 orig commit -> 429c45deae6e57f1bb91bfb05b671063fb0cef60 ......
checking 61d1fcfc8258c058af665e2abf6e42636cbd0274 ......
	 orig commit -> e42d85261680edfc350a6c2a86b7fbb44a85014b ......
checking 7710d03fbb6768f0ddc106025210a31035134db5 ......
	 orig commit -> ad32152eb26043d165eed9406cb9e2f7011f6b10 ......
checking 7c105b06bc6296ce215b4dc942204bdf82237323 ......
	 orig commit -> 78d0e182b6c1f5336f6e8cbb197f403276dabc7f ......
checking 17ab2f11145f6e0c9657d098f3dcefd22f9e7478 ......
	 orig commit -> e160e4db833c7e8587ec3c88efaed0d84f1bcf42 ......
checking 3be127a9622d781ea3239f8846087256df988c79 ......
	 orig commit -> 888c9e33e4c5a503285921046c621f7c73199d2f ......
checking d1ad20f15b1d545642474860cc17a7dd6b051d50 ......
	 orig commit -> 54fb2a5cd0baf8e97d743de411e2f832d1afa68d ......
checking 8397905d2d56af92f2ba7e250bec5b6b0fdb9e57 ......
	 orig commit -> 005ae95e6ec119c64e2d16eb65a94c49e1dcf9f0 ......
checking 02b0518c0e5a9ba18f71fcc336bc7333b7a8893a ......
	 orig commit -> 96c5d076f0a5e2023ecdb44d8261f87641ee71e0 ......
checking 15ec2c4c10888f6403686be687e79165307e7e92 ......
	 orig commit -> a50e2bf5a0f674d62b69f51f6935a30e82bd015c ......
checking a4de54fb20e68c235ab7bebf521873b724816c93 ......
	 orig commit -> fb89ac5102ae2875d685c847e6b5dbc141622d43 ......
checking d56842d88978f54a3f7b8dfac3ae99ec3e732b95 ......
	 orig commit -> 2989be09a8a9d62a785137586ad941f916e08f83 ......
checking afb02993539468a15700481b54968edc10940b0d ......
	 orig commit -> 21ea9fb69e7c4b1b1559c3e410943d3ff248ffcb ......
checking ac3981b170863371c0386f9578d6bf4b8f961cc0 ......
	 orig commit -> f68b992bbb474641881932c61c92dcfa6f5b3689 ......
checking 7d661c4658ce4485d5737eb522303d6eefa42749 ......
	 orig commit -> aab3c3f34cc2dd8230052770712606d65de6538f ......
checking 40ab2d7d44aff753b6c43f016b6fdb166fe8e4ff ......
	 orig commit -> 3cb99e2ea99a454c8837a55aac88753ef05fc1eb ......
checking 7ca59689c947bda700e07fdea4d9e4f582601c68 ......
	 orig commit -> 6b4feaea251a97bf08c7d41eabdec07f63a11073 ......
checking e3d4bcc39fcdd54d44afd45f00b9b840961430be ......
	 orig commit -> 48f0f6b717e314a30be121b67e1d044f6d311d66 ......
checking a0b1c2d0f53c8368eef4018ed7ce15b6c015aa77 ......
	 orig commit -> 525fd5a94e1be0776fa652df5c687697db508c91 ......
checking b49777c656daba9cb9788cebae91c304f6fe5782 ......
	 orig commit -> 12e26969b32c79018165d52caff3762135614aa1 ......
checking de46e6540360c72943239bf5ce0a2839432204d8 ......
	 orig commit -> fcd5c4dd8201595d4c598c9cca5e54760277d687 ......
checking a869e6b05d4bc17afeed7ade9f4ffc0d1c3bac47 ......
	 orig commit -> f4dce1ffd2e30fa31756876ef502ce6d2324be35 ......
checking dbdb0333caf272500f495da2da71125d564146e7 ......
	 orig commit -> 4f33f6c522948fffc345261896042b58dea23754 ......
checking e76f1004a01d5475d9f09c32aa19c912b71f29db ......
	 orig commit -> 5610b1254e3689b6ef8ebe2db260709a74da06c8 ......
checking 332e40db5154bb9162ad0bb0621876ac48f75e16 ......
	 orig commit -> 5754843225f78ac7cbe142a6899890a9733a5a5d ......
checking 97ff5367a76179adeb2c4003ec9ee83a9a36b242 ......
	 orig commit -> 800dc4f49cc002879e1e5e6b79926f86b60528e6 ......
checking 242e16cd87b1d6e19382dc683b6cab121fcfd69c ......
	 orig commit -> 0f26922fe5dc5724b1adbbd54b21bad03590b4f3 ......
checking 972e9e3c7f447bb2becfdcde9931790e78dd43fa ......
	 orig commit -> 35a4933a895927990772ae96fdcfd2f806929ee2 ......
checking 8cf0f282de522d9f44dc2e0f6f58361fdef4d722 ......
	 orig commit -> 87f5fedb3bebbbb566f847dd0c567fcea49a36a6 ......
checking cf5d2ff495fdf7b7c3936166ca18f7d37d4f6c25 ......
	 orig commit -> 4c58f3282e3de43d34f8955f8eca676294380bf9 ......
checking 701495c14d09658bffe78e0e605f298752edd36c ......
	 orig commit -> cff10ce7b4f02718ffd25e3914e60559f5ef6ca0 ......
	 orig commit -> cad20c278085d893ebd616cd20c0747a8e9d53c7 ......
checking 2b2b55a0d88ef81f33ea77f79cbdeee25b2ed891 ......
	 orig commit -> 1623d0bf847d3b38d8cf24367b3689ba0e3fe2aa ......
checking c76633bf38205c9ee640096eb387dce31cb8b8c9 ......
	 orig commit -> 2f99536a5b34d5b0f54723067d68f6cef3f0fdc6 ......
checking 2a383bcc68ad1437315eb4298a84cdde070a69bc ......
	 orig commit -> 8599846d73997cdbccf63f23394d871cfad1e5e6 ......
checking 7db755f538b093335e43b8ca81667f898ca51ede ......
	 orig commit -> a689d2510f188e75391dbebacbddfd74d42f2a7e ......
checking 61b9408bfd06779c8b2073829bf2f73a81531a99 ......
	 orig commit -> 8d28b7a72fe18bcdcdb047243ba8fec36b149955 ......
checking bafb71422d791e7c074dadbab5bf8e421a1ef97b ......
	 orig commit -> bf60e592a1af4d6f65dd54593250183f14360eed ......
checking dfca191876436fd33c6ad18258116a2bf5506618 ......
	 orig commit -> 163cbe31e5163459908a41a2b4e0d33a28fd557a ......
checking b7f7a5e2e914e9f5332ea56d10e0db4be3363375 ......
	 orig commit -> 41c89159a6ae5472d39ed8bded5b3b4e07a37944 ......
checking 43919d0ca15d5e93efd40467c63502b33b7acf5c ......
	 orig commit -> 6a645dd87a5a506779810d7d9935c25fc2ef4687 ......
checking 2bfda88879216667b7f60d91851606f165244b0a ......
	 orig commit -> 0bcb7efdff63564e80fe84dd36a9fbdfbf6697a4 ......
checking 3cafb70cabf27616ac3da795a92a9b651fb28733 ......
	 orig commit -> e10c321977091f163eceedec0650e0ef4b3cf4bb ......
checking fca2d31d02fd13878137ebba7073ba3d9df9862e ......
	 orig commit -> 5c671c410c8704800f4f1673b6f572137e7e6ddd ......
checking 6eec26b7b07ece01ad547fce01f0229c733f6462 ......
	 orig commit -> adb24d42a516bca8b9741ed21206509daaab5b13 ......
checking 8ae7192d91c8ca19fd0b919b594bc317d33fbede ......
	 orig commit -> d9bfbb95ed598a09cf336adb0f190ee0ff802f0d ......
checking 14772905465177b47ff0980eea5acf745ce7f625 ......
	 orig commit -> 347ea32dc118326c4f2636928239a29d192cc9b8 ......
checking 4a3d7e16b0f4729151f41061f5fc9cf91279b997 ......
	 orig commit -> 1ca896856281d3f1ad4f6f7d4e32e2943452de23 ......
checking 84bad9db0d8cfa0d84ab988c40226413cb34e2b3 ......
	 orig commit -> 05caee939f8d58d81e962071da85761e1e3a4c73 ......
checking c0cbcf2cb59c076f4ff6422153534dd2762c3d44 ......
	 orig commit -> f02b4b72d12cbae7020a959e2ed0410a464b4cc4 ......
checking b8175b171fde996b5306fd113bd865506166df19 ......
	 orig commit -> 1b9f23727abb92c5e58f139e7d180befcaa06fe0 ......
checking b966c761afe6d8560b463fe695525c883ce3fea6 ......
	 orig commit -> 004fa08d7aba2a13974446bf212a48c0b3b0d9fd ......
checking 2edd7c99031950e5a66e1254b787b9a70aaa61f1 ......
	 orig commit -> 49f34134aea74f19ca016f055d25ee55ec359dee ......
checking 4778f99a2c60a826146000c31472fc79935255c1 ......
	 orig commit -> c5b635203032462603c503ecce91a7021c1ad44a ......
checking 61836242f8a64deec07cfe4d4be3d6ed23875bea ......
	 orig commit -> d3b421cd07e4c0d4d6c0bbd55ca169c054fc081d ......
checking 53cc688d090bbd461e92ab28ecf4bde8b0c2a6da ......
	 orig commit -> fadf3a44e974b030e7145218ad1ab25e3ef91738 ......
checking 5c6f66674274958e0ea2d2d6c7a905e4ea73881e ......
	 orig commit -> 4328daa2e79ed904a42ce00a9f38b9c36b44b21a ......
checking 1264fbd72f85446aa75bc3895e13589c1ed2c6df ......
	 orig commit -> 385277bfb57faac44e92497104ba542cdd82d5fe ......
checking d7a853e6f7882e91fbdfb56663ed89355463ddef ......
	 orig commit -> 512167788a6fe9481a33a3cce5f80b684631a1bb ......
checking e862efec7272eab9950ca329eceda7fec272fd20 ......
	 orig commit -> e8beb02343e7582980c6705816cd957cf4f74c7a ......
checking 368e554ba69f8cd9752c74adc7b6bd1f5f7c630e ......
	 orig commit -> 4623e5967448444a4ea1e77beb58898c4af48693 ......
checking f51c5d31c88d47a93135b89cf541aeb194f62908 ......
	 orig commit -> dcc7fdbec53a960588f2c40232db2c6466c09917 ......
checking c44a410e1680345b13a2e7c1011a3a470beb76d8 ......
	 orig commit -> d2cc2f0b35465951eaaf0387fd55e29835ed7ea6 ......
checking aecba569dc08bc746885aeae6086886cd62db7eb ......
	 orig commit -> c9d57de6103e343f2d4e04ea8d9e417e10a24da7 ......
checking 3214cf3b5fbe69b0274cb18a4147f62f926bd7fd ......
	 orig commit -> 768acf46e1320d6c41ed1b7c4952bab41c1cde79 ......
checking aaf1569ce4575ed163839002f27da2cde4d10a77 ......
	 orig commit -> d4565649b6d6923369112758212b851adc407f0c ......
checking a007fc3d6569b620ec5bca1b4636d952ebdd2627 ......
	 orig commit -> 7326fffb712f09a315bc73cc1ee63843f59b8bd4 ......
checking 6472e6b6afc6e3fb7ec4d2890b4eed0d25f71ae9 ......
	 orig commit -> ed6dc538e5a36a331b6256d54f435c80f6715460 ......
checking f037c35161f04459ff804eaa197a81f66f973379 ......
	 orig commit -> 7079604ddb83f428359feace3aeaf8a9f435be4a ......
checking e1b08009fb532a2785b8b38adec825488abc46fa ......
	 orig commit -> 06f34572c6110e2e2d5e653a957f1d74db9e3f2b ......
checking da5c2c01da0cfccde6f2cedf35d8074d2bc19d10 ......
	 orig commit -> 7503efbd82c15c4070adffff1344e5169d3634b4 ......
checking 626f652ac51b51008d9523db3442284eff35cbeb ......
	 orig commit -> 793b09994211fbe0b5cd5f7b6dd8cc9b6256c3c6 ......
checking b7e9aec7b4c684d4f7af15ede8b23e540bcbfc78 ......
	 orig commit -> d4d60b4caaa5926e1b243070770968f05656107a ......
checking 8c2265e9fa89927e9a13cbb26f5fac7dac138333 ......
	 orig commit -> b24f19f16b9e43f54218c07609b783ea8625406a ......
checking 766e2109218a47821227d12552c174b75931d96e ......
	 orig commit -> b68d0ae7e58624c33f2eddab471fee55db27dbf9 ......
checking 78899f827ef13fd7b841acd023a12a2b740ca54e ......
	 orig commit -> f99551a2d39dc26ea03dc6761be11ac913eb2d57 ......
checking 6d88b00ede29eef3f0b7cbb7d5e769ad5c11b9a0 ......
	 orig commit -> 7f3697e24dc3820b10f445a4a7d914fc356012d1 ......
checking 1b4d88b5de8641d570600c5c83afe1761fa8d1fd ......
	 orig commit -> a7df4716d19594b7b3f106f0bc0ca1c548e508e6 ......
		 a7df4716d19594b7b3f106f0bc0ca1c548e508e6 has problem. Fixes commit -> f44f1e7da7c8e3f4575d5d61c4df978496903fcc
commit 53025e7f5667cc7b5915ead628867fd1db983a76
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Tue May 23 17:32:31 2017 -0700

    um: Avoid longjmp/setjmp symbol clashes with libpthread.a
    
    [ Upstream commit f44f1e7da7c8e3f4575d5d61c4df978496903fcc ]
    
    Building a statically linked UML kernel on a Centos 6.9 host resulted in
    the following linking failure (GCC 4.4, glibc-2.12):
    
    /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/libpthread.a(libpthread.o):
    In function `siglongjmp':
    (.text+0x8490): multiple definition of `longjmp'
    arch/x86/um/built-in.o:/local/users/fainelli/openwrt/trunk/build_dir/target-x86_64_musl/linux-uml/linux-4.4.69/arch/x86/um/setjmp_64.S:44:
    first defined here
    /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../lib64/libpthread.a(libpthread.o):
    In function `sem_open':
    (.text+0x77cd): warning: the use of `mktemp' is dangerous, better use
    `mkstemp'
    collect2: ld returned 1 exit status
    make[4]: *** [vmlinux] Error 1
    
    Adopt a solution similar to the one done for vmap where we define
    longjmp/setjmp to be kernel_longjmp/setjmp. In the process, make sure we
    do rename the functions in arch/x86/um/setjmp_*.S accordingly.
    
    Fixes: a7df4716d195 ("um: link with -lpthread")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking cfcae394f6889cfe502f23433278a303948bdd39 ......
	 orig commit -> 9f2dfda2f2f1c6181c3732c16b85c59ab2d195e0 ......
checking 1f39f82654a34d136bbdb984f0e092946d60625f ......
	 orig commit -> 0754fb298f2f2719f0393491d010d46cfb25d043 ......
checking caa2a2b56b7313b0f5c8373facc44768d3055f3c ......
	 orig commit -> 1b17cb796f5d40ffa239c6926385abd83a77a49b ......
	 orig commit -> 904818e2f229f3d94ec95f6932a6358c81e73d78 ......
checking d70325085f56a5aa544afe5a4765e7ec5c72ccc2 ......
	 orig commit -> 342300cc9cd3428bc6bfe5809bfcc1b9a0f06702 ......
	 orig commit -> 8070361799ae1e3f4ef347bd10f0a508ac10acfb ......
checking a90ad5c546fa28f28f5870d884603a7822e9c82a ......
	 orig commit -> 12d319b920fa673a4d5e7c1785c5dc82dcd15257 ......
checking 2e80d52bc8fb39da0208d73bb2a2ef7f10b7db2e ......
	 orig commit -> 9d862ababb609439c5d6987f6d3ddd09e703aa0b ......
checking ecf5ebf51d9f006ca9c6a93f38847af8d8b0818c ......
	 orig commit -> 020bf042e5b397479c1174081b935d0ff15d1a64 ......
checking ee17e6e3ec5cf4b3cf23c3925e6969f520d4e10a ......
	 orig commit -> bcb7825a77f41c7dd91da6f7ac10b928156a322e ......
checking e59ba555b270e1ab41efb6d632642dd3e5443303 ......
	 orig commit -> 546bed631203344611f42b2af1d224d2eedb4e6b ......
checking 8102f96ea48daf86a5f55c07699e926d8f9dee1f ......
	 orig commit -> f32e48e925964c4f8ab917850788a87e1cef3bad ......
		 f32e48e925964c4f8ab917850788a87e1cef3bad has problem. Fixes commit -> 900c9981680067573671ecc5cbfa7c5770be3a40
commit 87dc89fc6127643d29fb9606600eb92be41704fb
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Thu Jan 25 11:02:56 2018 -0700

    Btrfs: fix unexpected -EEXIST when creating new inode
    
    commit 900c9981680067573671ecc5cbfa7c5770be3a40 upstream.
    
    The highest objectid, which is assigned to new inode, is decided at
    the time of initializing fs roots.  However, in cases where log replay
    gets processed, the btree which fs root owns might be changed, so we
    have to search it again for the highest objectid, otherwise creating
    new inode would end up with -EEXIST.
    
    cc: <stable@vger.kernel.org> v4.4-rc6+
    Fixes: f32e48e92596 ("Btrfs: Initialize btrfs_root->highest_objectid when loading tree root and subvolume roots")
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e6edd99cfa44512924be856cdf68c974d52629ca ......
	 orig commit -> 271dba4521aed0c37c063548f876b49f5cd64b2e ......
checking c6362a1e3e428e101c0fc089b496f30e06b7e3c5 ......
	 orig commit -> 9269d12b2d57d9e3d13036bb750762d1110d425c ......
checking d70554d661868f8fb87a5eda236a69b1e9b0e615 ......
	 orig commit -> a879719b8c90e15c9e7fa7266d5e3c0ca962f9df ......
checking ee695402b83a6c2f03a94aa4c7510adf1971e080 ......
	 orig commit -> ca8a51b3a979d57b082b14eda38602b7f52d81d1 ......
checking 1106639221ef3eb80f3436785948c36e63d45b62 ......
	 orig commit -> be7bd730841e69fe8f70120098596f648cd1f3ff ......
checking 98d41a063d6584acc62ba1429ae074eac5d9d127 ......
	 orig commit -> b2acdddfad13c38a1e8b927d83c3cf321f63601a ......
checking 3824f7874a7521961642287b4b93f14afbc9565a ......
	 orig commit -> 9abc2a08a7d665b02bdde974fd6c44aae86e923e ......
		 9abc2a08a7d665b02bdde974fd6c44aae86e923e has problem. Fixes commit -> 9522b37f5a8c7bfabe46eecadf2e130f1103f337
commit 78939530542f409efa9f6c2a34c8463ab745aa64
Author: David Hildenbrand <dahi@linux.vnet.ibm.com>
Date:   Tue Mar 8 12:24:30 2016 +0100

    KVM: s390: correct fprs on SIGP (STOP AND) STORE STATUS
    
    commit 9522b37f5a8c7bfabe46eecadf2e130f1103f337 upstream.
    
    With MACHINE_HAS_VX, we convert the floating point registers from the
    vector registeres when storing the status. For other VCPUs, these are
    stored to vcpu->run->s.regs.vrs, but we are using current->thread.fpu.vxrs,
    which resolves to the currently loaded VCPU.
    
    So kvm_s390_store_status_unloaded() currently writes the wrong floating
    point registers (converted from the vector registers) when called from
    another VCPU on a z13.
    
    This is only the case for old user space not handling SIGP STORE STATUS and
    SIGP STOP AND STORE STATUS, but relying on the kernel implementation. All
    other calls come from the loaded VCPU via kvm_s390_store_status().
    
    Fixes: 9abc2a08a7d6 (KVM: s390: fix memory overwrites when vx is disabled)
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b5e7257409d78623717550d0f18bcf30003b4b2c ......
	 orig commit -> d9a3a09af54d01ab8b0c320580f4f95328d4a7ac ......
checking 142ad71dd6de7368cc8cc5c52288b628062f391d ......
	 orig commit -> f9eccf24615672896dc13251410c3f2f33a14f95 ......
checking 827685a637e0074e0d61d84eac4a50481c7e1b61 ......
	 orig commit -> 570540d50710ed192e98e2f7f74578c9486b6b05 ......
checking 18b75e0bdc6c1413a44db3d37b6d1d82d02eb84b ......
	 orig commit -> 8479eba7781fa9ffb28268840de6facfc12c35a7 ......
checking 915d02457e74344bcd99fe64b159de2f6074b2c6 ......
	 orig commit -> ad33bb04b2a6cee6c1f99fabb15cddbf93ff0433 ......
checking c88edc09363243dd84d6e8ac7a36773213b26ac8 ......
	 orig commit -> a4a8481ff68a8a324a878e281bc37f18665224f7 ......
checking cc082a1cde269bb3b757162f2af113b134b876a1 ......
	 orig commit -> 97e5ed1111dcc5300a0f59a55248cd243937a8ab ......
	 orig commit -> 44498aea293b37af1d463acd9658cdce1ecdf427 ......
	 orig commit -> 38cc46d73ed99dd7002f1406002e52d7975d16cc ......
checking 64fb3e29bf47e5db029b81fc99ac40f6cd2620ac ......
	 orig commit -> 67f1aee6f45059fd6b0f5b0ecb2c97ad0451f6b3 ......
checking 50d60403753a0149c82e5b1851e0cd0499ddff4e ......
	 orig commit -> 2f538c017e1a8620d19553931199c6d6a6d31bb2 ......
checking 3e908446627523e106c1edc7cf6fe7706924d6d3 ......
	 orig commit -> 7a64cd887fdb97f074c3fda03bee0bfb9faceac3 ......
checking 80d0fecf76920ea2e8f1d45522ac27d4d5ead892 ......
	 orig commit -> d061c1caa31d4d9792cfe48a2c6b309a0e01ef46 ......
checking aed4333616e0eaabef465dd36bd7fef89ba23390 ......
	 orig commit -> 3158a8d416f4e1b79dcc867d67cb50013140772c ......
checking a9d2586256f30fe0c4074fd7e845d517e0398df5 ......
	 orig commit -> 6627ae19385283b89356a199d7f03c75ba35fb29 ......
checking e8d634243df782ea93f650588d0abdfb63cd95f8 ......
	 orig commit -> c450960187f45d4260db87c7dd4fc0bceb5565d8 ......
checking f847ff0db6da0b42acb7447f8629dd2a33ddfe24 ......
	 orig commit -> 90cfde46586d2286488d8ed636929e936c0c9ab2 ......
checking 5c8a03a351257ae175d57c9c06f57ab95fc99db3 ......
	 orig commit -> 18d03e8c25f173f4107a40d0b8c24defb6ed69f3 ......
checking a556b804dfa654f054f3d304c2c4d274ffe81f92 ......
	 orig commit -> 627ccd20b4ad3ba836472468208e2ac4dfadbf03 ......
checking 9e761c1b436d04823baa161c294fddc524750015 ......
	 orig commit -> 8d16ce540c94c9d366eb36fc91b7154d92d6397b ......
checking b38798df6cca121e0df4c6a500408070eba24264 ......
	 orig commit -> d7076f21629f8f329bca4a44dc408d94670f49e2 ......
checking d81b4c865e68a2db5997a6311dfe5c007dc16b7a ......
	 orig commit -> 2ecf0cdb2b437402110ab57546e02abfa68a716b ......
checking 8e086f9f3cf528eb27708618cc45ee3485d84cf2 ......
	 orig commit -> 4d4d8573a8451acc9f01cbea24b7e55f04a252fe ......
checking 1ebc85013f58e40ee47538481be5236671761c16 ......
	 orig commit -> fecaee6f20ee122ad75402c53d8278f9bb142ddc ......
checking f4c87d7c2e5d6d20fb35066f3ee51e4bdc467d74 ......
	 orig commit -> c5f1e5adf956e3ba82d204c7c141a75da9fa449a ......
checking 69ccf81eb6cf68f4533e97e355215e0796d7834b ......
	 orig commit -> 2ef9ccbfcb90cf84bdba320a571b18b05c41101b ......
checking 9e8afc94ffae6f7ab9ba77308a9ab53aaf10335e ......
	 orig commit -> a68075908a37850918ad96b056acc9ac4ce1bd90 ......
checking 9168b9b4cd91c442041a5c3a3d9f9a5b1f8676f5 ......
	 orig commit -> e246eb568bc4cbbdd8a30a3c11151ff9b7ca7312 ......
checking 05913989c8892f6dc1726d03b0d8e680aec3c1a5 ......
	 orig commit -> ed8b0de5a33d2a2557dce7f9429dca8cb5bc5879 ......
checking 5134c82b53ddd6f95317f159f62827d9cb7843e1 ......
	 orig commit -> 8282f5d9c17fe15a9e658c06e3f343efae1a2a2f ......
checking 542f954e2d5d4b22cb68fa4cd6b5dcdfd880fccd ......
	 orig commit -> 3dcb1f55dfc7631695e69df4a0d589ce5274bd07 ......
checking 8df7c6d3bcef0f1711f1e775b2ffe0215f32011f ......
	 orig commit -> e0d64e6a880e64545ad7d55786aa84ab76bac475 ......
checking e7f2a86c9106eb9417f4bc7b97f1dfa63140277a ......
	 orig commit -> 73500267c930baadadb0d02284909731baf151f7 ......
checking 9453c72919e57ee0227c2d1c18538d85cc62346d ......
	 orig commit -> be95485a0b8288a93402705730d3ea32f9f812b9 ......
checking ab3b00b70e5552d6060118952312f9c201218dc4 ......
	 orig commit -> d3e376f52d095103ca51dbda4d6ff8aaf488f98f ......
checking bb7d70e1c3cefe4785a291af49c48ff70cf1525c ......
	 orig commit -> 93f834df9c2d4e362dfdc4b05daa0a4e18814836 ......
checking aa5f10879d2d745b67a0b21c91d788d8ac6717fe ......
	 orig commit -> 9c7ebb613bffea2feef4ec562ba1dbcaa810942b ......
checking db8bb76c6f9564e18d5dda4d89e4fc70dc83c3fd ......
	 orig commit -> 67dfa1751ce71e629aad7c438e1678ad41054677 ......
checking bb10b5e76eac0a4ea6cd2350c8c9efdc620233ed ......
	 orig commit -> 6c54809977de3c9e2ef9e9934a2c6625f7e161e7 ......
checking 7c3d1424dd42356a00e83b06c0a39629c4a7e5e3 ......
	 orig commit -> ed8ad83808f009ade97ebbf6519bc3a97fefbc0c ......
checking 1c2efb14a21bfbd445b9bb6204ac4b33adcab785 ......
	 orig commit -> d9749fb5942f51555dc9ce1ac0dbb1806960a975 ......
checking 82f26aa4a5537b080c0cf71f0f1016c37f01d25e ......
	 orig commit -> b5f0549231ffb025337be5a625b0ff9f52b016f0 ......
checking 4ac39c3e2c80000a40b11bde33f425a44f1ef55b ......
	 orig commit -> b53ce3e7d407aa4196877a48b8601181162ab158 ......
checking b7c2e2acc62c3c1a7d2b36032fd14ee53417fa7d ......
	 orig commit -> a97eb33ff225f34a8124774b3373fd244f0e83ce ......
checking 9b87f63bf814c3c8445d3e2baca204a37753fc92 ......
	 orig commit -> a813104d923339144078939175faf4e66aca19b4 ......
		 a813104d923339144078939175faf4e66aca19b4 has problem. Fixes commit -> 1159708432f7067b82388695e29d7105e79bd293
checking 9653359eb65cfd56036cded9d41a111d1a9c817a ......
	 orig commit -> 7716682cc58e305e22207d5bb315f26af6b1e243 ......
		 7716682cc58e305e22207d5bb315f26af6b1e243 has problem. Fixes commit -> 9d3e1368bb45893a75a5dfb7cd21fdebfa6b47af
commit 191aa19ab8c1459c11a5c541801f17e01dda17de
Author: Guillaume Nault <gnault@redhat.com>
Date:   Fri Mar 8 22:09:47 2019 +0100

    tcp: handle inet_csk_reqsk_queue_add() failures
    
    [  Upstream commit 9d3e1368bb45893a75a5dfb7cd21fdebfa6b47af ]
    
    Commit 7716682cc58e ("tcp/dccp: fix another race at listener
    dismantle") let inet_csk_reqsk_queue_add() fail, and adjusted
    {tcp,dccp}_check_req() accordingly. However, TFO and syncookies
    weren't modified, thus leaking allocated resources on error.
    
    Contrary to tcp_check_req(), in both syncookies and TFO cases,
    we need to drop the request socket. Also, since the child socket is
    created with inet_csk_clone_lock(), we have to unlock it and drop an
    extra reference (->sk_refcount is initially set to 2 and
    inet_csk_reqsk_queue_add() drops only one ref).
    
    For TFO, we also need to revert the work done by tcp_try_fastopen()
    (with reqsk_fastopen_remove()).
    
    Fixes: 7716682cc58e ("tcp/dccp: fix another race at listener dismantle")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 54d77a2201647b826f4be34a95c726dacde1e57b ......
	 orig commit -> deed49df7390d5239024199e249190328f1651e7 ......
		 deed49df7390d5239024199e249190328f1651e7 has problem. Fixes commit -> ee60ad219f5c7c4fb2f047f88037770063ef785f
94720e3aee6884d8c8beb678001629da60ec6366
commit d31b540d63b19f60ae34195aab5644862ea0a683
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Mar 8 14:50:54 2019 +0800

    route: set the deleted fnhe fnhe_daddr to 0 in ip_del_fnhe to fix a race
    
    [ Upstream commit ee60ad219f5c7c4fb2f047f88037770063ef785f ]
    
    The race occurs in __mkroute_output() when 2 threads lookup a dst:
    
      CPU A                 CPU B
      find_exception()
                            find_exception() [fnhe expires]
                            ip_del_fnhe() [fnhe is deleted]
      rt_bind_exception()
    
    In rt_bind_exception() it will bind a deleted fnhe with the new dst, and
    this dst will get no chance to be freed. It causes a dev defcnt leak and
    consecutive dmesg warnings:
    
      unregister_netdevice: waiting for ethX to become free. Usage count = 1
    
    Especially thanks Jon to identify the issue.
    
    This patch fixes it by setting fnhe_daddr to 0 in ip_del_fnhe() to stop
    binding the deleted fnhe with a new dst when checking fnhe's fnhe_daddr
    and daddr in rt_bind_exception().
    
    It works as both ip_del_fnhe() and rt_bind_exception() are protected by
    fnhe_lock and the fhne is freed by kfree_rcu().
    
    Fixes: deed49df7390 ("route: check and remove route cache when we get route")
    Signed-off-by: Jon Maxwell <jmaxwell37@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit d31b540d63b19f60ae34195aab5644862ea0a683
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Mar 8 14:50:54 2019 +0800

    route: set the deleted fnhe fnhe_daddr to 0 in ip_del_fnhe to fix a race
    
    [ Upstream commit ee60ad219f5c7c4fb2f047f88037770063ef785f ]
    
    The race occurs in __mkroute_output() when 2 threads lookup a dst:
    
      CPU A                 CPU B
      find_exception()
                            find_exception() [fnhe expires]
                            ip_del_fnhe() [fnhe is deleted]
      rt_bind_exception()
    
    In rt_bind_exception() it will bind a deleted fnhe with the new dst, and
    this dst will get no chance to be freed. It causes a dev defcnt leak and
    consecutive dmesg warnings:
    
      unregister_netdevice: waiting for ethX to become free. Usage count = 1
    
    Especially thanks Jon to identify the issue.
    
    This patch fixes it by setting fnhe_daddr to 0 in ip_del_fnhe() to stop
    binding the deleted fnhe with a new dst when checking fnhe's fnhe_daddr
    and daddr in rt_bind_exception().
    
    It works as both ip_del_fnhe() and rt_bind_exception() are protected by
    fnhe_lock and the fhne is freed by kfree_rcu().
    
    Fixes: deed49df7390 ("route: check and remove route cache when we get route")
    Signed-off-by: Jon Maxwell <jmaxwell37@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d4775ea09519074dd41039a39dbcb589390ae08f ......
	 orig commit -> 619fe32640b4b01f370574d50344ae0f62689816 ......
checking 26fd5ed6e8ad66c86eb720cf85d1230c9b45a5f9 ......
	 orig commit -> 29e73269aa4d36f92b35610c25f8b01c789b0dc8 ......
checking e9f13d3fa0781ae13051fa644f715d3556244ac7 ......
	 orig commit -> 853effc55b0f975abd6d318cca486a9c1b67e10f ......
checking 1cabc3e35f4b2855c46e4e94fc3b93dd9a307327 ......
	 orig commit -> 925ab1aa9394bbaeac47ee5b65d3fdf0fb8135cf ......
checking 7675c3c6bdf9f59ad994334ce05c839ca27dd6a8 ......
	 orig commit -> 31c128b66e5b28f468076e4f3ca3025c35342041 ......
		 31c128b66e5b28f468076e4f3ca3025c35342041 has problem. Fixes commit -> 47d3a07528ecbbccf53bc4390d70b4e3d1c04fcf
4850cf4581578216468b7b3c3d06cc5abb0a697d
commit 61918dbc7efef25294f32431869720d99772b4ca
Author: Eugenia Emantayev <eugenia@mellanox.com>
Date:   Thu Oct 27 16:27:16 2016 +0300

    net/mlx4_en: Resolve dividing by zero in 32-bit system
    
    [ Upstream commit 4850cf4581578216468b7b3c3d06cc5abb0a697d ]
    
    When doing roundup_pow_of_two for large enough number with
    bit 31, an overflow will occur and a value equal to 1 will
    be returned. In this case 1 will be subtracted from the return
    value and division by zero will be reached.
    
    Fixes: 31c128b66e5b ("net/mlx4_en: Choose time-stamping shift value according to HW frequency")
    Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 743a3ce1e0fd001abbe356b1c390d8449a2a74b2
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Feb 23 15:22:43 2017 -0800

    net/mlx4_en: fix overflow in mlx4_en_init_timestamp()
    
    
    [ Upstream commit 47d3a07528ecbbccf53bc4390d70b4e3d1c04fcf ]
    
    The cited commit makes a great job of finding optimal shift/multiplier
    values assuming a 10 seconds wrap around, but forgot to change the
    overflow_period computation.
    
    It overflows in cyclecounter_cyc2ns(), and the final result is 804 ms,
    which is silly.
    
    Lets simply use 5 seconds, no need to recompute this, given how it is
    supposed to work.
    
    Later, we will use a timer instead of a work queue, since the new RX
    allocation schem will no longer need mlx4_en_recover_from_oom() and the
    service_task firing every 250 ms.
    
    Fixes: 31c128b66e5b ("net/mlx4_en: Choose time-stamping shift value according to HW frequency")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Tariq Toukan <tariqt@mellanox.com>
    Cc: Eugenia Emantayev <eugenia@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 743a3ce1e0fd001abbe356b1c390d8449a2a74b2
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Feb 23 15:22:43 2017 -0800

    net/mlx4_en: fix overflow in mlx4_en_init_timestamp()
    
    
    [ Upstream commit 47d3a07528ecbbccf53bc4390d70b4e3d1c04fcf ]
    
    The cited commit makes a great job of finding optimal shift/multiplier
    values assuming a 10 seconds wrap around, but forgot to change the
    overflow_period computation.
    
    It overflows in cyclecounter_cyc2ns(), and the final result is 804 ms,
    which is silly.
    
    Lets simply use 5 seconds, no need to recompute this, given how it is
    supposed to work.
    
    Later, we will use a timer instead of a work queue, since the new RX
    allocation schem will no longer need mlx4_en_recover_from_oom() and the
    service_task firing every 250 ms.
    
    Fixes: 31c128b66e5b ("net/mlx4_en: Choose time-stamping shift value according to HW frequency")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Tariq Toukan <tariqt@mellanox.com>
    Cc: Eugenia Emantayev <eugenia@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3b7abf72216b4ac632724eda3b99f6ebad5a6518 ......
	 orig commit -> 281e8b2fdf8e4ef366b899453cae50e09b577ada ......
checking 617d22ddf6b7ddf3860ac3d70e0e73b453e2afb9 ......
	 orig commit -> aac8d3c282e024c344c5b86dc1eab7af88bb9716 ......
checking a4b84d5efbb2aabfb728d717c851eb1e6f521bec ......
	 orig commit -> 729235554d805c63e5e274fcc6a98e71015dd847 ......
checking 692925fe2d42092a99d3532cb03932c8fda57786 ......
	 orig commit -> d5c91fb72f1652ea3026925240a0998a42ddb16b ......
checking 1bd367857b7f884db302703c624f88adfd8eb171 ......
	 orig commit -> a5527dda344fff0514b7989ef7a755729769daa1 ......
checking 2f46f069ccfb28e6fdaa6798544fd30b72835b04 ......
	 orig commit -> 1b92ee3d03af6643df395300ba7748f19ecdb0c5 ......
checking 6b567a1abd72a4deb95126f164afcf62a3e091a1 ......
	 orig commit -> 919483096bfe75dda338e98d56da91a263746a0a ......
checking 07cc96fb15fecbd7f17c1d49eafcf127d3f5709f ......
	 orig commit -> 21a75f0915dde8674708b39abfcda113911c49b1 ......
checking a34f2f9f2034f7984f9529002c6fffe9cb63189d ......
	 orig commit -> a1b14d27ed0965838350f1377ff97c93ee383492 ......
checking b083b36ce3c91abe5ef7b51393d8af66c19fb594 ......
	 orig commit -> 461547f3158978c180d74484d58e82be9b8e7357 ......
checking e3865b8bb55897cef3ebb23da090a2b756ddf9d6 ......
	 orig commit -> 78565208d73ca9b654fb9a6b142214d52eeedfd1 ......
checking 2038fb6f957cb3367117ba8c91f2372dd28753aa ......
	 orig commit -> 7a84bd46647ff181eb2659fdc99590e6f16e501d ......
checking ff9140071bfb29199504563697056f51f9778f9f ......
	 orig commit -> ca7f41a4957b872577807169bd7464b36aae9b9c ......
checking 98673eb04022285598ae9b62aa314d5ea65e2c27 ......
	 orig commit -> b7d987295c74500b733a0ba07f9a9bcc4074fa83 ......
checking 1bec5f40664ccef7efa54102c5e29ac52c7db634 ......
	 orig commit -> 5f74f82ea34c0da80ea0b49192bb5ea06e063593 ......
		 5f74f82ea34c0da80ea0b49192bb5ea06e063593 has problem. Fixes commit -> ac9e70b17ecd7c6e933ff2eaf7ab37429e71bf4d
commit 69a5c7ca2e62072bcf2de664fdf038b64133d5d5
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Nov 2 07:53:17 2016 -0700

    tcp: fix potential memory corruption
    
    [ Upstream commit ac9e70b17ecd7c6e933ff2eaf7ab37429e71bf4d ]
    
    Imagine initial value of max_skb_frags is 17, and last
    skb in write queue has 15 frags.
    
    Then max_skb_frags is lowered to 14 or smaller value.
    
    tcp_sendmsg() will then be allowed to add additional page frags
    and eventually go past MAX_SKB_FRAGS, overflowing struct
    skb_shared_info.
    
    Fixes: 5f74f82ea34c ("net:Add sysctl_max_skb_frags")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Hans Westgaard Ry <hans.westgaard.ry@oracle.com>
    Cc: Håkon Bugge <haakon.bugge@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2679161c7712b175053d49536409c4450398067f ......
	 orig commit -> 9cf7490360bf2c46a16b7525f899e4970c5fc144 ......
checking 3ba9b9f2409168fb50d0a0758b922508e7885f48 ......
	 orig commit -> 415e3d3e90ce9e18727e8843ae343eda5a58fad6 ......
checking 4c890233fdee1312190b0db8b664baf2ff9a4ad8 ......
	 orig commit -> 44c3d0c1c0a880354e9de5d94175742e2c7c9683 ......
checking cdbc66828d250b463c0ca3a1e715965b57f2c1a3 ......
	 orig commit -> 16186a82de1fdd868255448274e64ae2616e2640 ......
checking e1c4e14bf12eb0a7179eedde41e3a94877a08802 ......
	 orig commit -> 1cdda91871470f15e79375991bd2eddc6e86ddb1 ......
checking e8e729ccd2fee9f0445c4949a1aa7dd610bfa8bd ......
	 orig commit -> 6f21c96a78b835259546d8f3fb4edff0f651d478 ......
checking 87e40d8d8ba965003611a8bdbe18019d344d9d58 ......
	 orig commit -> ff5d749772018602c47509bdc0093ff72acd82ec ......
checking ba50e6d96f3daf3db8396cc3529f90339d9ef59a ......
	 orig commit -> 4f2c6ae5c64c353fb1b0425e4747e5603feadba1 ......
checking 649dc6c32e516972128502ad6a45a16b96098567 ......
	 orig commit -> 8282f27449bf15548cb82c77b6e04ee0ab827bdc ......
checking c57e51ffd1d910d595ccb3af3ae70eeeb6d423a2 ......
	 orig commit -> 4d5cfcba2f6ec494d8810b9e3c0a7b06255c8067 ......
		 4d5cfcba2f6ec494d8810b9e3c0a7b06255c8067 has problem. Fixes commit -> 4de13d7ed6ffdcbb34317acaa9236f121176f5f8
commit 1b82da380dcfd030bd1ee32853b132659bb0ab4c
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Mar 3 17:54:54 2016 +0100

    tipc: fix nullptr crash during subscription cancel
    
    [ Upstream commit 4de13d7ed6ffdcbb34317acaa9236f121176f5f8 ]
    
    commit 4d5cfcba2f6e ('tipc: fix connection abort during subscription
    cancel'), removes the check for a valid subscription before calling
    tipc_nametbl_subscribe().
    
    This will lead to a nullptr exception when we process a
    subscription cancel request. For a cancel request, a null
    subscription is passed to tipc_nametbl_subscribe() resulting
    in exception.
    
    In this commit, we call tipc_nametbl_subscribe() only for
    a valid subscription.
    
    Fixes: 4d5cfcba2f6e ('tipc: fix connection abort during subscription cancel')
    Reported-by: Anders Widell <anders.widell@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 7f76933dbd9bb3a01c060e0a580a4f074c5d0def ......
	 orig commit -> db0e51afa481088e6396f11e02018d64113a6578 ......
checking 293c41f89596fb17bd3963f9f240000e8ab462ac ......
	 orig commit -> 27f7ed2b11d42ab6d796e96533c2076ec220affc ......
checking cccf9f37854c9ffd5f658c977345d8159ba1073a ......
	 orig commit -> 9a368aff9cb370298fa02feeffa861f2db497c18 ......
checking 39770be4d6ad29c5ab1f21edbbf01db067f13b52 ......
	 orig commit -> fa0dc04df259ba2df3ce1920e9690c7842f8fa4b ......
checking e5abc10d19b90ab363d8a732bc6cf098249e10c5 ......
	 orig commit -> e62a123b8ef7c5dc4db2c16383d506860ad21b47 ......
checking 176d8f37af972f47360d5c3751a61cd6274924cd ......
	 orig commit -> c868ee7063bdb53f3ef9eac7bcec84960980b471 ......
checking aa12fd6d38ce22fc16aaf03f6e53ce8be5de304a ......
	 orig commit -> 35e2d1152b22eae99c961affbe85374bef05a775 ......
		 35e2d1152b22eae99c961affbe85374bef05a775 has problem. Fixes commit -> 2da897e51d7f23f872224218b9a4314503b0d360
checking c95b96877efc8b258d24d6da93465fbb89082495 ......
	 orig commit -> 81e8f2e930fe76b9814c71b9d87c30760b5eb705 ......
		 81e8f2e930fe76b9814c71b9d87c30760b5eb705 has problem. Fixes commit -> db9d8b29d19d2801793e4419f4c6272bf8951c62
commit ccff2f4afbc183a163b2feb83132ead13d9283ed
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Fri Jun 23 17:51:31 2017 +0200

    net: dp83640: Avoid NULL pointer dereference.
    
    commit db9d8b29d19d2801793e4419f4c6272bf8951c62 upstream.
    
    The function, skb_complete_tx_timestamp(), used to allow passing in a
    NULL pointer for the time stamps, but that was changed in commit
    62bccb8cdb69051b95a55ab0c489e3cab261c8ef ("net-timestamp: Make the
    clone operation stand-alone from phy timestamping"), and the existing
    call sites, all of which are in the dp83640 driver, were fixed up.
    
    Even though the kernel-doc was subsequently updated in commit
    7a76a021cd5a292be875fbc616daf03eab1e6996 ("net-timestamp: Update
    skb_complete_tx_timestamp comment"), still a bug fix from Manfred
    Rudigier came into the driver using the old semantics.  Probably
    Manfred derived that patch from an older kernel version.
    
    This fix should be applied to the stable trees as well.
    
    Fixes: 81e8f2e930fe ("net: dp83640: Fix tx timestamp overflow handling.")
    Signed-off-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 306d316588459a0e6ee81098c334f3ef249ab64f ......
	 orig commit -> ce87fc6ce3f9f4488546187e3757cf666d9d4a2a ......
checking 626a83d5d55b90fc4df792bb0aa707df2ecafa4b ......
	 orig commit -> 52a82e23b9f2a9e1d429c5207f8575784290d008 ......
		 52a82e23b9f2a9e1d429c5207f8575784290d008 has problem. Fixes commit -> e3c42b61ff813921ba58cfc0019e3fd63f651190
commit 80176161f4514af9064f75a52a5dece6084128b5
Author: Mateusz Jurczyk <mjurczyk@google.com>
Date:   Fri Jun 23 19:32:28 2017 +0200

    af_iucv: Move sockaddr length checks to before accessing sa_family in bind and connect handlers
    
    [ Upstream commit e3c42b61ff813921ba58cfc0019e3fd63f651190 ]
    
    Verify that the caller-provided sockaddr structure is large enough to
    contain the sa_family field, before accessing it in bind() and connect()
    handlers of the AF_IUCV socket. Since neither syscall enforces a minimum
    size of the corresponding memory region, very short sockaddrs (zero or
    one byte long) result in operating on uninitialized memory while
    referencing .sa_family.
    
    Fixes: 52a82e23b9f2 ("af_iucv: Validate socket address length in iucv_sock_bind()")
    Signed-off-by: Mateusz Jurczyk <mjurczyk@google.com>
    [jwi: removed unneeded null-check for addr]
    Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

Check from v4.4.17 to v4.4.18
Commit count: 50
checking e4884275a4bb1cbce5a24a507c3e267c887dc1bd ......
checking eccccb42d44f44badcfbdbb4e21a4f30d9694666 ......
	 orig commit -> 615d66c37c755c49ce022c9e5ac0875d27d2603d ......
checking a0fddee3fb342a4150c83c36e317660663691a72 ......
	 orig commit -> 1f47b61fb4077936465dcde872a4e5cc4fe708da ......
		 1f47b61fb4077936465dcde872a4e5cc4fe708da has problem. Fixes commit -> 358c07fcc3b60ab08d77f1684de8bd81bcf49a1a
commit 5fad17434465a9e9ddddfb38a162e9e2e53e33a1
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Aug 25 15:17:08 2016 -0700

    mm: memcontrol: avoid unused function warning
    
    commit 358c07fcc3b60ab08d77f1684de8bd81bcf49a1a upstream.
    
    A bugfix in v4.8-rc2 introduced a harmless warning when
    CONFIG_MEMCG_SWAP is disabled but CONFIG_MEMCG is enabled:
    
      mm/memcontrol.c:4085:27: error: 'mem_cgroup_id_get_online' defined but not used [-Werror=unused-function]
       static struct mem_cgroup *mem_cgroup_id_get_online(struct mem_cgroup *memcg)
    
    This moves the function inside of the #ifdef block that hides the
    calling function, to avoid the warning.
    
    Fixes: 1f47b61fb407 ("mm: memcontrol: fix swap counter leak on swapout from offline cgroup")
    Link: http://lkml.kernel.org/r/20160824113733.2776701-1-arnd@arndb.de
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Vladimir Davydov <vdavydov@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8627c7750a66a46d56d3564e1e881aa53764497c ......
	 orig commit -> 73f576c04b9410ed19660f74f97521bee6e1c546 ......
		 73f576c04b9410ed19660f74f97521bee6e1c546 has problem. Fixes commit -> 615d66c37c755c49ce022c9e5ac0875d27d2603d
1f47b61fb4077936465dcde872a4e5cc4fe708da
commit a0fddee3fb342a4150c83c36e317660663691a72
Author: Vladimir Davydov <vdavydov@virtuozzo.com>
Date:   Thu Aug 11 15:33:00 2016 -0700

    mm: memcontrol: fix swap counter leak on swapout from offline cgroup
    
    commit 1f47b61fb4077936465dcde872a4e5cc4fe708da upstream.
    
    An offline memory cgroup might have anonymous memory or shmem left
    charged to it and no swap.  Since only swap entries pin the id of an
    offline cgroup, such a cgroup will have no id and so an attempt to
    swapout its anon/shmem will not store memory cgroup info in the swap
    cgroup map.  As a result, memcg->swap or memcg->memsw will never get
    uncharged from it and any of its ascendants.
    
    Fix this by always charging swapout to the first ancestor cgroup that
    hasn't released its id yet.
    
    [hannes@cmpxchg.org: add comment to mem_cgroup_swapout]
    [vdavydov@virtuozzo.com: use WARN_ON_ONCE() in mem_cgroup_id_get_online()]
      Link: http://lkml.kernel.org/r/20160803123445.GJ13263@esperanza
    Fixes: 73f576c04b941 ("mm: memcontrol: fix cgroup creation failure after many small jobs")
    Link: http://lkml.kernel.org/r/5336daa5c9a32e776067773d9da655d2dc126491.1470219853.git.vdavydov@virtuozzo.com
    Signed-off-by: Vladimir Davydov <vdavydov@virtuozzo.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: <stable@vger.kernel.org>    [3.19+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit eccccb42d44f44badcfbdbb4e21a4f30d9694666
Author: Vladimir Davydov <vdavydov@virtuozzo.com>
Date:   Thu Aug 11 15:33:03 2016 -0700

    mm: memcontrol: fix memcg id ref counter on swap charge move
    
    commit 615d66c37c755c49ce022c9e5ac0875d27d2603d upstream.
    
    Since commit 73f576c04b94 ("mm: memcontrol: fix cgroup creation failure
    after many small jobs") swap entries do not pin memcg->css.refcnt
    directly.  Instead, they pin memcg->id.ref.  So we should adjust the
    reference counters accordingly when moving swap charges between cgroups.
    
    Fixes: 73f576c04b941 ("mm: memcontrol: fix cgroup creation failure after many small jobs")
    Link: http://lkml.kernel.org/r/9ce297c64954a42dc90b543bc76106c4a94f07e8.1470219853.git.vdavydov@virtuozzo.com
    Signed-off-by: Vladimir Davydov <vdavydov@virtuozzo.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0fddee3fb342a4150c83c36e317660663691a72
Author: Vladimir Davydov <vdavydov@virtuozzo.com>
Date:   Thu Aug 11 15:33:00 2016 -0700

    mm: memcontrol: fix swap counter leak on swapout from offline cgroup
    
    commit 1f47b61fb4077936465dcde872a4e5cc4fe708da upstream.
    
    An offline memory cgroup might have anonymous memory or shmem left
    charged to it and no swap.  Since only swap entries pin the id of an
    offline cgroup, such a cgroup will have no id and so an attempt to
    swapout its anon/shmem will not store memory cgroup info in the swap
    cgroup map.  As a result, memcg->swap or memcg->memsw will never get
    uncharged from it and any of its ascendants.
    
    Fix this by always charging swapout to the first ancestor cgroup that
    hasn't released its id yet.
    
    [hannes@cmpxchg.org: add comment to mem_cgroup_swapout]
    [vdavydov@virtuozzo.com: use WARN_ON_ONCE() in mem_cgroup_id_get_online()]
      Link: http://lkml.kernel.org/r/20160803123445.GJ13263@esperanza
    Fixes: 73f576c04b941 ("mm: memcontrol: fix cgroup creation failure after many small jobs")
    Link: http://lkml.kernel.org/r/5336daa5c9a32e776067773d9da655d2dc126491.1470219853.git.vdavydov@virtuozzo.com
    Signed-off-by: Vladimir Davydov <vdavydov@virtuozzo.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: <stable@vger.kernel.org>    [3.19+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3a22cf0c7b597f7139d3fdd27fa70aa55aa6d977 ......
	 orig commit -> 554a5ccc4e4a20c5f3ec859de0842db4b4b9c77e ......
checking db82c747482bab275cd639ed0007ee27ec0c35a1 ......
	 orig commit -> c65d5c6c81a1f27dec5f627f67840726fcd146de ......
checking f8d4d52ce410c804d56fab866fa9fd2ec04d8d6e ......
	 orig commit -> 5b9554dc5bf008ae7f68a52e3d7e76c0920938a2 ......
checking 175f36cb34d4b06ca2384073f2b741db2e0f915b ......
	 orig commit -> 6a7fd522a7c94cdef0a3b08acf8e6702056e635c ......
checking 5a7f477c725e866729307ff87011f8dd812a3cdf ......
	 orig commit -> 646caa9c8e196880b41cd3e3d33a2ebc752bdb85 ......
checking 9e38db20d794504bb52f9592c90cdc8754f97251 ......
	 orig commit -> f70749ca42943faa4d4dcce46dfdcaadb1d0c4b6 ......
checking 08bb036c9d82ec70fd88c7e08345373a97f98637 ......
	 orig commit -> 5f070e81bee35f1b7bd1477bb223a873ff657803 ......
checking 148fbb966837725e6ff8f151ae6053521d04882c ......
	 orig commit -> b30bdfa86431afbafe15284a3ad5ac19b49b88e3 ......
checking 92f71339bceeda3a13b71e9663bf422bf3d3e941 ......
	 orig commit -> 47be61845c775643f1aa4d2a54343549f943c94c ......
		 47be61845c775643f1aa4d2a54343549f943c94c has problem. Fixes commit -> 7cbdb4a286a60c5d519cb9223fe2134d26870d39
commit 2ccb99b272a23b2f32327002f715b10d815a86f3
Author: Ian Kent <raven@themaw.net>
Date:   Mon Sep 19 14:44:12 2016 -0700

    autofs: use dentry flags to block walks during expire
    
    commit 7cbdb4a286a60c5d519cb9223fe2134d26870d39 upstream.
    
    Somewhere along the way the autofs expire operation has changed to hold
    a spin lock over expired dentry selection.  The autofs indirect mount
    expired dentry selection is complicated and quite lengthy so it isn't
    appropriate to hold a spin lock over the operation.
    
    Commit 47be61845c77 ("fs/dcache.c: avoid soft-lockup in dput()") added a
    might_sleep() to dput() causing a WARN_ONCE() about this usage to be
    issued.
    
    But the spin lock doesn't need to be held over this check, the autofs
    dentry info.  flags are enough to block walks into dentrys during the
    expire.
    
    I've left the direct mount expire as it is (for now) because it is much
    simpler and quicker than the indirect mount expire and adding spin lock
    release and re-aquires would do nothing more than add overhead.
    
    Fixes: 47be61845c77 ("fs/dcache.c: avoid soft-lockup in dput()")
    Link: http://lkml.kernel.org/r/20160912014017.1773.73060.stgit@pluto.themaw.net
    Signed-off-by: Ian Kent <raven@themaw.net>
    Reported-by: Takashi Iwai <tiwai@suse.de>
    Tested-by: Takashi Iwai <tiwai@suse.de>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: NeilBrown <neilb@suse.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b6e0a217f621c62a2abd3ce4c6ae8146c8122e98 ......
	 orig commit -> 9446385f05c9af25fed53dbed3cc75763730be52 ......
checking 9ca5f11d9261e7ed491e425b2efde5e9cecf1447 ......
	 orig commit -> 9ebce595f63a407c5cec98f98f9da8459b73740a ......
checking 3d1c64d81fd887ec0cac56f0299c2234a5450011 ......
	 orig commit -> ac7f052b9e1534c8248f814b6f0068ad8d4a06d2 ......
checking 62659f0b9ed71ffb8a1e66a42eb52ab8ddadb77a ......
	 orig commit -> 9b24fef9f0410fb5364245d6cc2bd044cc064007 ......
checking 9a95c0cfc6f21b9ac66269d4782ea5a0f58cdf91 ......
	 orig commit -> 77da160530dd1dc94f6ae15a981f24e5f0021e84 ......
checking 3cde0e742e29d112aca58731a77d8a3aee386fb8 ......
	 orig commit -> f7d665627e103e82d34306c7d3f6f46f387c0d8b ......
checking 821d5e6b8aed558a989514ea85fa14e097111cf0 ......
	 orig commit -> e2e407dc093f530b771ee8bf8fe1be41e3cea8b3 ......
checking fb93281fa225923c89cf94db59abfd98bba4709f ......
	 orig commit -> 1886297ce0c8d563a08c8a8c4c0b97743e06cd37 ......
checking e270fdc5237154293d0b58d85ee6584742f98aeb ......
	 orig commit -> b6350c21cfe8aa9d65e189509a23c0ea4b8362c2 ......
checking 26b340ea33f49af99449607c20c97fa3f499c5fa ......
	 orig commit -> 88ba281108ed0c25c9d292b48bd3f272fcb90dd0 ......
checking a23b299b4a7d0083a3bdb61d1586956f817e8961 ......
	 orig commit -> ad025a73f0e9344ac73ffe1b74c184033e08e7d5 ......
checking 594055cf63d2ed5b06387f91ce9505ae651fc38d ......
	 orig commit -> edfe63ec97ed8d4496225f7ba54c9ce4207c5431 ......
checking 32c854288949a34f4dc08655d0c4b0294916e6c0 ......
	 orig commit -> d63dcf49cf5ae5605f4d14229e3888e104f294b1 ......
checking d50e8b108ef8980bd193de587d984e986be2ecc1 ......
	 orig commit -> 224bb1e5d67ba0f2872c98002d6a6f991ac6fd4a ......
checking 8f5b8210fff0e8469c056b82490d786bc6bde92a ......
	 orig commit -> 02f037d641dc6672be5cfe7875a48ab99b95b154 ......
checking 5c7d0f49cf1492866fa619af4538f56938abe07d ......
	 orig commit -> 67245ff332064c01b760afa7a384ccda024bfd24 ......
checking 93f84c8864658c740d205624ab9d23ceca235e46 ......
	 orig commit -> 86a574de4590ffe6fd3f3ca34cdcf655a78e36ec ......
checking 6090bfb684a9985e29c3c0aae52a4b93f967e90f ......
	 orig commit -> 0b938a2e2cf0b0a2c8bac9769111545aff0fee97 ......
checking 4cf8f0b0b3e635d8a17f19ef3a183c4c95a4af39 ......
	 orig commit -> 5419447e2142d6ed68c9f5c1a28630b3a290a845 ......
checking cca36a7dad58fc7a95944319e48162194ead6f00 ......
	 orig commit -> 20f06ed9f61a185c6dabd662c310bed6189470df ......
checking 0107ea0e0928c8a077f0f912c809f2b86fa7496c ......
	 orig commit -> 7de249964f5578e67b99699c5f0b405738d820a2 ......
checking 66e5d7b47c864f1821041f77752930ec3b8dfc22 ......
	 orig commit -> 4d06dd537f95683aba3651098ae288b7cbff8274 ......
checking 3088903a55f218c0d3758de086ede3901b8711b0 ......
	 orig commit -> a7ae81952cdab56a1277bd2f9ed7284c0f575120 ......
checking 979a61a02992e2029fcedcdf32c05050aa652c9c ......
	 orig commit -> 8b8addf891de8a00e4d39fc32f93f7c5eb8feceb ......
checking 6e1242497cdf8274b8a27f24325634089c77285e ......
	 orig commit -> 19f4c2ba869517048add62c202f9645b6adf5dfb ......
checking d71d4aceae67acf0dd95fa288439d9801f76c9cb ......
	 orig commit -> a77060f07ffc6ac978e280e738302f3e5572a99e ......
checking 02170f4afcb4514270fcd39cec05650b7858c605 ......
	 orig commit -> ed1f0eeebaeeb7f790e9e7642116a208581e5bfc ......
checking 5a6f9d06d844763261f89850f33a4b84cfc0f1c1 ......
	 orig commit -> 221255aee67ec1c752001080aafec0c4e9390d95 ......
checking 694dfd0ef02ded5b6fbea03a12350ee8a74921d5 ......
checking 9c946c931b63068c4197d9d0b4d24635418bc67d ......
	 orig commit -> f626300a3e776ccc9671b0dd94698fb3aa315966 ......
checking e23696bc441f5e4fefb18e81d51069632480f64a ......
	 orig commit -> 59d3f1ceb69b54569685d0c34dff16a1e0816b19 ......
checking fc9b7c086b6743aa4b1a70ada58352c665ada49a ......
	 orig commit -> d3e6952cfb7ba5f4bfa29d4803ba91f96ce1204d ......
checking 863c8bb8be39ad11f0d9d66a431b3d9ca5c11dd7 ......
	 orig commit -> e86663c475d384ab5f46cb5637e9b7ad08c5c505 ......
checking 0020fa536cc610216f80b798b9a1c9b13c3a37fb ......
	 orig commit -> 005db31d5f5f7c31cfdc43505d77eb3ca5cf8ec6 ......
checking a9c221859696f976ba47ba39178af1175e4558e0 ......
	 orig commit -> 80610229ef7b26615dbb6cb6e873709a60bacc9f ......
checking 5413f1a526d2d51d7a5768133c90936c017165c6 ......
	 orig commit -> 083ae308280d13d187512b9babe3454342a7987e ......
checking 72c2d3bccaba4a0a4de354f9d2d24eccd05bfccf ......
	 orig commit -> 75ff39ccc1bd5d3c455b6822ab09e533c551f758 ......

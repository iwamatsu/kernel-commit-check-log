Check from v4.4.13 to v4.4.14
Commit count: 82
checking 9ca1d50fa959cda1f04f43275f7930a70f1a631e ......
checking e917563612e5d8ad3a80efa5f43e654be50fe82f ......
	 orig commit -> d7591f0c41ce3e67600a982bab6989ef0f07b3ce ......
		 d7591f0c41ce3e67600a982bab6989ef0f07b3ce has problem. Fixes commit -> e466af75c074e76107ae1cd5a2823e9c61894ffb
commit f9845426f4427eb0031b562dfd5c0ffe99cba644
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Oct 5 02:50:07 2017 -0700

    netfilter: x_tables: avoid stack-out-of-bounds read in xt_copy_counters_from_user
    
    commit e466af75c074e76107ae1cd5a2823e9c61894ffb upstream.
    
    syzkaller reports an out of bound read in strlcpy(), triggered
    by xt_copy_counters_from_user()
    
    Fix this by using memcpy(), then forcing a zero byte at the last position
    of the destination, as Florian did for the non COMPAT code.
    
    Fixes: d7591f0c41ce ("netfilter: x_tables: introduce and use xt_copy_counters_from_user")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Cc: Greg Hackmann <ghackmann@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d69f93d059c6294322bb91f9aaff796a21c3aa20 ......
	 orig commit -> 09d9686047dbbe1cf4faa558d3ecc4aae2046054 ......
		 09d9686047dbbe1cf4faa558d3ecc4aae2046054 has problem. Fixes commit -> 17a49cd549d9dc8707dc9262210166455c612dde
commit a84338dad3c9501a5301db27ee665cda663219fc
Author: Hongxu Jia <hongxu.jia@windriver.com>
Date:   Tue Nov 29 21:56:26 2016 -0500

    netfilter: arp_tables: fix invoking 32bit "iptable -P INPUT ACCEPT" failed in 64bit kernel
    
    commit 17a49cd549d9dc8707dc9262210166455c612dde upstream.
    
    Since 09d9686047db ("netfilter: x_tables: do compat validation via
    translate_table"), it used compatr structure to assign newinfo
    structure.  In translate_compat_table of ip_tables.c and ip6_tables.c,
    it used compatr->hook_entry to replace info->hook_entry and
    compatr->underflow to replace info->underflow, but not do the same
    replacement in arp_tables.c.
    
    It caused invoking 32-bit "arptbale -P INPUT ACCEPT" failed in 64bit
    kernel.
    --------------------------------------
    root@qemux86-64:~# arptables -P INPUT ACCEPT
    root@qemux86-64:~# arptables -P INPUT ACCEPT
    ERROR: Policy for `INPUT' offset 448 != underflow 0
    arptables: Incompatible with this kernel
    --------------------------------------
    
    Fixes: 09d9686047db ("netfilter: x_tables: do compat validation via translate_table")
    Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Acked-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3a69c0f0487a6eba5fd5005c7902a230c8e31518 ......
	 orig commit -> 0188346f21e6546498c2a0f84888797ad4063fc5 ......
checking 0fab6d3d18866bbc4f964696ae31a5456795bb10 ......
	 orig commit -> 329a0807124f12fe1c8032f95d8a8eb47047fb0e ......
checking 77521be687870e2ecae748df7b8fb103dd57dac2 ......
	 orig commit -> 7d3f843eed29222254c9feab481f55175a1afcc9 ......
checking 946e8148dba1943e1762833694ec2c476469d1fe ......
	 orig commit -> 8dddd32756f6fe8e4e82a63361119b7e2384e02f ......
checking fe1e4026ce9f03653288c743218ed70ee0a2c4e0 ......
	 orig commit -> 7b7eba0f3515fca3296b8881d583f7c1042f5226 ......
checking caa39a1e709c3cf89c0a4d600e98f9863085e3d5 ......
	 orig commit -> 13631bfc604161a9d69cd68991dff8603edd66f9 ......
checking 8a865621540c7bc7f03665a2b7029cb444a9593a ......
	 orig commit -> ce683e5f9d045e5d67d1312a42b359cb2ab2a13c ......
checking 2066499780e1455c43833b5b34858124047331ff ......
	 orig commit -> 7ed2abddd20cf8f6bd27f65bd218f26fa5bf7f44 ......
		 7ed2abddd20cf8f6bd27f65bd218f26fa5bf7f44 has problem. Fixes commit -> 7b7eba0f3515fca3296b8881d583f7c1042f5226
commit fe1e4026ce9f03653288c743218ed70ee0a2c4e0
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Jun 1 02:04:44 2016 +0200

    netfilter: x_tables: don't reject valid target size on some architectures
    
    commit 7b7eba0f3515fca3296b8881d583f7c1042f5226 upstream.
    
    Quoting John Stultz:
      In updating a 32bit arm device from 4.6 to Linus' current HEAD, I
      noticed I was having some trouble with networking, and realized that
      /proc/net/ip_tables_names was suddenly empty.
      Digging through the registration process, it seems we're catching on the:
    
       if (strcmp(t->u.user.name, XT_STANDARD_TARGET) == 0 &&
           target_offset + sizeof(struct xt_standard_target) != next_offset)
             return -EINVAL;
    
      Where next_offset seems to be 4 bytes larger then the
      offset + standard_target struct size.
    
    next_offset needs to be aligned via XT_ALIGN (so we can access all members
    of ip(6)t_entry struct).
    
    This problem didn't show up on i686 as it only needs 4-byte alignment for
    u64, but iptables userspace on other 32bit arches does insert extra padding.
    
    Reported-by: John Stultz <john.stultz@linaro.org>
    Tested-by: John Stultz <john.stultz@linaro.org>
    Fixes: 7ed2abddd20cf ("netfilter: x_tables: check standard target size too")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2985d199e713c05eec2eaffeeeac40682aa2e5cc ......
	 orig commit -> fc1221b3a163d1386d1052184202d5dc50d302d1 ......
checking ed30e07de077354993122c5d88e535cbe0a03754 ......
	 orig commit -> a08e4e190b866579896c09af59b3bdca821da2cd ......
checking 6bc803b795631cb14a6a3ea6d433589c8c666cc3 ......
	 orig commit -> aa412ba225dd3bc36d404c28cdc3d674850d80d0 ......
checking cfdca13028ff3aa8c5f4b63ba5abf878cd55ced5 ......
	 orig commit -> 7d35812c3214afa5b37a675113555259cfd67b98 ......
checking 611d408a531fdbecf07e268ac87e37d71dd5cd8e ......
	 orig commit -> 36472341017529e2b12573093cc0f68719300997 ......
		 36472341017529e2b12573093cc0f68719300997 has problem. Fixes commit -> f4dc77713f8016d2e8a3295e1c9c53a21f296def
commit 45cf54e13c70ce0ec4875220103916978ce3ed07
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jul 14 17:51:26 2016 +0200

    netfilter: x_tables: speed up jump target validation
    
    commit f4dc77713f8016d2e8a3295e1c9c53a21f296def upstream.
    
    The dummy ruleset I used to test the original validation change was broken,
    most rules were unreachable and were not tested by mark_source_chains().
    
    In some cases rulesets that used to load in a few seconds now require
    several minutes.
    
    sample ruleset that shows the behaviour:
    
    echo "*filter"
    for i in $(seq 0 100000);do
            printf ":chain_%06x - [0:0]\n" $i
    done
    for i in $(seq 0 100000);do
       printf -- "-A INPUT -j chain_%06x\n" $i
       printf -- "-A INPUT -j chain_%06x\n" $i
       printf -- "-A INPUT -j chain_%06x\n" $i
    done
    echo COMMIT
    
    [ pipe result into iptables-restore ]
    
    This ruleset will be about 74mbyte in size, with ~500k searches
    though all 500k[1] rule entries. iptables-restore will take forever
    (gave up after 10 minutes)
    
    Instead of always searching the entire blob for a match, fill an
    array with the start offsets of every single ipt_entry struct,
    then do a binary search to check if the jump target is present or not.
    
    After this change ruleset restore times get again close to what one
    gets when reverting 36472341017529e (~3 seconds on my workstation).
    
    [1] every user-defined rule gets an implicit RETURN, so we get
    300k jumps + 100k userchains + 100k returns -> 500k rule entries
    
    Fixes: 36472341017529e ("netfilter: x_tables: validate targets of jumps")
    Reported-by: Jeff Wu <wujiafu@gmail.com>
    Tested-by: Jeff Wu <wujiafu@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Acked-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d6f7cd1b21b9e797e09269ee16655f9c0e4a3fa1 ......
	 orig commit -> f24e230d257af1ad7476c6e81a8dc3127a74204e ......
checking 0d6ad54b74fd66ca016076900da97e96272ff83e ......
	 orig commit -> f2d580b9a8149735cbc4b59c4a8df60173658140 ......
checking dbea3ce55ad13ddccf519a95ce0d77a5064e9ccc ......
	 orig commit -> 6dc5df71ee5c8b44607928bfe27be50314dcf848 ......
checking 5ebdccd7685f1c0b451c516f99082642d8d49003 ......
	 orig commit -> 54d83fc74aa9ec72794373cb47432c5f7fb1a309 ......
checking 868fe2536f8741ebf807ed717734e6c321c478e9 ......
	 orig commit -> 6e94e0cfb0887e4013b3b930fa6ab1fe6bb6ba91 ......
checking 59ff9f9b38b39afeb167fdc16c52976587b2c45a ......
	 orig commit -> bdf533de6968e9686df777dc178486f600c6e617 ......
checking ccb85835a159923d7f79fd51cfd614962426ecf2 ......
	 orig commit -> d7de413475f443957a0c1d256e405d19b3a2cb22 ......
checking 561e4453dd06f56cd8a61ced33964189b3651558 ......
	 orig commit -> 7cafc0b8bf130f038b0ec2dcdd6a9de6dc59b65a ......
checking 1fda90c39d8ef6acbedfd3cd9bd710a5bcc490c3 ......
	 orig commit -> d11c2a0de2824395656cf8ed15811580c9dd38aa ......
checking 6bb3290ce9662055efcf13dc18c12bb62f6f39dc ......
	 orig commit -> 9ea46abe22550e3366ff7cee2f8391b35b12f730 ......
checking 87575e31be28afb08665f412ac269909c5911a33 ......
	 orig commit -> 24e49ee3d76b70853a96520e46b8837e5eae65b2 ......
checking ccd02310db44df820d1e8c54a97daf596dea1c9e ......
	 orig commit -> d0c31e02005764dae0aab130a57e9794d06b824d ......
checking b1206090828584bcb1caf4c850d175f297eb7bc8 ......
	 orig commit -> 397d1533b6cce0ccb5379542e2e6d079f6936c46 ......
checking 4185bd68ef40b275669efec624c0d792cd7a2acf ......
	 orig commit -> 36beca6571c941b28b0798667608239731f9bc3a ......
checking e9c74337a7c03d33f2afd5bb341cc20ad209698c ......
	 orig commit -> 49fa5230462f9f2c4e97c81356473a6bdf06c422 ......
checking c9bc125c922e855055cd08b2ec064180218be161 ......
	 orig commit -> 1a40b95374f680625318ab61d81958e949e0afe3 ......
		 1a40b95374f680625318ab61d81958e949e0afe3 has problem. Fixes commit -> 49fa5230462f9f2c4e97c81356473a6bdf06c422
commit e9c74337a7c03d33f2afd5bb341cc20ad209698c
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Apr 27 17:27:37 2016 -0400

    sparc64: Fix bootup regressions on some Kconfig combinations.
    
    [ Upstream commit 49fa5230462f9f2c4e97c81356473a6bdf06c422 ]
    
    The system call tracing bug fix mentioned in the Fixes tag
    below increased the amount of assembler code in the sequence
    of assembler files included by head_64.S
    
    This caused to total set of code to exceed 0x4000 bytes in
    size, which overflows the expression in head_64.S that works
    to place swapper_tsb at address 0x408000.
    
    When this is violated, the TSB is not properly aligned, and
    also the trap table is not aligned properly either.  All of
    this together results in failed boots.
    
    So, do two things:
    
    1) Simplify some code by using ba,a instead of ba/nop to get
       those bytes back.
    
    2) Add a linker script assertion to make sure that if this
       happens again the build will fail.
    
    Fixes: 1a40b95374f6 ("sparc: Fix system call tracing register handling.")
    Reported-by: Meelis Roos <mroos@linux.ee>
    Reported-by: Joerg Abraham <joerg.abraham@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2b11d80e1aa70b56c6431e4dc3c686ffc61a73bf ......
	 orig commit -> 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 ......
checking c08b1a593a042ae01e788ec5504bee2cfc83e1f2 ......
	 orig commit -> 29d6455178a09e1dc340380c582b13356227e8df ......
checking 9beb96b344c846779f67d1be1cdafc66562b94ec ......
	 orig commit -> e54ad7f1ee263ffa5a2de9c609d58dfa27b21cd9 ......
checking 035a94d8d1acdb829575a987222a6d5c45e8a5f2 ......
	 orig commit -> aaee8c3c5cce2d9107310dd9f3026b4f901d441c ......
checking 47648b5862145187fc8273de0b5330bb9968feb3 ......
	 orig commit -> 3d5fdff46c4b2b9534fa2f9fc78e90a48e0ff724 ......
		 3d5fdff46c4b2b9534fa2f9fc78e90a48e0ff724 has problem. Fixes commit -> 4d0bd46a4d55383f7b925e6cf7865a77e0f0e020
commit 7f71eec92e1ed8eba4c71c8bc205cfb54f2a13cf
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Aug 8 08:45:33 2016 +0200

    Revert "wext: Fix 32 bit iwpriv compatibility issue with 64 bit Kernel"
    
    commit 4d0bd46a4d55383f7b925e6cf7865a77e0f0e020 upstream.
    
    This reverts commit 3d5fdff46c4b2b9534fa2f9fc78e90a48e0ff724.
    
    Ben Hutchings pointed out that the commit isn't safe since it assumes
    that the structure used by the driver is iw_point, when in fact there's
    no way to know about that.
    
    Fortunately, the only driver in the tree that ever runs this code path
    is the wilc1000 staging driver, so it doesn't really matter.
    
    Clearly I should have investigated this better before applying, sorry.
    
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Fixes: 3d5fdff46c4b ("wext: Fix 32 bit iwpriv compatibility issue with 64 bit Kernel")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking dea2cf7c0c6e42ccb1eea2baba028163597bcf22 ......
	 orig commit -> 2f36db71009304b3f0b95afacd8eba1f9f046b87 ......
checking d3f97524ef1b2b12df6669a701e66c02f1da523d ......
	 orig commit -> 3a06bb78ceeceacc86a1e31133a7944013f9775b ......
checking 1125f3b09513831b6863a1ed78fb0d1750105bfc ......
	 orig commit -> 8b78f260887df532da529f225c49195d18fef36b ......
checking b5ff1d6012726f539723c24712bb71976ee2bc77 ......
	 orig commit -> 5edf673d07fdcb6498be24914f3f38f8d8843199 ......
checking a976f62a601a763ea37d116d5a9009a2eec9d0f3 ......
	 orig commit -> 7cc851039d643a2ee7df4d18177150f2c3a484f5 ......
		 7cc851039d643a2ee7df4d18177150f2c3a484f5 has problem. Fixes commit -> 2c2a63e301fd19ccae673e79de59b30a232ff7f9
commit 044af1b034a0cbea5dea8d9d0f4a5c66968edd10
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Jun 8 10:01:23 2016 +1000

    powerpc/pseries: Fix IBM_ARCH_VEC_NRCORES_OFFSET since POWER8NVL was added
    
    commit 2c2a63e301fd19ccae673e79de59b30a232ff7f9 upstream.
    
    The recent commit 7cc851039d64 ("powerpc/pseries: Add POWER8NVL support
    to ibm,client-architecture-support call") added a new PVR mask & value
    to the start of the ibm_architecture_vec[] array.
    
    However it missed the fact that further down in the array, we hard code
    the offset of one of the fields, and then at boot use that value to
    patch the value in the array. This means every update to the array must
    also update the #define, ugh.
    
    This means that on pseries machines we will misreport to firmware the
    number of cores we support, by a factor of threads_per_core.
    
    Fix it for now by updating the #define.
    
    Fixes: 7cc851039d64 ("powerpc/pseries: Add POWER8NVL support to ibm,client-architecture-support call")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking cac2863ff3e64221f8888da9fcf72080181e91a8 ......
	 orig commit -> 8dd75ccb571f3c92c48014b3dabd3d51a115ab41 ......
		 8dd75ccb571f3c92c48014b3dabd3d51a115ab41 has problem. Fixes commit -> fa73c3b25bd8d0d393dc6109a1dba3c2aef0451e
commit 418fdccd410e34e358368b5439a20dd08d75c3c2
Author: Thomas Huth <thuth@redhat.com>
Date:   Wed Sep 21 15:06:45 2016 +0200

    KVM: PPC: Book3s PR: Allow access to unprivileged MMCR2 register
    
    commit fa73c3b25bd8d0d393dc6109a1dba3c2aef0451e upstream.
    
    The MMCR2 register is available twice, one time with number 785
    (privileged access), and one time with number 769 (unprivileged,
    but it can be disabled completely). In former times, the Linux
    kernel was using the unprivileged register 769 only, but since
    commit 8dd75ccb571f3c92c ("powerpc: Use privileged SPR number
    for MMCR2"), it uses the privileged register 785 instead.
    The KVM-PR code then of course also switched to use the SPR 785,
    but this is causing older guest kernels to crash, since these
    kernels still access 769 instead. So to support older kernels
    with KVM-PR again, we have to support register 769 in KVM-PR, too.
    
    Fixes: 8dd75ccb571f3c92c48014b3dabd3d51a115ab41
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4f27ca0e25df7b317983a1c8a1febecbeae81813 ......
	 orig commit -> d23fac2b27d94aeb7b65536a50d32bfdc21fe01e ......
checking baa6dfd627b460f73a8b79fd4cf87ea31e690e36 ......
	 orig commit -> 871e178e0f2c4fa788f694721a10b4758d494ce1 ......
checking 5e8b53a4db947494f1d808469a411f7f2f8bb3ca ......
	 orig commit -> 0106d456c4cb1770253fefc0ab23c9ca760b43f7 ......
checking d0bc1f47b8a7eee50b10035c645f6e6d7e719a62 ......
	 orig commit -> e47b020a323d1b2a7b1e9aac86e99eae19463630 ......
checking 774920eece6e15f6560ba0ad5a9b25eb43d075fe ......
	 orig commit -> ab6a11a7c8ef47f996974dd3c648c2c0b1a36ab1 ......
checking b440f3ae617bd81a5699bbba5120c8f54c456f81 ......
	 orig commit -> bad6a185b4d6f81d0ed2b6e4c16307969f160b95 ......
checking f32ef5c8e9e847706a3ef96791e14b207914d9e3 ......
	 orig commit -> dd5f1b049dc139876801db3cdd0f20d21fd428cc ......
checking 9be2fa205c9e1337a68847ae38e791bd6b17cc42 ......
	 orig commit -> 0fa963553a5c28d8f8aabd8878326d3f782045fc ......
checking ebf529182a6da5fcbecf0305b19de4e0cba048fb ......
	 orig commit -> 6edf0aa4f8bbdfbb4d6d786892fa02728d05dc36 ......
checking e1c35534e3684e25053f5caf6e032956894e8b1f ......
	 orig commit -> b66b2a0adf0e48973b582e055758b9907a7eee7c ......
checking 9edd6fd1eb92ebd61c84975855335922db632ea5 ......
	 orig commit -> e2dfb4b880146bfd4b6aa8e138c0205407cebbaf ......
checking da7f1c92042c25048a53b0eaf716fc66aaac62a9 ......
	 orig commit -> dab38e43b298501a4e8807b56117c029e2e98383 ......
checking 81999107ce6de995fc532d4fed23a5189ce18eac ......
	 orig commit -> 6fbae35a3170c3e2b1b9d7b9cc943cbe48771362 ......
		 6fbae35a3170c3e2b1b9d7b9cc943cbe48771362 has problem. Fixes commit -> 2d7fe6185722b0817bb345f62ab06b76a7b26542
commit 509ab500a240f42fd35a696e735ca8e787668791
Author: Kailang Yang <kailang@realtek.com>
Date:   Wed Nov 22 15:21:32 2017 +0800

    ALSA: hda/realtek - Fix ALC700 family no sound issue
    
    commit 2d7fe6185722b0817bb345f62ab06b76a7b26542 upstream.
    
    It maybe the typo for ALC700 support patch.
    To fix the bit value on this patch.
    
    Fixes: 6fbae35a3170 ("ALSA: hda/realtek - Add support for new codecs ALC700/ALC701/ALC703")
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c3fd646bb8c4faab68fed0e751d0e4f623b5dbab ......
	 orig commit -> e69e7e03ed225abf3e1c43545aa3bcb68dc81d5f ......
checking 1bf80a48ff88552644ede5c953321d667808fa1d ......
	 orig commit -> f90d83b301701026b2e4c437a3613f377f63290e ......
checking 1f4b75078c205b34f3fcfd04098d61b77e044e68 ......
	 orig commit -> 35639a0e98391036a4c7f23253c321d6621a8897 ......
checking 2cb77b0ad44351869427d6a744bf5791e6a2c100 ......
	 orig commit -> c622a3c21ede892e370b56e1ceb9eb28f8bbda6b ......
checking ded4fc623b3c331b847d23f947f457a020f25683 ......
	 orig commit -> d14bdb553f9196169f003058ae1cdabe514470e6 ......
checking ce9c0dba5bf3ad4a25a9dc202e36e74d904df61d ......
	 orig commit -> 7e059158d57b79159eaf1f504825d19866ef2c42 ......
		 7e059158d57b79159eaf1f504825d19866ef2c42 has problem. Fixes commit -> 106da663ff495e0aea3ac15b8317aa410754fcac
checking 51d7c394605bd5d72e76745def0002dd938ec48b ......
	 orig commit -> 55e5bfb53cff286c1c1ff49f51325dc15c7fea63 ......
checking 3dc443059897b8a2fa3e3b18f794ee31c0063730 ......
	 orig commit -> 72564b59ffc438ea103b0727a921aaddce766728 ......
checking 4d82f395bb0597a3aba23387406e2c07332d6ae9 ......
	 orig commit -> 00bc0ef5880dc7b82f9c320dead4afaad48e47be ......
		 00bc0ef5880dc7b82f9c320dead4afaad48e47be has problem. Fixes commit -> 2b06cdf3e688b98fcc9945873b5d42792bd4eee0
commit 9e9fe58a92a46c6d154d2901735bf230d91b8507
Author: Jonathan Basseri <misterikkit@google.com>
Date:   Wed Oct 25 09:52:27 2017 -0700

    xfrm: Clear sk_dst_cache when applying per-socket policy.
    
    [ Upstream commit 2b06cdf3e688b98fcc9945873b5d42792bd4eee0 ]
    
    If a socket has a valid dst cache, then xfrm_lookup_route will get
    skipped. However, the cache is not invalidated when applying policy to a
    socket (i.e. IPV6_XFRM_POLICY). The result is that new policies are
    sometimes ignored on those sockets. (Note: This was broken for IPv4 and
    IPv6 at different times.)
    
    This can be demonstrated like so,
    1. Create UDP socket.
    2. connect() the socket.
    3. Apply an outbound XFRM policy to the socket. (setsockopt)
    4. send() data on the socket.
    
    Packets will continue to be sent in the clear instead of matching an
    xfrm or returning a no-match error (EAGAIN). This affects calls to
    send() and not sendto().
    
    Invalidating the sk_dst_cache is necessary to correctly apply xfrm
    policies. Since we do this in xfrm_user_policy(), the sk_lock was
    already acquired in either do_ip_setsockopt() or do_ipv6_setsockopt(),
    and we may call __sk_dst_reset().
    
    Performance impact should be negligible, since this code is only called
    when changing xfrm policy, and only affects the socket in question.
    
    Fixes: 00bc0ef5880d ("ipv6: Skip XFRM lookup if dst_entry in socket cache is valid")
    Tested: https://android-review.googlesource.com/517555
    Tested: https://android-review.googlesource.com/418659
    Signed-off-by: Jonathan Basseri <misterikkit@google.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 05cbd46be7f1aaa355301e2e12c378cbfdeeeb2a ......
	 orig commit -> a5c5e2da8551eb69e5d5d09d51d526140b5db9fb ......
checking 38f56354f4e1cfbaa1f2f10e9acb30f105b70aed ......
	 orig commit -> 0b148def403153a4d1565f1640356cb78ce5109f ......
checking f946ceab11c4bede9b3d6c0d56f0964d65bfff65 ......
	 orig commit -> ce3cf4ec0305919fc69a972f6c2b2efd35d36abc ......
checking 721976e93e5d8963d0c937ee236489968bfcfb81 ......
	 orig commit -> ce577668a426c6a9e2470a09dcd07fbd6e45272a ......
checking 13a055d6ca34dcce324ccfab63cc05db726030bc ......
	 orig commit -> f6988cb63a4e698d8a62a1d085d263d1fcc351ea ......
checking 450db517b9223908ab5c1a9b5ddce3b6c4d75b18 ......
	 orig commit -> c0795bf64cba4d1b796fdc5b74b33772841ed1bb ......
checking bfe951d547bf15bf1192abd20773e6603dacadf1 ......
	 orig commit -> 612bacad78ba6d0a91166fc4487af114bac172a8 ......
checking f5f16bf66d7e07e5a04f07226caefeaf3136c83a ......
	 orig commit -> f0a3fdca794d1e68ae284ef4caefe681f7c18e89 ......
checking ab1f253ddccc235520fa4f70d32a8dd6bf8ef346 ......
	 orig commit -> e5aed006be918af163eb397e45aa5ea6cefd5e01 ......
checking 5b7ea922e1754107f77d146011612f2e42600cc1 ......
	 orig commit -> e27f4a942a0ee4b84567a3c6cfa84f273e55cbb7 ......
checking bccd56fad0433ef1ed0661bb3a4055503cdec4e9 ......
	 orig commit -> addf8fc4acb1cf79492ac64966f07178793cb3d7 ......
checking 835d0122a57ffaea43162d0e7a4f5bf25d2af78b ......
	 orig commit -> da4ed55165d41b1073f9a476f1c18493e9bf8c8e ......
checking 6a58f3e12e8e5c330940b38cc8c98d52171aefa8 ......
	 orig commit -> 03aaaa9b941e136757b55c4cf775aab6068dfd94 ......
checking 49543942beb1b9ca95709d6cfa67708932aa4d11 ......
	 orig commit -> 92964c79b357efd980812c4de5c1fd2ec8bb5520 ......
checking 23cdd8c3cbe9d790f23d7f9ae14e9b828f56f69c ......
	 orig commit -> 45e093ae2830cd1264677d47ff9a95a71f5d9f9c ......
checking c54c115da7214a41a697180964cf6d7a5a50b599 ......
	 orig commit -> fbd83006e3e536fcb103228d2422ea63129ccb03 ......
checking 0dec8c0d67c64401d97122e4eba347ccc5850622 ......
	 orig commit -> a621bac3044ed6f7ec5fa0326491b2d4838bfa93 ......

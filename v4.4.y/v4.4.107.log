Check from v4.4.107 to v4.4.108
Commit count: 79
checking 03028e068a1f75d3b2e0989d7a452e701df0727b ......
checking 1cfeaadfd1b45388f8b957cb58d8df3cb1e5509c ......
	 orig commit -> 8ee912dab95f1483156b6e994004bfcc3158d798 ......
checking d126c47656da7ca0c7921eea931e871642c90fb7 ......
	 orig commit -> 97cc2ed27e5a168cf423f67c3bc7c6cc41d12f82 ......
		 97cc2ed27e5a168cf423f67c3bc7c6cc41d12f82 has problem. Fixes commit -> a36c2638380c0a4676647a1f553b70b20d3ebce1
commit 0ba2ebc9f355c87c13e37ad136e9c4508a8a5029
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Dec 22 10:45:07 2017 +0100

    ALSA: hda: Drop useless WARN_ON()
    
    commit a36c2638380c0a4676647a1f553b70b20d3ebce1 upstream.
    
    Since the commit 97cc2ed27e5a ("ALSA: hda - Fix yet another i915
    pointer leftover in error path") cleared hdac_acomp pointer, the
    WARN_ON() non-NULL check in snd_hdac_i915_register_notifier() may give
    a false-positive warning, as the function gets called no matter
    whether the component is registered or not.  For fixing it, let's get
    rid of the spurious WARN_ON().
    
    Fixes: 97cc2ed27e5a ("ALSA: hda - Fix yet another i915 pointer leftover in error path")
    Reported-by: Kouta Okamoto <kouta.okamoto@toshiba.co.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3b67b56ea7703b6c5253c42d036e2aaae7aede73 ......
	 orig commit -> bed2e98e1f4db8b827df507abc30be7b11b0613d ......
checking ef24d642e92ad2216bb0f70a4307c582f9400732 ......
	 orig commit -> faafd03d23c913633d2ef7e6ffebdce01b164409 ......
checking 7f3e85d820fd170f9cb94a8a036c824cf1b29832 ......
	 orig commit -> ffc7565746bb2fc063fc0f484c55ef6d8951a6ee ......
	 orig commit -> a0085f2510e8976614ad8f766b209448b385492f ......
checking 9c631278a9c6eadebadcd4ee6efbb4edfe2f1c61 ......
	 orig commit -> 409fcace9963c1e8d2cb0f7ac62e8b34d47ef979 ......
checking 69dd89a1f919df7ab2e38f6f73fca0735d620205 ......
	 orig commit -> 919054fdfc8adf58c5512fe9872eb53ea0f5525d ......
checking c0303e4ffd3a9822801869f075b8bbf0610151ee ......
	 orig commit -> f187851b9b4a76952b1158b86434563dd2031103 ......
checking 8e6e8ec18d95dc29058f707b218a658062550a4f ......
	 orig commit -> 74717b28cb32e1ad3c1042cafd76b264c8c0f68d ......
checking 1e52ede8e1ed95aec3cd3acaea48066cb34c238b ......
	 orig commit -> cf5d74b85ef40c202c76d90959db4d850f301b95 ......
checking ab8e096eed2f2a98e5200672720d5d46db50c80b ......
	 orig commit -> 17a91809942ca32c70026d2d5ba3348a2c4fdf8f ......
checking 0705d3b83699f69bbd383534bb59a1ecea5b305f ......
	 orig commit -> e8bcf0ae4c0346fdc78ebefe0eefcaa6a6622d38 ......
checking e4dff872fe97f6e48a26aebddec3ff57ddd43398 ......
	 orig commit -> 184fc2b9a8bcbda9c14d0a1e7fbecfc028c7702e ......
checking eb7b86ec94a48f697f11e23a0ccfe08ee1277aad ......
	 orig commit -> 86acc790717fb60fb51ea3095084e331d8711c74 ......
checking aa6d09cea6df98a907e13a7d95083d114d8d4413 ......
	 orig commit -> dcfd6b839c998bc9838e2a47f44f37afbdf3099c ......
checking cffbf0ffc47c5a3a438bd9d792fa541b3069b380 ......
	 orig commit -> 18eb86362a52f0af933cc0fd5e37027317eb2d1c ......
checking 1e91b0d64e921678b8c98f7a4980b169181a9bad ......
	 orig commit -> 27d6162944b9b34c32cd5841acd21786637ee743 ......
checking a916c4152a4ba0c42cd2350dc04251417ca73507 ......
	 orig commit -> 2ce9a3645299ba1752873d333d73f67620f4550b ......
checking e9151f9d4b6f1504fd2bfa2244d940058a2407e6 ......
	 orig commit -> 9b3a081fb62158b50bcc90522ca2423017544367 ......
checking 8f376337c6379af927e1a44bbe5b311f033ab1ad ......
	 orig commit -> 357027786f3523d26f42391aa4c075b8495e5d28 ......
checking 3190a0623c583b1cc29770a4004036c20b146c35 ......
	 orig commit -> fc7556877d1748ac00958822a0a3bba1d4bd9e0d ......
checking a0ca85d4895a8d66f722588fb741dd6f2834406c ......
	 orig commit -> 5b64a2965dfdfca8039e93303c64e2b15c19ff0c ......
checking d7ae9928a25d52b90216a474e07a30065220340e ......
	 orig commit -> 778f81d6cdb7d25360f082ac0384d5103f04eca5 ......
checking 78ffab9744ad1e94fca50f914f8574ecac310d30 ......
	 orig commit -> 5d0c49acebc9488e37db95f1d4a55644e545ffe7 ......
checking 0ec5f7a3c9b6968c8041b8d3db8797d4e076d72a ......
	 orig commit -> 2247925f0942dc4e7c09b1cde45ca18461d94c5f ......
checking 7432a60515da37ee9a510c26502e18994c65b6f1 ......
	 orig commit -> 293d264f13cbde328d5477f49e3103edbc1dc191 ......
checking 1779b33294dab3e3a08afa5196d01848acfbe40c ......
	 orig commit -> 916a008b4b8ecc02fbd035cfb133773dba1ff3d7 ......
checking bec60b446b526c3b11c92eeaa3e2c4b8edb8a51f ......
	 orig commit -> 77c1c03c5b8ef28e55bb0aff29b1e006037ca645 ......
checking ff1ddbb38b1916a03a31080f34d7d42257c5c5ac ......
	 orig commit -> b07c12517f2aed0add8ce18146bb426b14099392 ......
checking ea9e1ca4093975a0ce346b60cfc18030c965006c ......
	 orig commit -> af109a2cf6a9a6271fa420ae2d64d72d86c92b7d ......
checking f15394085d11c01a9b2a362068182b47b17e2fbe ......
	 orig commit -> 0292e169b2d9c8377a168778f0b16eadb1f578fd ......
checking 27c2fa1ae0ea735b32376777f012ab92c4ee8650 ......
	 orig commit -> 9bcf53f34a2c1cebc45cc12e273dcd5f51fbc099 ......
checking 17b1ff10a1fc73967a420cc2c6f9819980bc120a ......
	 orig commit -> 75c689dca98851d65ef5a27e5ce26b625b68751c ......
checking 7c9316d2f263d616bdf88e8b9fbfd76096236d7c ......
	 orig commit -> 83d90219a5df8d950855ce73229a97b63605c317 ......
checking 3af547339068ce25c67b3c29844f966dfdaaa50e ......
	 orig commit -> 6ac3b77a6ffff7513ff86b684aa256ea01c0e5b5 ......
checking 52cd7920b7ac2617ffbfd6912e6488a0d3e34042 ......
	 orig commit -> ea174c9573b0e0c8bc1a7a90fe9360ccb7aa9cbb ......
checking 85e54ef781b63796e1abfc3bfc3a765f87734fd4 ......
	 orig commit -> 13a8cd191a2b470cfd435b3b57dbd21aa65ff78c ......
checking 6a04a7798a3e609a4a01596cbf4433fd095863b6 ......
	 orig commit -> 95f255211396958c718aef8c45e3923b5211ea7b ......
checking 359f7020464f22686fd0d64911ab4c91c0fb9566 ......
	 orig commit -> a5af83925363eb85d467933e3d6ec5a87001eb7c ......
checking 8acee491cfbd47a36cc5329fd8ee4aeb7f21cd8d ......
	 orig commit -> acd9776b5c45ef02d1a210969a6fcc058afb76e3 ......
checking 8ce4313f1279ce5aaa55ebb401a00efff9e299f6 ......
	 orig commit -> 2f25abe6bac573928a990ccbdac75873add8127e ......
checking 19b1ad3a2e682a78f6bd734350465c44e1d5c99b ......
	 orig commit -> 9257821c5a1dc57ef3a37f7cbcebaf548395c964 ......
checking ebfb08395800fa655b03cfdd76232aef0497b430 ......
	 orig commit -> a2125d02443e9a4e68bcfd9f8004fa23239e8329 ......
checking 2e114c7b45625f6db6a30529f5d89b1b8dd0a367 ......
	 orig commit -> 7d79f6098d82f8c09914d7799bc96891ad9c3baf ......
checking f1fdf68b4f947be85d96ac835d86bbf063b454b4 ......
	 orig commit -> 08d839c4b134b8328ec42f2157a9ca4b93227c03 ......
checking caa4cfd173b76b0b4a9ae894d438980daa235016 ......
	 orig commit -> 24dccf83a121b8a4ad5c2ad383a8184ef6c266ee ......
checking 2849ef5dcefd73d7421fe6953c8f61bae2c208d4 ......
	 orig commit -> a71e3cdcfce4880a4578915e110e3eaed1659765 ......
checking bc9aec2faddfea6d217e062cde0e6b221dfc521a ......
	 orig commit -> e855fa9a65c40788b5069abb0d094537daa22e05 ......
checking 1d75c214cebc2c97894288da3b279ae118d4d59e ......
	 orig commit -> ec4fbd64751de18729eaa816ec69e4b504b5a7a2 ......
checking aba55cb03579f10316fe04806c1854bfff1f57d8 ......
	 orig commit -> f83bf8da1135ca635aac8f062cad3f001fcf3a26 ......
checking b9fd3306a5afe33fe4ca7fb4d6954475a772a382 ......
	 orig commit -> 2c422257550f123049552b39f7af6e3428a60f43 ......
checking e598cdd240a071888dd8ac485233b5da7a609f29 ......
	 orig commit -> 1f459262b0e1649a1e5ad12fa4c66eb76c2220ce ......
checking 0c8496bfdb0e69fb91152af253b29946b148da7f ......
	 orig commit -> 16bb05d98c904a4f6c5ce7e2d992299f794acbf2 ......
checking d6c0e23a7fef318682b090a40daaba8abd0cf0d3 ......
	 orig commit -> 4071898bf0f4d79ff353db327af2a15123272548 ......
checking b9a4a18a01fc8c96028a4062bcd686a678bb3266 ......
	 orig commit -> 13e2d5187f6b965ba3556caedb914baf81b98ed2 ......
checking ffde339b95f5729e9d57ba0802b50a611854b728 ......
	 orig commit -> aea92fb2e09e29653b023d4254ac9fbf94221538 ......
checking 4bf8a4f179ed5c9775f0970fc652cc04c0994186 ......
	 orig commit -> 8a0f5ccfb33b0b8b51de65b7b3bf342ba10b4fb6 ......
checking a88b064826f071dd9e722a9687c8aafaaa3b40ee ......
	 orig commit -> 98d068ab52b4b11d403995ed14154660797e7136 ......
checking 125325fe1c19b32db7bded22c926c518e6f97dd2 ......
	 orig commit -> ad0a45fd9c14feebd000b6e84189d0edff265170 ......
checking a23a447e47ccb333a392e9e132c231be0d5953db ......
	 orig commit -> 974310d047f3c7788a51d10c8d255eebdb1fa857 ......
checking 3f7855a522228787e2f73c279d7c0a3a6d3a2323 ......
	 orig commit -> 06553175f585b52509c7df37d6f4a50aacb7b211 ......
checking 779214d0eaca81c7ba85d423865a42c4c4dacf75 ......
	 orig commit -> cc3a47a248d7791ef0d2c81a35c46769e55e4c6c ......
checking 9a66598014db7e94193044b3a9a4a79629db2be2 ......
	 orig commit -> 04d5466a976b096364a39a63ac264c1b3a5f8fa1 ......
checking 3b9d9ec0d8261bb9b12f858e66f0c84cd2a6a3bb ......
	 orig commit -> 82ba4faca1bffad429f15c90c980ffd010366c25 ......
checking 18a5348d49afcfc2b95da939143c9420edd78b9e ......
	 orig commit -> 252d2a4117bc181b287eeddf848863788da733ae ......
checking c22d4b4d1c7fcc0d9eb4d8618d86c554c48ed9c0 ......
	 orig commit -> ef0491ea17f8019821c7e9c8e801184ecf17f85a ......
checking 4ead44fd2525ed97e5362a806d312a0e3b0ea445 ......
	 orig commit -> 078194f8e9fe3cf54c8fd8bded48a1db5bd8eb8a ......
checking 70a39c7fd167399fde76aeac314dce026a255b49 ......
	 orig commit -> 69c0319aabba45bcf33178916a2f06967b4adede ......
checking 83cc4b50e3a977915666ade0b951ba446e7181bd ......
	 orig commit -> e1074888c326038340a1ada9129d679e661f2ea6 ......
checking 425f13a36652523d604fd96413d6c438d415dd70 ......
	 orig commit -> f98db6013c557c216da5038d9c52045be55cd039 ......
		 f98db6013c557c216da5038d9c52045be55cd039 has problem. Fixes commit -> 252d2a4117bc181b287eeddf848863788da733ae
ef0491ea17f8019821c7e9c8e801184ecf17f85a
commit c22d4b4d1c7fcc0d9eb4d8618d86c554c48ed9c0
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Fri May 13 15:30:13 2016 +0200

    ARM: Hide finish_arch_post_lock_switch() from modules
    
    commit ef0491ea17f8019821c7e9c8e801184ecf17f85a upstream.
    
    The introduction of switch_mm_irqs_off() brought back an old bug
    regarding the use of preempt_enable_no_resched:
    
    As part of:
    
      62b94a08da1b ("sched/preempt: Take away preempt_enable_no_resched() from modules")
    
    the definition of preempt_enable_no_resched() is only available in
    built-in code, not in loadable modules, so we can't generally use
    it from header files.
    
    However, the ARM version of finish_arch_post_lock_switch()
    calls preempt_enable_no_resched() and is defined as a static
    inline function in asm/mmu_context.h. This in turn means we cannot
    include asm/mmu_context.h from modules.
    
    With today's tip tree, asm/mmu_context.h gets included from
    linux/mmu_context.h, which is normally the exact pattern one would
    expect, but unfortunately, linux/mmu_context.h can be included from
    the vhost driver that is a loadable module, now causing this compile
    time error with modular configs:
    
      In file included from ../include/linux/mmu_context.h:4:0,
                       from ../drivers/vhost/vhost.c:18:
      ../arch/arm/include/asm/mmu_context.h: In function 'finish_arch_post_lock_switch':
      ../arch/arm/include/asm/mmu_context.h:88:3: error: implicit declaration of function 'preempt_enable_no_resched' [-Werror=implicit-function-declaration]
         preempt_enable_no_resched();
    
    Andy already tried to fix the bug by including linux/preempt.h
    from asm/mmu_context.h, but that didn't help. Arnd suggested reordering
    the header files, which wasn't popular, so let's use this
    workaround instead:
    
    The finish_arch_post_lock_switch() definition is now also hidden
    inside of #ifdef MODULE, so we don't see anything referencing
    preempt_enable_no_resched() from a header file. I've built a
    few hundred randconfig kernels with this, and did not see any
    new problems.
    
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Russell King - ARM Linux <linux@armlinux.org.uk>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: linux-arm-kernel@lists.infradead.org
    Fixes: f98db6013c55 ("sched/core: Add switch_mm_irqs_off() and use it in the scheduler")
    Link: http://lkml.kernel.org/r/1463146234-161304-1-git-send-email-arnd@arndb.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 18a5348d49afcfc2b95da939143c9420edd78b9e
Author: Andy Lutomirski <luto@kernel.org>
Date:   Fri Jun 9 11:49:15 2017 -0700

    sched/core: Idle_task_exit() shouldn't use switch_mm_irqs_off()
    
    commit 252d2a4117bc181b287eeddf848863788da733ae upstream.
    
    idle_task_exit() can be called with IRQs on x86 on and therefore
    should use switch_mm(), not switch_mm_irqs_off().
    
    This doesn't seem to cause any problems right now, but it will
    confuse my upcoming TLB flush changes.  Nonetheless, I think it
    should be backported because it's trivial.  There won't be any
    meaningful performance impact because idle_task_exit() is only
    used when offlining a CPU.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Fixes: f98db6013c55 ("sched/core: Add switch_mm_irqs_off() and use it in the scheduler")
    Link: http://lkml.kernel.org/r/ca3d1a9fa93a0b49f5a8ff729eda3640fb6abdf9.1497034141.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c22d4b4d1c7fcc0d9eb4d8618d86c554c48ed9c0
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Fri May 13 15:30:13 2016 +0200

    ARM: Hide finish_arch_post_lock_switch() from modules
    
    commit ef0491ea17f8019821c7e9c8e801184ecf17f85a upstream.
    
    The introduction of switch_mm_irqs_off() brought back an old bug
    regarding the use of preempt_enable_no_resched:
    
    As part of:
    
      62b94a08da1b ("sched/preempt: Take away preempt_enable_no_resched() from modules")
    
    the definition of preempt_enable_no_resched() is only available in
    built-in code, not in loadable modules, so we can't generally use
    it from header files.
    
    However, the ARM version of finish_arch_post_lock_switch()
    calls preempt_enable_no_resched() and is defined as a static
    inline function in asm/mmu_context.h. This in turn means we cannot
    include asm/mmu_context.h from modules.
    
    With today's tip tree, asm/mmu_context.h gets included from
    linux/mmu_context.h, which is normally the exact pattern one would
    expect, but unfortunately, linux/mmu_context.h can be included from
    the vhost driver that is a loadable module, now causing this compile
    time error with modular configs:
    
      In file included from ../include/linux/mmu_context.h:4:0,
                       from ../drivers/vhost/vhost.c:18:
      ../arch/arm/include/asm/mmu_context.h: In function 'finish_arch_post_lock_switch':
      ../arch/arm/include/asm/mmu_context.h:88:3: error: implicit declaration of function 'preempt_enable_no_resched' [-Werror=implicit-function-declaration]
         preempt_enable_no_resched();
    
    Andy already tried to fix the bug by including linux/preempt.h
    from asm/mmu_context.h, but that didn't help. Arnd suggested reordering
    the header files, which wasn't popular, so let's use this
    workaround instead:
    
    The finish_arch_post_lock_switch() definition is now also hidden
    inside of #ifdef MODULE, so we don't see anything referencing
    preempt_enable_no_resched() from a header file. I've built a
    few hundred randconfig kernels with this, and did not see any
    new problems.
    
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Russell King - ARM Linux <linux@armlinux.org.uk>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: linux-arm-kernel@lists.infradead.org
    Fixes: f98db6013c55 ("sched/core: Add switch_mm_irqs_off() and use it in the scheduler")
    Link: http://lkml.kernel.org/r/1463146234-161304-1-git-send-email-arnd@arndb.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking dfe513a4e8ddde75ffc6abd3f139c5d65bf925d7 ......
	 orig commit -> 8efd755ac2fe262d4c8d5c9bbe054bb67dae93da ......
checking 8d5ee51a6bce71d8905d8f01d0931f69be4489d5 ......
	 orig commit -> 858eaaa711700ce4595e039441e239e56d7b9514 ......
checking 85d3700c744a11ee2989252acf50ccbbd814167a ......
	 orig commit -> d8bced79af1db6734f66b42064cc773cada2ce99 ......
checking 791a0f3fecdabe18cc291e5f9b7ebbdc81895975 ......
	 orig commit -> d12a72b844a49d4162f24cefdab30bed3f86730e ......
checking 04ec428b15f161ce8449756fb64b6f380c8d95fd ......
	 orig commit -> e2c7698cd61f11d4077fdb28148b2d31b82ac848 ......
checking becf292446e9f2dc8842c448836bbe8005e24db0 ......
	 orig commit -> 060a402a1ddb551455ee410de2eadd3349f2801b ......
checking 5fc8d62d1921062a26e8371ec4446bb760b60ead ......
	 orig commit -> 12841f87b7a8ceb3d54f171660f72a86941bfcb3 ......
checking 9e1485b1b570dd2827ecc51a847f7b27b2f69e70 ......
	 orig commit -> f24e5834a2c3f6c5f814a417f858226f0a010ade ......

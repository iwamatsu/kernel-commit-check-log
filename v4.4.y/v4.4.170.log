Check from v4.4.170 to v4.4.171
Commit count: 52
checking c5feba4358ed485b91c2f535d703758aa6d8872f ......
checking 9615b6aeccbfb233fd672107aa6885bf039c3de3 ......
	 orig commit -> d4b09acf924b84bae77cad090a9d108e70b43643 ......
checking 3897b4ae1fdc2cdc90594f817c69166855139c06 ......
	 orig commit -> 2b08b1f12cd664dc7d5c84ead9ff25ae97ad5491 ......
checking 6b22de54346b5d00e3fcf3b0bd0bc2958cc52c41 ......
checking 61dd99c3788d9752453c5406b8ae6d6e2197cf34 ......
	 orig commit -> 6ebec961d59bccf65d08b13fc1ad4e6272a89338 ......
checking 31f76d65612faadb7c3390ee746ea27e379a7752 ......
	 orig commit -> 7d7b467cb95bf29597b417d4990160d4ea6d69b9 ......
checking bb1de61e06c6eb0a602e0e86399af22476bc2289 ......
	 orig commit -> ce4f1c7ad490aa7129bde5632d6e53943f8a866c ......
checking 2f5e06cf8ff289bb2b2cf278c1f78c5d63f4870a ......
	 orig commit -> 31fc0ad47e2e0b8417616aa0f1ddcc67edf1e109 ......
checking db94a1ebabc4eb3791d20b8a3eccf2d29d1f77a4 ......
	 orig commit -> 411dc32d8810e0a204c799ce5c97cb56990de1cb ......
checking 704a120d8868cbe670830826b997c2ecdec32041 ......
	 orig commit -> 3a928e98a833e1a470a60d2fedf3c55502185fb7 ......
checking cb3ff0382e582c823cbd2ba549b7754c6416ab78 ......
	 orig commit -> c622032ebc538cb3869c312ae3ad235a99da84b6 ......
checking 9efffbc8191dd989065d4cf12e50d2abc84bd1fb ......
	 orig commit -> f8be11ae3d2c9a1338da37ff91ff4c65922d21be ......
checking ecd77ebfa6ddcf728c8eccb4cdfebc23ab7125b9 ......
	 orig commit -> eff31f4002c4e25b9b8c39d0a3a551c6c64c77e8 ......
checking 271137c0385839090dc195d5e3f41fd1d8999372 ......
	 orig commit -> 09c2e76ed734a1d36470d257a778aaba28e86531 ......
checking a04afa68c06208f3644750e520f2965df2f62f6c ......
	 orig commit -> 3483254b89438e60f719937376c5e0ce2bc46761 ......
checking 7a87e23537db289ceae5cf65d70df3e8645878b6 ......
	 orig commit -> 0a99cc4b8ee83885ab9f097a3737d1ab28455ac0 ......
checking bbe85dc3ce39adea73049e3dbfc04543d056d02b ......
	 orig commit -> c5603d2fdb424849360fe7e3f8c1befc97571b8c ......
checking 460398af9f97910992f1a3bad215b659229ed8b9 ......
	 orig commit -> 34aabf918717dd14e05051896aaecd3b16b53d95 ......
checking 9c87abaf4d12413531ce689b781120ebaeeef044 ......
	 orig commit -> b9a74cde94957d82003fb9f7ab4777938ca851cd ......
checking 05ce0d9d5600b88f72427fc93613ef09006b3f91 ......
	 orig commit -> ee13919c2e8d1f904e035ad4b4239029a8994131 ......
checking 09527e390e81652188a7b9bbceb775dbed343483 ......
	 orig commit -> 761333f2f50ccc887aa9957ae829300262c0d15b ......
checking 40f2dd610635d8540c334c4fa40d432e7b06a941 ......
	 orig commit -> f556faa46eb4e96d0d0772e74ecf66781e132f72 ......
checking 98620167ed91cfef2bf24b058170d5194e0c4c45 ......
	 orig commit -> 7ef49515fa6727cb4b6f2f5b0ffbc5fc20a9f8c6 ......
checking ee5e37a26791f9c842b3298e594c6e3c93bb1355 ......
	 orig commit -> 514c7dca85a0bf40be984dab0b477403a6db901f ......
checking 50962a7b4877f26d1f3f49cd77ad1814a9e81bac ......
	 orig commit -> 315409b0098fb2651d86553f0436b70502b29bb2 ......
checking 42d263820480ab1f7eba54590f2c7283b3428723 ......
	 orig commit -> ba480dd4db9f1798541eb2d1c423fc95feee8d36 ......
checking ae94efaf2b609e811bce6280d5c88cf557cd1238 ......
	 orig commit -> fce466eab7ac6baa9d2dcd88abcf945be3d4a089 ......
		 fce466eab7ac6baa9d2dcd88abcf945be3d4a089 has problem. Fixes commit -> 10950929e994c5ecee149ff0873388d3c98f12b5
761333f2f50ccc887aa9957ae829300262c0d15b
commit 09527e390e81652188a7b9bbceb775dbed343483
Author: Shaokun Zhang <zhangshaokun@hisilicon.com>
Date:   Mon Nov 5 18:49:09 2018 +0800

    btrfs: tree-checker: Fix misleading group system information
    
    commit 761333f2f50ccc887aa9957ae829300262c0d15b upstream.
    
    block_group_err shows the group system as a decimal value with a '0x'
    prefix, which is somewhat misleading.
    
    Fix it to print hexadecimal, as was intended.
    
    Fixes: fce466eab7ac6 ("btrfs: tree-checker: Verify block_group_item")
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 09527e390e81652188a7b9bbceb775dbed343483
Author: Shaokun Zhang <zhangshaokun@hisilicon.com>
Date:   Mon Nov 5 18:49:09 2018 +0800

    btrfs: tree-checker: Fix misleading group system information
    
    commit 761333f2f50ccc887aa9957ae829300262c0d15b upstream.
    
    block_group_err shows the group system as a decimal value with a '0x'
    prefix, which is somewhat misleading.
    
    Fix it to print hexadecimal, as was intended.
    
    Fixes: fce466eab7ac6 ("btrfs: tree-checker: Verify block_group_item")
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5b84bbce60732649f6fcee901773e2c55c86d50e ......
	 orig commit -> e2683fc9d219430f5b78889b50cde7f40efeba7b ......
checking 047ac3914e581ce48cf84476c89892cce4ce4ba3 ......
	 orig commit -> 7cfad65297bfe0aa2996cd72d21c898aa84436d9 ......
checking a8f416492297c75550ced8c19cb4ab0274fd6c63 ......
	 orig commit -> ad7b0368f33cffe67fecd302028915926e50ef7e ......
checking 7782b38595ae1739ce55898103fccff220df2cdf ......
	 orig commit -> 69fc6cbbac542c349b3d350d10f6e394c253c81d ......
checking b3b3eaf729284dedb533d21e522d3c109521646c ......
	 orig commit -> bba4f29896c986c4cec17bc0f19f2ce644fceae1 ......
checking e74422ec1442a4fcd9b68074aaaa9de115ac9ea0 ......
	 orig commit -> 557ea5dd003d371536f6b4e8f7c8209a2b6fd4e3 ......
checking 68c23d09749e18e1099959e84aedcfc30fc8f633 ......
	 orig commit -> 4b865cab96fe2a30ed512cf667b354bd291b3b0a ......
checking 56ab82441c3330dd21cb654ae029f82a8a633007 ......
	 orig commit -> 40c3c40947324d9f40bf47830c92c59a9bbadf4a ......
checking dc7a1fbccd957904f7a0a9f665c38b6431f30b60 ......
	 orig commit -> 7f43d4affb2a254d421ab20b0cf65ac2569909fb ......
checking 4583bc2c64208002bcbcc09e086450ddc176c128 ......
	 orig commit -> c3267bbaa9cae09b62960eafe33ad19196803285 ......
checking 31c986aa7e6907f28c19cd09e0b17de68f45d1c2 ......
	 orig commit -> 1cbb1f454e5321e47fc1e6b233066c7ccc979d15 ......
checking 89643604a879a9d0400f817168737cf261a997e4 ......
	 orig commit -> f177d73949bf758542ca15a1c1945bd2e802cc65 ......
checking 452042d27b6d390a4dac5536539693eca31d67ec ......
	 orig commit -> 851cd173f06045816528176001cf82948282029c ......
checking 79ddacdf1df2dc886d11737da2816423129ba4a4 ......
	 orig commit -> 02794222c4132ac003e7281fb71f4ec1645ffc87 ......
checking d6719cf116b2fc8a7f51e84430c28febfac1eded ......
	 orig commit -> 6b722c1747d533ac6d4df110dc8233db46918b65 ......
checking 731b8667952815844de39412fb202292cf679f38 ......
	 orig commit -> 3eb548ee3a8042d95ad81be254e67a5222c24e03 ......
checking 4b522570f9743b190319768144a52b9907c5d18a ......
	 orig commit -> ef85b25e982b5bba1530b936e283ef129f02ab9d ......
checking 1ef3ecf373ae2c650894fbfc4de385dde4fd76cb ......
	 orig commit -> 053ab70f0604224c7893b43f9d9d5efa283580d6 ......
checking dc059e58af01c31a8d593cc99086cf41600852b2 ......
	 orig commit -> 1ba98d086fe3a14d6a31f2f66dbab70c45d00f63 ......
		 1ba98d086fe3a14d6a31f2f66dbab70c45d00f63 has problem. Fixes commit -> f177d73949bf758542ca15a1c1945bd2e802cc65
ef85b25e982b5bba1530b936e283ef129f02ab9d
commit 4b522570f9743b190319768144a52b9907c5d18a
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Fri Sep 2 12:35:34 2016 -0700

    Btrfs: fix BUG_ON in btrfs_mark_buffer_dirty
    
    commit ef85b25e982b5bba1530b936e283ef129f02ab9d upstream.
    
    This can only happen with CONFIG_BTRFS_FS_CHECK_INTEGRITY=y.
    
    Commit 1ba98d0 ("Btrfs: detect corruption when non-root leaf has zero item")
    assumes that a leaf is its root when leaf->bytenr == btrfs_root_bytenr(root),
    however, we should not use btrfs_root_bytenr(root) since it's mainly got
    updated during committing transaction.  So the check can fail when doing
    COW on this leaf while it is a root.
    
    This changes to use "if (leaf == btrfs_root_node(root))" instead, just like
    how we check whether leaf is a root in __btrfs_cow_block().
    
    Fixes: 1ba98d086fe3 (Btrfs: detect corruption when non-root leaf has zero item)
    Reported-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 89643604a879a9d0400f817168737cf261a997e4
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Nov 23 16:21:18 2016 +0000

    Btrfs: fix emptiness check for dirtied extent buffers at check_leaf()
    
    commit f177d73949bf758542ca15a1c1945bd2e802cc65 upstream.
    
    We can not simply use the owner field from an extent buffer's header to
    get the id of the respective tree when the extent buffer is from a
    relocation tree. When we create the root for a relocation tree we leave
    (on purpose) the owner field with the same value as the subvolume's tree
    root (we do this at ctree.c:btrfs_copy_root()). So we must ignore extent
    buffers from relocation trees, which have the BTRFS_HEADER_FLAG_RELOC
    flag set, because otherwise we will always consider the extent buffer
    as not being the root of the tree (the root of original subvolume tree
    is always different from the root of the respective relocation tree).
    
    This lead to assertion failures when running with the integrity checker
    enabled (CONFIG_BTRFS_FS_CHECK_INTEGRITY=y) such as the following:
    
    [  643.393409] BTRFS critical (device sdg): corrupt leaf, non-root leaf's nritems is 0: block=38506496, root=260, slot=0
    [  643.397609] BTRFS info (device sdg): leaf 38506496 total ptrs 0 free space 3995
    [  643.407075] assertion failed: 0, file: fs/btrfs/disk-io.c, line: 4078
    [  643.408425] ------------[ cut here ]------------
    [  643.409112] kernel BUG at fs/btrfs/ctree.h:3419!
    [  643.409773] invalid opcode: 0000 [#1] PREEMPT SMP
    [  643.410447] Modules linked in: dm_flakey dm_mod crc32c_generic btrfs xor raid6_pq ppdev psmouse acpi_cpufreq parport_pc evdev parport tpm_tis tpm_tis_core pcspkr serio_raw i2c_piix4 sg tpm i2c_core button processor loop autofs4 ext4 crc16 jbd2 mbcache sr_mod cdrom sd_mod ata_generic virtio_scsi ata_piix libata virtio_pci virtio_ring scsi_mod virtio e1000 floppy
    [  643.414356] CPU: 11 PID: 32726 Comm: btrfs Not tainted 4.8.0-rc8-btrfs-next-35+ #1
    [  643.414356] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.1-0-gb3ef39f-prebuilt.qemu-project.org 04/01/2014
    [  643.414356] task: ffff880145e95b00 task.stack: ffff88014826c000
    [  643.414356] RIP: 0010:[<ffffffffa0352759>]  [<ffffffffa0352759>] assfail.constprop.41+0x1c/0x1e [btrfs]
    [  643.414356] RSP: 0018:ffff88014826fa28  EFLAGS: 00010292
    [  643.414356] RAX: 0000000000000039 RBX: ffff88014e2d7c38 RCX: 0000000000000001
    [  643.414356] RDX: ffff88023f4d2f58 RSI: ffffffff81806c63 RDI: 00000000ffffffff
    [  643.414356] RBP: ffff88014826fa28 R08: 0000000000000001 R09: 0000000000000000
    [  643.414356] R10: ffff88014826f918 R11: ffffffff82f3c5ed R12: ffff880172910000
    [  643.414356] R13: ffff880233992230 R14: ffff8801a68a3310 R15: fffffffffffffff8
    [  643.414356] FS:  00007f9ca305e8c0(0000) GS:ffff88023f4c0000(0000) knlGS:0000000000000000
    [  643.414356] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  643.414356] CR2: 00007f9ca3071000 CR3: 000000015d01b000 CR4: 00000000000006e0
    [  643.414356] Stack:
    [  643.414356]  ffff88014826fa50 ffffffffa02d655a 000000000000000a ffff88014e2d7c38
    [  643.414356]  0000000000000000 ffff88014826faa8 ffffffffa02b72f3 ffff88014826fab8
    [  643.414356]  00ffffffa03228e4 0000000000000000 0000000000000000 ffff8801bbd4e000
    [  643.414356] Call Trace:
    [  643.414356]  [<ffffffffa02d655a>] btrfs_mark_buffer_dirty+0xdf/0xe5 [btrfs]
    [  643.414356]  [<ffffffffa02b72f3>] btrfs_copy_root+0x18a/0x1d1 [btrfs]
    [  643.414356]  [<ffffffffa0322921>] create_reloc_root+0x72/0x1ba [btrfs]
    [  643.414356]  [<ffffffffa03267c2>] btrfs_init_reloc_root+0x7b/0xa7 [btrfs]
    [  643.414356]  [<ffffffffa02d9e44>] record_root_in_trans+0xdf/0xed [btrfs]
    [  643.414356]  [<ffffffffa02db04e>] btrfs_record_root_in_trans+0x50/0x6a [btrfs]
    [  643.414356]  [<ffffffffa030ad2b>] create_subvol+0x472/0x773 [btrfs]
    [  643.414356]  [<ffffffffa030b406>] btrfs_mksubvol+0x3da/0x463 [btrfs]
    [  643.414356]  [<ffffffffa030b406>] ? btrfs_mksubvol+0x3da/0x463 [btrfs]
    [  643.414356]  [<ffffffff810781ac>] ? preempt_count_add+0x65/0x68
    [  643.414356]  [<ffffffff811a6e97>] ? __mnt_want_write+0x62/0x77
    [  643.414356]  [<ffffffffa030b55d>] btrfs_ioctl_snap_create_transid+0xce/0x187 [btrfs]
    [  643.414356]  [<ffffffffa030b67d>] btrfs_ioctl_snap_create+0x67/0x81 [btrfs]
    [  643.414356]  [<ffffffffa030ecfd>] btrfs_ioctl+0x508/0x20dd [btrfs]
    [  643.414356]  [<ffffffff81293e39>] ? __this_cpu_preempt_check+0x13/0x15
    [  643.414356]  [<ffffffff81155eca>] ? handle_mm_fault+0x976/0x9ab
    [  643.414356]  [<ffffffff81091300>] ? arch_local_irq_save+0x9/0xc
    [  643.414356]  [<ffffffff8119a2b0>] vfs_ioctl+0x18/0x34
    [  643.414356]  [<ffffffff8119a8e8>] do_vfs_ioctl+0x581/0x600
    [  643.414356]  [<ffffffff814b9552>] ? entry_SYSCALL_64_fastpath+0x5/0xa8
    [  643.414356]  [<ffffffff81093fe9>] ? trace_hardirqs_on_caller+0x17b/0x197
    [  643.414356]  [<ffffffff8119a9be>] SyS_ioctl+0x57/0x79
    [  643.414356]  [<ffffffff814b9565>] entry_SYSCALL_64_fastpath+0x18/0xa8
    [  643.414356]  [<ffffffff81091b08>] ? trace_hardirqs_off_caller+0x3f/0xaa
    [  643.414356] Code: 89 83 88 00 00 00 31 c0 5b 41 5c 41 5d 5d c3 55 89 f1 48 c7 c2 98 bc 35 a0 48 89 fe 48 c7 c7 05 be 35 a0 48 89 e5 e8 13 46 dd e0 <0f> 0b 55 89 f1 48 c7 c2 9f d3 35 a0 48 89 fe 48 c7 c7 7a d5 35
    [  643.414356] RIP  [<ffffffffa0352759>] assfail.constprop.41+0x1c/0x1e [btrfs]
    [  643.414356]  RSP <ffff88014826fa28>
    [  643.468267] ---[ end trace 6a1b3fb1a9d7d6e3 ]---
    
    This can be easily reproduced by running xfstests with the integrity
    checker enabled.
    
    Fixes: 1ba98d086fe3 (Btrfs: detect corruption when non-root leaf has zero item)
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Liu Bo <bo.li.liu@oracle.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b522570f9743b190319768144a52b9907c5d18a
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Fri Sep 2 12:35:34 2016 -0700

    Btrfs: fix BUG_ON in btrfs_mark_buffer_dirty
    
    commit ef85b25e982b5bba1530b936e283ef129f02ab9d upstream.
    
    This can only happen with CONFIG_BTRFS_FS_CHECK_INTEGRITY=y.
    
    Commit 1ba98d0 ("Btrfs: detect corruption when non-root leaf has zero item")
    assumes that a leaf is its root when leaf->bytenr == btrfs_root_bytenr(root),
    however, we should not use btrfs_root_bytenr(root) since it's mainly got
    updated during committing transaction.  So the check can fail when doing
    COW on this leaf while it is a root.
    
    This changes to use "if (leaf == btrfs_root_node(root))" instead, just like
    how we check whether leaf is a root in __btrfs_cow_block().
    
    Fixes: 1ba98d086fe3 (Btrfs: detect corruption when non-root leaf has zero item)
    Reported-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4bf414d2ff5758d64d4c785339c92ba22af979c3 ......
	 orig commit -> 187ee58c62c1d0d238d3dc4835869d33e1869906 ......
checking a155ec93222648115e6cdf64a1ca6a929c8a66f1 ......
	 orig commit -> 6fb37b756acce6d6e045f79c3764206033f617b4 ......
checking 41fbc649308c559cb35fec6a2692809ecd52bd62 ......
	 orig commit -> e06cd3dd7cea50e87663a88acdfdb7ac1c53a5ca ......
		 e06cd3dd7cea50e87663a88acdfdb7ac1c53a5ca has problem. Fixes commit -> 349ae63f40638a28c6fce52e8447c2d14b84cc0c
commit eb4763b1bb4a417019fa4f4a29f9777782749587
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Mon Feb 18 11:28:37 2019 +0100

    btrfs: ensure that a DUP or RAID1 block group has exactly two stripes
    
    commit 349ae63f40638a28c6fce52e8447c2d14b84cc0c upstream.
    
    We recently had a customer issue with a corrupted filesystem. When
    trying to mount this image btrfs panicked with a division by zero in
    calc_stripe_length().
    
    The corrupt chunk had a 'num_stripes' value of 1. calc_stripe_length()
    takes this value and divides it by the number of copies the RAID profile
    is expected to have to calculate the amount of data stripes. As a DUP
    profile is expected to have 2 copies this division resulted in 1/2 = 0.
    Later then the 'data_stripes' variable is used as a divisor in the
    stripe length calculation which results in a division by 0 and thus a
    kernel panic.
    
    When encountering a filesystem with a DUP block group and a
    'num_stripes' value unequal to 2, refuse mounting as the image is
    corrupted and will lead to unexpected behaviour.
    
    Code inspection showed a RAID1 block group has the same issues.
    
    Fixes: e06cd3dd7cea ("Btrfs: add validadtion checks for chunk loading")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 66b8c06f936598895397b92b2ab82b77ac642f66 ......
	 orig commit -> f04b772bfc17f502703794f4d100d12155c1a1a9 ......
checking 67405a1e780c38b54c980a47f1cd5d9b633a60f2 ......
	 orig commit -> 95617d69326ce386c95e33db7aeb832b45ee9f8f ......
checking fea03efa24d48514be94e93affae6d0ae8ab3edb ......
	 orig commit -> d1dd42110d2727e81b9265841a62bc84c454c3a2 ......

Check from v4.4.33 to v4.4.34
Commit count: 38
checking 4eb9a81002485a7abfa53a334dde5bc10328079f ......
checking b4bbdcef7d90ca44a1d1e0661eb009947134b20f ......
	 orig commit -> 0fd0ff01d4c3c01e7fe69b762ee1a13236639acc ......
checking cb85910b0d450ddef15e4850b53bc56667b58ef3 ......
	 orig commit -> 614da3d9685b67917cab48c8452fd8bf93de0867 ......
checking 1c7e17b1c4d60cc5aa575460f7efb73686dd3b39 ......
	 orig commit -> ee841d0aff649164080e445e84885015958d8ff4 ......
		 ee841d0aff649164080e445e84885015958d8ff4 has problem. Fixes commit -> 0ede1c401332173ab0693121dc6cde04a4dbf131
commit 20d01c513f8d00633a0778df60d07d79878f24fc
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Aug 4 09:47:52 2017 -0700

    sparc64: Fix exception handling in UltraSPARC-III memcpy.
    
    [ Upstream commit 0ede1c401332173ab0693121dc6cde04a4dbf131 ]
    
    Mikael Pettersson reported that some test programs in the strace-4.18
    testsuite cause an OOPS.
    
    After some debugging it turns out that garbage values are returned
    when an exception occurs, causing the fixup memset() to be run with
    bogus arguments.
    
    The problem is that two of the exception handler stubs write the
    successfully copied length into the wrong register.
    
    Fixes: ee841d0aff64 ("sparc64: Convert U3copy_{from,to}_user to accurate exception reporting.")
    Reported-by: Mikael Pettersson <mikpelinux@gmail.com>
    Tested-by: Mikael Pettersson <mikpelinux@gmail.com>
    Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 7181969338f8b5f209f069e3db8d042325ff1b02 ......
	 orig commit -> e93704e4464fdc191f73fce35129c18de2ebf95d ......
checking bfc8be6593097cb074d3912ba2f27565cfbb7d6e ......
	 orig commit -> 7ae3aaf53f1695877ccd5ebbc49ea65991e41f1e ......
checking dc3a7a7d2c85cb3162b46295ecb01ac78f3da1aa ......
	 orig commit -> 95707704800988093a9b9a27e0f2f67f5b4bf2fa ......
checking 1731d90d8a558ecb20cdee0c2c001ae8e15c251d ......
	 orig commit -> cb736fdbb208eb3420f1a2eb2bfc024a6e9dcada ......
checking 8a444c770f6ecb0fff7eb1d72ccbed9f82ced906 ......
	 orig commit -> d0796b555ba60c22eb41ae39a8362156cb08eee9 ......
checking c718e917b3d375bb016388861a20f169f4e8dce8 ......
	 orig commit -> 0096ac9f47b1a2e851b3165d44065d18e5f13d58 ......
checking dd8a78b2b6ad24c7416dfe0443a31456cbad3b34 ......
	 orig commit -> 83a17d2661674d8c198adc0e183418f72aabab79 ......
checking 756723ad553d02553397ea991c28812b91aa6cda ......
	 orig commit -> aa95ce361ed95c72ac42dcb315166bce5cf1a014 ......
checking f5a69ff7486e473ea12288f5b729891ebde7fcfe ......
	 orig commit -> a74ad5e660a9ee1d071665e7e8ad822784a2dc7f ......
checking d36a1ac49d243070cfbb76a594a44b334075b680 ......
	 orig commit -> a236441bb69723032db94128761a469030c3fe6d ......
checking 5d8eb954763d972357037b34e98315b017b962d8 ......
	 orig commit -> 830cda3f9855ff092b0e9610346d110846fc497c ......
checking 217f829ae96783d9b4968d941769fb4c15e380c6 ......
	 orig commit -> b429ae4d5b565a71dfffd759dfcd4f6c093ced94 ......
checking 2ba06323db413dd0b8f501dfc32df5d55f17c520 ......
	 orig commit -> 849c498766060a16aad5b0e0d03206726e7d2fa4 ......
checking 75931800733c68082c530f6c5421928e4288ee9e ......
	 orig commit -> 9d9fa230206a3aea6ef451646c97122f04777983 ......
checking 8fd11efa2140192d1788302017368878ae6d357b ......
	 orig commit -> af1b1a9b36b8f9d583d4b4f90dd8946ed0cd4bd0 ......
checking 4e90b688013526340fef9f11ae0184888fd563d1 ......
	 orig commit -> 344e3c7734d5090b148c19ac6539b8947fed6767 ......
checking a395f7a66eec5db41f8860427f955d4cdabb1063 ......
	 orig commit -> 4f6deb8cbab532a8d7250bc09234c1795ecb5e2c ......
checking 4e772c53ab9836b083c21acf9d2d76805e1d133e ......
	 orig commit -> dd42bf1197144ede075a9d4793123f7689e164bc ......
	 orig commit -> fd98e9419d8d622a4de91f76b306af6aa627aa9c ......
checking 225a24ae97331f3b9d97c1bb97b1e30b3633bcf4 ......
	 orig commit -> ac6e780070e30e4c35bd395acfe9191e6268bdd3 ......
checking ae9e052a58ef2357e4b7543901af8f6daf91a0f7 ......
	 orig commit -> 969447f226b451c453ddc83cac6144eaeac6f2e3 ......
checking 5c67f9477bb2122a84ad99f6e6d492bebbdf549b ......
	 orig commit -> 34fad54c2537f7c99d07375e50cb30aa3c23bd83 ......
		 34fad54c2537f7c99d07375e50cb30aa3c23bd83 has problem. Fixes commit -> d0c081b49137cd3200f2023c0875723be66e7ce5
commit d35cd5e279881ec36ff8cd82a2d9caebc0cce3fc
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 17 14:21:13 2018 -0800

    flow_dissector: properly cap thoff field
    
    
    [ Upstream commit d0c081b49137cd3200f2023c0875723be66e7ce5 ]
    
    syzbot reported yet another crash [1] that is caused by
    insufficient validation of DODGY packets.
    
    Two bugs are happening here to trigger the crash.
    
    1) Flow dissection leaves with incorrect thoff field.
    
    2) skb_probe_transport_header() sets transport header to this invalid
    thoff, even if pointing after skb valid data.
    
    3) qdisc_pkt_len_init() reads out-of-bound data because it
    trusts tcp_hdrlen(skb)
    
    Possible fixes :
    
    - Full flow dissector validation before injecting bad DODGY packets in
    the stack.
     This approach was attempted here : https://patchwork.ozlabs.org/patch/
    861874/
    
    - Have more robust functions in the core.
      This might be needed anyway for stable versions.
    
    This patch fixes the flow dissection issue.
    
    [1]
    CPU: 1 PID: 3144 Comm: syzkaller271204 Not tainted 4.15.0-rc4-mm1+ #49
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:355 [inline]
     kasan_report+0x23b/0x360 mm/kasan/report.c:413
     __asan_report_load2_noabort+0x14/0x20 mm/kasan/report.c:432
     __tcp_hdrlen include/linux/tcp.h:35 [inline]
     tcp_hdrlen include/linux/tcp.h:40 [inline]
     qdisc_pkt_len_init net/core/dev.c:3160 [inline]
     __dev_queue_xmit+0x20d3/0x2200 net/core/dev.c:3465
     dev_queue_xmit+0x17/0x20 net/core/dev.c:3554
     packet_snd net/packet/af_packet.c:2943 [inline]
     packet_sendmsg+0x3ad5/0x60a0 net/packet/af_packet.c:2968
     sock_sendmsg_nosec net/socket.c:628 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:638
     sock_write_iter+0x31a/0x5d0 net/socket.c:907
     call_write_iter include/linux/fs.h:1776 [inline]
     new_sync_write fs/read_write.c:469 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:482
     vfs_write+0x189/0x510 fs/read_write.c:544
     SYSC_write fs/read_write.c:589 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:581
     entry_SYSCALL_64_fastpath+0x1f/0x96
    
    Fixes: 34fad54c2537 ("net: __skb_flow_dissect() must cap its return value")
    Fixes: a6e544b0a88b ("flow_dissector: Jump to exit code in __skb_flow_dissect")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b67ed647d135d0c0fbb3165d3c7b8c4bd68fe7be ......
	 orig commit -> 3023898b7d4aac65987bd2f485cc22390aae6f78 ......
checking 0650eeb4f187c4f680f628fac03db55441272154 ......
	 orig commit -> fd0285a39b1cb496f60210a9a00ad33a815603e7 ......
checking 3f8857a4971d69af7caf415e05a6bb415fe800d4 ......
	 orig commit -> 7233bc84a3aeda835d334499dc00448373caf5c0 ......
checking 65d29c185614806fafa281e0902dc3b61fd9e37a ......
	 orig commit -> 990ff4d84408fc55942ca6644f67e361737b3d8e ......
checking 99131760a8851e6e5b2c9b24d0a68a3068923a08 ......
	 orig commit -> 1aa9d1a0e7eefcc61696e147d123453fc0016005 ......
checking a2df29ed840f90e459a3f8ff029b216be3912731 ......
	 orig commit -> 6706a97fec963d6cb3f7fc2978ec1427b4651214 ......
checking ad6d0a82016bc1920725f23d5d86b7518dd5f999 ......
	 orig commit -> 346da62cc186c4b4b1ac59f87f4482b47a047388 ......
checking 69a5c7ca2e62072bcf2de664fdf038b64133d5d5 ......
	 orig commit -> ac9e70b17ecd7c6e933ff2eaf7ab37429e71bf4d ......
checking 8777977b22c47c47873bdf9e88aa20cc701257bd ......
	 orig commit -> 23f4ffedb7d751c7e298732ba91ca75d224bc1a6 ......
checking c5bad811ca4d4bb5ad1fc44bed4f77efd831878e ......
	 orig commit -> fcdefccac976ee51dd6071832b842d8fb41c479c ......
checking 6e9ca1b61cc8a129254fe0b50d21fba7404529c0 ......
	 orig commit -> 4f2e4ad56a65f3b7d64c258e373cb71e8d2499f4 ......
checking ac4c2cf6f57a399213478495dbf3315c01c797ab ......
	 orig commit -> e551c32d57c88923f99f8f010e89ca7ed0735e83 ......
checking 74e53a3a053fc6dd6fc83b4dc4cda2524931b3e3 ......
	 orig commit -> ce6dd23329b1ee6a794acf5f7e40f8e89b8317ee ......

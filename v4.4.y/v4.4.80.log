Check from v4.4.80 to v4.4.81
Commit count: 59
checking 2ab639c7e2d1f02779c8947c90d8d595f5843e52 ......
checking 34a08ae493f1970d5ce80dd3812b8dba4e5cbe22 ......
	 orig commit -> 0a94efb5acbb6980d7c9ab604372d93cd507e4d8 ......
		 0a94efb5acbb6980d7c9ab604372d93cd507e4d8 has problem. Fixes commit -> fbf1c41fc0f4d3574ac2377245efd666c1fa3075
commit 302364990c0511009a1ff4de47ac448ad0e1ce04
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sun Sep 3 01:18:41 2017 +0100

    workqueue: Fix flag collision
    
    commit fbf1c41fc0f4d3574ac2377245efd666c1fa3075 upstream.
    
    Commit 0a94efb5acbb ("workqueue: implicit ordered attribute should be
    overridable") introduced a __WQ_ORDERED_EXPLICIT flag but gave it the
    same value as __WQ_LEGACY.  I don't believe these were intended to
    mean the same thing, so renumber __WQ_ORDERED_EXPLICIT.
    
    Fixes: 0a94efb5acbb ("workqueue: implicit ordered attribute should be ...")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0c787041504edd1739a5f8bd04bdd36b8fcb093c ......
	 orig commit -> a5cb659bbc1c8644efa0c3138a757a1e432a4880 ......
checking 12b8f014a3944eea3bcc7f4ebbf6318c5385f270 ......
	 orig commit -> 0a28cfd51e17f4f0a056bcf66bfbe492c3b99f38 ......
checking 78c04996b5888526c7aa3c9debe9dc56519ab81e ......
	 orig commit -> f073bdc51771f5a5c7a8d1191bfc3ae371d44de7 ......
checking bbe660db23e41647366039c1860cee0891fe9903 ......
	 orig commit -> 2d39b3cd34e6d323720d4c61bd714f5ae202c022 ......
checking 623f4fcd947ed4d74b9a79df7d2477f113a321b5 ......
	 orig commit -> da0510c47519fe0999cffe316e1d370e29f952be ......
checking 9c83b97bdeabfea1f9c51c1f505ee14f13e4c628 ......
	 orig commit -> bb1107f7c6052c863692a41f78c000db792334bf ......
checking 5205f5216c6aee6ff6fa947ef7cb0fcb3473d4e3 ......
	 orig commit -> 270c8cf1cacc69cb8d99dea812f06067a45e4609 ......
checking 874f22658c5479a04427103ac5d59ecfb2ba890b ......
	 orig commit -> 6bf6b0aa3da84a3d9126919a94c49c0fb7ee2fb3 ......
checking c9e4ee445752ecd97c839ffa7e08146a614576dd ......
	 orig commit -> 71d3f6ef7f5af38dea2975ec5715c88bae92e92d ......
checking 1e43b2d064741a6f4d4c55c4f9146c1e92e1d06a ......
	 orig commit -> c7702b8c22712a06080e10f1d2dee1a133ec8809 ......
checking a9873711065956556e1ce0ec36706639bd8de10a ......
	 orig commit -> 811a919135b980bac8009d042acdccf10dc1ef5e ......
checking db01878ca5dd13ad51ff776309a6b75fd5867764 ......
	 orig commit -> fac69d0efad08fc15e4dbfc116830782acc0dc9a ......
checking 032422cca86dcc9c831bd161a33759679275934c ......
	 orig commit -> f5992b72ebe0dde488fa8f706b887194020c66fc ......
		 f5992b72ebe0dde488fa8f706b887194020c66fc has problem. Fixes commit -> d89a2adb8bfe6f8949ff389acdb9fa298b6e8e12
commit afad8f840026e7011d58f75a0c2c30772b27ed96
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Thu May 3 20:04:27 2018 -0400

    tg3: Fix vunmap() BUG_ON() triggered from tg3_free_consistent().
    
    [ Upstream commit d89a2adb8bfe6f8949ff389acdb9fa298b6e8e12 ]
    
    tg3_free_consistent() calls dma_free_coherent() to free tp->hw_stats
    under spinlock and can trigger BUG_ON() in vunmap() because vunmap()
    may sleep.  Fix it by removing the spinlock and relying on the
    TG3_FLAG_INIT_COMPLETE flag to prevent race conditions between
    tg3_get_stats64() and tg3_free_consistent().  TG3_FLAG_INIT_COMPLETE
    is always cleared under tp->lock before tg3_free_consistent()
    and therefore tg3_get_stats64() can safely access tp->hw_stats
    under tp->lock if TG3_FLAG_INIT_COMPLETE is set.
    
    Fixes: f5992b72ebe0 ("tg3: Fix race condition in tg3_get_stats64().")
    Reported-by: Zumeng Chen <zumeng.chen@gmail.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 93585e813588b09ef46893599d4833d5797c7af2 ......
	 orig commit -> 5ca7d1ca77dc23934504b95a96d2660d345f83c2 ......
checking 41433e314b778c1ba6d1f648d975af0788c930b6 ......
	 orig commit -> 0f1f9cbc04dbb3cc310f70a11cba0cf1f2109d9c ......
checking 50231cef2d6fbff22eab442ee4f5cfc1685887b9 ......
	 orig commit -> 93be2b74279c15c2844684b1a027fdc71dd5d9bf ......
checking cada8caa265574b4567534cf533096c2cddaf835 ......
	 orig commit -> 9d53caec84c7c5700e7c1ed744ea584fff55f9ac ......
checking 7c37101cd650d12bf124398eb26ba7eefb235029 ......
	 orig commit -> dfa523ae9f2542bee4cddaea37b3be3e157f6e6b ......
checking 2933fb22de6dc58ec1b8f0b1c8569d3699e5d7ea ......
	 orig commit -> 7b9a88a390dacb37b051a7b09b9a08f546edf5eb ......
checking a8f1b40bb2da3819cda93a037124b34f56f5d5fa ......
	 orig commit -> 7ad813f208533cebfcc32d3d7474dc1677d1b09a ......
		 7ad813f208533cebfcc32d3d7474dc1677d1b09a has problem. Fixes commit -> ebc8254aeae34226d0bc8fda309fd9790d4dccfe
commit 081be8c9efd6003e1aa78679b3265732de4cec9b
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Aug 30 17:49:29 2017 -0700

    Revert "net: phy: Correctly process PHY_HALTED in phy_stop_machine()"
    
    
    [ Upstream commit ebc8254aeae34226d0bc8fda309fd9790d4dccfe ]
    
    This reverts commit 7ad813f208533cebfcc32d3d7474dc1677d1b09a ("net: phy:
    Correctly process PHY_HALTED in phy_stop_machine()") because it is
    creating the possibility for a NULL pointer dereference.
    
    David Daney provide the following call trace and diagram of events:
    
    When ndo_stop() is called we call:
    
     phy_disconnect()
        +---> phy_stop_interrupts() implies: phydev->irq = PHY_POLL;
        +---> phy_stop_machine()
        |      +---> phy_state_machine()
        |              +----> queue_delayed_work(): Work queued.
        +--->phy_detach() implies: phydev->attached_dev = NULL;
    
    Now at a later time the queued work does:
    
     phy_state_machine()
        +---->netif_carrier_off(phydev->attached_dev): Oh no! It is NULL:
    
     CPU 12 Unable to handle kernel paging request at virtual address
    0000000000000048, epc == ffffffff80de37ec, ra == ffffffff80c7c
    Oops[#1]:
    CPU: 12 PID: 1502 Comm: kworker/12:1 Not tainted 4.9.43-Cavium-Octeon+ #1
    Workqueue: events_power_efficient phy_state_machine
    task: 80000004021ed100 task.stack: 8000000409d70000
    $ 0   : 0000000000000000 ffffffff84720060 0000000000000048 0000000000000004
    $ 4   : 0000000000000000 0000000000000001 0000000000000004 0000000000000000
    $ 8   : 0000000000000000 0000000000000000 00000000ffff98f3 0000000000000000
    $12   : 8000000409d73fe0 0000000000009c00 ffffffff846547c8 000000000000af3b
    $16   : 80000004096bab68 80000004096babd0 0000000000000000 80000004096ba800
    $20   : 0000000000000000 0000000000000000 ffffffff81090000 0000000000000008
    $24   : 0000000000000061 ffffffff808637b0
    $28   : 8000000409d70000 8000000409d73cf0 80000000271bd300 ffffffff80c7804c
    Hi    : 000000000000002a
    Lo    : 000000000000003f
    epc   : ffffffff80de37ec netif_carrier_off+0xc/0x58
    ra    : ffffffff80c7804c phy_state_machine+0x48c/0x4f8
    Status: 14009ce3        KX SX UX KERNEL EXL IE
    Cause : 00800008 (ExcCode 02)
    BadVA : 0000000000000048
    PrId  : 000d9501 (Cavium Octeon III)
    Modules linked in:
    Process kworker/12:1 (pid: 1502, threadinfo=8000000409d70000,
    task=80000004021ed100, tls=0000000000000000)
    Stack : 8000000409a54000 80000004096bab68 80000000271bd300 80000000271c1e00
            0000000000000000 ffffffff808a1708 8000000409a54000 80000000271bd300
            80000000271bd320 8000000409a54030 ffffffff80ff0f00 0000000000000001
            ffffffff81090000 ffffffff808a1ac0 8000000402182080 ffffffff84650000
            8000000402182080 ffffffff84650000 ffffffff80ff0000 8000000409a54000
            ffffffff808a1970 0000000000000000 80000004099e8000 8000000402099240
            0000000000000000 ffffffff808a8598 0000000000000000 8000000408eeeb00
            8000000409a54000 00000000810a1d00 0000000000000000 8000000409d73de8
            8000000409d73de8 0000000000000088 000000000c009c00 8000000409d73e08
            8000000409d73e08 8000000402182080 ffffffff808a84d0 8000000402182080
            ...
    Call Trace:
    [<ffffffff80de37ec>] netif_carrier_off+0xc/0x58
    [<ffffffff80c7804c>] phy_state_machine+0x48c/0x4f8
    [<ffffffff808a1708>] process_one_work+0x158/0x368
    [<ffffffff808a1ac0>] worker_thread+0x150/0x4c0
    [<ffffffff808a8598>] kthread+0xc8/0xe0
    [<ffffffff808617f0>] ret_from_kernel_thread+0x14/0x1c
    
    The original motivation for this change originated from Marc Gonzales
    indicating that his network driver did not have its adjust_link callback
    executing with phydev->link = 0 while he was expecting it.
    
    PHYLIB has never made any such guarantees ever because phy_stop() merely just
    tells the workqueue to move into PHY_HALTED state which will happen
    asynchronously.
    
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reported-by: David Daney <ddaney.cavm@gmail.com>
    Fixes: 7ad813f20853 ("net: phy: Correctly process PHY_HALTED in phy_stop_machine()")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking dc4132791a50b7e556d0efd6bc85508751bedaa6 ......
	 orig commit -> 219c81f7d1d5a89656cb3b53d3b4e11e93608d80 ......
checking de6669607a4554d0a4af2cb2d9d08738d3d043a8 ......
	 orig commit -> 6b84202c946cd3da3a8daa92c682510e9ed80321 ......
checking 2bac20a4ae9ce90e187ce15cca51c242ee5b2ca3 ......
	 orig commit -> b1f5bfc27a19f214006b9b4db7b9126df2dfdf5a ......
		 b1f5bfc27a19f214006b9b4db7b9126df2dfdf5a has problem. Fixes commit -> 6b84202c946cd3da3a8daa92c682510e9ed80321
commit de6669607a4554d0a4af2cb2d9d08738d3d043a8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Jul 26 16:24:59 2017 +0800

    sctp: fix the check for _sctp_walk_params and _sctp_walk_errors
    
    
    [ Upstream commit 6b84202c946cd3da3a8daa92c682510e9ed80321 ]
    
    Commit b1f5bfc27a19 ("sctp: don't dereference ptr before leaving
    _sctp_walk_{params, errors}()") tried to fix the issue that it
    may overstep the chunk end for _sctp_walk_{params, errors} with
    'chunk_end > offset(length) + sizeof(length)'.
    
    But it introduced a side effect: When processing INIT, it verifies
    the chunks with 'param.v == chunk_end' after iterating all params
    by sctp_walk_params(). With the check 'chunk_end > offset(length)
    + sizeof(length)', it would return when the last param is not yet
    accessed. Because the last param usually is fwdtsn supported param
    whose size is 4 and 'chunk_end == offset(length) + sizeof(length)'
    
    This is a badly issue even causing sctp couldn't process 4-shakes.
    Client would always get abort when connecting to server, due to
    the failure of INIT chunk verification on server.
    
    The patch is to use 'chunk_end <= offset(length) + sizeof(length)'
    instead of 'chunk_end < offset(length) + sizeof(length)' for both
    _sctp_walk_params and _sctp_walk_errors.
    
    Fixes: b1f5bfc27a19 ("sctp: don't dereference ptr before leaving _sctp_walk_{params, errors}()")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking dd4edbcbb760ba024dc25017937592bd56994801 ......
	 orig commit -> e90ce2fc27cad7e7b1e72b9e66201a7a4c124c2b ......
checking adcc87858e0915554b2484b8a4657bb49dbe0843 ......
	 orig commit -> b7953d3c0e30a5fc944f6b7bd0bcceb0794bcd85 ......
checking c3278ed37d3e34178e578914dd45b2a0df79b5b8 ......
	 orig commit -> 0c2232b0a71db0ac1d22f751aa1ac0cadb950fd2 ......
checking 91c5aa7ea0737d374601687fec02ddd25aefd6e8 ......
	 orig commit -> 4813497b537c6208c90d6cbecac5072d347de900 ......
checking d1ed1f8ae4871b22ab472dba22d7df96511227ee ......
	 orig commit -> afce615aaabfbaad02550e75c0bec106dafa1adf ......
checking 499338964af84436c0306e061c7b0212a181fccb ......
	 orig commit -> c800aaf8d869f2b9b47b10c5c312fe19f0a94042 ......
checking 23f787ceebf8139cf886d270c3b780581355ed5b ......
	 orig commit -> 69ec932e364b1ba9c3a2085fe96b76c8a3f71e7c ......
checking 6d1e34ee278f1a9cc7a24cc5025d8e93ab01965c ......
	 orig commit -> 9476d393667968b4a02afbe9d35a3558482b943e ......
checking d0594690a9ee8f74fcda37aa085087acf40e594f ......
	 orig commit -> 153711f9421be5dbc973dc57a4109dc9d54c89b1 ......
checking 31afa8b5edf9fc81c7df7aa903b7ef7b110bccab ......
	 orig commit -> 8799a221f5944a7d74516ecf46d58c28ec1d1f75 ......
checking f09db7559c1faf6f7c2128a92050b978a480681c ......
	 orig commit -> 6399f1fae4ec29fab5ec76070435555e256ca3a6 ......
		 6399f1fae4ec29fab5ec76070435555e256ca3a6 has problem. Fixes commit -> 3de33e1ba0506723ab25734e098cf280ecc34756
commit 6eb7ae1223f75fe19de8e75df80ac78ab6b7c39d
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Fri Aug 18 14:40:53 2017 +0200

    ipv6: accept 64k - 1 packet length in ip6_find_1stfragopt()
    
    
    [ Upstream commit 3de33e1ba0506723ab25734e098cf280ecc34756 ]
    
    A packet length of exactly IPV6_MAXPLEN is allowed, we should
    refuse parsing options only if the size is 64KiB or more.
    
    While at it, remove one extra variable and one assignment which
    were also introduced by the commit that introduced the size
    check. Checking the sum 'offset + len' and only later adding
    'len' to 'offset' doesn't provide any advantage over directly
    summing to 'offset' and checking it.
    
    Fixes: 6399f1fae4ec ("ipv6: avoid overflow of offset in ip6_find_1stfragopt")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e9b2f4617a4e631eae1717a6264cbb3e405f377f ......
	 orig commit -> 63679112c536289826fec61c917621de95ba2ade ......
checking c10e874bc3a504b3ced84616b52886388f09e0b7 ......
	 orig commit -> 18bcf2907df935981266532e1e0d052aff2e6fae ......
checking deae9956cfb42f3d480c71f416f934d3ce84c033 ......
	 orig commit -> 6fb05e0dd32e566facb96ea61a48c7488daa5ac3 ......
checking e0f39019aa3fabfe0c0775f2a1f9bd66aceb55d0 ......
checking 76517ed2a7fe059840c1984165984e69cb488568 ......
	 orig commit -> 15d3042a937c13f5d9244241c7a9c8416ff6e82a ......
checking c7c6f63dbc676788f0cb5a804dff57a0639af446 ......
	 orig commit -> 9f5039ba440e499d85c29b1ddbc3cbc9dc90e44b ......
checking f1181047ff29d4d4d364435040bd347eb54483ca ......
	 orig commit -> 3ea277194daaeaa84ce75180ec7c7a2075027a68 ......
checking 9745cbec9c1ff34feaea602f02534a1f30e79e2a ......
	 orig commit -> fce50a2fa4e9c6e103915c351b6d4a98661341d6 ......
	 orig commit -> 4a579da2586bd3b79b025947ea24ede2bbfede62 ......
checking ae059833646f75f5fa3955e369b32c9cf7eabafc ......
	 orig commit -> 105fa2f44e504c830697b0c794822112d79808dc ......
checking bf54cf1ede97f9236d231dc21107c8a2febb624a ......
	 orig commit -> 25cdda95fda78d22d44157da15aa7ea34be3c804 ......
	 orig commit -> bb048357dad6d604520c91586334c9c230366a14 ......
checking cf4ab9d57cbea15d4f06d76f03abe1e124f54866 ......
	 orig commit -> 8f0dfb3d8b1120c61f6e2cc3729290db10772b2d ......
checking 119903dc36d3bbd602b96c562bca263a08dede91 ......
	 orig commit -> 5e0cf5e6c43b9e19fc0284f69e5cd2b4a47523b0 ......
checking 2bf7791c6a5ec21228383f5a1fb5c443c3336622 ......
	 orig commit -> 49cb77e297dc611a1b795cfeb79452b3002bd331 ......
checking fa95dfc750fb2741737773f323e32d4c7d58f53e ......
	 orig commit -> da05d52d2f0f6bd61094a0cd045fed94bf7d673a ......
checking 3c2bf2bd88292521ececca2ff7576f6f6bb57ab6 ......
	 orig commit -> 8d4514173211586c6238629b1ef1e071927735f5 ......
checking 31cd127ca69a1aedd24b9aa7ac806e6071c84655 ......
	 orig commit -> aec51758ce10a9c847a62a48a168f8c804c6e053 ......
checking bad9f6142ce1141b7e4969d898cf0e2d61e90d5b ......
	 orig commit -> fcf5ea10992fbac3c7473a1db33d56a139333cd1 ......
checking 12f60018f63b899b89299da435ca2de3bd47f2f2 ......
	 orig commit -> adb1fe9ae2ee6ef6bc10f3d5a588020e7664dfa7 ......
checking bbccdb1e442be9b705564479d8b0c55b9b202dad ......
	 orig commit -> 337c017ccdf2653d0040099433fc1a2b1beb5926 ......
checking 7de8d0c06e566c8c2625577fc9edea2ddd0ca16f ......
	 orig commit -> b1cd2e34c69a2f3988786af451b6e17967c293a0 ......
checking 458c8be4e2086680fde568f1d0eb26d2d530c481 ......
	 orig commit -> 3f3c371421e601fa93b6cb7fb52da9ad59ec90b4 ......
checking c59eec4dad4a95f6da1b8ea688e361416869e42d ......
	 orig commit -> 5c0338c68706be53b3dc472e4308961c36e4ece1 ......
		 5c0338c68706be53b3dc472e4308961c36e4ece1 has problem. Fixes commit -> 0a94efb5acbb6980d7c9ab604372d93cd507e4d8
commit 34a08ae493f1970d5ce80dd3812b8dba4e5cbe22
Author: Tejun Heo <tj@kernel.org>
Date:   Sun Jul 23 08:36:15 2017 -0400

    workqueue: implicit ordered attribute should be overridable
    
    commit 0a94efb5acbb6980d7c9ab604372d93cd507e4d8 upstream.
    
    5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1 to be
    ordered") automatically enabled ordered attribute for unbound
    workqueues w/ max_active == 1.  Because ordered workqueues reject
    max_active and some attribute changes, this implicit ordered mode
    broke cases where the user creates an unbound workqueue w/ max_active
    == 1 and later explicitly changes the related attributes.
    
    This patch distinguishes explicit and implicit ordered setting and
    overrides from attribute changes if implict.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Fixes: 5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1 to be ordered")
    Cc: Holger Hoffstätte <holger@applied-asynchrony.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8ecd8cff92a802193419a4b3821d1d27bf92f1f0 ......
	 orig commit -> 59a5e266c3f5c1567508888dd61a45b86daed0fa ......

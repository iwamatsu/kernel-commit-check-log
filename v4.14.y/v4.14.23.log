Check from v4.14.23 to v4.14.24
Commit count: 116
checking 6e4548ea58e6a5ed2dd3a417d991742e2dec0246 ......
checking ab5d9d1751bc539fe2b30bafe758d8ebd5d48a09 ......
	 orig commit -> df45bf84e4f5a48f23d4b1a07d21d566e8b587b2 ......
checking ac2be03ba64febc467e2df4fceb2a053408cc833 ......
	 orig commit -> efbf78973978b0d25af59bc26c8013a942af6e64 ......
		 efbf78973978b0d25af59bc26c8013a942af6e64 has problem. Fixes commit -> df45bf84e4f5a48f23d4b1a07d21d566e8b587b2
commit ab5d9d1751bc539fe2b30bafe758d8ebd5d48a09
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Fri Dec 8 19:27:27 2017 +0100

    net: sched: fix use-after-free in tcf_block_put_ext
    
    commit df45bf84e4f5a48f23d4b1a07d21d566e8b587b2 upstream.
    
    Since the block is freed with last chain being put, once we reach the
    end of iteration of list_for_each_entry_safe, the block may be
    already freed. I'm hitting this only by creating and deleting clsact:
    
    [  202.171952] ==================================================================
    [  202.180182] BUG: KASAN: use-after-free in tcf_block_put_ext+0x240/0x390
    [  202.187590] Read of size 8 at addr ffff880225539a80 by task tc/796
    [  202.194508]
    [  202.196185] CPU: 0 PID: 796 Comm: tc Not tainted 4.15.0-rc2jiri+ #5
    [  202.203200] Hardware name: Mellanox Technologies Ltd. "MSN2100-CB2F"/"SA001017", BIOS 5.6.5 06/07/2016
    [  202.213613] Call Trace:
    [  202.216369]  dump_stack+0xda/0x169
    [  202.220192]  ? dma_virt_map_sg+0x147/0x147
    [  202.224790]  ? show_regs_print_info+0x54/0x54
    [  202.229691]  ? tcf_chain_destroy+0x1dc/0x250
    [  202.234494]  print_address_description+0x83/0x3d0
    [  202.239781]  ? tcf_block_put_ext+0x240/0x390
    [  202.244575]  kasan_report+0x1ba/0x460
    [  202.248707]  ? tcf_block_put_ext+0x240/0x390
    [  202.253518]  tcf_block_put_ext+0x240/0x390
    [  202.258117]  ? tcf_chain_flush+0x290/0x290
    [  202.262708]  ? qdisc_hash_del+0x82/0x1a0
    [  202.267111]  ? qdisc_hash_add+0x50/0x50
    [  202.271411]  ? __lock_is_held+0x5f/0x1a0
    [  202.275843]  clsact_destroy+0x3d/0x80 [sch_ingress]
    [  202.281323]  qdisc_destroy+0xcb/0x240
    [  202.285445]  qdisc_graft+0x216/0x7b0
    [  202.289497]  tc_get_qdisc+0x260/0x560
    
    Fix this by holding the block also by chain 0 and put chain 0
    explicitly, out of the list_for_each_entry_safe loop at the very
    end of tcf_block_put_ext.
    
    Fixes: efbf78973978 ("net_sched: get rid of rcu_barrier() in tcf_block_put_ext()")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 1c8e7e61cbdf8792cef437afe5c5cdb26f7773df ......
	 orig commit -> a60b3f515d30d0fe8537c64671926879a3548103 ......
checking b6b42b3d2d9576dcaa0b4f1196117ad50b248b21 ......
	 orig commit -> d7aa04a5e82b4f254d306926c81eae8df69e5200 ......
checking bc44a1bbd131b34fd69c140affe6866caf1e1a39 ......
	 orig commit -> 760b3843fcd88f2a46e66eec08e2e6023a425809 ......
checking d8cf635c9142007dac8a3559d517bf33d4dbfd69 ......
	 orig commit -> 910d1bf2c68fa1d7dcde0316cb91f62758407e8d ......
checking 27245fc6f7a8d4f4830f55b50341ae37d920d9a7 ......
	 orig commit -> c9dccf1d074a67d36c510845f663980d69e3409b ......
checking 60190108f7e2643bb6dd6465eed69c9d18b26b37 ......
	 orig commit -> ebabcf17bcd7ce968b1631ebe08236275698f39b ......
		 ebabcf17bcd7ce968b1631ebe08236275698f39b has problem. Fixes commit -> 690d9163bf4b8563a2682e619f938e6a0443947f
commit ba0797a8016c303e3ab72276e60fb2858c5b4b1a
Author: Paul Burton <paul.burton@mips.com>
Date:   Tue Aug 21 12:12:59 2018 -0700

    MIPS: lib: Provide MIPS64r6 __multi3() for GCC < 7
    
    commit 690d9163bf4b8563a2682e619f938e6a0443947f upstream.
    
    Some versions of GCC suboptimally generate calls to the __multi3()
    intrinsic for MIPS64r6 builds, resulting in link failures due to the
    missing function:
    
        LD      vmlinux.o
        MODPOST vmlinux.o
      kernel/bpf/verifier.o: In function `kmalloc_array':
      include/linux/slab.h:631: undefined reference to `__multi3'
      fs/select.o: In function `kmalloc_array':
      include/linux/slab.h:631: undefined reference to `__multi3'
      ...
    
    We already have a workaround for this in which we provide the
    instrinsic, but we do so selectively for GCC 7 only. Unfortunately the
    issue occurs with older GCC versions too - it has been observed with
    both GCC 5.4.0 & GCC 6.4.0.
    
    MIPSr6 support was introduced in GCC 5, so all major GCC versions prior
    to GCC 8 are affected and we extend our workaround accordingly to all
    MIPS64r6 builds using GCC versions older than GCC 8.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reported-by: Vladimir Kondratiev <vladimir.kondratiev@intel.com>
    Fixes: ebabcf17bcd7 ("MIPS: Implement __multi3 for GCC7 MIPS64r6 builds")
    Patchwork: https://patchwork.linux-mips.org/patch/20297/
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # 4.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 819cbaae314ed04f7bd530f0e34c96b9612940eb ......
	 orig commit -> 8e033a93b37f37aa9fca71a370a895155320af60 ......
checking 3d23aaff9e55227d9e786d3aee157c9df63f2efe ......
	 orig commit -> fc2336505fb49a8b932a0a67a9745c408b79992c ......
checking e69660fdecda3bb58e8f3e9e7b0dc36efbad1b96 ......
	 orig commit -> 95f566de0269a0c59fd6a737a147731302136429 ......
checking 83d9e9c211fe885d03e9acb425be3cf55c1d3bd8 ......
	 orig commit -> 11d827a993a969c3c6ec56758ff63a44ba19b466 ......
checking 00c840f3b51cda42a3c48fa4067c4fa2091cdbcc ......
	 orig commit -> c76f97c99ae6d26d14c7f0e50e074382bfbc9f98 ......
checking 413e58ac3d845144f9b70b85b2f4add7d3249948 ......
	 orig commit -> 5960cefab9df76600a1a7d4ff592c59e14616e88 ......
checking cd659881219d8a39a523d2a42ae04e3fc416d030 ......
	 orig commit -> cf2acf66ad43abb39735568f55e1f85f9844e990 ......
checking 5aee2c142e3d7803cb8535fb92806b1f239390bc ......
	 orig commit -> 951a010233625b77cde3430b4b8785a9a22968d1 ......
checking 197faf0c3a146bd61b0e0eeffec340a491786f7f ......
	 orig commit -> 195e2addbce09e5afbc766efc1e6567c9ce840d3 ......
checking f5ac846ba15f8fc96c867e6e13b85d12b8b65515 ......
	 orig commit -> 56c0290202ab94a2f2780c449395d4ae8495fab4 ......
checking 84ada11975b7fd200f5ca6e263c8060ca4d636d9 ......
	 orig commit -> b707fda2df4070785d0fa8a278aa13944c5f51f8 ......
checking 0e29d0bac356de0cd04279ecbcd0384b4a4056b8 ......
	 orig commit -> 78f300049335ae81a5cc6b4b232481dc5e1f9d41 ......
checking a74e2cb46cdbc7b546d8552bc1e61bd43b960df6 ......
	 orig commit -> 7deea450eb912f269d999de62c8ab922d1461748 ......
checking 4a33ecfb67b9c200feaa97b8854bf65414e5a27f ......
	 orig commit -> 9d0513d82f1a8fe17b41f113ac5922fa57dbaf5c ......
checking fa10314f23bc9158137fc642034ee5042e89ceac ......
	 orig commit -> 6b018235b4daabae96d855219fae59c3fb8be417 ......
checking 5e1311a13449e77022608d95ffa6623a2cc084d0 ......
	 orig commit -> e2d5915293ffdff977ddcfc12b817b08c53ffa7a ......
checking 9024bb7e27d2684d71f06f4344c71c7924e8b80c ......
	 orig commit -> 7b6af2c53192f1766892ef40c8f48a413509ed72 ......
checking be2b86901a346d1fc2e496ce5823541ef3f82737 ......
	 orig commit -> 5731a879d03bdaa00265f8ebc32dfd0e65d25276 ......
checking 5ac98131312a0c16280e216e8ee6debceec11e0f ......
	 orig commit -> 7729bebc619307a0233c86f8585a4bf3eadc7ce4 ......
checking 7e3acce11e08f33a96d024f8b185a1709d591475 ......
	 orig commit -> 454be724f6f99cc7e7bbf15067128be9868186c6 ......
checking 91c12917d4a80ce4d31413937d88e8fb1f9096d3 ......
	 orig commit -> 0856655a25476d4431005e39d606e349050066b0 ......
checking 3f39cc7fe90b8f7fbf5ac700a29c416d8296b2fd ......
	 orig commit -> 13454c14550065fcc1705d6bd4ee6d40e057099f ......
checking 0f258cc64f4ec4b933991fb24fa76deddc18fd92 ......
	 orig commit -> 736a80bbfda709fb3631f5f62056f250a38e5804 ......
checking c38bd3a9fe11720425771392edc0370cd0db0049 ......
	 orig commit -> 3ea15452ee85754f70f3b9fa1f23165ef2e77ba7 ......
checking d66a35c2a1fa519467e9406be41451e997bbd2d1 ......
	 orig commit -> 7853b49ce8e0ef6364d24512b287463841d71bd3 ......
checking aae87222cc9c0b059b1f748c26f1f7482a6e21c6 ......
	 orig commit -> 458867b2ca0c987445c5d9adccd1642970e1ba07 ......
		 458867b2ca0c987445c5d9adccd1642970e1ba07 has problem. Fixes commit -> 158daed16efb1170694e420ae06ba8ba954d82e5
commit 214b5617cc701471374f7ccfe748399f952646ec
Author: Stefan Assmann <sassmann@kpanic.de>
Date:   Tue Dec 4 15:18:52 2018 +0100

    i40e: fix mac filter delete when setting mac address
    
    [ Upstream commit 158daed16efb1170694e420ae06ba8ba954d82e5 ]
    
    A previous commit moved the ether_addr_copy() in i40e_set_mac() before
    the mac filter del/add to avoid a race. However it wasn't taken into
    account that this alters the mac address being handed to
    i40e_del_mac_filter().
    
    Also changed i40e_add_mac_filter() to operate on netdev->dev_addr,
    hopefully that makes the code easier to read.
    
    Fixes: 458867b2ca0c ("i40e: don't remove netdev->dev_addr when syncing uc list")
    
    Signed-off-by: Stefan Assmann <sassmann@kpanic.de>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Acked-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 0f51f3cf99dfb3eb55fa3b8fd7e96c8ed6ca7112 ......
	 orig commit -> 248de22e638f10bd5bfc7624a357f940f66ba137 ......
checking 1edfa41adb1001aec1d813f72d7adab65058308e ......
	 orig commit -> c0bace798436bca0fdc221ff61143f1376a9c3de ......
checking 5c9da1201713478e14c25e2fa5a04123110785b2 ......
	 orig commit -> 835bcec5fdf3f9e880111b482177e7e70e3596da ......
checking 935454915c3387d7679375ad8386fa3f6401db8b ......
	 orig commit -> f8978bd95cf92f869f3d9b34c1b699f49253b8c6 ......
checking 7cbd67344e05aac1e29778f5724478eda8ac0626 ......
	 orig commit -> 19d859a7205bc59ffc38303eb25ae394f61d21dc ......
checking d31d0cf5a9803ea5ae3accc51bc5b3ce776c5c1f ......
	 orig commit -> bd30ffc414e55194ed6149fad69a145550cb7c18 ......
checking 49a8f703725e8d508f4add0042b59a3810ba7077 ......
	 orig commit -> 0b76aae741abb9d16d2c0e67f8b1e766576f897d ......
checking f22fec25935dee1dd769c84f100b173e1565c335 ......
	 orig commit -> d02fd6e7d2933ede6478a15f9e4ce8a93845824e ......
		 d02fd6e7d2933ede6478a15f9e4ce8a93845824e has problem. Fixes commit -> 4e14bf4236490306004782813b8b4494b18f5e60
commit ce8bdc7aabf973f8256f16181c52df402758aeca
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Thu Feb 22 18:20:30 2018 +0300

    macvlan: fix use-after-free in macvlan_common_newlink()
    
    [ Upstream commit 4e14bf4236490306004782813b8b4494b18f5e60 ]
    
    The following use-after-free was reported by KASan when running
    LTP macvtap01 test on 4.16-rc2:
    
    [10642.528443] BUG: KASAN: use-after-free in
                   macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10642.626607] Read of size 8 at addr ffff880ba49f2100 by task ip/18450
    ...
    [10642.963873] Call Trace:
    [10642.994352]  dump_stack+0x5c/0x7c
    [10643.035325]  print_address_description+0x75/0x290
    [10643.092938]  kasan_report+0x28d/0x390
    [10643.137971]  ? macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10643.207963]  macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10643.275978]  macvtap_newlink+0x171/0x260 [macvtap]
    [10643.334532]  rtnl_newlink+0xd4f/0x1300
    ...
    [10646.256176] Allocated by task 18450:
    [10646.299964]  kasan_kmalloc+0xa6/0xd0
    [10646.343746]  kmem_cache_alloc_trace+0xf1/0x210
    [10646.397826]  macvlan_common_newlink+0x6de/0x14a0 [macvlan]
    [10646.464386]  macvtap_newlink+0x171/0x260 [macvtap]
    [10646.522728]  rtnl_newlink+0xd4f/0x1300
    ...
    [10647.022028] Freed by task 18450:
    [10647.061549]  __kasan_slab_free+0x138/0x180
    [10647.111468]  kfree+0x9e/0x1c0
    [10647.147869]  macvlan_port_destroy+0x3db/0x650 [macvlan]
    [10647.211411]  rollback_registered_many+0x5b9/0xb10
    [10647.268715]  rollback_registered+0xd9/0x190
    [10647.319675]  register_netdevice+0x8eb/0xc70
    [10647.370635]  macvlan_common_newlink+0xe58/0x14a0 [macvlan]
    [10647.437195]  macvtap_newlink+0x171/0x260 [macvtap]
    
    Commit d02fd6e7d293 ("macvlan: Fix one possible double free") handles
    the case when register_netdevice() invokes ndo_uninit() on error and
    as a result free the port. But 'macvlan_port_get_rtnl(dev))' check
    (returns dev->rx_handler_data), which was added by this commit in order
    to prevent double free, is not quite correct:
    
    * for macvlan it always returns NULL because 'lowerdev' is the one that
      was used to register rx handler (port) in macvlan_port_create() as
      well as to unregister it in macvlan_port_destroy().
    * for macvtap it always returns a valid pointer because macvtap registers
      its own rx handler before macvlan_common_newlink().
    
    Fixes: d02fd6e7d293 ("macvlan: Fix one possible double free")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4d3d428c56a04893782a8d0b1e2b4ad8b34a5f45 ......
	 orig commit -> 3a3882ff26fbdbaf5f7e13f6a0bccfbf7121041d ......
checking 4def40b2ee0281f1749f4d0a2dc13f06a8bf531f ......
	 orig commit -> 2196881566225f3c3428d1a5f847a992944daa5b ......
checking ba28394c579b9864bd8114eae1f877835ea96b93 ......
	 orig commit -> 16ba3defb8bd01a9464ba4820a487f5b196b455b ......
checking 67851c9381a1795fb089a775f8c0bce5435daa01 ......
	 orig commit -> 5a371cf87e145b86efd32007e46146e78c1eff6d ......
checking 9d27ab346384e72f32afbd72b75864bc8ab9675c ......
	 orig commit -> 02a0d9216d4daf6a58d88642bd2da2c78c327552 ......
checking 4132ec352700848531a90524226f7967d61a6809 ......
	 orig commit -> 2fa771be953a17f8e0a9c39103464c2574444c62 ......
checking d4727e485a1dcb43ca0bca62d7d35648a8441c74 ......
	 orig commit -> beed9263f4000c48a5c48912f26576f6fa091181 ......
checking 4c6652a081394bbd388fdd3ca9fd889775f9890b ......
	 orig commit -> 8a9bd4f8ebc6800bfc0596e28631ff6809a2f615 ......
checking 622ded58410c69c821bd5e4b9b5be2dbc0af2c01 ......
	 orig commit -> afae457d874860a7e299d334f59eede5f3ad4b47 ......
checking 4ebaea9e65d20714120d92bc687bbf57f2f64a94 ......
	 orig commit -> 11bca0a83f83f6093d816295668e74ef24595944 ......
checking 1fd2d40b4667e06087c4df3913e2fec68d9095ba ......
	 orig commit -> 45e6ae7ef21b907dacb18da62d5787d74a31d860 ......
checking c2acc885913807ce4f6d21353d4d7525eaeb2c01 ......
	 orig commit -> 2b83ff96f51d0b039c4561b9f95c824d7bddb85c ......
checking 6b800ce9ee8452abfbbfe66bf9cdd13f4655e9a3 ......
	 orig commit -> 7ad1437d6ace0e450a6c1167720608ad660b191d ......
checking 2f4c6c0453057d95ee910e65a0fec248f0cce5b8 ......
	 orig commit -> f7084059a9cb9e56a186e1677b1dcffd76c2cd24 ......
checking 9f00176d7c5ea0c22c107baece22be1a113c72cd ......
	 orig commit -> e60ee41aaf898584205a6af5c996860d0fe6a836 ......
checking 2c0d89a2733597b57b7f138b5a586f380c881fdc ......
	 orig commit -> 4419bb1cedcda0272e1dc410345c5a1d1da0e367 ......
checking 575650b6566b3e4795e19f3f3f8abb88dca0c12e ......
	 orig commit -> 642a8439ddd8423b92f2e71960afe21ee1f66bb6 ......
checking 831923622a595a047573c7ca38cb5d851fd1a87d ......
	 orig commit -> 19142551b2be4a9e13838099fde1351386e5e007 ......
checking cbc3dbfe4f37d541d57c0acafa8bb463ed178ef5 ......
	 orig commit -> 8bea728dce8972e534e6b99fd550f7b5cc3864e8 ......
checking cdbde4c04c5c63ccf7d91122d39ce0dbea71dbfa ......
	 orig commit -> 7cad2fabd5691dbb17762877d4e7f236fe4bc181 ......
checking 7cc6e8415d23807c06cf74618e9dc890f1ef21e1 ......
	 orig commit -> 0a02dcca126280595950f3ea809f77c9cb0a235c ......
checking 0971f188da94e84d768c37bb10384463aaa003d4 ......
	 orig commit -> 1eb7b40386c97f6c4d1c62931bf306f4535a4bd6 ......
checking 0653ba0580aed7b4718115e97e3856f12fda7505 ......
	 orig commit -> 7d2901f809c110bd9a261e879d59efe62e3bc758 ......
checking 22d5e20c6a5538ec69b499562299412c1c19291d ......
	 orig commit -> bbc25bee37d2b32cf3a1fab9195b6da3a185614a ......
checking 36d0a678fb25a7bce5bf9b2828c0d9395fa9a990 ......
	 orig commit -> af955bf15d2c27496b0269b1f05c26f758c68314 ......
checking 99b329b4611a17df15e7122fdf4bbfb8a1245d67 ......
	 orig commit -> 506e8a912661c97b41adc8a286b875d01323ec45 ......
checking 8164587e5262d106891fc97c1fa2c4342c7d6c94 ......
	 orig commit -> 17748056ce123ee37fb7382bc698fc721e3c4a09 ......
checking 831c169c9bacec777ec210cd34575016ef2b6338 ......
	 orig commit -> 8bc0d7ac934b6f2d0dc8f38a3104d281c9db1e98 ......
checking 8a5c84b1055a1882992de51f1b2bb5b0989cbbf6 ......
	 orig commit -> 4c82fd0abb87e20d0d68ef5237e74732352806c8 ......
checking b7b0385937fa163b8d8e68f38d90938143ef4feb ......
	 orig commit -> d1b8b2391c24751e44f618fcf86fb55d9a9247fd ......
checking e2f52fa3f8d6fa949afebbb4dc24f71bc0785803 ......
	 orig commit -> 24c0df82ef7919e4d10cf2e4e65d368eb2e8ea21 ......
checking def8d0ae4ac9a1dd9fb6e8a7ffe6aadf2893d848 ......
	 orig commit -> b3cf8528bb21febb650a7ecbf080d0647be40b9f ......
checking caca324f93736279bece65d54b6efe394d6e00d6 ......
	 orig commit -> d5aa24825da5711f8cb829f873160ddf1a29b19c ......
checking 43da2bcade2a05e0aef0ab26a879f9c9c246aa7d ......
	 orig commit -> a2fba188fd5eadd6061bef4f2f2577a43231ebf3 ......
checking a2cfb1c664c31dc692736800c71b2a78ca0af1f7 ......
	 orig commit -> d6b2785cd55ee72e9608762650b3ef299f801b1b ......
checking 9a472c21129100a3dbb6c77485876280d7729259 ......
	 orig commit -> ff0891915cd7b24ab27eee9b360c0452853bf9f6 ......
		 ff0891915cd7b24ab27eee9b360c0452853bf9f6 has problem. Fixes commit -> e279d634f3d57452eb106a0c0e99a6add3fba1a6
commit 651f11a83af35ea3c57d53dcb8a4a6640bb3fb5d
Author: Shay Agroskin <shayag@mellanox.com>
Date:   Wed Jun 27 15:43:07 2018 +0300

    net/mlx5e: Refine ets validation function
    
    [ Upstream commit e279d634f3d57452eb106a0c0e99a6add3fba1a6 ]
    
    Removed an error message received when configuring ETS total
    bandwidth to be zero.
    Our hardware doesn't support such configuration, so we shall
    reject it in the driver. Nevertheless, we removed the error message
    in order to eliminate error messages caused by old userspace tools
    who try to pass such configuration.
    
    Fixes: ff0891915cd7 ("net/mlx5e: Fix ETS BW check")
    Signed-off-by: Shay Agroskin <shayag@mellanox.com>
    Reviewed-by: Huy Nguyen <huyn@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 11be1c24a60d31004d797bc976522be34ae233ed ......
	 orig commit -> a1762456993893795030d911106a7650481db0ef ......
checking 06dcd2d77a0108b82d4131aa76333d94b66c6cfc ......
	 orig commit -> 200922c93f008e03ddc804c6dacdf26ca1ba86d7 ......
checking 3eeac1d10a1bd21ec210e77b9f3b08d2dc7e1d1f ......
	 orig commit -> c9fefa08190fc879fb2e681035d7774e0a8c5170 ......
		 c9fefa08190fc879fb2e681035d7774e0a8c5170 has problem. Fixes commit -> 82a40777de12728dedf4075453b694f0d1baee80
commit b3fb9398723238f39e3ff0c9c7f0d1cadf04738a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Aug 5 22:46:07 2018 +0800

    ip6_tunnel: use the right value for ipv4 min mtu check in ip6_tnl_xmit
    
    [ Upstream commit 82a40777de12728dedf4075453b694f0d1baee80 ]
    
    According to RFC791, 68 bytes is the minimum size of IPv4 datagram every
    device must be able to forward without further fragmentation while 576
    bytes is the minimum size of IPv4 datagram every device has to be able
    to receive, so in ip6_tnl_xmit(), 68(IPV4_MIN_MTU) should be the right
    value for the ipv4 min mtu check in ip6_tnl_xmit.
    
    While at it, change to use max() instead of if statement.
    
    Fixes: c9fefa08190f ("ip6_tunnel: get the min mtu properly in ip6_tnl_xmit")
    Reported-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5dc4cbcfb5f2b43656283835c564eeae1951bf4d ......
	 orig commit -> 2c52129a7d74d017320804c6928de770815c5f4a ......
checking 212ea3380bbb9f3915f2f7677cd0eae825711a94 ......
	 orig commit -> cfddd4c33c254954927942599d299b3865743146 ......
checking 4699beb7712768c38d009301a2d20f1f1e567294 ......
	 orig commit -> a93bf0ff449064e6b7f44e58522e940f88c0d966 ......
		 a93bf0ff449064e6b7f44e58522e940f88c0d966 has problem. Fixes commit -> 6b4f92af3d59e882d3ba04c44a815266890d188f
f15ca723c1ebe6c1a06bc95fda6b62cd87b44559
commit 6a3c946b205fd5bc3be583a1f3adbda11128e7ed
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Thu Jan 25 19:03:03 2018 +0100

    net: don't call update_pmtu unconditionally
    
    commit f15ca723c1ebe6c1a06bc95fda6b62cd87b44559 upstream.
    
    Some dst_ops (e.g. md_dst_ops)) doesn't set this handler. It may result to:
    "BUG: unable to handle kernel NULL pointer dereference at           (null)"
    
    Let's add a helper to check if update_pmtu is available before calling it.
    
    Fixes: 52a589d51f10 ("geneve: update skb dst pmtu on tx path")
    Fixes: a93bf0ff4490 ("vxlan: update skb dst pmtu on tx path")
    CC: Roman Kapl <code@rkapl.cz>
    CC: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Thomas Deutschmann <whissi@gentoo.org>
    Cc: Eddie Chapman <eddie@ehuk.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 6a3c946b205fd5bc3be583a1f3adbda11128e7ed
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Thu Jan 25 19:03:03 2018 +0100

    net: don't call update_pmtu unconditionally
    
    commit f15ca723c1ebe6c1a06bc95fda6b62cd87b44559 upstream.
    
    Some dst_ops (e.g. md_dst_ops)) doesn't set this handler. It may result to:
    "BUG: unable to handle kernel NULL pointer dereference at           (null)"
    
    Let's add a helper to check if update_pmtu is available before calling it.
    
    Fixes: 52a589d51f10 ("geneve: update skb dst pmtu on tx path")
    Fixes: a93bf0ff4490 ("vxlan: update skb dst pmtu on tx path")
    CC: Roman Kapl <code@rkapl.cz>
    CC: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Thomas Deutschmann <whissi@gentoo.org>
    Cc: Eddie Chapman <eddie@ehuk.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 26e6b9f0be83ae820d603bd1cfc6fdc77ea23193 ......
	 orig commit -> e688822d035b494071ecbadcccbd6f3325fb0f59 ......
checking 9b72f8c448eceb2d0a683362f4a6f05b6f30c093 ......
	 orig commit -> 7352e252b5bf40d59342494a70354a2d436fd0cd ......
checking c7f40ff40061bbf45a32a38100c4bddc0ab56840 ......
	 orig commit -> 2cc42bac1c795f75fcc062b95c6ca7ac1b84d5d8 ......
checking 54c153a0847bb13bf9f4131c7acfc8059461b597 ......
	 orig commit -> f292b9b28097d8fe870336108e91bd95a14294bf ......
checking d61a373f4344abf10418fa1d41e41f64c82403e9 ......
	 orig commit -> 116d2f7496c51b2e02e8e4ecdd2bdf5fb9d5a641 ......
checking 56d80186a5ac8af22dc583f9db043a1a0c54c435 ......
	 orig commit -> d070f7c703ef26e3db613f24206823f916272fc6 ......
checking 3cf652bedcb9acd5491715adc7996f35d33c409a ......
	 orig commit -> 66e900a3d225575c8b48b59ae1fe74bb6e5a65cc ......
checking 52a63f35cd70fd2fdfdf148b1896d2659c5aa3ed ......
	 orig commit -> 162bd5e5fd921785077b5862d8f2ffabe2fe11e5 ......
checking 647ed111f78ffc7fe6bd654c615ddbd013e2c44a ......
	 orig commit -> 6454b3bdd138dfc640deb5e7b9a0668fca2d55dd ......
checking e095ecaec6d94aa2156cceb98a85d409b51190f3 ......
	 orig commit -> acf568ee859f098279eadf551612f103afdacb4e ......
		 acf568ee859f098279eadf551612f103afdacb4e has problem. Fixes commit -> d16b46e4fd8bc6063624605f25b8c0835bb1fbe3
commit d2d85f8d224917936ceea0552fe453fe01e2e1e0
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Thu Jan 4 22:25:07 2018 +1100

    xfrm: Use __skb_queue_tail in xfrm_trans_queue
    
    commit d16b46e4fd8bc6063624605f25b8c0835bb1fbe3 upstream.
    
    We do not need locking in xfrm_trans_queue because it is designed
    to use per-CPU buffers.  However, the original code incorrectly
    used skb_queue_tail which takes the lock.  This patch switches
    it to __skb_queue_tail instead.
    
    Reported-and-tested-by: Artem Savkov <asavkov@redhat.com>
    Fixes: acf568ee859f ("xfrm: Reinject transport-mode packets...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Alistair Strachan <astrachan@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e677319068b07f7f00154e83a96b2501709e6dab ......
	 orig commit -> a121027d2747168df0aac0c3da35509eea39f61c ......
checking 0b9aeeb6070e5f618089e2f6cb7a1c1e352177ab ......
	 orig commit -> ab14436065c8066c265540312742390d6d07ddd2 ......
checking ac4dc9f1af33538ba475484b1dcb95bbbcef41a6 ......
	 orig commit -> 9ee332d99e4d5a97548943b81c54668450ce641b ......
checking 60f1c1f279925a5c3b68edc303c275ae50451c4b ......
	 orig commit -> 5c468674d17056148da06218d4da5d04baf22eac ......
checking c8b8dd735938be43afa6a2b6a9ea8c43441bcc09 ......
	 orig commit -> ca26cffa4e4aaeb09bb9e308f95c7835cb149248 ......
checking ba9443c55f36079cb61fb7bc4913766e9a519585 ......
	 orig commit -> 36b0cb84ee858f02c256d26f0cb4229c78e3399e ......
checking ae3471f65a04451f3670cbde6c59e384cca44dc8 ......
	 orig commit -> da57c5414f49ef9e4bcb9ae0bbafd1d650b31411 ......
checking 4b2e0f0996197d7816f241b565f41ad77d403918 ......
	 orig commit -> 588753f1eb18978512b1c9b85fddb457d46f9033 ......
checking 6de1b002a29f86982b8662941ad97eec0741d3f8 ......
	 orig commit -> e44b9a9c135727f3410e029910275f40681dc8bc ......
checking f485259011ad644d91a7ccc40bfaaafea72974f9 ......
	 orig commit -> fdf2e821052958a114618a95ab18a300d0b080cb ......
checking 14862bfbffd90fd11b21273a7ef2778054c0ec1e ......
	 orig commit -> c647c0d62c82eb3ddf78a0d8b3d58819d9f552aa ......
checking 043309fb5106c3fe9a45cd0637517b661d9dac61 ......
	 orig commit -> 1e366161510f266516107a69db91f1f2edaea11c ......
checking dabd233b757d11cb7dc7d76b3e5abd623ee437c9 ......
	 orig commit -> e4d02ca04c6d48ab2226342a1c4ed54f1dbb72bd ......
checking fbd047ffcccf07f1c24f96f8dd23add065c9cdbe ......
	 orig commit -> 249159c5f15812140fa216f9997d799ac0023a1f ......
checking a1aef5ce2abef719d1881bd22e0e875cca8f7b6f ......
	 orig commit -> 4596e752db02d47038cd7c965419789ab15d1985 ......
checking 4d9f6272917815f5ac5821ab6163045e74903f0d ......
	 orig commit -> e796cc6a3a9186c92092e2f5929cf8f65b56cf01 ......
checking 959f6a0906d56ee0ea95862bce6bfae2bbc8a717 ......
	 orig commit -> 2610acf46b9ed528ec2cacd717bc9d354e452b73 ......
checking 7cfa95893cbb1a7615385b2b66effc754aae9e6e ......
	 orig commit -> 5771cfffdffe709ae9b403b6f80438ca40bf850e ......
checking 647a37ec1a17c2710103d948a748f21453aabf21 ......
	 orig commit -> 1f704fd0d14043e76e80f6b8b2251b9b2cedcca6 ......
checking 7edaa9afb923dff77e173de2f3954bbbdd19d9d3 ......
	 orig commit -> 3756f6401c302617c5e091081ca4d26ab604bec5 ......
checking f92679fee6ad1a13c8e82cf1f5769cef27343f78 ......
	 orig commit -> 48d0c9becc7f3c66874c100c126459a9da0fdced ......

Check from v4.14.38 to v4.14.39
Commit count: 91
checking 7d6240f0fb85430ae4f490824fdf8d0a078dfcd2 ......
checking 7fddff51f245b01d1dab2a6461d706170ff5b519 ......
	 orig commit -> f0295e047fcf52ccb42561fb7de6942f5201b676 ......
checking e5a290c4ff77c9fb3fcb1dee7cfb356969daeee2 ......
	 orig commit -> 85bd0ba1ff9875798fad94218b627ea9f768f3c3 ......
checking a2066aa76a7a487b93bc6135b6add2f0036d4ef6 ......
	 orig commit -> 1f71addd34f4c442bec7d7c749acc1beb58126f2 ......
checking 922e5129eb011ebbc62c416bc1c423a20ae359d7 ......
	 orig commit -> 09e182d17e8891dd73baba961a0f5a82e9274c97 ......
checking 7c6bcaac737fa72dd8aef00cb38b9c96b9b04cd8 ......
	 orig commit -> 84749d83758af6576552046b215b9b7f37f9556b ......
checking b319531024d9b3c4d63965efc92d8e04803f42ce ......
	 orig commit -> da6fa7ef67f07108a1b0cb9fd9e7fcaabd39c051 ......
checking ce911a5b1fea9700f797c3bd5dc9d9d94c996ac3 ......
	 orig commit -> 1a512c0882bd311c5b5561840fcfbe4c25b8f319 ......
checking 8e99c881e497e7f7528f693c563e204ae888a846 ......
	 orig commit -> ad343a98e74e85aa91d844310e797f96fee6983b ......
checking d1f1f7771a6a5f81047ecf948c5a580c916f6c3d ......
	 orig commit -> 854e55ad289ef8888e7991f0ada85d5846f5afb9 ......
checking bf1d7023c901324eac0f8bc813d8b7317b85af65 ......
	 orig commit -> ac315c621f01d4b8a53dec317c7ae322fd26ff38 ......
checking 559121f5a1657899f534cf78a3f90feb8fa573f6 ......
	 orig commit -> 75569c182e4f65cd8826a5853dc9cbca703cbd0e ......
checking 79340bda01ab2704b11bae18e592304e41948492 ......
	 orig commit -> 682e6b4da5cbe8e9a53f979a58c2a9d7dc997175 ......
checking 20b0f757da3be5a7c5f14f95250b9c8efcaee02d ......
	 orig commit -> c0f7f5b6c69107ca92909512533e70258ee19188 ......
checking 3a5465d0b61d91d9185570be027cf5e166af3d59 ......
	 orig commit -> dd709e72cb934eefd44de8d9969097173fbf45dc ......
checking 9922fd0c681f4755422900c529290d393229d38d ......
	 orig commit -> 881c93c0fb73328845898344208fa0bf0d62cac6 ......
checking 7563d6f2be58010edecd145faa06bcd82251caa0 ......
	 orig commit -> 9c55ad1c214d9f8c4594ac2c3fa392c1c32431a7 ......
checking c2bc3eb5599f945568106acca364d6f5f1ec1f37 ......
	 orig commit -> 7b4c443d139f1d2b5570da475f7a9cbcef86740c ......
checking 76f7b52b5bf0b03dc1af1df3ecceb5384a4046ca ......
	 orig commit -> facb9f6eba3df4e8027301cc0e514dc582a1b366 ......
checking b02bbcce8ea3594b798ae57a7bb5e5dcf23f5e61 ......
	 orig commit -> c656941df9bc80f7ec65b92ca73c42f8b0b62628 ......
checking 674d38ea185006d46a4022920aed29525e137a7e ......
	 orig commit -> eea0d3ea7546961f69f55b26714ac8fd71c7c020 ......
checking a32a944a60c854ab44cf873dfc1954828f50b046 ......
	 orig commit -> d0cf9b561ca97d5245bb9e0c4774b7fadd897d67 ......
checking f2acc8dc0644194efba8474d3a4dc13752430894 ......
	 orig commit -> fb5924fddf9ee31db04da7ad4e8c3434a387101b ......
checking 5a5ea34017993e6714dec7c741d1d9e263ec3638 ......
	 orig commit -> f0cf47d939d0b4b4f660c5aaa4276fa3488f3391 ......
		 f0cf47d939d0b4b4f660c5aaa4276fa3488f3391 has problem. Fixes commit -> fb544d1ca65a89f7a3895f7531221ceeed74ada7
commit cb754d67c084d4e673c3dd420636d7e8eb81b024
Author: Christoffer Dall <christoffer.dall@arm.com>
Date:   Tue Dec 11 13:23:57 2018 +0100

    KVM: arm/arm64: Fix VMID alloc race by reverting to lock-less
    
    commit fb544d1ca65a89f7a3895f7531221ceeed74ada7 upstream.
    
    We recently addressed a VMID generation race by introducing a read/write
    lock around accesses and updates to the vmid generation values.
    
    However, kvm_arch_vcpu_ioctl_run() also calls need_new_vmid_gen() but
    does so without taking the read lock.
    
    As far as I can tell, this can lead to the same kind of race:
    
      VM 0, VCPU 0                  VM 0, VCPU 1
      ------------                  ------------
      update_vttbr (vmid 254)
                                    update_vttbr (vmid 1) // roll over
                                    read_lock(kvm_vmid_lock);
                                    force_vm_exit()
      local_irq_disable
      need_new_vmid_gen == false //because vmid gen matches
    
      enter_guest (vmid 254)
                                    kvm_arch.vttbr = <PGD>:<VMID 1>
                                    read_unlock(kvm_vmid_lock);
    
                                    enter_guest (vmid 1)
    
    Which results in running two VCPUs in the same VM with different VMIDs
    and (even worse) other VCPUs from other VMs could now allocate clashing
    VMID 254 from the new generation as long as VCPU 0 is not exiting.
    
    Attempt to solve this by making sure vttbr is updated before another CPU
    can observe the updated VMID generation.
    
    Cc: stable@vger.kernel.org
    Fixes: f0cf47d939d0 "KVM: arm/arm64: Close VMID generation race"
    Reviewed-by: Julien Thierry <julien.thierry@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0ddb53a67cbdd8eda6bd4e72870b7de0499e2e7b ......
	 orig commit -> 6e8fe39989720b87439fee7817a5ca362b16d931 ......
checking f671ee8de31a3c2702250e64e5f18ebceb21f1e6 ......
	 orig commit -> d2ffed5185df9d8d9ccd150e4340e3b6f96a8381 ......
checking 23abff7b984ff46b78b9964f9cdba42036b4149a ......
	 orig commit -> 6a7228d90d42bcacfe38786756ba62762b91c20a ......
checking bcd73c772ec1991094de7064b035770e491e293a ......
	 orig commit -> 5f53624662eaac89598641cee6cd54fc192572d9 ......
checking 1a6e0a900bced2df5f6e52ee475d13e5d5e692b3 ......
	 orig commit -> fc31c4e347c9dad50544d01d5ee98b22c7df88bb ......
checking 6b3751e249ff93f065ae90bb9b5e66cc42da9fcc ......
	 orig commit -> 3430f924a62905891c8fa9a3b97ea52007795bc3 ......
checking f0ae21a86eb52970966d73094a402338e1fc85ac ......
	 orig commit -> 4fa3999ee672c54a5498ce98e20fe3fdf9c1cbb4 ......
checking e90b89088a109f1c49befd8a7f9f7d970d093e62 ......
	 orig commit -> 660661afcd40ed7f515ef3369721ed58e80c0fc5 ......
checking fd0485e2cc7b5f69889dca223b2c9f7cba6e91f4 ......
	 orig commit -> 7aa135fcf26377f92dc0680a57566b4c7f3e281b ......
checking bddabeb71f3fc2577d7576251507f36320cecdb1 ......
	 orig commit -> 3368e547c52b96586f0edf9657ca12b94d8e61a7 ......
checking be10336a907253a6066d802c11b6edaf7cf397f8 ......
	 orig commit -> 72961c4e6082be79825265d9193272b8a1634dec ......
checking b23b4174275d397281023703ce19ff793e6dfd98 ......
	 orig commit -> 505aa4b6a8834a2300971c5220c380c3271ebde3 ......
checking a5f4276787d63f726b751d80b5b51f0c8d4d0384 ......
	 orig commit -> 3e14c6abbfb5c94506edda9d8e2c145d79375798 ......
checking 6840b774dc4d211ac546af5a2e02bb02fad0b162 ......
	 orig commit -> 007b4e8b705a4eff184d567c5a8b496622f9e116 ......
checking f69cd2d30a800776f241b3ea16279628fc4dd724 ......
	 orig commit -> 7b70eb14392a7cf505f9b358d06c33b5af73d1e7 ......
checking 204e0761846b2458a2b803faa4619f0830cf26de ......
	 orig commit -> 46a16a2283f9e678a4e26829175e0c37a5191860 ......
checking 1de1ad0c2c4262a9eafcbede4e662aa503f71f6c ......
	 orig commit -> 6510bbc88e3258631831ade49033537081950605 ......
checking 6c677c5968aaa8122f314aca78c7210bf01cb890 ......
	 orig commit -> 47016b341fc3b3fd4909e058c6fa38f165b53646 ......
checking 3d4612bf62c8f355a478169cba68cffe9d11bd82 ......
	 orig commit -> 65811834ba56e9ed88117cf6c09880416c9951ab ......
checking 53c4197a2d7e88272afae14e3b1f844f8469af01 ......
	 orig commit -> ab3b8e5159b5335c81ba2d09ee5054d4a1b5a7a6 ......
checking c9df23efe5ccdf646be0aad10b744c8d09a56ee1 ......
	 orig commit -> ea04a1dbf8b1d6af759d58e705636fde48583f8f ......
checking d680a34d82b6475ab4fea343c8390f115b72b41a ......
	 orig commit -> 69fa6f19b95597618ab30438a27b67ad93daa7c7 ......
checking bda3aba8c0a161232d634c1ef695e72683f9f20a ......
	 orig commit -> 8d218dd8116695ecda7164f97631c069938aa22e ......
checking 4a52a2127240ea5149a83ab80c7adacb4e36e7a4 ......
	 orig commit -> f5e94b4c6ebdabe0f602d796e0430180927521a0 ......
checking 30ddc329d56281c0c1d038d5f572af3c31e6b0a6 ......
	 orig commit -> f853dcaae2f5bbe021161e421bd1576845bae8f6 ......
checking 00e0495d83277d43078aa99b3186cc527af792a5 ......
	 orig commit -> 912e4c332037e7ed063c164985c36fb2b549ea3a ......
checking 6ab1a94d17dbf959f5910f56edda84889f5ddd39 ......
	 orig commit -> 088e861edffb84879cf0c0d1b02eda078c3a0ffe ......
checking 9d57d45965dd1acd6a256787ad17e644af605a67 ......
	 orig commit -> f526afcd8f71945c23ce581d7864ace93de8a4f7 ......
checking f8616ffbb78d84d256106a96a2b7b02cd7123961 ......
	 orig commit -> 10513142a7114d251670361ad40cba2c61403406 ......
checking 8f1705268fd2ad526a9845ea5a44bf82abec853e ......
	 orig commit -> f9d94b57e30fd1575b4935045b32d738668aa74b ......
checking b67a05364e5daf88fc37d1c84e8b91ea460f0aae ......
	 orig commit -> 7f054a5bee0987f1e2d4e59daea462421c76f2cb ......
checking 19baecfc11058e923d66cd0b32e9339ec94f6b92 ......
	 orig commit -> 8a7d6003df41cb16f6b3b620da044fbd92d2f5ee ......
checking d03fbe62e173c8946b271e521d7b9237ae4d2305 ......
	 orig commit -> 0f925660a7bc49b269c163249a5d06da3a0c7b0a ......
checking ba9c9886a40ddaeaa07e8fc81da3bbc755192115 ......
	 orig commit -> 10412c420af9ba1f3de8483a95d360e5eb5bfc84 ......
checking 545906124041557d02f0dd29a59aef3182fd3ccb ......
	 orig commit -> bcdd0ca8cb8730573afebcaae4138f8f4c8eaa20 ......
checking 877f418171af2aae702cf0878ae2ec44eab5e89a ......
	 orig commit -> 598c2d41ff44889dd8eced4f117403e472158d85 ......
checking 6a50af86a62be245cf093c3de2c02790da1491df ......
	 orig commit -> b2d89ad9c9682e795ed6eeb9ed455789ad6cedf1 ......
checking 6ba9a47d1fc5ce78e47026d98621366712c554f7 ......
	 orig commit -> e9ec22547986dd32c5c70da78107ce35dbff1344 ......
checking 4854b9665c8193291199e7b3d53c63a14a19a802 ......
	 orig commit -> 903f9db10f18f735e62ba447147b6c434b6af003 ......
checking c0ed8ece4ef395e8b1665fdba276b7285c44f0ab ......
	 orig commit -> d02d270014f70dcab0117776b81a37b6fca745ae ......
checking 998d43ce034b98466e0aa1b8d56b6d524c7d0d4e ......
	 orig commit -> 5c60300d68da32ca77f7f978039dc72bfc78b06b ......
checking e9287108acce9b3611bc45a76801fbe242347e60 ......
	 orig commit -> aa44ec867030a72e8aa127977e37dec551d8df19 ......
checking 75fc6f2d39bfe32db91980408247edc77d189a5a ......
	 orig commit -> 61a8950c5c5708cf2068b29ffde94e454e528208 ......
checking 6b1c41a0f7183702abb7a104c6c7e196ad69a6b3 ......
	 orig commit -> a7a69ec0d8e4a58be7db88d33cbfa2912807bb2b ......
checking 4217a339b37dd8b0c001ec54f85ea84eab7f4feb ......
	 orig commit -> 2855b33514d290c51d52d94e25d3ef942cd4d578 ......
checking 7ae93ff136a00eccc0027d9a01c95680a9e8d756 ......
	 orig commit -> 24a7e4d20783c0514850f24a5c41ede46ab058f0 ......
checking cf7405f67543bcb8b334c1e79fcd75ad172f7599 ......
	 orig commit -> 1d8d6428d1da642ddd75b0be2d1bb1123ff8e017 ......
checking e6d2055ba32f0878b09f3068af10a4ba445f84a8 ......
	 orig commit -> 83a62c51ba7b3c0bf45150c4eac7aefc6c785e94 ......
checking c59dc4d135192123523f35ff60243295a4f9d40a ......
	 orig commit -> 3180dabe08e3653bf0a838553905d88f3773f29c ......
checking 333909311d70b035306a86b0139daaf480a25624 ......
	 orig commit -> b1b59e16075f5e5da2943ce8de724ab96bc3c6c2 ......
checking f310eb70657e991c68c085e41b66e7c119cb392b ......
	 orig commit -> 1e23aace21515a8f7615a1de016c0ea8d4e0cc6e ......
checking 747120e77100fccc05923a104bca3e9c729af87b ......
	 orig commit -> 470b5d6f0cf4674be2d1ec94e54283a1770b6a1a ......
checking 8f30aa32b716b728163893a90be929f5e9e6c071 ......
	 orig commit -> fe710508b6ba9d28730f3021fed70e7043433b2e ......
checking 0b932b1ca9dad9ba18b58efb56074d3431c81166 ......
	 orig commit -> 621faf4f6a181b6e012c1d1865213f36f4159b7f ......
checking 64abd2428e54ead122a4e713a0abfb9627fa3e02 ......
	 orig commit -> c20f53c58261b121d0989e147368803b9773b413 ......
	 orig commit -> b07c12517f2aed0add8ce18146bb426b14099392 ......
checking b792b1f7d01ca95db8b39046e2a539def5ffc4f2 ......
	 orig commit -> 5b22f676118ff25049382041da0db8012e57c9e8 ......
checking 4abe5b775a16e131466f40861b90632d719da1b5 ......
	 orig commit -> 9020a7efe537856eb3e826ebebdf38a5d07a7857 ......
checking 944edaf13deeb0db5847bddf956c4316e53d6f2c ......
	 orig commit -> 4bfb141bc01312a817d36627cc47c93f801c216d ......
checking 470bf16ae1ab7172133fe3c6b4506a75f86d314f ......
	 orig commit -> 4c982482341c64f55daf69b6caa5a2bcd9b43824 ......
checking 76dbabb38a18ff7ec20de36e9dabcadccca9ad69 ......
	 orig commit -> 4e00b339e264802851aff8e73cde7d24b57b18ce ......
checking ffc5b50a2b53d180d977b969034cad1a9fb45d8b ......
	 orig commit -> 6c1e851c4edc13a43adb3ea4044e3fc8f43ccf7d ......
checking 812b51a630005ed8d0a947bece1f430474b724bf ......
	 orig commit -> 8ef35c866f8862df074a49a93b0309725812dea8 ......
		 8ef35c866f8862df074a49a93b0309725812dea8 has problem. Fixes commit -> 6c1e851c4edc13a43adb3ea4044e3fc8f43ccf7d
commit ffc5b50a2b53d180d977b969034cad1a9fb45d8b
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Apr 23 18:51:28 2018 -0400

    random: fix possible sleeping allocation from irq context
    
    commit 6c1e851c4edc13a43adb3ea4044e3fc8f43ccf7d upstream.
    
    We can do a sleeping allocation from an irq context when CONFIG_NUMA
    is enabled.  Fix this by initializing the NUMA crng instances in a
    workqueue.
    
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot+9de458f6a5e713ee8c1a@syzkaller.appspotmail.com
    Fixes: 8ef35c866f8862df ("random: set up the NUMA crng instances...")
    Cc: stable@vger.kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ae0db58dabe5463dcbcce095e83177536ed22d6a ......
	 orig commit -> 22be37acce25d66ecf6403fc8f44df9c5ded2372 ......
checking b39430ea068797bb45b72429db3743064280b1be ......
	 orig commit -> 7dac4a1726a9c64a517d595c40e95e2d0d135f6f ......
		 7dac4a1726a9c64a517d595c40e95e2d0d135f6f has problem. Fixes commit -> 22be37acce25d66ecf6403fc8f44df9c5ded2372
commit ae0db58dabe5463dcbcce095e83177536ed22d6a
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Tue Apr 24 11:31:44 2018 -0400

    ext4: fix bitmap position validation
    
    commit 22be37acce25d66ecf6403fc8f44df9c5ded2372 upstream.
    
    Currently in ext4_valid_block_bitmap() we expect the bitmap to be
    positioned anywhere between 0 and s_blocksize clusters, but that's
    wrong because the bitmap can be placed anywhere in the block group. This
    causes false positives when validating bitmaps on perfectly valid file
    system layouts. Fix it by checking whether the bitmap is within the group
    boundary.
    
    The problem can be reproduced using the following
    
    mkfs -t ext3 -E stride=256 /dev/vdb1
    mount /dev/vdb1 /mnt/test
    cd /mnt/test
    wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.16.3.tar.xz
    tar xf linux-4.16.3.tar.xz
    
    This will result in the warnings in the logs
    
    EXT4-fs error (device vdb1): ext4_validate_block_bitmap:399: comm tar: bg 84: block 2774529: invalid block bitmap
    
    [ Changed slightly for clarity and to not drop a overflow test -- TYT ]
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reported-by: Ilya Dryomov <idryomov@gmail.com>
    Fixes: 7dac4a1726a9 ("ext4: add validity checks for bitmap block numbers")
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 55cc3bb0a6c7da92dd1332cc8e1651dc2be89bfc ......
	 orig commit -> 7ef79ad52136712172eb0525bf0b462516bf2f93 ......
checking 4a3674acbf8b076bb42b68f5d95f0877acabf210 ......
	 orig commit -> b2569260d55228b617bd82aba6d0db2faeeb4116 ......
checking 1a538cb0879d8646437836d540b6e952d9103f63 ......
	 orig commit -> 349fa7d6e1935f49bf4161c4900711b2989180a9 ......

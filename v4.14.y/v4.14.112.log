Check from v4.14.112 to v4.14.113
Commit count: 93
checking 68d7a45eec101bc1550294c0e675a490c047b2e5 ......
checking 76da4272779ab127acdaa9f4aa799cd7e90a8b3f ......
	 orig commit -> 27da0d2ef998e222a876c0cec72aa7829a626266 ......
checking 1e4bc57ecf60a1240e4cee2c048dedd1a10d4e32 ......
checking 5661213956662f592979925eab1e4dfff955ba05 ......
checking 03f11a51a196a9aadc20a70a73825a811a726218 ......
checking a042c21a2341979614a2b48d1ec46de5301d3f78 ......
	 orig commit -> 3612af783cf52c74a031a2f11b82247b2599d3cd ......
checking 12462c88e6e281cd136ae7c93e85fadfcf20722f ......
	 orig commit -> 0803278b0b4d8eeb2b461fb698785df65a725d9e ......
checking 0ed998d17cd421da18334745af7aee246abe4c70 ......
	 orig commit -> 9d5564ddcf2a0f5ba3fa1c3a1f8a1b59ad309553 ......
checking 6588a490bfe1b879f11b5e74724ef53a33b68641 ......
	 orig commit -> d3bd7413e0ca40b60cf60d4003246d067cafdeda ......
		 d3bd7413e0ca40b60cf60d4003246d067cafdeda has problem. Fixes commit -> 3612af783cf52c74a031a2f11b82247b2599d3cd
commit a042c21a2341979614a2b48d1ec46de5301d3f78
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Apr 3 18:39:16 2019 +0000

    bpf: fix sanitation rewrite in case of non-pointers
    
    commit 3612af783cf52c74a031a2f11b82247b2599d3cd upstream.
    
    Marek reported that he saw an issue with the below snippet in that
    timing measurements where off when loaded as unpriv while results
    were reasonable when loaded as privileged:
    
        [...]
        uint64_t a = bpf_ktime_get_ns();
        uint64_t b = bpf_ktime_get_ns();
        uint64_t delta = b - a;
        if ((int64_t)delta > 0) {
        [...]
    
    Turns out there is a bug where a corner case is missing in the fix
    d3bd7413e0ca ("bpf: fix sanitation of alu op with pointer / scalar
    type from different paths"), namely fixup_bpf_calls() only checks
    whether aux has a non-zero alu_state, but it also needs to test for
    the case of BPF_ALU_NON_POINTER since in both occasions we need to
    skip the masking rewrite (as there is nothing to mask).
    
    Fixes: d3bd7413e0ca ("bpf: fix sanitation of alu op with pointer / scalar type from different paths")
    Reported-by: Marek Majkowski <marek@cloudflare.com>
    Reported-by: Arthur Fabre <afabre@cloudflare.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/netdev/CAJPywTJqP34cK20iLM5YmUMz9KXQOdu1-+BZrGMAGgLuBWz7fg@mail.gmail.com/T/
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ae03b6b1c880a03d4771257336dc3bca156dd51b ......
	 orig commit -> 979d63d50c0c0f7bc537bf821e056cc9fe5abd38 ......
		 979d63d50c0c0f7bc537bf821e056cc9fe5abd38 has problem. Fixes commit -> 0803278b0b4d8eeb2b461fb698785df65a725d9e
d3bd7413e0ca40b60cf60d4003246d067cafdeda
commit 6588a490bfe1b879f11b5e74724ef53a33b68641
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Apr 3 18:39:13 2019 +0000

    bpf: fix sanitation of alu op with pointer / scalar type from different paths
    
    commit d3bd7413e0ca40b60cf60d4003246d067cafdeda upstream.
    
    While 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer
    arithmetic") took care of rejecting alu op on pointer when e.g. pointer
    came from two different map values with different map properties such as
    value size, Jann reported that a case was not covered yet when a given
    alu op is used in both "ptr_reg += reg" and "numeric_reg += reg" from
    different branches where we would incorrectly try to sanitize based
    on the pointer's limit. Catch this corner case and reject the program
    instead.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Vallish Vaidyeshwara <vallish@amazon.com>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 12462c88e6e281cd136ae7c93e85fadfcf20722f
Author: Xu Yu <xuyu@linux.alibaba.com>
Date:   Wed Apr 3 18:39:15 2019 +0000

    bpf: do not restore dst_reg when cur_state is freed
    
    commit 0803278b0b4d8eeb2b461fb698785df65a725d9e upstream.
    
    Syzkaller hit 'KASAN: use-after-free Write in sanitize_ptr_alu' bug.
    
    Call trace:
    
      dump_stack+0xbf/0x12e
      print_address_description+0x6a/0x280
      kasan_report+0x237/0x360
      sanitize_ptr_alu+0x85a/0x8d0
      adjust_ptr_min_max_vals+0x8f2/0x1ca0
      adjust_reg_min_max_vals+0x8ed/0x22e0
      do_check+0x1ca6/0x5d00
      bpf_check+0x9ca/0x2570
      bpf_prog_load+0xc91/0x1030
      __se_sys_bpf+0x61e/0x1f00
      do_syscall_64+0xc8/0x550
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fault injection trace:
    
      kfree+0xea/0x290
      free_func_state+0x4a/0x60
      free_verifier_state+0x61/0xe0
      push_stack+0x216/0x2f0                  <- inject failslab
      sanitize_ptr_alu+0x2b1/0x8d0
      adjust_ptr_min_max_vals+0x8f2/0x1ca0
      adjust_reg_min_max_vals+0x8ed/0x22e0
      do_check+0x1ca6/0x5d00
      bpf_check+0x9ca/0x2570
      bpf_prog_load+0xc91/0x1030
      __se_sys_bpf+0x61e/0x1f00
      do_syscall_64+0xc8/0x550
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    When kzalloc() fails in push_stack(), free_verifier_state() will free
    current verifier state. As push_stack() returns, dst_reg was restored
    if ptr_is_dst_reg is false. However, as member of the cur_state,
    dst_reg is also freed, and error occurs when dereferencing dst_reg.
    Simply fix it by testing ret of push_stack() before restoring dst_reg.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Signed-off-by: Xu Yu <xuyu@linux.alibaba.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6588a490bfe1b879f11b5e74724ef53a33b68641
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Apr 3 18:39:13 2019 +0000

    bpf: fix sanitation of alu op with pointer / scalar type from different paths
    
    commit d3bd7413e0ca40b60cf60d4003246d067cafdeda upstream.
    
    While 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer
    arithmetic") took care of rejecting alu op on pointer when e.g. pointer
    came from two different map values with different map properties such as
    value size, Jann reported that a case was not covered yet when a given
    alu op is used in both "ptr_reg += reg" and "numeric_reg += reg" from
    different branches where we would incorrectly try to sanitize based
    on the pointer's limit. Catch this corner case and reject the program
    instead.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Vallish Vaidyeshwara <vallish@amazon.com>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4b756d9f7929f035e4e18cfa36124d9ae6b49cdf ......
	 orig commit -> b7137c4eab85c1cf3d46acdde90ce1163b28c873 ......
checking 17efa65350c5a251ba7d90a56abc65205a204a03 ......
	 orig commit -> 9d7eceede769f90b66cfa06ad5b357140d5141ed ......
checking ba9d2e0cc870d1a16195c801aa18b33cd70125b9 ......
	 orig commit -> e4298d25830a866cc0f427d4bccb858e76715859 ......
checking afb711a6e8d003eead79432c026f6654ae303fcb ......
	 orig commit -> 0d6303db7970e6f56ae700fa07e11eb510cda125 ......
checking b101cf55c6da31b86ee8144ac0113b7ecfb7c06b ......
	 orig commit -> 9b73bfdd08e73231d6a90ae6db4b46b3fbf56c30 ......
checking ee282977c63d1c195ee0de6df173b0f216d14c28 ......
	 orig commit -> 144cd91c4c2bced6eb8a7e25e590f6618a11e854 ......
checking 6a42c49482db5ab565a9dabb1642ff64ae0f45b7 ......
	 orig commit -> c08435ec7f2bc8f4109401f696fd55159b4b40cb ......
checking 85614894812adb00ddd1eb3e4b18ddb995dd61c1 ......
	 orig commit -> 12a3cc8424fe1237aaeb982dec4f0914ddd22f3e ......
checking 86e5dd8cced7b1bffdae6154a1a7826ed8acf1f4 ......
	 orig commit -> 8c01c4f896aa3404af948880dcb29a2d51c833dc ......
checking 534087e6c3375562635b734345dd7a00ae53ba31 ......
	 orig commit -> 1969db47f8d0e800397abd4ee4e8d27d2b578587 ......
		 1969db47f8d0e800397abd4ee4e8d27d2b578587 has problem. Fixes commit -> 8c01c4f896aa3404af948880dcb29a2d51c833dc
commit 86e5dd8cced7b1bffdae6154a1a7826ed8acf1f4
Author: Craig Gallek <kraig@google.com>
Date:   Wed Apr 3 18:39:03 2019 +0000

    bpf: fix verifier NULL pointer dereference
    
    commit 8c01c4f896aa3404af948880dcb29a2d51c833dc upstream.
    
    do_check() can fail early without allocating env->cur_state under
    memory pressure.  Syzkaller found the stack below on the linux-next
    tree because of this.
    
      kasan: CONFIG_KASAN_INLINE enabled
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      general protection fault: 0000 [#1] SMP KASAN
      Dumping ftrace buffer:
         (ftrace buffer empty)
      Modules linked in:
      CPU: 1 PID: 27062 Comm: syz-executor5 Not tainted 4.14.0-rc7+ #106
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      task: ffff8801c2c74700 task.stack: ffff8801c3e28000
      RIP: 0010:free_verifier_state kernel/bpf/verifier.c:347 [inline]
      RIP: 0010:bpf_check+0xcf4/0x19c0 kernel/bpf/verifier.c:4533
      RSP: 0018:ffff8801c3e2f5c8 EFLAGS: 00010202
      RAX: dffffc0000000000 RBX: 00000000fffffff4 RCX: 0000000000000000
      RDX: 0000000000000070 RSI: ffffffff817d5aa9 RDI: 0000000000000380
      RBP: ffff8801c3e2f668 R08: 0000000000000000 R09: 1ffff100387c5d9f
      R10: 00000000218c4e80 R11: ffffffff85b34380 R12: ffff8801c4dc6a28
      R13: 0000000000000000 R14: ffff8801c4dc6a00 R15: ffff8801c4dc6a20
      FS:  00007f311079b700(0000) GS:ffff8801db300000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00000000004d4a24 CR3: 00000001cbcd0000 CR4: 00000000001406e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       bpf_prog_load+0xcbb/0x18e0 kernel/bpf/syscall.c:1166
       SYSC_bpf kernel/bpf/syscall.c:1690 [inline]
       SyS_bpf+0xae9/0x4620 kernel/bpf/syscall.c:1652
       entry_SYSCALL_64_fastpath+0x1f/0xbe
      RIP: 0033:0x452869
      RSP: 002b:00007f311079abe8 EFLAGS: 00000212 ORIG_RAX: 0000000000000141
      RAX: ffffffffffffffda RBX: 0000000000758020 RCX: 0000000000452869
      RDX: 0000000000000030 RSI: 0000000020168000 RDI: 0000000000000005
      RBP: 00007f311079aa20 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000212 R12: 00000000004b7550
      R13: 00007f311079ab58 R14: 00000000004b7560 R15: 0000000000000000
      Code: df 48 c1 ea 03 80 3c 02 00 0f 85 e6 0b 00 00 4d 8b 6e 20 48 b8 00 00 00 00 00 fc ff df 49 8d bd 80 03 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 b6 0b 00 00 49 8b bd 80 03 00 00 e8 d6 0c 26
      RIP: free_verifier_state kernel/bpf/verifier.c:347 [inline] RSP: ffff8801c3e2f5c8
      RIP: bpf_check+0xcf4/0x19c0 kernel/bpf/verifier.c:4533 RSP: ffff8801c3e2f5c8
      ---[ end trace c8d37f339dc64004 ]---
    
    Fixes: 638f5b90d460 ("bpf: reduce verifier memory consumption")
    Fixes: 1969db47f8d0 ("bpf: fix verifier memory leaks")
    Signed-off-by: Craig Gallek <kraig@google.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 28356c21ac32d49d15a3ea7383b0a96052d15394 ......
	 orig commit -> 638f5b90d46016372a8e3e0a434f199cc5e12b8c ......
		 638f5b90d46016372a8e3e0a434f199cc5e12b8c has problem. Fixes commit -> 12a3cc8424fe1237aaeb982dec4f0914ddd22f3e
8c01c4f896aa3404af948880dcb29a2d51c833dc
1969db47f8d0e800397abd4ee4e8d27d2b578587
commit 86e5dd8cced7b1bffdae6154a1a7826ed8acf1f4
Author: Craig Gallek <kraig@google.com>
Date:   Wed Apr 3 18:39:03 2019 +0000

    bpf: fix verifier NULL pointer dereference
    
    commit 8c01c4f896aa3404af948880dcb29a2d51c833dc upstream.
    
    do_check() can fail early without allocating env->cur_state under
    memory pressure.  Syzkaller found the stack below on the linux-next
    tree because of this.
    
      kasan: CONFIG_KASAN_INLINE enabled
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      general protection fault: 0000 [#1] SMP KASAN
      Dumping ftrace buffer:
         (ftrace buffer empty)
      Modules linked in:
      CPU: 1 PID: 27062 Comm: syz-executor5 Not tainted 4.14.0-rc7+ #106
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      task: ffff8801c2c74700 task.stack: ffff8801c3e28000
      RIP: 0010:free_verifier_state kernel/bpf/verifier.c:347 [inline]
      RIP: 0010:bpf_check+0xcf4/0x19c0 kernel/bpf/verifier.c:4533
      RSP: 0018:ffff8801c3e2f5c8 EFLAGS: 00010202
      RAX: dffffc0000000000 RBX: 00000000fffffff4 RCX: 0000000000000000
      RDX: 0000000000000070 RSI: ffffffff817d5aa9 RDI: 0000000000000380
      RBP: ffff8801c3e2f668 R08: 0000000000000000 R09: 1ffff100387c5d9f
      R10: 00000000218c4e80 R11: ffffffff85b34380 R12: ffff8801c4dc6a28
      R13: 0000000000000000 R14: ffff8801c4dc6a00 R15: ffff8801c4dc6a20
      FS:  00007f311079b700(0000) GS:ffff8801db300000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00000000004d4a24 CR3: 00000001cbcd0000 CR4: 00000000001406e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       bpf_prog_load+0xcbb/0x18e0 kernel/bpf/syscall.c:1166
       SYSC_bpf kernel/bpf/syscall.c:1690 [inline]
       SyS_bpf+0xae9/0x4620 kernel/bpf/syscall.c:1652
       entry_SYSCALL_64_fastpath+0x1f/0xbe
      RIP: 0033:0x452869
      RSP: 002b:00007f311079abe8 EFLAGS: 00000212 ORIG_RAX: 0000000000000141
      RAX: ffffffffffffffda RBX: 0000000000758020 RCX: 0000000000452869
      RDX: 0000000000000030 RSI: 0000000020168000 RDI: 0000000000000005
      RBP: 00007f311079aa20 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000212 R12: 00000000004b7550
      R13: 00007f311079ab58 R14: 00000000004b7560 R15: 0000000000000000
      Code: df 48 c1 ea 03 80 3c 02 00 0f 85 e6 0b 00 00 4d 8b 6e 20 48 b8 00 00 00 00 00 fc ff df 49 8d bd 80 03 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 b6 0b 00 00 49 8b bd 80 03 00 00 e8 d6 0c 26
      RIP: free_verifier_state kernel/bpf/verifier.c:347 [inline] RSP: ffff8801c3e2f5c8
      RIP: bpf_check+0xcf4/0x19c0 kernel/bpf/verifier.c:4533 RSP: ffff8801c3e2f5c8
      ---[ end trace c8d37f339dc64004 ]---
    
    Fixes: 638f5b90d460 ("bpf: reduce verifier memory consumption")
    Fixes: 1969db47f8d0 ("bpf: fix verifier memory leaks")
    Signed-off-by: Craig Gallek <kraig@google.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 534087e6c3375562635b734345dd7a00ae53ba31
Author: Alexei Starovoitov <ast@fb.com>
Date:   Wed Apr 3 18:39:02 2019 +0000

    bpf: fix verifier memory leaks
    
    commit 1969db47f8d0e800397abd4ee4e8d27d2b578587 upstream.
    
    fix verifier memory leaks
    
    Fixes: 638f5b90d460 ("bpf: reduce verifier memory consumption")
    Signed-off-by: Alexei Starovoitov <ast@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 85614894812adb00ddd1eb3e4b18ddb995dd61c1
Author: Alexei Starovoitov <ast@fb.com>
Date:   Wed Apr 3 18:39:04 2019 +0000

    bpf: fix stack state printing in verifier log
    
    commit 12a3cc8424fe1237aaeb982dec4f0914ddd22f3e upstream.
    
    fix incorrect stack state prints in print_verifier_state()
    
    Fixes: 638f5b90d460 ("bpf: reduce verifier memory consumption")
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86e5dd8cced7b1bffdae6154a1a7826ed8acf1f4
Author: Craig Gallek <kraig@google.com>
Date:   Wed Apr 3 18:39:03 2019 +0000

    bpf: fix verifier NULL pointer dereference
    
    commit 8c01c4f896aa3404af948880dcb29a2d51c833dc upstream.
    
    do_check() can fail early without allocating env->cur_state under
    memory pressure.  Syzkaller found the stack below on the linux-next
    tree because of this.
    
      kasan: CONFIG_KASAN_INLINE enabled
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      general protection fault: 0000 [#1] SMP KASAN
      Dumping ftrace buffer:
         (ftrace buffer empty)
      Modules linked in:
      CPU: 1 PID: 27062 Comm: syz-executor5 Not tainted 4.14.0-rc7+ #106
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      task: ffff8801c2c74700 task.stack: ffff8801c3e28000
      RIP: 0010:free_verifier_state kernel/bpf/verifier.c:347 [inline]
      RIP: 0010:bpf_check+0xcf4/0x19c0 kernel/bpf/verifier.c:4533
      RSP: 0018:ffff8801c3e2f5c8 EFLAGS: 00010202
      RAX: dffffc0000000000 RBX: 00000000fffffff4 RCX: 0000000000000000
      RDX: 0000000000000070 RSI: ffffffff817d5aa9 RDI: 0000000000000380
      RBP: ffff8801c3e2f668 R08: 0000000000000000 R09: 1ffff100387c5d9f
      R10: 00000000218c4e80 R11: ffffffff85b34380 R12: ffff8801c4dc6a28
      R13: 0000000000000000 R14: ffff8801c4dc6a00 R15: ffff8801c4dc6a20
      FS:  00007f311079b700(0000) GS:ffff8801db300000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00000000004d4a24 CR3: 00000001cbcd0000 CR4: 00000000001406e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       bpf_prog_load+0xcbb/0x18e0 kernel/bpf/syscall.c:1166
       SYSC_bpf kernel/bpf/syscall.c:1690 [inline]
       SyS_bpf+0xae9/0x4620 kernel/bpf/syscall.c:1652
       entry_SYSCALL_64_fastpath+0x1f/0xbe
      RIP: 0033:0x452869
      RSP: 002b:00007f311079abe8 EFLAGS: 00000212 ORIG_RAX: 0000000000000141
      RAX: ffffffffffffffda RBX: 0000000000758020 RCX: 0000000000452869
      RDX: 0000000000000030 RSI: 0000000020168000 RDI: 0000000000000005
      RBP: 00007f311079aa20 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000212 R12: 00000000004b7550
      R13: 00007f311079ab58 R14: 00000000004b7560 R15: 0000000000000000
      Code: df 48 c1 ea 03 80 3c 02 00 0f 85 e6 0b 00 00 4d 8b 6e 20 48 b8 00 00 00 00 00 fc ff df 49 8d bd 80 03 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 b6 0b 00 00 49 8b bd 80 03 00 00 e8 d6 0c 26
      RIP: free_verifier_state kernel/bpf/verifier.c:347 [inline] RSP: ffff8801c3e2f5c8
      RIP: bpf_check+0xcf4/0x19c0 kernel/bpf/verifier.c:4533 RSP: ffff8801c3e2f5c8
      ---[ end trace c8d37f339dc64004 ]---
    
    Fixes: 638f5b90d460 ("bpf: reduce verifier memory consumption")
    Fixes: 1969db47f8d0 ("bpf: fix verifier memory leaks")
    Signed-off-by: Craig Gallek <kraig@google.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 534087e6c3375562635b734345dd7a00ae53ba31
Author: Alexei Starovoitov <ast@fb.com>
Date:   Wed Apr 3 18:39:02 2019 +0000

    bpf: fix verifier memory leaks
    
    commit 1969db47f8d0e800397abd4ee4e8d27d2b578587 upstream.
    
    fix verifier memory leaks
    
    Fixes: 638f5b90d460 ("bpf: reduce verifier memory consumption")
    Signed-off-by: Alexei Starovoitov <ast@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8991f1af962d939c3f3456990f5a826c3aa628fd ......
	 orig commit -> 432061b3da64e488be3403124a72a9250bbe96d4 ......
checking 02c2de9be3d031d5c0ee953ec342e5e0cabb3ed5 ......
	 orig commit -> 1da6c4d9140cb7c13e87667dc4e1488d6c8fc10f ......
checking c43e2bdd14941e969dac515efadc3d379f333fdf ......
	 orig commit -> a4046c06be50a4f01d435aa7fe57514818e6cc82 ......
checking 6dc75ccba5680b67a4bcc72e96ec851326e66690 ......
	 orig commit -> cdc94a37493135e355dfc0b0e086d84e3eadb50d ......
checking 0ba1fa56351e6e9c2f8db4ffc823cb7057e4ea82 ......
	 orig commit -> 6377f787aeb945cae7abbb6474798de129e1f3ac ......
		 6377f787aeb945cae7abbb6474798de129e1f3ac has problem. Fixes commit -> 27da0d2ef998e222a876c0cec72aa7829a626266
commit 76da4272779ab127acdaa9f4aa799cd7e90a8b3f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Mar 6 11:52:36 2019 +0100

    appletalk: Fix compile regression
    
    [ Upstream commit 27da0d2ef998e222a876c0cec72aa7829a626266 ]
    
    A bugfix just broke compilation of appletalk when CONFIG_SYSCTL
    is disabled:
    
    In file included from net/appletalk/ddp.c:65:
    net/appletalk/ddp.c: In function 'atalk_init':
    include/linux/atalk.h:164:34: error: expected expression before 'do'
     #define atalk_register_sysctl()  do { } while(0)
                                      ^~
    net/appletalk/ddp.c:1934:7: note: in expansion of macro 'atalk_register_sysctl'
      rc = atalk_register_sysctl();
    
    This is easier to avoid by using conventional inline functions
    as stubs rather than macros. The header already has inline
    functions for other purposes, so I'm changing over all the
    macros for consistency.
    
    Fixes: 6377f787aeb9 ("appletalk: Fix use-after-free in atalk_proc_exit")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 86c7f76a8930556ec515095363ddaa0604486cdd ......
	 orig commit -> cac734c2dbd2514f14c8c6a17caba1990d83bf1d ......
checking 5e3f6ba82ed450d62ac7910b0fe026d31eb2aa5b ......
	 orig commit -> 143c2a89e0e5fda6c6fd08d7bc1126438c19ae90 ......
checking 03e67ed367d4763f0ff9a8fc80b8a880df6c666e ......
	 orig commit -> fc782242749fa4235592854fafe1a1297583c1fb ......
checking a68ee104ae03e4309f40de3443923773c97411db ......
	 orig commit -> a0f890aba2be33377f4eb24e13633c4a76a68f38 ......
checking 3e3adeb25d440147ae00eefbe9d62cff56dcc7c6 ......
	 orig commit -> b6a3e1475b0220378ad32bdf4d8692f058b1fc03 ......
checking 56828309878bae0d8ff5e9851dca080cd7eea224 ......
	 orig commit -> c34a83820f59bb275e5f2d55cd5ea99c64f6ef23 ......
checking 61bea6ad5c99a3d1adb28b17d25b21d71998b65b ......
	 orig commit -> 46f3ceaffa81e846677bca8668e0ad40e643cffd ......
checking f2778b3522da89d5fd4a95aa95dc6d01a45a3710 ......
	 orig commit -> 59a12205d3c32aee4c13ca36889fdf7cfed31126 ......
checking b035faf50706d45ce8a5967b4efc1ccf5559f655 ......
	 orig commit -> 4c411157a42f122051ae3469bee0b5cabe89e139 ......
checking 201aee309a2964a3f8f8e82a57b7e29305c4b610 ......
	 orig commit -> b6e1fd17a38bd1d97c11d69fd3207b3ef9bfa4b3 ......
checking e2f0e69fd9969b9940c3d8c48316dbc5ec16dd99 ......
	 orig commit -> cffaaf0c816238c45cd2d06913476c83eb50f682 ......
checking 29b56343c85169c42e31fbf3b0facdb01d034aa1 ......
	 orig commit -> c64316502008064c158fa40cc250665e461b0f2a ......
checking 92562a9fc5dfab7dc2102ca81d96a067d104cccc ......
	 orig commit -> 69216a545cf81b2b32d01948f7039315abaf75a0 ......
checking 507f2f17e044b3efc6516ad0ae66fb244752c569 ......
	 orig commit -> a1c6ca3c6de763459a6e93b644ec6518c890ba1c ......
checking 1d41cd12307f96ebefbd856cfe26719c23d8d8ec ......
	 orig commit -> 3b7960caceafdfc2cdfe2850487f8d091eb41144 ......
checking 82017e26e51596ee577171a33f357377ec6513b5 ......
	 orig commit -> fe0640eb30b7da261ae84d252ed9ed3c7e68dfd8 ......
checking 05e788500b46cb3c45231ea51a3e4b36c2ccd3c0 ......
	 orig commit -> bd18bffca35397214ae68d85cf7203aca25c3c1d ......
checking 00254adf3db21a6cfb6d7bdac367e774662198f7 ......
	 orig commit -> ca1721c5bee77105829cbd7baab8ee0eab85b06d ......
checking 0dd663753b0afcc47c9c6b93e36bb62530de68be ......
	 orig commit -> e0a2e73e501c77037c8756137e87b12c7c3c9793 ......
checking ef9f432612e56651d2aa2984763ff1ba69621e82 ......
	 orig commit -> 6862fdf2201ab67cd962dbf0643d37db909f4860 ......
checking e058a6e56e38f90d649fbedb8bfaebb82aea46eb ......
	 orig commit -> 9ee3e06610fdb8a601cde59c92089fb6c1deb4aa ......
checking fec306b2ef690030a799d1643a2216c4df8d02ce ......
	 orig commit -> 4add7104919f9e94e0db03e234caeadbfcc02ea9 ......
checking 8b8fa9879d44d9b488ebbadee2ca1da4ac76e033 ......
	 orig commit -> cd24e457fd8b2d087d9236700c8d2957054598bf ......
checking 1fa5208a30e645355b8946bf8645710381d4e735 ......
	 orig commit -> 4bb1ce2350a598502b23088b169e16b43d4bc639 ......
checking edbcdafac3e44346b8f8321a03b5434c26cddb80 ......
	 orig commit -> 0d704967f4a49cc2212350b3e4a8231f8b4283ed ......
checking 40e8d128f5ed918bc9f19708e1320efea1c0c24a ......
	 orig commit -> 042be0f849e5fc24116d0afecfaf926eed5cac63 ......
checking 85a2ad155826deef3cab4f5c704c620aeba3292b ......
	 orig commit -> 5e172f75e51e3de1b4274146d9b990f803cb5c2a ......
checking fdf0c593ec3e7924952f195933f676e53b319302 ......
	 orig commit -> 2803cf4379ed252894f046cb8812a48db35294e3 ......
checking ad78e2e057ab8d914a2b5e3e6acf29c3c8a428a3 ......
	 orig commit -> 4c62764d0fc21a34ffc44eec1210038c3a2e4473 ......
checking 15fbb1fe07a338d9228524873bc881813b83e834 ......
	 orig commit -> 9ce3ebe973bf4073426f35f282c6b955ed802765 ......
checking 6fee657dfd593ad45c762fa2613c0c14406188ba ......
	 orig commit -> 18915b5873f07e5030e6fb108a050fa7c71c59fb ......
checking 329f34e8cddf66b21e3ad0082fcb410fdc5e61ac ......
	 orig commit -> 85f9987b236cf46e06ffdb5c225cf1f3c0acb789 ......
checking 727344f1bb2d517b921cdf2e1e2508c4c4de2104 ......
	 orig commit -> e898e69d6b9475bf123f99b3c5d1a67bb7cb2361 ......
checking 486d82206c3bfd21f9ea4a3b6bca8ca7c9060285 ......
	 orig commit -> 5bb71fc790a88d063507dc5d445ab8b14e845591 ......
checking 19525f7b031f1018a74ed3760b81a4f0f3940fa3 ......
	 orig commit -> 909e9c9c428376e2a43d178ed4b0a2d5ba9cb7d3 ......
checking 20afb90f730982882e65b01fb8bdfe83914339c5 ......
	 orig commit -> 18fb053f9b827bd98cfc64f2a35df8ab19745a1d ......
checking c65812de901537e6dec45a66fd86f4f535925644 ......
	 orig commit -> 2e84f116afca3719c9d0a1a78b47b48f75fd5724 ......
checking 04260753ba278303c9a9a551b56867cb6590d0a7 ......
	 orig commit -> fca269f201a8d9985c0a31fb60b15d4eb57cef80 ......
checking b1930a27c81bf14be77e5c30401e1f50345a3e99 ......
	 orig commit -> d982b33133284fa7efa0e52ae06b88f9be3ea764 ......
checking 4c66a273f6b3829a641017084b029a58a5559493 ......
	 orig commit -> f97a8991d3b998e518f56794d879f645964de649 ......
checking a0898f576b7a0ca83ca35faf4e25ab1d1198e5ab ......
	 orig commit -> 93faa52e8371f0291ee1ff4994edae2b336b6233 ......
checking 952d449dbf3e753c009e04f55fe31dcc3b27a9b9 ......
	 orig commit -> 42dfa451d825a2ad15793c476f73e7bbc0f9d312 ......
checking ff22178b282675fa3542763f8e67cbb40f3f9bfd ......
	 orig commit -> cb6186aeffda4d27e56066c79e9579e7831541d3 ......
checking dac5fedfc9070bf1fcb14b0dd9ef812aa5c5c2a6 ......
	 orig commit -> 70c819e4bf1c5f492768b399d898d458ccdad2b6 ......
checking 801a59019383eefb821b66b22ca50a11636045a2 ......
	 orig commit -> 8bde8516893da5a5fdf06121f74d11b52ab92df5 ......
checking b820793ac523ba28cda45f86fbc031a06feaf720 ......
	 orig commit -> 54569ba4b06d5baedae4614bde33a25a191473ba ......
checking 0d85f280c1b3bc1747a8b83e9f764086db8a69fc ......
	 orig commit -> 9b40dff7ba3caaf0d1919f98e136fa3400bd34aa ......
checking 96f74822311f010c50f339e85d87c190419e8ee0 ......
	 orig commit -> 39df730b09774bd860e39ea208a48d15078236cb ......
checking 182d26496e045247939c8697c6448a4830f0dff6 ......
	 orig commit -> 2a95496634a017c19641f26f00907af75b962f01 ......
checking 3fb2d0a276294a7625216395bc329e917e0643e2 ......
	 orig commit -> a3151724437f54076cc10bc02b1c4f0003ae36cd ......
checking 58ad2f1b020a114d0ecdcc77fb4ff6766ad0c53e ......
	 orig commit -> 165aa2bfb42904b1bec4bf2fa257c8c603c14a06 ......
checking f1e062e8ce7934e2f4a80e53b2ca2fbbf71ce24d ......
	 orig commit -> e925b5be5751f6a7286bbd9a4cbbc4ac90cc5fa6 ......
checking 637f86d25097b565a5c9a17094bc4d06df3dc1dc ......
	 orig commit -> 396ee4d0cd52c13b3f6421b8d324d65da5e7e409 ......
checking f37079c7dc6aaa6fd392c1f5426f77c71361f15b ......
	 orig commit -> 16fc8eca1975358111dbd7ce65e4ce42d1a848fb ......
checking 6aa84e8a9fcba8aee8a1437bb4ab134cdc256d4a ......
	 orig commit -> 35122495a8c6683e863acf7b05a7036b2be64c7a ......
checking 643deb59cee632f326f1865dc3b5ea8e91ff8c35 ......
	 orig commit -> aa36e3616532f82a920b5ebf4e059fbafae63d88 ......
checking 4467b4fdad62644814f13417b6fd54546db6a7ae ......
	 orig commit -> b4748e7ab731e436cf5db4786358ada5dd2db6dd ......
checking eebec30d6b7ae4d60b1002e4dc31ffec38a0d4a5 ......
	 orig commit -> 9ce58dd7d9da3ca0d7cb8c9568f1c6f4746da65a ......
checking e04dc07f620a11d73b201cb4d7bb4712c607856d ......
	 orig commit -> 587443e7773e150ae29e643ee8f41a1eed226565 ......
checking bfd5834e38886031625fe39dc6f3907b9c382729 ......
	 orig commit -> 41c8d0adf3c4df1867d98cee4a2c4531352a33ad ......
checking b042245be24b0e663bcf45f0ae77910bb3f11829 ......
	 orig commit -> dcd0feac9bab901d5739de51b3f69840851f8919 ......
checking 7d831a0512987fc2af6b3a23ed44a4e96b79f26a ......
	 orig commit -> 6ade657d6125ec3ec07f95fa51e28138aef6208f ......
checking ce1bdbed2097bffb0cabc8381f3727f8698ff991 ......
	 orig commit -> 6c7328400e0488f7d49e19e02290ba343b6811b2 ......
checking 7a82651d06cbaf2447f4f1193f4a7b325c1ab53a ......
	 orig commit -> d64264d6218e6892edd832dc3a5a5857c2856c53 ......
checking 103eb70cf4eb7fb263d1e337811217e2e4c53731 ......
	 orig commit -> d9c1bb2f6a2157b38e8eb63af437cb22701d31ee ......
checking 2d6453a3e9e08b40c93b1049a591c6caa5dfa06a ......
	 orig commit -> 0728aeb7ead99a9b0dac2f3c92b3752b4e02ff97 ......
checking 8232cdfd5643909f30abe17d8ad9d81459f7feae ......
	 orig commit -> edb64bca50cd736c6894cc6081d5263c007ce005 ......

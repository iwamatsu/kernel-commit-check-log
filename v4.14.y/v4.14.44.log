Check from v4.14.44 to v4.14.45
Commit count: 493
checking 2c2b15bb0e8872fe2914785ccb276c304417911d ......
checking cd95b6e707122f33bcf85c39c8aedd356de10412 ......
	 orig commit -> 91ba9f28a3de97761c2b5fd5df5d88421268e507 ......
checking 829484eb3e003a98a2973acbb90babd898e8ca96 ......
	 orig commit -> 1e0ce03bf142454f38a5fc050bf4fd698d2d36d8 ......
checking 39958037723af522b275f5d3a72f5778d893f5aa ......
	 orig commit -> 9b3e4207661e67f04c72af15e29f74cd944f5964 ......
checking bd36ea57d6d58041180c4f7d2c2bf5194c26845d ......
	 orig commit -> a7aa75a2a7dba32594291a71c3704000a2fd7089 ......
checking bd1a6e338c1b644c52b1d6196f43cca87334a399 ......
	 orig commit -> 30966861a7a2051457be8c49466887d78cc47e97 ......
checking 36016bab698b7e604cd25ce6a8fd68951605c687 ......
	 orig commit -> d4b78db6ac3e084e2bdc57d5518bd247c727f396 ......
checking 105479a0278c0054fda5887410016cb3105578f8 ......
	 orig commit -> 2bada7ac1fdcbf79a9689bd2ff65fa515ca7a31f ......
checking 0b7761ec49e4e4064fe756c0c2133b5621f2d6c0 ......
	 orig commit -> 1fa51a650e1deb50410677f1bd6c0ce17aa48a49 ......
checking be5f9b150b64da61e2819f477c99eab54e31e35f ......
	 orig commit -> 71df179363a5a733a8932e9afb869760d7559383 ......
checking 253aa8296a5e517313b4afb1f6b5cad80a9208d1 ......
	 orig commit -> 7981190fb5dd710dea08c2613cee3d05e795ca5e ......
checking ffc1f3ac180c37699b79965e04613e12b1ce31c0 ......
	 orig commit -> 8525d04ba8a6a9ecfa4bd619c988ca873a5fc2a4 ......
checking e5b5d9be211e11acd6602b33a1fecea9f78cb850 ......
	 orig commit -> 796ceb9269626afaed3b4955c40d2c3d7a8c5d01 ......
checking ce7da8b88f6a5602743337f4f08f4009591c4cc7 ......
	 orig commit -> 213d7f94775322ba44e0bbb55ec6946e9de88cea ......
checking b9cd90c15ea726247cec2097e67008e513d1ae03 ......
	 orig commit -> ddd0010392d9cbcb95b53d11b7cafc67b373ab56 ......
checking 6ce50075628803a1f248b19ea06a258a4ae48b35 ......
	 orig commit -> fdf7c49c200d1b9909e2204cec5bd68b48605c71 ......
checking dac66c47df6ce7659a585d0ee2090a4ed06ca439 ......
	 orig commit -> e3ebaa465136ecfedf9c6f4671df02bf625f8125 ......
checking fb872eb1131da285ce86d5390b34a912a90f9501 ......
	 orig commit -> ab6e9a99345131cd8e54268d1d0dc04a33f7ed11 ......
checking da5329644ad62458fa1eef515afb262848fdb462 ......
	 orig commit -> b40982e8468b46b8f7f5bba5a7e541ec04a29d7d ......
checking 4489f688fc3b6e1af1856f5fd0bcc1973cea8ba1 ......
	 orig commit -> 0f19a038afdc592176c9a302f0d08be6a68ad74a ......
checking 39478b7590d05498a6720c896ea773ca7f93f7d9 ......
	 orig commit -> bee3204ec3c49f6f53add9c3962c9012a5c036fa ......
checking 4c27990631f1e0f571ae02a84dde68410961b410 ......
	 orig commit -> 57de50af162b67612da99207b061ade3239e57db ......
checking 8755c4061ea93e6cbb01f9b863bbbe723ce48c38 ......
	 orig commit -> db6775ca6e0353d2618ca7d5e210fc36ad43bbd4 ......
checking f0cf2575cd478bb6b1230db1bba9978927116491 ......
	 orig commit -> 3021efb440d02bf5b952b6d151c7ffee9bdd49fe ......
checking 80300e879f9efaf723e7ef07a013271a8933f5f9 ......
	 orig commit -> b418c4609d5052d174668ad6d13efe023c45c595 ......
checking 46d8696c613b4256f625ffd0cbeb88574e3c7033 ......
	 orig commit -> 3caa973b7a260e7a2a69edc94c300ab9c65148c3 ......
checking 162af93fa251958812ebbc5cc622acecda1d0547 ......
	 orig commit -> 13138de01400762f706c5e956e70660770d61962 ......
checking 4a856adf28238ec7d4b0b990ae886c64fd4a7090 ......
	 orig commit -> 23138ead270045f1b3e912e667967b6094244999 ......
checking a548ba4de32eaabeba42ebd2ba918c3fc68ea101 ......
	 orig commit -> dbdd0f58fd2cdde5cf945c9da67a2d52d32ba550 ......
checking 7d5ab9bf4f3404159ba3978c81a823e49b925dd0 ......
	 orig commit -> 1a012cb2569f2031b3636232c3ab21c20c92d281 ......
checking c10dc67e720b583237c5c80aa409d0894cae2e06 ......
	 orig commit -> 79c81facdc0b43b1cef37b8d5689a8c8b78f8be0 ......
checking 13b520688d2c84e6691203a40f3fcef212845494 ......
	 orig commit -> dde5953f05a89eb63a0d666ffe51d447b2ac3e05 ......
checking 72662ff1cf8500e2b44fd1dba78aa79593012c3e ......
	 orig commit -> a94cf2a614f8bc5b2b33c708626ce695bf71e424 ......
checking 83e698e4684afb087f16b963a870c13e81166802 ......
	 orig commit -> 6704a3abf4cf4181a1ee64f5db4969347b88ca1d ......
checking 504583768092571e828549063d427dc5fcc2e952 ......
	 orig commit -> 116e5258e4115aca0c64ac0bf40ded3b353ed626 ......
checking cb808972d770288c9072a9144d032ae7d3585720 ......
	 orig commit -> 832e4e1f76b8a84991e9db56fdcef1ebce839b8b ......
checking 5197a9786fee00333e22866a6a7d3ba14d32024d ......
	 orig commit -> 120d75ecf043044554abbba8507f6d22e4715beb ......
checking 602234ea4466443e3b7e6272a806973e7617897c ......
	 orig commit -> b24b6478e65f140610ab1ffaadc7bc6bf0be8aad ......
checking 8a6be540377410b5f17f53612674112bc93d80b0 ......
	 orig commit -> 15d2ee42a3087089e73ad52fd8c1b37ab496b87c ......
checking a3d4c34cdea992e137bed4cf66c03e2db6a324ec ......
	 orig commit -> a6b25da5e7ba212af5826a662e6a035a79bffabd ......
checking 957094fcc06f2a3f519c13ae8644c0ee9527139f ......
	 orig commit -> dbf797655a43c6318ebb90b899e6583fcadc6472 ......
checking 230d616f58a90c6d08a0422324096840f96775f8 ......
	 orig commit -> 9f0178fb67699992d38601cb923b434f9986dd68 ......
checking de9054cdc8d015c447c5c70124147a2bd310a1c8 ......
	 orig commit -> f4aa1bd5b4fc80f5f4ecd184caad832fd62c25f7 ......
checking ee6f703020ab473b72298fc63b61060f8c8bd1c2 ......
	 orig commit -> 215003b4ae1d47035092fef73b6a22aa82037091 ......
checking 909474cd384cb206f33461fbd18089cf170533f8 ......
	 orig commit -> 48d163b1aa6e7f650c0b7a4f9c61c387a6def868 ......
checking 7efeaf6d5193ce2d45d736a47b431a2f6202ba05 ......
	 orig commit -> 9851bc77e62499957567e7c39a5beba7d6de6296 ......
checking fe2fc07d2a31f1dbdca0f601ca52d9fdb9a6758f ......
	 orig commit -> 7e065fb9ccce89fe667fdbd9a177eaec59a359fc ......
checking 72678f7a2922a719610e076eaf9f97ddc5481d7a ......
	 orig commit -> b89405b6102fcc3746f43697b826028caa94c823 ......
checking 39c655c5edfe629fdef92efaecd85a05b958f9a2 ......
	 orig commit -> 326ed382256475aa4b8b7eae8a2f60689fd25e78 ......
checking 259cdaff0e91cc610cde869948bf0b90eebac11f ......
	 orig commit -> 3c829f47e33eb0398a9a14e357a05199a7be0277 ......
checking 87337cb5663c31c17edaeff1d6871d335b0d96a5 ......
	 orig commit -> e8588e268509292550634d9a35f2723a207683b2 ......
		 e8588e268509292550634d9a35f2723a207683b2 has problem. Fixes commit -> 56f772279a762984f6e9ebbf24a7c829faba5712
commit 1bee5f3d9530c5e4153c017190994b9a6b3144b7
Author: Govindarajulu Varadarajan <gvaradar@cisco.com>
Date:   Mon Jun 18 10:01:05 2018 -0700

    enic: do not overwrite error code
    
    [ Upstream commit 56f772279a762984f6e9ebbf24a7c829faba5712 ]
    
    In failure path, we overwrite err to what vnic_rq_disable() returns. In
    case it returns 0, enic_open() returns success in case of error.
    
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Fixes: e8588e268509 ("enic: enable rq before updating rq descriptors")
    Signed-off-by: Govindarajulu Varadarajan <gvaradar@cisco.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking b3b26307208e93182df45231ef94483902cca43a ......
	 orig commit -> 3e081628d510b2ddbe493371d9c574d9275da17e ......
checking e41de468a6f4f25895242ada6d95240a3ce968d8 ......
	 orig commit -> a3ca831249ca8c4c226e4ceafee04e280152e59d ......
checking a64948842d00b72ee19854ff96dfb77e6aad4c34 ......
	 orig commit -> 66231ad3e2886ba99fbf440cea44cab547e5163f ......
checking f0078d2068b275ddd056fb75aeb2c3a788f09a50 ......
	 orig commit -> 1330fc35327f3ecdfa1aa645e7321ced7349b2cd ......
checking f85634b7b6d0e799767eed355aa48f134d76f5f9 ......
	 orig commit -> 2e7a66a8b5ebf1b04a866e5d7c981640f7f62934 ......
checking 3b64e1cf6b929e23e7949c55637f241bbad3e48c ......
	 orig commit -> f8ba22a39e985c93e278709b1d5f20857a26b49b ......
checking 10626a0c20272741e11bfc59ccef161248bfb8fc ......
	 orig commit -> 2e2c177ca84aff092c3c96714b0f6a12900f3946 ......
checking b1ebc21c146b9a4b72caf712137f940b566fa90c ......
	 orig commit -> a4781c2a74b249cad814ceea7272997bbd20051e ......
checking 1fadfed839130ee27bc058caff3912547e86a7b5 ......
	 orig commit -> 0a5169add90e43ab45ab1ba34223b8583fcaf675 ......
checking 5e54596b33f60c64b404d4603227ba4872ea835e ......
	 orig commit -> 628df9dc5ad886b0a9b33c75a7b09710eb859ca1 ......
checking c78e4a47bc4d817fd5138ee94e07528fd25460ed ......
	 orig commit -> 174d1232ebc84fcde8f5889d1171c9c7e74a10a7 ......
checking c1dab7872b32f08a97d4d2ea740153bfc75939a7 ......
	 orig commit -> 90c29ed7627b6b4aeb603ee197650173c8434512 ......
checking 0a3b66b55a95ab8a9e2d7a5f6a5ebe2abb1f8fba ......
	 orig commit -> e723795c702b52cfceb3bb3faa63059eb4658313 ......
checking b9e852513fcaefc7043443857e1558d71235692e ......
	 orig commit -> d31fc13fdcb20e1c317f9a7dd6273c18fbd58308 ......
checking 359769ca6d1676ea0afbb5fed8bf49aab6215da4 ......
	 orig commit -> f605cfca8c39ffa2b98c06d2b9f30ba64f1e54e3 ......
checking ecaa7bd342adaad40ffcf62335d98abec3ecea0e ......
	 orig commit -> 6b31a2fa1e8f7bc6c2a474b4a12dad7a145cf83d ......
checking e6e5de32470b8498221640d448ae316560b43a34 ......
	 orig commit -> 2bbea6e117357d17842114c65e9a9cf2d13ae8a3 ......
checking 017f2ee2067594f30f14a773eb174027535cb729 ......
	 orig commit -> 82d71ed0277efc45360828af8c4e4d40e1b45352 ......
checking 8f8ebc0ba07c2412b1752ceb5c7bea2b7a4b6f24 ......
	 orig commit -> ecb29abd4cb0670c616fb563a078f25d777ce530 ......
checking afcbcb432e84ce9facebc8e238b89b2b8d810e97 ......
	 orig commit -> a46f8cd696624ef757be0311eb28f119c36778e8 ......
checking 127b06ef520d91b6f575d4380f0fa152aee4f0f9 ......
	 orig commit -> 5651e5e094591f479adad5830ac1bc45196a39b3 ......
checking ede5dd7822c6574a3e9ab0bb0d57691054671b40 ......
	 orig commit -> 9e5b127d6f33468143d90c8a45ca12410e4c3fa7 ......
checking 8ba9b0300c18e3d3863c3173230c297c14c80191 ......
	 orig commit -> 66ec32fc7cd116dab5c02603ea8ec28ff92da3b5 ......
checking ed6244e8b280d87f71592a81b00be75502df02b7 ......
	 orig commit -> 33801b94741d6c3be9713c10aa627477216c21e2 ......
checking 82e93a83598be971a1d426263183cea7c853e630 ......
	 orig commit -> bf617f7a92edc6bb2909db2bfa4576f50b280ee5 ......
checking fc8cf0e7aa37f5e9143a63851489013b15c9ab8c ......
	 orig commit -> cd36d7a17f9da68be9aa67185ba3ad7969934a19 ......
checking 393e472db4c85eb7f1f698569994bc60c1fc61be ......
	 orig commit -> 17cd07ae95073c298af92c1ba14ac58ce84de33b ......
checking d71b8b0d37da25e7fe4186e1c3d873a946f371a3 ......
	 orig commit -> 94322ed8e857e3b2a33cf75118051af9baaa110f ......
checking bf3a501c1dc0bac5cdf231151157f43c2f434ab1 ......
	 orig commit -> 2b74e2a9b39df40a2b489af2d24079617c61ee0e ......
checking dc81e7182747fdc01268295c58d2ba138970ecbb ......
	 orig commit -> f5246862f82f1e16bbf84cda4cddf287672b30fe ......
checking 903c66e35fb70aaa48fba43cc6af73c130b7e6ff ......
	 orig commit -> e770f6bf18182bc3af6ceec30189b6c323cbc157 ......
checking b4d7f0dae8c1b2196dda89eca2ddd90d18e6ae56 ......
	 orig commit -> 2c18107b9d58972588cd45d89b8f58d0f033c110 ......
checking 6eaf0dd1d9d50251657e76a080447b4aeab97c6a ......
	 orig commit -> f002612b9d86613bc6fde0a444e0095225f6053e ......
checking b5c7dedc8426e6010ae1b6ec64927eaac508449f ......
	 orig commit -> d2fc8db691bf3197d43b2afb553311a9bf257bff ......
checking e2906fc86978af29963c40bbeaa7989c50f91ef9 ......
	 orig commit -> a81abbb412341e9e3b2d42ed7d310cf71fbb84a8 ......
checking e2b3fa0ce98ffa5ec168b849713870877ac051ef ......
	 orig commit -> 5775b843a619b3c93f946e2b55a208d9f0f48b59 ......
checking 12c663e4f8e446afb747e7748c73ddb6be6eee68 ......
	 orig commit -> 05454c1bde91fb013c0431801001da82947e6b5a ......
checking 2a0bc4ad7c6370b84a0a03df37a53ca17a2b47d5 ......
	 orig commit -> c9f4c6cf53bfafb639386a4c094929f13f573e04 ......
checking 289e6fa33b0b0d59b6eb45d6fc7e58d15ab01e04 ......
	 orig commit -> bc3cc75281b3c2b1c5355d88d147b66a753bb9a5 ......
checking 1fae5e92788c0b9bc3b632a2de9ed6ef9333af32 ......
	 orig commit -> ed8cffda27dea6fd3dafb3ee881c5a786edac9ca ......
checking 9fe2e97e6f2da8fb47bf842741cf9d508c9897f8 ......
	 orig commit -> 831c326fcd0e8e2a6ece952f898a1ec9b1dc1004 ......
checking 12b29e1cfe6a8965a87234f9995318998f79375d ......
	 orig commit -> 7420f482ea5163bf6dae39a5c7628d5397cd6307 ......
checking 739c8e70889a50363c4a74813509925f392df839 ......
	 orig commit -> 563c4ba3bd2b8b0b21c65669ec2226b1cfa1138b ......
checking 7166fb17475879647f513ea84e9f96b430beee70 ......
	 orig commit -> fca32340a5e8b896f57d41fd94b8b1701df25eb1 ......
checking 8cde08971b4165b5831fc555edf98464f1d10662 ......
	 orig commit -> a3a4a3b37c9b911af4c375b2475cea0fd2b84d38 ......
checking 25b69a422b592edd2739fab9150f5d29955043f7 ......
	 orig commit -> 0bcc3fb95b97ac2ca223a5a870287b37f56265ac ......
checking 982f8f14e704ad07e4093e208723157312620b27 ......
	 orig commit -> 31184d8c6ea49ea0676d100cdd7e1f102ad025b5 ......
checking 8d1b1e7902af7344b5bd99234931df3e1fb1cbe9 ......
	 orig commit -> d7cb44496a9bb458632cb3c18acb08949c210448 ......
checking 1d1646c408f62148fd2bbc399927bdc5381cb3ba ......
	 orig commit -> 97f3c0a4b0579b646b6b10ae5a3d59f0441cc12c ......
checking c827ed01821da3357ce2781c386c1d8471349fdd ......
	 orig commit -> 1c29c372b2d1d2415601041532745ce859f24126 ......
checking bf9b263b3e75184bfde4b5e578f2a83132f3e2b9 ......
	 orig commit -> b4c0de312613ca676db5bd7e696a44b56795612a ......
checking 601ae35b3f19ea673a1ed6d416f25c2e084886cf ......
	 orig commit -> 2e08e4d2ff488424919d69dd211ac860a019ac1d ......
checking 35a4f782b521c583cab615fba04bde9b4d4ed205 ......
	 orig commit -> de6f83f85be94e0b7d0d324c29ccc9d78a6bb4e7 ......
checking 4a092479bb4f302d5e51a21d0d18e74aa6ea5837 ......
	 orig commit -> fadd94e05c02afec7b70b0b14915624f1782f578 ......
		 fadd94e05c02afec7b70b0b14915624f1782f578 has problem. Fixes commit -> 3943b040f11ed0cc6d4585fd286a623ca8634547
commit d1a265da7b2983e3201988f1a8202e749e2d4352
Author: Shan Hai <shan.hai@oracle.com>
Date:   Thu Aug 23 02:02:56 2018 +0800

    bcache: release dc->writeback_lock properly in bch_writeback_thread()
    
    commit 3943b040f11ed0cc6d4585fd286a623ca8634547 upstream.
    
    The writeback thread would exit with a lock held when the cache device
    is detached via sysfs interface, fix it by releasing the held lock
    before exiting the while-loop.
    
    Fixes: fadd94e05c02 (bcache: quit dc->writeback_thread when BCACHE_DEV_DETACHING is set)
    Signed-off-by: Shan Hai <shan.hai@oracle.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Tested-by: Shenghui Wang <shhuiw@foxmail.com>
    Cc: stable@vger.kernel.org #4.17+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 590e13a68177074c66261c7e39efb99639be4344 ......
	 orig commit -> 55496d3fe2acd1a365c43cbd613a20ecd4d74395 ......
checking 5e8f4ec7899b2c5cfe778ef9cbdd0b23fff4f612 ......
	 orig commit -> 7672ed33c4c15dbe9d56880683baaba4227cf940 ......
checking 4a8b1c46af586914b42773b4181052cc3c7cb0d3 ......
	 orig commit -> 55b55abc17f238c61921360e61dde90dd9a326d1 ......
checking f69b52965de0b8e39dc93e4f7ab6e8a38bd7d17a ......
	 orig commit -> 70ca608b2ec6dafa6bb1c2b0691852fc78f8f717 ......
checking 8c8f0b1f597d039e90f08510975b9e8d53e0ed99 ......
	 orig commit -> 20fb5a635a0c8478ac98f15cfafc2ea83df29565 ......
		 20fb5a635a0c8478ac98f15cfafc2ea83df29565 has problem. Fixes commit -> 91ba9f28a3de97761c2b5fd5df5d88421268e507
commit cd95b6e707122f33bcf85c39c8aedd356de10412
Author: Deepak Rawat <drawat@vmware.com>
Date:   Tue May 15 15:39:09 2018 +0200

    drm/vmwgfx: Set dmabuf_size when vmw_dmabuf_init is successful
    
    commit 91ba9f28a3de97761c2b5fd5df5d88421268e507 upstream.
    
    SOU primary plane prepare_fb hook depends upon dmabuf_size to pin up BO
    (and not call a new vmw_dmabuf_init) when a new fb size is same as
    current fb. This was changed in a recent commit which is causing
    page_flip to fail on VM with low display memory and multi-mon failure
    when cycle monitors from secondary display.
    
    Cc: <stable@vger.kernel.org> # 4.14, 4.16
    Fixes: 20fb5a635a0c ("drm/vmwgfx: Unpin the screen object backup buffer when not used")
    Signed-off-by: Deepak Rawat <drawat@vmware.com>
    Reviewed-by: Sinclair Yeh <syeh@vmware.com>
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 791a1ef7df367bdb78f9e09421b320a2411d284d ......
	 orig commit -> 0d9366d67bcf066b028e57d09c9a86ce879bcc28 ......
checking 1891e0bb60b4285624db5fe05b2af6d8c9079ec0 ......
	 orig commit -> 6d97d5aba08b26108f95dc9fb7bbe4d9436c769c ......
checking b5fb65c559ec042ace497323395535efca3db337 ......
	 orig commit -> bda7fab54828bbef2164bb23c0f6b1a7d05cc718 ......
checking a54e06d490a1fa42abbdfa83e3e8881e45dd798e ......
	 orig commit -> 6ffa3402211acc30e47e691e14d62f3fd065a54e ......
checking cd2399b49de48637772e22aa4b30ee019a5f0076 ......
	 orig commit -> ab60368ab6a452466885ef4edf0cefd089465132 ......
checking bc72e4fcc12a4b983666d3909edde2a14f1fb870 ......
	 orig commit -> fac37c628fd5d68fd7298d9b57ae8601ee1b4723 ......
checking d7b13824c390805830e0ac8d8f89f0903272e234 ......
	 orig commit -> 843bd7db79c861b49e2912d723625f5fa8e94502 ......
checking aa5a781f59fba7e525f197a0b92613b1da7bdcd2 ......
	 orig commit -> 221b6ec69ed9c56b6cd9a124a387a9472f14284e ......
checking 085ec7d554c176a167825100f47e721dae5fbec4 ......
	 orig commit -> 467c77d4cbefaaf65e2f44fe102d543a52fcae5b ......
checking 7e5487b3990de1445d172b739b1924fb1f4d95a9 ......
	 orig commit -> 8b2d93dd22615cb7f3046a5a2083a6f8bb8052ed ......
checking 5db7e1bb6a132625d7c7f9d5b259d26c959388e1 ......
	 orig commit -> d66e53649c18377edc08d48901e658e4fd491d46 ......
checking fc7bcbb940278a9fa81c6e5cbd4402a275cd131c ......
	 orig commit -> 957f6ba8adc7be401a74ccff427e4cfd88d3bfcb ......
checking d018d551e7b23b6ab8e1faf95fc6409a0232c53b ......
	 orig commit -> 88893cf787d3062c631cc20b875068eb11756e03 ......
checking faace30e6e6a8f1b93532938351c7e06dd6759e7 ......
	 orig commit -> 6c59f64b7ecf2bccbe73931d7d573d66ed13b537 ......
checking b652092f8e99af83623664c6238daf700acd3c22 ......
	 orig commit -> 864db4d5085349fcfa1f260b5bcd2adde3d7f2ed ......
checking 31dbd9cfcb2342c5105610421191467995fac7ad ......
	 orig commit -> e1ebd0e5b9d0a10ba65e63a3514b6da8c6a5a819 ......
checking 6a0a9f0ab8a95395d280eb581df26f983d0b4064 ......
	 orig commit -> bb19af816025d495376bd76bf6fbcf4244f9a06d ......
checking 68a38cedff764feb87353f90d1ad9b70afdd635e ......
	 orig commit -> 415eb2a1aaa4881cf85bd86c683356fdd8094a23 ......
checking dbce9e41161cef5365ebd17f8597ea7e986977c1 ......
	 orig commit -> b845f66f78bf42a4ce98e5cfe0e94fab41dd0742 ......
checking f37519543460fc8fee53d21589d40acdeb3d35d3 ......
	 orig commit -> 9a233bb8025105db9a60b5d761005cc5a6c77f3d ......
checking 6a020bb3c62022ea44b8118ad14d113c96a8b93d ......
	 orig commit -> f61e64310b75733d782e930d1fb404b84699eed6 ......
checking 80fceaf3f16a02cc82209a4f9e6d8cfa46ba1d60 ......
	 orig commit -> 9ad577087165478c9d9be82b15ed9bf2db5835f5 ......
checking 1366b31d18297ff1879f0becf941425503408447 ......
	 orig commit -> 39ffe39545cd5cb5b8cee9f0469165cf24dc62c2 ......
checking 6bc2bf6023dde77b77f183e89c7690cb3f4f0f2d ......
	 orig commit -> 8ebee73b574ad3dd1f14d461f65ceaffbd637650 ......
checking 9c222c497ba27164c71d985635e016424543ed18 ......
	 orig commit -> 86674a97f5055f4c7f406563408096e8cf9364ff ......
checking c3a2a8782059272dfaa355072683d584c08e94a2 ......
	 orig commit -> 0834d627fbea00c1444075eb3e448e1974da452d ......
checking fc2de796926b6086634833fcd8705d0d3c94cb1a ......
	 orig commit -> 8b29d29abc484d638213dd79a18a95ae7e5bb402 ......
checking d023498fef3506790a939f0b6cc63f5eca228a25 ......
	 orig commit -> e283655b5abe26462d53d5196f186c5e8863af3b ......
checking 8effa2182d02291345a066bb191750755add7fc4 ......
	 orig commit -> c37a3c94775855567b90f91775b9691e10bd2806 ......
checking 637b9b187f4e024979e9ca401042eee2b5390a1e ......
	 orig commit -> 57b0c9d49b94bbeb53649b7fbd264603c1ebd585 ......
checking 4a9fabcd3440357e45b4b52f47478d57858cede4 ......
	 orig commit -> 03877bf6a30cca7d4bc3ffabd3c3e9464a7a1a19 ......
checking 204bfcda824428b3a298eae8e87875bbd435a3c1 ......
	 orig commit -> 4d31778aa2fa342f5f92ca4025b293a1729161d1 ......
checking de00d57294820dc171cf5393afe5a06600d09fb8 ......
	 orig commit -> 8a5a916d9a35e13576d79cc16e24611821b13e34 ......
checking 92efba91a792a942d01014760750ad0013d30cb2 ......
	 orig commit -> 8434ec46c6e3232cebc25a910363b29f5c617820 ......
checking d7255626a0823ffc6d88d61faa67b65324ae03cc ......
	 orig commit -> 3c0efdf03b2d127f0e40e30db4e7aa0429b1b79a ......
checking 27a913cc91773b099a5c264ab1a701e0d883ea2c ......
	 orig commit -> d40b6768e45bd9213139b2d91d30c7692b6007b1 ......
checking 305f25c1ed53c1458b3049afc0979bc23ba5d55a ......
	 orig commit -> 16a1c0646e55c3345bce8e4edfc06ad119d27c04 ......
checking 435290f7a40a2bf033616309137b92cf0c61015d ......
	 orig commit -> 60d6e6f0b9e422dd01aeda39257ee0428e5e2a3f ......
checking 4a6cd791d6c116c150ed7f73ef4795cb3110d20a ......
	 orig commit -> d13864b68e41c11e4231de90cf358658f6ecea45 ......
checking 22f1bde5d1bf2950b749808483d8c929aff5d17e ......
	 orig commit -> 2c98425720233ae3e135add0c7e869b32913502f ......
checking 6d03ff166926c7b0d70b6184bb694d684e23f6b5 ......
	 orig commit -> 92571a1aae40d291158d16e7142637908220f470 ......
		 92571a1aae40d291158d16e7142637908220f470 has problem. Fixes commit -> 47b998653fea4ef69e3e89574956386f262bccca
commit b9627a218e2b2a42b812499ccb5d92707482d5d0
Author: Phil Elwell <phil@raspberrypi.org>
Date:   Tue Apr 10 13:18:25 2018 +0100

    lan78xx: Don't reset the interface on open
    
    [ Upstream commit 47b998653fea4ef69e3e89574956386f262bccca ]
    
    Commit 92571a1aae40 ("lan78xx: Connect phy early") moves the PHY
    initialisation into lan78xx_probe, but lan78xx_open subsequently calls
    lan78xx_reset. As well as forcing a second round of link negotiation,
    this reset frequently prevents the phy interrupt from being generated
    (even though the link is up), rendering the interface unusable.
    
    Fix this issue by removing the lan78xx_reset call from lan78xx_open.
    
    Fixes: 92571a1aae40 ("lan78xx: Connect phy early")
    Signed-off-by: Phil Elwell <phil@raspberrypi.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 80b8f3da4912b58bea729a37328af07e86cb8f0f ......
	 orig commit -> add5ff7a216ee545a214013f26d1ef2f44a9c9f8 ......
checking fd97bbca67fc03dfc3c35c5ed3122e20a86c50a5 ......
	 orig commit -> 162ee5a8ab49be40d253f90e94aef712470a3a24 ......
checking 3aeaeecda057abae909e2f15f2ec433cb032944f ......
	 orig commit -> d29a20645d5e929aa7e8616f28e5d8e1c49263ec ......
checking be6a5ad51a53a467fe9f5abac823143483cde392 ......
	 orig commit -> c1b25a17d24925b0961c319cfc3fd7e1dc778914 ......
checking 839c27f7137630ead3ad7460a2573632ebaff968 ......
	 orig commit -> bb34f24c7d2c98d0c81838a7700e6068325b17a0 ......
checking 9ebe297713af6ba8f014f6bece853a16bd2c40f8 ......
	 orig commit -> efc365e7290d040fbd43f60b0e97653489a739d4 ......
checking 370b3353f4f8090bfaf332908ef8c05c9f2f8fc8 ......
	 orig commit -> 1e1c50a929bc9e49bc3f9935b92450d9e69f8158 ......
checking acfd8e886566bd92d0f07d1938e0eaf461a97762 ......
	 orig commit -> 80c0b4210a963e31529e15bf90519708ec947596 ......
checking afef64b10877479b2f34c915aa0c12ff333ec3c7 ......
	 orig commit -> b98def7ca6e152ee55e36863dddf6f41f12d1dc6 ......
checking 5ade3c9618f65d650eb70177beabff87822d015a ......
	 orig commit -> f0849ac0b8e072073ec5fcc7fadd05a77434364e ......
checking 8d700626fb57dab12b58b57ea541592c21f87ee8 ......
	 orig commit -> e92bb4dd9673945179b1fc738c9817dd91bfb629 ......
checking 763111d9f337140ce1976b66140f93c791122a26 ......
	 orig commit -> 77da2ba0648a4fd52e5ff97b8b2b8dd312aec4b0 ......
checking 378a1e49f9d1279f8f4bcd2bc3283f2b733dc15f ......
	 orig commit -> 41f714672f93608751dbd2fa2291d476a8ff0150 ......
checking d04e5e72dfe925f0a72a755bea7ce2665ee1e788 ......
	 orig commit -> 76327a35caabd1a932e83d6a42b967aa08584e5d ......
checking 4be06bc0916d4fdffadf9a62ff88d119b0702697 ......
	 orig commit -> 7854e499f33fd9c7e63288692ffb754d9b1d02fd ......
checking ee7c28b280b8c6be717f39a7b092cf4f587e3bbe ......
	 orig commit -> c2fb54a183cfe77c6fdc9d71e2d5299c1c302a6e ......
checking 6689a4c7b9ed838821c72c976896eb74457f665f ......
	 orig commit -> 709b973c844c0b4d115ac3a227a2e5a68722c912 ......
checking 96fdc64d8eda887ae1a290b4f11f67a4a942d949 ......
	 orig commit -> 8913315e9459b146e5888ab5138e10daa061b885 ......
checking 8bff7ca99fda1914baa1db377f34890969bf7f17 ......
	 orig commit -> 8c81dd46ef3c416b3b95e3020fb90dbd44e6140b ......
checking 28143fe3e3e20530e19557d173430818e838aec4 ......
	 orig commit -> 2d097c50212e137e7b53ffe3b37561153eeba87d ......
checking 3a0de65acdd98c181364c368ef99e3b4c1b1ded9 ......
	 orig commit -> 1ec6995d1290bfb87cc3a51f0836c889e857cef9 ......
checking 2ab7738102ad2ac77f1afafe916accff5683e9b2 ......
	 orig commit -> a06ad633a37c64a0cd4c229fc605cee8725d376e ......
checking 9c9844d9c9d042df472dddae5a042d963cfc603f ......
	 orig commit -> a0b0d1c345d0317efe594df268feb5ccc99f651e ......
checking 59bdc587231c5d468f76978c0cd9512740115722 ......
	 orig commit -> 639d6aafe437a7464399d2a77d006049053df06f ......
checking c1af6891982ead3d9e651df6ab9c2296339bd890 ......
	 orig commit -> e3e288121408c3abeed5af60b87b95c847143845 ......
checking c527ab91f021bfc3041f3a43238d79cff16e7e7f ......
	 orig commit -> 471d557afed155b85da237ec46c549f443eeb5de ......
		 471d557afed155b85da237ec46c549f443eeb5de has problem. Fixes commit -> f2d72f42d5fa3bf33761d9e47201745f624fcff5
31d11b83b96faaee4bb514d375a09489117c3e8d
commit 61a9f6b7fe0ca9706b49a23cecf5f9a9c802b6ce
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed May 9 16:01:46 2018 +0100

    Btrfs: fix duplicate extents after fsync of file with prealloc extents
    
    commit 31d11b83b96faaee4bb514d375a09489117c3e8d upstream.
    
    In commit 471d557afed1 ("Btrfs: fix loss of prealloc extents past i_size
    after fsync log replay"), on fsync,  we started to always log all prealloc
    extents beyond an inode's i_size in order to avoid losing them after a
    power failure. However under some cases this can lead to the log replay
    code to create duplicate extent items, with different lengths, in the
    extent tree. That happens because, as of that commit, we can now log
    extent items based on extent maps that are not on the "modified" list
    of extent maps of the inode's extent map tree. Logging extent items based
    on extent maps is used during the fast fsync path to save time and for
    this to work reliably it requires that the extent maps are not merged
    with other adjacent extent maps - having the extent maps in the list
    of modified extents gives such guarantee.
    
    Consider the following example, captured during a long run of fsstress,
    which illustrates this problem.
    
    We have inode 271, in the filesystem tree (root 5), for which all of the
    following operations and discussion apply to.
    
    A buffered write starts at offset 312391 with a length of 933471 bytes
    (end offset at 1245862). At this point we have, for this inode, the
    following extent maps with the their field values:
    
    em A, start 0, orig_start 0, len 40960, block_start 18446744073709551613,
          block_len 0, orig_block_len 0
    em B, start 40960, orig_start 40960, len 376832, block_start 1106399232,
          block_len 376832, orig_block_len 376832
    em C, start 417792, orig_start 417792, len 782336, block_start
          18446744073709551613, block_len 0, orig_block_len 0
    em D, start 1200128, orig_start 1200128, len 835584, block_start
          1106776064, block_len 835584, orig_block_len 835584
    em E, start 2035712, orig_start 2035712, len 245760, block_start
          1107611648, block_len 245760, orig_block_len 245760
    
    Extent map A corresponds to a hole and extent maps D and E correspond to
    preallocated extents.
    
    Extent map D ends where extent map E begins (1106776064 + 835584 =
    1107611648), but these extent maps were not merged because they are in
    the inode's list of modified extent maps.
    
    An fsync against this inode is made, which triggers the fast path
    (BTRFS_INODE_NEEDS_FULL_SYNC is not set). This fsync triggers writeback
    of the data previously written using buffered IO, and when the respective
    ordered extent finishes, btrfs_drop_extents() is called against the
    (aligned) range 311296..1249279. This causes a split of extent map D at
    btrfs_drop_extent_cache(), replacing extent map D with a new extent map
    D', also added to the list of modified extents,  with the following
    values:
    
    em D', start 1249280, orig_start of 1200128,
           block_start 1106825216 (= 1106776064 + 1249280 - 1200128),
           orig_block_len 835584,
           block_len 786432 (835584 - (1249280 - 1200128))
    
    Then, during the fast fsync, btrfs_log_changed_extents() is called and
    extent maps D' and E are removed from the list of modified extents. The
    flag EXTENT_FLAG_LOGGING is also set on them. After the extents are logged
    clear_em_logging() is called on each of them, and that makes extent map E
    to be merged with extent map D' (try_merge_map()), resulting in D' being
    deleted and E adjusted to:
    
    em E, start 1249280, orig_start 1200128, len 1032192,
          block_start 1106825216, block_len 1032192,
          orig_block_len 245760
    
    A direct IO write at offset 1847296 and length of 360448 bytes (end offset
    at 2207744) starts, and at that moment the following extent maps exist for
    our inode:
    
    em A, start 0, orig_start 0, len 40960, block_start 18446744073709551613,
          block_len 0, orig_block_len 0
    em B, start 40960, orig_start 40960, len 270336, block_start 1106399232,
          block_len 270336, orig_block_len 376832
    em C, start 311296, orig_start 311296, len 937984, block_start 1112842240,
          block_len 937984, orig_block_len 937984
    em E (prealloc), start 1249280, orig_start 1200128, len 1032192,
          block_start 1106825216, block_len 1032192, orig_block_len 245760
    
    The dio write results in drop_extent_cache() being called twice. The first
    time for a range that starts at offset 1847296 and ends at offset 2035711
    (length of 188416), which results in a double split of extent map E,
    replacing it with two new extent maps:
    
    em F, start 1249280, orig_start 1200128, block_start 1106825216,
          block_len 598016, orig_block_len 598016
    em G, start 2035712, orig_start 1200128, block_start 1107611648,
          block_len 245760, orig_block_len 1032192
    
    It also creates a new extent map that represents a part of the requested
    IO (through create_io_em()):
    
    em H, start 1847296, len 188416, block_start 1107423232, block_len 188416
    
    The second call to drop_extent_cache() has a range with a start offset of
    2035712 and end offset of 2207743 (length of 172032). This leads to
    replacing extent map G with a new extent map I with the following values:
    
    em I, start 2207744, orig_start 1200128, block_start 1107783680,
          block_len 73728, orig_block_len 1032192
    
    It also creates a new extent map that represents the second part of the
    requested IO (through create_io_em()):
    
    em J, start 2035712, len 172032, block_start 1107611648, block_len 172032
    
    The dio write set the inode's i_size to 2207744 bytes.
    
    After the dio write the inode has the following extent maps:
    
    em A, start 0, orig_start 0, len 40960, block_start 18446744073709551613,
          block_len 0, orig_block_len 0
    em B, start 40960, orig_start 40960, len 270336, block_start 1106399232,
          block_len 270336, orig_block_len 376832
    em C, start 311296, orig_start 311296, len 937984, block_start 1112842240,
          block_len 937984, orig_block_len 937984
    em F, start 1249280, orig_start 1200128, len 598016,
          block_start 1106825216, block_len 598016, orig_block_len 598016
    em H, start 1847296, orig_start 1200128, len 188416,
          block_start 1107423232, block_len 188416, orig_block_len 835584
    em J, start 2035712, orig_start 2035712, len 172032,
          block_start 1107611648, block_len 172032, orig_block_len 245760
    em I, start 2207744, orig_start 1200128, len 73728,
          block_start 1107783680, block_len 73728, orig_block_len 1032192
    
    Now do some change to the file, like adding a xattr for example and then
    fsync it again. This triggers a fast fsync path, and as of commit
    471d557afed1 ("Btrfs: fix loss of prealloc extents past i_size after fsync
    log replay"), we use the extent map I to log a file extent item because
    it's a prealloc extent and it starts at an offset matching the inode's
    i_size. However when we log it, we create a file extent item with a value
    for the disk byte location that is wrong, as can be seen from the
    following output of "btrfs inspect-internal dump-tree":
    
     item 1 key (271 EXTENT_DATA 2207744) itemoff 3782 itemsize 53
         generation 22 type 2 (prealloc)
         prealloc data disk byte 1106776064 nr 1032192
         prealloc data offset 1007616 nr 73728
    
    Here the disk byte value corresponds to calculation based on some fields
    from the extent map I:
    
      1106776064 = block_start (1107783680) - 1007616 (extent_offset)
      extent_offset = 2207744 (start) - 1200128 (orig_start) = 1007616
    
    The disk byte value of 1106776064 clashes with disk byte values of the
    file extent items at offsets 1249280 and 1847296 in the fs tree:
    
            item 6 key (271 EXTENT_DATA 1249280) itemoff 3568 itemsize 53
                    generation 20 type 2 (prealloc)
                    prealloc data disk byte 1106776064 nr 835584
                    prealloc data offset 49152 nr 598016
            item 7 key (271 EXTENT_DATA 1847296) itemoff 3515 itemsize 53
                    generation 20 type 1 (regular)
                    extent data disk byte 1106776064 nr 835584
                    extent data offset 647168 nr 188416 ram 835584
                    extent compression 0 (none)
            item 8 key (271 EXTENT_DATA 2035712) itemoff 3462 itemsize 53
                    generation 20 type 1 (regular)
                    extent data disk byte 1107611648 nr 245760
                    extent data offset 0 nr 172032 ram 245760
                    extent compression 0 (none)
            item 9 key (271 EXTENT_DATA 2207744) itemoff 3409 itemsize 53
                    generation 20 type 2 (prealloc)
                    prealloc data disk byte 1107611648 nr 245760
                    prealloc data offset 172032 nr 73728
    
    Instead of the disk byte value of 1106776064, the value of 1107611648
    should have been logged. Also the data offset value should have been
    172032 and not 1007616.
    After a log replay we end up getting two extent items in the extent tree
    with different lengths, one of 835584, which is correct and existed
    before the log replay, and another one of 1032192 which is wrong and is
    based on the logged file extent item:
    
     item 12 key (1106776064 EXTENT_ITEM 835584) itemoff 3406 itemsize 53
        refs 2 gen 15 flags DATA
        extent data backref root 5 objectid 271 offset 1200128 count 2
     item 13 key (1106776064 EXTENT_ITEM 1032192) itemoff 3353 itemsize 53
        refs 1 gen 22 flags DATA
        extent data backref root 5 objectid 271 offset 1200128 count 1
    
    Obviously this leads to many problems and a filesystem check reports many
    errors:
    
     (...)
     checking extents
     Extent back ref already exists for 1106776064 parent 0 root 5 owner 271 offset 1200128 num_refs 1
     extent item 1106776064 has multiple extent items
     ref mismatch on [1106776064 835584] extent item 2, found 3
     Incorrect local backref count on 1106776064 root 5 owner 271 offset 1200128 found 2 wanted 1 back 0x55b1d0ad7680
     Backref 1106776064 root 5 owner 271 offset 1200128 num_refs 0 not found in extent tree
     Incorrect local backref count on 1106776064 root 5 owner 271 offset 1200128 found 1 wanted 0 back 0x55b1d0ad4e70
     Backref bytes do not match extent backref, bytenr=1106776064, ref bytes=835584, backref bytes=1032192
     backpointer mismatch on [1106776064 835584]
     checking free space cache
     block group 1103101952 has wrong amount of free space
     failed to load free space cache for block group 1103101952
     checking fs roots
     (...)
    
    So fix this by logging the prealloc extents beyond the inode's i_size
    based on searches in the subvolume tree instead of the extent maps.
    
    Fixes: 471d557afed1 ("Btrfs: fix loss of prealloc extents past i_size after fsync log replay")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 985579fa688e8fed8ed3570210af7201dc67d179
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Oct 8 11:12:55 2018 +0100

    Btrfs: fix warning when replaying log after fsync of a tmpfile
    
    commit f2d72f42d5fa3bf33761d9e47201745f624fcff5 upstream.
    
    When replaying a log which contains a tmpfile (which necessarily has a
    link count of 0) we end up calling inc_nlink(), at
    fs/btrfs/tree-log.c:replay_one_buffer(), which produces a warning like
    the following:
    
      [195191.943673] WARNING: CPU: 0 PID: 6924 at fs/inode.c:342 inc_nlink+0x33/0x40
      [195191.943723] CPU: 0 PID: 6924 Comm: mount Not tainted 4.19.0-rc6-btrfs-next-38 #1
      [195191.943724] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626ccb91-prebuilt.qemu-project.org 04/01/2014
      [195191.943726] RIP: 0010:inc_nlink+0x33/0x40
      [195191.943728] RSP: 0018:ffffb96e425e3870 EFLAGS: 00010246
      [195191.943730] RAX: 0000000000000000 RBX: ffff8c0d1e6af4f0 RCX: 0000000000000006
      [195191.943731] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff8c0d1e6af4f0
      [195191.943731] RBP: 0000000000000097 R08: 0000000000000001 R09: 0000000000000000
      [195191.943732] R10: 0000000000000000 R11: 0000000000000000 R12: ffffb96e425e3a60
      [195191.943733] R13: ffff8c0d10cff0c8 R14: ffff8c0d0d515348 R15: ffff8c0d78a1b3f8
      [195191.943735] FS:  00007f570ee24480(0000) GS:ffff8c0dfb200000(0000) knlGS:0000000000000000
      [195191.943736] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [195191.943737] CR2: 00005593286277c8 CR3: 00000000bb8f2006 CR4: 00000000003606f0
      [195191.943739] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [195191.943740] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [195191.943741] Call Trace:
      [195191.943778]  replay_one_buffer+0x797/0x7d0 [btrfs]
      [195191.943802]  walk_up_log_tree+0x1c1/0x250 [btrfs]
      [195191.943809]  ? rcu_read_lock_sched_held+0x3f/0x70
      [195191.943825]  walk_log_tree+0xae/0x1d0 [btrfs]
      [195191.943840]  btrfs_recover_log_trees+0x1d7/0x4d0 [btrfs]
      [195191.943856]  ? replay_dir_deletes+0x280/0x280 [btrfs]
      [195191.943870]  open_ctree+0x1c3b/0x22a0 [btrfs]
      [195191.943887]  btrfs_mount_root+0x6b4/0x800 [btrfs]
      [195191.943894]  ? rcu_read_lock_sched_held+0x3f/0x70
      [195191.943899]  ? pcpu_alloc+0x55b/0x7c0
      [195191.943906]  ? mount_fs+0x3b/0x140
      [195191.943908]  mount_fs+0x3b/0x140
      [195191.943912]  ? __init_waitqueue_head+0x36/0x50
      [195191.943916]  vfs_kern_mount+0x62/0x160
      [195191.943927]  btrfs_mount+0x134/0x890 [btrfs]
      [195191.943936]  ? rcu_read_lock_sched_held+0x3f/0x70
      [195191.943938]  ? pcpu_alloc+0x55b/0x7c0
      [195191.943943]  ? mount_fs+0x3b/0x140
      [195191.943952]  ? btrfs_remount+0x570/0x570 [btrfs]
      [195191.943954]  mount_fs+0x3b/0x140
      [195191.943956]  ? __init_waitqueue_head+0x36/0x50
      [195191.943960]  vfs_kern_mount+0x62/0x160
      [195191.943963]  do_mount+0x1f9/0xd40
      [195191.943967]  ? memdup_user+0x4b/0x70
      [195191.943971]  ksys_mount+0x7e/0xd0
      [195191.943974]  __x64_sys_mount+0x21/0x30
      [195191.943977]  do_syscall_64+0x60/0x1b0
      [195191.943980]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [195191.943983] RIP: 0033:0x7f570e4e524a
      [195191.943986] RSP: 002b:00007ffd83589478 EFLAGS: 00000206 ORIG_RAX: 00000000000000a5
      [195191.943989] RAX: ffffffffffffffda RBX: 0000563f335b2060 RCX: 00007f570e4e524a
      [195191.943990] RDX: 0000563f335b2240 RSI: 0000563f335b2280 RDI: 0000563f335b2260
      [195191.943992] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000020
      [195191.943993] R10: 00000000c0ed0000 R11: 0000000000000206 R12: 0000563f335b2260
      [195191.943994] R13: 0000563f335b2240 R14: 0000000000000000 R15: 00000000ffffffff
      [195191.944002] irq event stamp: 8688
      [195191.944010] hardirqs last  enabled at (8687): [<ffffffff9cb004c3>] console_unlock+0x503/0x640
      [195191.944012] hardirqs last disabled at (8688): [<ffffffff9ca037dd>] trace_hardirqs_off_thunk+0x1a/0x1c
      [195191.944018] softirqs last  enabled at (8638): [<ffffffff9cc0a5d1>] __set_page_dirty_nobuffers+0x101/0x150
      [195191.944020] softirqs last disabled at (8634): [<ffffffff9cc26bbe>] wb_wakeup_delayed+0x2e/0x60
      [195191.944022] ---[ end trace 5d6e873a9a0b811a ]---
    
    This happens because the inode does not have the flag I_LINKABLE set,
    which is a runtime only flag, not meant to be persisted, set when the
    inode is created through open(2) if the flag O_EXCL is not passed to it.
    Except for the warning, there are no other consequences (like corruptions
    or metadata inconsistencies).
    
    Since it's pointless to replay a tmpfile as it would be deleted in a
    later phase of the log replay procedure (it has a link count of 0), fix
    this by not logging tmpfiles and if a tmpfile is found in a log (created
    by a kernel without this change), skip the replay of the inode.
    
    A test case for fstests follows soon.
    
    Fixes: 471d557afed1 ("Btrfs: fix loss of prealloc extents past i_size after fsync log replay")
    CC: stable@vger.kernel.org # 4.18+
    Reported-by: Martin Steigerwald <martin@lichtvoll.de>
    Link: https://lore.kernel.org/linux-btrfs/3666619.NTnn27ZJZE@merkaba/
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61a9f6b7fe0ca9706b49a23cecf5f9a9c802b6ce
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed May 9 16:01:46 2018 +0100

    Btrfs: fix duplicate extents after fsync of file with prealloc extents
    
    commit 31d11b83b96faaee4bb514d375a09489117c3e8d upstream.
    
    In commit 471d557afed1 ("Btrfs: fix loss of prealloc extents past i_size
    after fsync log replay"), on fsync,  we started to always log all prealloc
    extents beyond an inode's i_size in order to avoid losing them after a
    power failure. However under some cases this can lead to the log replay
    code to create duplicate extent items, with different lengths, in the
    extent tree. That happens because, as of that commit, we can now log
    extent items based on extent maps that are not on the "modified" list
    of extent maps of the inode's extent map tree. Logging extent items based
    on extent maps is used during the fast fsync path to save time and for
    this to work reliably it requires that the extent maps are not merged
    with other adjacent extent maps - having the extent maps in the list
    of modified extents gives such guarantee.
    
    Consider the following example, captured during a long run of fsstress,
    which illustrates this problem.
    
    We have inode 271, in the filesystem tree (root 5), for which all of the
    following operations and discussion apply to.
    
    A buffered write starts at offset 312391 with a length of 933471 bytes
    (end offset at 1245862). At this point we have, for this inode, the
    following extent maps with the their field values:
    
    em A, start 0, orig_start 0, len 40960, block_start 18446744073709551613,
          block_len 0, orig_block_len 0
    em B, start 40960, orig_start 40960, len 376832, block_start 1106399232,
          block_len 376832, orig_block_len 376832
    em C, start 417792, orig_start 417792, len 782336, block_start
          18446744073709551613, block_len 0, orig_block_len 0
    em D, start 1200128, orig_start 1200128, len 835584, block_start
          1106776064, block_len 835584, orig_block_len 835584
    em E, start 2035712, orig_start 2035712, len 245760, block_start
          1107611648, block_len 245760, orig_block_len 245760
    
    Extent map A corresponds to a hole and extent maps D and E correspond to
    preallocated extents.
    
    Extent map D ends where extent map E begins (1106776064 + 835584 =
    1107611648), but these extent maps were not merged because they are in
    the inode's list of modified extent maps.
    
    An fsync against this inode is made, which triggers the fast path
    (BTRFS_INODE_NEEDS_FULL_SYNC is not set). This fsync triggers writeback
    of the data previously written using buffered IO, and when the respective
    ordered extent finishes, btrfs_drop_extents() is called against the
    (aligned) range 311296..1249279. This causes a split of extent map D at
    btrfs_drop_extent_cache(), replacing extent map D with a new extent map
    D', also added to the list of modified extents,  with the following
    values:
    
    em D', start 1249280, orig_start of 1200128,
           block_start 1106825216 (= 1106776064 + 1249280 - 1200128),
           orig_block_len 835584,
           block_len 786432 (835584 - (1249280 - 1200128))
    
    Then, during the fast fsync, btrfs_log_changed_extents() is called and
    extent maps D' and E are removed from the list of modified extents. The
    flag EXTENT_FLAG_LOGGING is also set on them. After the extents are logged
    clear_em_logging() is called on each of them, and that makes extent map E
    to be merged with extent map D' (try_merge_map()), resulting in D' being
    deleted and E adjusted to:
    
    em E, start 1249280, orig_start 1200128, len 1032192,
          block_start 1106825216, block_len 1032192,
          orig_block_len 245760
    
    A direct IO write at offset 1847296 and length of 360448 bytes (end offset
    at 2207744) starts, and at that moment the following extent maps exist for
    our inode:
    
    em A, start 0, orig_start 0, len 40960, block_start 18446744073709551613,
          block_len 0, orig_block_len 0
    em B, start 40960, orig_start 40960, len 270336, block_start 1106399232,
          block_len 270336, orig_block_len 376832
    em C, start 311296, orig_start 311296, len 937984, block_start 1112842240,
          block_len 937984, orig_block_len 937984
    em E (prealloc), start 1249280, orig_start 1200128, len 1032192,
          block_start 1106825216, block_len 1032192, orig_block_len 245760
    
    The dio write results in drop_extent_cache() being called twice. The first
    time for a range that starts at offset 1847296 and ends at offset 2035711
    (length of 188416), which results in a double split of extent map E,
    replacing it with two new extent maps:
    
    em F, start 1249280, orig_start 1200128, block_start 1106825216,
          block_len 598016, orig_block_len 598016
    em G, start 2035712, orig_start 1200128, block_start 1107611648,
          block_len 245760, orig_block_len 1032192
    
    It also creates a new extent map that represents a part of the requested
    IO (through create_io_em()):
    
    em H, start 1847296, len 188416, block_start 1107423232, block_len 188416
    
    The second call to drop_extent_cache() has a range with a start offset of
    2035712 and end offset of 2207743 (length of 172032). This leads to
    replacing extent map G with a new extent map I with the following values:
    
    em I, start 2207744, orig_start 1200128, block_start 1107783680,
          block_len 73728, orig_block_len 1032192
    
    It also creates a new extent map that represents the second part of the
    requested IO (through create_io_em()):
    
    em J, start 2035712, len 172032, block_start 1107611648, block_len 172032
    
    The dio write set the inode's i_size to 2207744 bytes.
    
    After the dio write the inode has the following extent maps:
    
    em A, start 0, orig_start 0, len 40960, block_start 18446744073709551613,
          block_len 0, orig_block_len 0
    em B, start 40960, orig_start 40960, len 270336, block_start 1106399232,
          block_len 270336, orig_block_len 376832
    em C, start 311296, orig_start 311296, len 937984, block_start 1112842240,
          block_len 937984, orig_block_len 937984
    em F, start 1249280, orig_start 1200128, len 598016,
          block_start 1106825216, block_len 598016, orig_block_len 598016
    em H, start 1847296, orig_start 1200128, len 188416,
          block_start 1107423232, block_len 188416, orig_block_len 835584
    em J, start 2035712, orig_start 2035712, len 172032,
          block_start 1107611648, block_len 172032, orig_block_len 245760
    em I, start 2207744, orig_start 1200128, len 73728,
          block_start 1107783680, block_len 73728, orig_block_len 1032192
    
    Now do some change to the file, like adding a xattr for example and then
    fsync it again. This triggers a fast fsync path, and as of commit
    471d557afed1 ("Btrfs: fix loss of prealloc extents past i_size after fsync
    log replay"), we use the extent map I to log a file extent item because
    it's a prealloc extent and it starts at an offset matching the inode's
    i_size. However when we log it, we create a file extent item with a value
    for the disk byte location that is wrong, as can be seen from the
    following output of "btrfs inspect-internal dump-tree":
    
     item 1 key (271 EXTENT_DATA 2207744) itemoff 3782 itemsize 53
         generation 22 type 2 (prealloc)
         prealloc data disk byte 1106776064 nr 1032192
         prealloc data offset 1007616 nr 73728
    
    Here the disk byte value corresponds to calculation based on some fields
    from the extent map I:
    
      1106776064 = block_start (1107783680) - 1007616 (extent_offset)
      extent_offset = 2207744 (start) - 1200128 (orig_start) = 1007616
    
    The disk byte value of 1106776064 clashes with disk byte values of the
    file extent items at offsets 1249280 and 1847296 in the fs tree:
    
            item 6 key (271 EXTENT_DATA 1249280) itemoff 3568 itemsize 53
                    generation 20 type 2 (prealloc)
                    prealloc data disk byte 1106776064 nr 835584
                    prealloc data offset 49152 nr 598016
            item 7 key (271 EXTENT_DATA 1847296) itemoff 3515 itemsize 53
                    generation 20 type 1 (regular)
                    extent data disk byte 1106776064 nr 835584
                    extent data offset 647168 nr 188416 ram 835584
                    extent compression 0 (none)
            item 8 key (271 EXTENT_DATA 2035712) itemoff 3462 itemsize 53
                    generation 20 type 1 (regular)
                    extent data disk byte 1107611648 nr 245760
                    extent data offset 0 nr 172032 ram 245760
                    extent compression 0 (none)
            item 9 key (271 EXTENT_DATA 2207744) itemoff 3409 itemsize 53
                    generation 20 type 2 (prealloc)
                    prealloc data disk byte 1107611648 nr 245760
                    prealloc data offset 172032 nr 73728
    
    Instead of the disk byte value of 1106776064, the value of 1107611648
    should have been logged. Also the data offset value should have been
    172032 and not 1007616.
    After a log replay we end up getting two extent items in the extent tree
    with different lengths, one of 835584, which is correct and existed
    before the log replay, and another one of 1032192 which is wrong and is
    based on the logged file extent item:
    
     item 12 key (1106776064 EXTENT_ITEM 835584) itemoff 3406 itemsize 53
        refs 2 gen 15 flags DATA
        extent data backref root 5 objectid 271 offset 1200128 count 2
     item 13 key (1106776064 EXTENT_ITEM 1032192) itemoff 3353 itemsize 53
        refs 1 gen 22 flags DATA
        extent data backref root 5 objectid 271 offset 1200128 count 1
    
    Obviously this leads to many problems and a filesystem check reports many
    errors:
    
     (...)
     checking extents
     Extent back ref already exists for 1106776064 parent 0 root 5 owner 271 offset 1200128 num_refs 1
     extent item 1106776064 has multiple extent items
     ref mismatch on [1106776064 835584] extent item 2, found 3
     Incorrect local backref count on 1106776064 root 5 owner 271 offset 1200128 found 2 wanted 1 back 0x55b1d0ad7680
     Backref 1106776064 root 5 owner 271 offset 1200128 num_refs 0 not found in extent tree
     Incorrect local backref count on 1106776064 root 5 owner 271 offset 1200128 found 1 wanted 0 back 0x55b1d0ad4e70
     Backref bytes do not match extent backref, bytenr=1106776064, ref bytes=835584, backref bytes=1032192
     backpointer mismatch on [1106776064 835584]
     checking free space cache
     block group 1103101952 has wrong amount of free space
     failed to load free space cache for block group 1103101952
     checking fs roots
     (...)
    
    So fix this by logging the prealloc extents beyond the inode's i_size
    based on searches in the subvolume tree instead of the extent maps.
    
    Fixes: 471d557afed1 ("Btrfs: fix loss of prealloc extents past i_size after fsync log replay")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f2924e32dcf27b2267f2fd5f10482685386d47f6 ......
	 orig commit -> af7227338135d2f1b1552bf9a6d43e02dcba10b9 ......
checking 1908ca222b3656f7607e5bde4fe350c6051791f0 ......
	 orig commit -> 74c6c71530847808d4e3be7b205719270efee80c ......
checking 145b7e06de33bafc7662f356f8bc25e1db285b3f ......
	 orig commit -> 90fe6f8ff00a07641ca893d64f75ca22ce77cca2 ......
checking d9179b4aa407ee3c6408616f334b55484b1cb034 ......
	 orig commit -> 96a598996f6ac518ac79839ecbb17c91af91f4f7 ......
checking 4ee9130f64238677cdff5948812426c1c75c0c5f ......
	 orig commit -> e81b5e01c14add8395dfba7130f8829206bb507d ......
checking 206199412baeba06745b03a7950895f26f95c14b ......
	 orig commit -> c769accdf3d8a103940bea2979b65556718567e9 ......
checking 34a9a036350f5df3809065d64dadb28133c988b3 ......
	 orig commit -> ae4745730cf8e693d354ccd4dbaf59ea440c09a9 ......
checking 235ca6a0330d0ac2dcad16f0d0e751a51ee40ccf ......
	 orig commit -> 58f101bf87e32753342a6924772c6ebb0fbde24a ......
checking 78c986bf85b793980cce4eb6b048492bf0aa4f82 ......
	 orig commit -> f03dbb06dc380274e351ca4b1ee1587ed4529e62 ......
checking 28bbb0d963e06c76aeaf0f6b3f142b650d0e7a35 ......
	 orig commit -> 914b6dfff790544d9b77dfd1723adb3745ec9700 ......
checking 08e9dbd5184e4e059adf1cc77b5dc08eca314a77 ......
	 orig commit -> c7f26ccfb2c31eb1bf810ba13d044fcf583232db ......
checking d2a5d00dcd8502e1e5071e983e619823d6cc68dd ......
	 orig commit -> 299815a4fba9f3c7a81434dba0072148f1690608 ......
checking da9ec481d66dcca59f3556c2fc783967da2c7697 ......
	 orig commit -> 880cd276dff17ea29e9a8404275c9502b265afa7 ......
checking 0bbd8e2593ad0ce31cf063cc7723d66fae5c31b3 ......
	 orig commit -> b9fc828debc8ac2bb21b5819a44d2aea456f1c95 ......
	 orig commit -> c5ad119fb6c09b0297446be05bd66602fa564758 ......
		 c5ad119fb6c09b0297446be05bd66602fa564758 has problem. Fixes commit -> e5f0e8f8e456589d56e4955154ed5d468cd6d286
5dd431b6b92c0db324d134d2a4006dd4f87f2261
eb82a994479245a79647d302f9b4eb8e7c9d7ca6
cce6294cc2eaa083482e1d85d8db5845c82a7e14
406de7555424d93849166684d0bd172743d2a30c
bcecb4bbf88aa03171c30652bca761cf27755a6b
1df94c3c5dadbce3df6cc0e989d8c85d43a903d6
checking 38a85f8214e214600681c5d3f940015be92900a7 ......
	 orig commit -> f8437520704cfd9cc442a99d73ed708a3cdadaf9 ......
checking 5b5f4fd97d8fdc5d41ad632ed5154989b38b613f ......
	 orig commit -> b85ab56c3f81c5a24b5a5213374f549df06430da ......
checking 25801736ca4818040b184c5547e6f5a14eaf4847 ......
	 orig commit -> bd6271039ee6f0c9b468148fc2d73e0584af6b4f ......
checking 06956ca1aab3f12ba71b213f0142d5a233314806 ......
	 orig commit -> 71eb9ee9596d8df3d5723c3cfc18774c6235e8b1 ......
checking 5b3b9ce272a603492bfefb99ed2586c1b780f800 ......
	 orig commit -> f125376b06bcc57dfb0216ac8d6ec6d5dcf81025 ......
checking 07af604f00a523c44da36511a3b5d0c1143cbb3a ......
	 orig commit -> 3c82b372a9f44aa224b8d5106ff6f1ad516fa8a8 ......
checking 77c18f7ea4179ed45e979ad7b7432ffbeccaa3e5 ......
	 orig commit -> 5c78f6bfae2b10ff70e21d343e64584ea6280c26 ......
checking 6da5c98d65f0f87d8e12c62e421036777c4fadeb ......
	 orig commit -> 743989254ea9f132517806d8893ca9b6cf9dc86b ......
checking e78be20d112250f9a29189c1c14051d9984e0a81 ......
	 orig commit -> e69647a19c870c2f919e4d5023af8a515e8ef25f ......
checking 373304e44fa9c55fe422e897b263cfb1c9c7310d ......
	 orig commit -> 73b9160d0dfe44dfdaffd6465dc1224c38a4a73c ......
checking cbecd7187cdf3fe84d8b6bf58e68cf60225515e8 ......
	 orig commit -> a752c0a4524889cdc0765925258fd1fd72344100 ......
checking 110a7c19d9d155342632cc830f0d459f0b7308ac ......
	 orig commit -> f8fb3419ead44f9a3136995acd24e35da4525177 ......
checking bbeb1a42dc584137041841652b98ac0f4e7b7200 ......
	 orig commit -> c70a36268799cf2f902b5a31e452571fcb96bfe9 ......
checking 629b3a66d5ca6b191807bf6cb59aef8452e101e7 ......
	 orig commit -> dfa453bc90eca0febff33c8d292a656e53702158 ......
checking 04905c21ad69e7b5e53bd57e779db464c8a38324 ......
	 orig commit -> 5fbdbed797b6d12d043a5121fdbc8d8b49d10e80 ......
checking f7ed525fcb56a30f956ab42a16279670e2b1c498 ......
	 orig commit -> 871bef2000968c312a4000b2f56d370dcedbc93c ......
checking 58be6253b0030799f653e9c53fab649260d52221 ......
	 orig commit -> 9a3fb9fb84cc30577c1b012a6a3efda944684291 ......
checking 49f4a8c52eeb6a8bc48da3845081bae55512af47 ......
	 orig commit -> 9d3c3354bb85bab4d865fe95039443f09a4c8394 ......
checking 6ca473201d709e2d061bf770776b96b9024e58df ......
	 orig commit -> 8970a63e965b43288c4f5f40efbc2bbf80de7f16 ......
checking 5498a2b5795f45de39dc1508a7e5aa1da7ba3447 ......
	 orig commit -> 5a9f698feb11b198f17b2acebbfe0e2716a3beed ......
checking c269eb77dc22a79ad153ec9fd7efaa3d8cd56d00 ......
	 orig commit -> 40013ff20b1beed31184935fc0aea6a859d4d4ef ......
checking bf922554682ba4404d06208ca4196aadd57d0d92 ......
	 orig commit -> f29cdfbe33d6915ba8056179b0041279a67e3647 ......
checking 91314c2731705274e2748b723291df3993f167a3 ......
	 orig commit -> 1e46ef1762bb2e52f0f996131a4d16ed4e9fd065 ......
checking 01a80839635db5973dc72e00e7abd4d902af1902 ......
	 orig commit -> 94fa3f929ec0c048b1f3658cc335b940df4f6d22 ......
checking 97689fea3c803d5b47a45941a6f46e196a0f2c53 ......
	 orig commit -> 5bf7f8185f7c7112decdfe3d3e5c5d5e67f099a1 ......
checking 154040a5a869af2ef1f78f828a35ea03772e3da0 ......
	 orig commit -> 60e10b3adc3bac0f6a894c28e0eb1f2d13607362 ......
checking 29e36c3099fc2e3064068508ced39a702d1815b9 ......
	 orig commit -> bbc09e7842a5023ba5bc0f8d559b9dd464e44006 ......
		 bbc09e7842a5023ba5bc0f8d559b9dd464e44006 has problem. Fixes commit -> 3239534a79ee6f20cffd974173a1e62e0730e8ac
commit 21563c4df30e284e881faa8e7966806003e6d0dd
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Fri Apr 6 01:19:37 2018 +0200

    net/sched: fix NULL dereference in the error path of tcf_bpf_init()
    
    
    [ Upstream commit 3239534a79ee6f20cffd974173a1e62e0730e8ac ]
    
    when tcf_bpf_init_from_ops() fails (e.g. because of program having invalid
    number of instructions), tcf_bpf_cfg_cleanup() calls bpf_prog_put(NULL) or
    bpf_prog_destroy(NULL). Unless CONFIG_BPF_SYSCALL is unset, this causes
    the following error:
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000020
     PGD 800000007345a067 P4D 800000007345a067 PUD 340e1067 PMD 0
     Oops: 0000 [#1] SMP PTI
     Modules linked in: act_bpf(E) ip6table_filter ip6_tables iptable_filter binfmt_misc ext4 mbcache jbd2 crct10dif_pclmul crc32_pclmul ghash_clmulni_intel snd_hda_codec_generic pcbc snd_hda_intel snd_hda_codec snd_hda_core snd_hwdep snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd glue_helper cryptd joydev snd_timer snd virtio_balloon pcspkr soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs libcrc32c ata_generic pata_acpi qxl drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ttm virtio_blk drm virtio_net virtio_console i2c_core crc32c_intel serio_raw virtio_pci ata_piix libata virtio_ring floppy virtio dm_mirror dm_region_hash dm_log dm_mod [last unloaded: act_bpf]
     CPU: 3 PID: 5654 Comm: tc Tainted: G            E    4.16.0.bpf_test+ #408
     Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
     RIP: 0010:__bpf_prog_put+0xc/0xc0
     RSP: 0018:ffff9594003ef728 EFLAGS: 00010202
     RAX: 0000000000000000 RBX: ffff9594003ef758 RCX: 0000000000000024
     RDX: 0000000000000000 RSI: 0000000000000001 RDI: 0000000000000000
     RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000044
     R10: 0000000000000220 R11: ffff8a7ab9f17131 R12: 0000000000000000
     R13: ffff8a7ab7c3c8e0 R14: 0000000000000001 R15: ffff8a7ab88f1054
     FS:  00007fcb2f17c740(0000) GS:ffff8a7abfd80000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000020 CR3: 000000007c888006 CR4: 00000000001606e0
     Call Trace:
      tcf_bpf_cfg_cleanup+0x2f/0x40 [act_bpf]
      tcf_bpf_cleanup+0x4c/0x70 [act_bpf]
      __tcf_idr_release+0x79/0x140
      tcf_bpf_init+0x125/0x330 [act_bpf]
      tcf_action_init_1+0x2cc/0x430
      ? get_page_from_freelist+0x3f0/0x11b0
      tcf_action_init+0xd3/0x1b0
      tc_ctl_action+0x18b/0x240
      rtnetlink_rcv_msg+0x29c/0x310
      ? _cond_resched+0x15/0x30
      ? __kmalloc_node_track_caller+0x1b9/0x270
      ? rtnl_calcit.isra.29+0x100/0x100
      netlink_rcv_skb+0xd2/0x110
      netlink_unicast+0x17c/0x230
      netlink_sendmsg+0x2cd/0x3c0
      sock_sendmsg+0x30/0x40
      ___sys_sendmsg+0x27a/0x290
      ? mem_cgroup_commit_charge+0x80/0x130
      ? page_add_new_anon_rmap+0x73/0xc0
      ? do_anonymous_page+0x2a2/0x560
      ? __handle_mm_fault+0xc75/0xe20
      __sys_sendmsg+0x58/0xa0
      do_syscall_64+0x6e/0x1a0
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
     RIP: 0033:0x7fcb2e58eba0
     RSP: 002b:00007ffc93c496c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
     RAX: ffffffffffffffda RBX: 00007ffc93c497f0 RCX: 00007fcb2e58eba0
     RDX: 0000000000000000 RSI: 00007ffc93c49740 RDI: 0000000000000003
     RBP: 000000005ac6a646 R08: 0000000000000002 R09: 0000000000000000
     R10: 00007ffc93c49120 R11: 0000000000000246 R12: 0000000000000000
     R13: 00007ffc93c49804 R14: 0000000000000001 R15: 000000000066afa0
     Code: 5f 00 48 8b 43 20 48 c7 c7 70 2f 7c b8 c7 40 10 00 00 00 00 5b e9 a5 8b 61 00 0f 1f 44 00 00 0f 1f 44 00 00 41 54 55 48 89 fd 53 <48> 8b 47 20 f0 ff 08 74 05 5b 5d 41 5c c3 41 89 f4 0f 1f 44 00
     RIP: __bpf_prog_put+0xc/0xc0 RSP: ffff9594003ef728
     CR2: 0000000000000020
    
    Fix it in tcf_bpf_cfg_cleanup(), ensuring that bpf_prog_{put,destroy}(f)
    is called only when f is not NULL.
    
    Fixes: bbc09e7842a5 ("net/sched: fix idr leak on the error path of tcf_bpf_init()")
    Reported-by: Lucas Bates <lucasb@mojatatu.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f8d93c59c78cc925f542f22d5388473f69005840 ......
	 orig commit -> caf61b1b8b88ccf1451f7321a176393797e8d292 ......
checking 8ed753eee9bdf091a2ca2541451b42717de7e781 ......
	 orig commit -> b15606f47b89b0b09936d7f45b59ba6275527041 ......
checking 90b87707f0f7606782ee027a50187ae5bc62ca48 ......
	 orig commit -> c3594f22302cca5e924e47ec1cc8edd265708f41 ......
checking 7245e2d1790b4dbcaf318c36b87758d568e67f8b ......
	 orig commit -> 5f3e3b85cc0a5eae1c46d72e47d3de7bf208d9e2 ......
checking 405544d5f864ae0b8c191a2ff3201c0277bbeb70 ......
	 orig commit -> 825d487583089f9a33d31650c9c41f6474aab7fc ......
checking 0839b0ce6eb667e556f240b83bf429165dd567b6 ......
	 orig commit -> 9b9322db5c5a1917a66c71fe47c3848a9a31227e ......
checking 4ff78587dea66265b5345182781592a8c89815ec ......
	 orig commit -> c917e0f259908e75bd2a65877e25f9d90c22c848 ......
checking 92ab37923634609154d4dd7c7df13b80c345a1e8 ......
	 orig commit -> 192b4af6cd28cdad9b42fd79c21a90a2aeb0bec7 ......
checking 3a297d091edbf61176f18842b27b07448dfcad67 ......
	 orig commit -> 4a6d2e525b43eba5870ea7e360f59aa65de00705 ......
checking 7867e6d82fc9c35e02ae407641f5603bdbcc1a6f ......
	 orig commit -> df65c8d1728adee2a52c30287d33da83a8c87480 ......
checking 1001e8ec25db887240b0f397c1f5050fbb207502 ......
	 orig commit -> 4b387906b1c3692bb790388c335515c0cf098a23 ......
checking 4eaa2618051aa9621e9ebde6909aab63cbb20134 ......
	 orig commit -> 19125cb0591ae63cd4591e3dfe4c22058e748518 ......
checking b57f0fe6e38b97dc3c2e3836010b8dc3373b1d58 ......
	 orig commit -> f8a554b4aa9686bb2c12f6bae516e58783289a03 ......
checking 5815901c29c2936d7acbed2683d5807b4ae53ede ......
	 orig commit -> 03080e5ec72740c1a62e6730f2a5f3f114f11b19 ......
checking 34b6ba622ac4d5f08238771603de1ff45a2722a0 ......
	 orig commit -> 24fc79798b8ddfd46f2dd363a8d29072c083b977 ......
checking e675b292c282e4b9798f5e849983ea1fb03a0b37 ......
	 orig commit -> dd1df24737727e119c263acf1be2a92763938297 ......
checking 87e07eff2772826cb8435a9b69e9bfbbed0efb37 ......
	 orig commit -> fc04fdb2c8a894283259f5621d31d75610701091 ......
checking f31f64b2d253809b125c3cf597a9bd82ab29a080 ......
	 orig commit -> 1f110e7cae09e6c6a144616480d1a9dd99c5208a ......
checking 6b4a3d4e63f1a1a9d333224c082b57bbadcfab17 ......
	 orig commit -> 6f27d2c2a8c236d296201c19abb8533ec20d212b ......
checking 99ba9a9728707888b113f00ac8eee4faa6d60431 ......
	 orig commit -> cbe7128c4b92e2004984f477fd38dfa81662f02e ......
		 cbe7128c4b92e2004984f477fd38dfa81662f02e has problem. Fixes commit -> c769accdf3d8a103940bea2979b65556718567e9
commit 206199412baeba06745b03a7950895f26f95c14b
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Thu Mar 29 19:05:30 2018 +0900

    vlan: Fix vlan insertion for packets without ethernet header
    
    [ Upstream commit c769accdf3d8a103940bea2979b65556718567e9 ]
    
    In some situation vlan packets do not have ethernet headers. One example
    is packets from tun devices. Users can specify vlan protocol in tun_pi
    field instead of IP protocol. When we have a vlan device with reorder_hdr
    disabled on top of the tun device, such packets from tun devices are
    untagged in skb_vlan_untag() and vlan headers will be inserted back in
    vlan_insert_inner_tag().
    
    vlan_insert_inner_tag() however did not expect packets without ethernet
    headers, so in such a case size argument for memmove() underflowed.
    
    We don't need to copy headers for packets which do not have preceding
    headers of vlan headers, so skip memmove() in that case.
    Also don't write vlan protocol in skb->data when it does not have enough
    room for it.
    
    Fixes: cbe7128c4b92 ("vlan: Fix out of order vlan headers with reorder header off")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 01a68a265ef506e95058c3cd0a8d9e4264eb9233 ......
	 orig commit -> 4bbb3e0e8239f9079bf1fe20b3c0cb598714ae61 ......
		 4bbb3e0e8239f9079bf1fe20b3c0cb598714ae61 has problem. Fixes commit -> ae4745730cf8e693d354ccd4dbaf59ea440c09a9
commit 34a9a036350f5df3809065d64dadb28133c988b3
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Thu Mar 29 19:05:29 2018 +0900

    net: Fix untag for vlan packets without ethernet header
    
    [ Upstream commit ae4745730cf8e693d354ccd4dbaf59ea440c09a9 ]
    
    In some situation vlan packets do not have ethernet headers. One example
    is packets from tun devices. Users can specify vlan protocol in tun_pi
    field instead of IP protocol, and skb_vlan_untag() attempts to untag such
    packets.
    
    skb_vlan_untag() (more precisely, skb_reorder_vlan_header() called by it)
    however did not expect packets without ethernet headers, so in such a case
    size argument for memmove() underflowed and triggered crash.
    
    ====
    BUG: unable to handle kernel paging request at ffff8801cccb8000
    IP: __memmove+0x24/0x1a0 arch/x86/lib/memmove_64.S:43
    PGD 9cee067 P4D 9cee067 PUD 1d9401063 PMD 1cccb7063 PTE 2810100028101
    Oops: 000b [#1] SMP KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 1 PID: 17663 Comm: syz-executor2 Not tainted 4.16.0-rc7+ #368
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__memmove+0x24/0x1a0 arch/x86/lib/memmove_64.S:43
    RSP: 0018:ffff8801cc046e28 EFLAGS: 00010287
    RAX: ffff8801ccc244c4 RBX: fffffffffffffffe RCX: fffffffffff6c4c2
    RDX: fffffffffffffffe RSI: ffff8801cccb7ffc RDI: ffff8801cccb8000
    RBP: ffff8801cc046e48 R08: ffff8801ccc244be R09: ffffed0039984899
    R10: 0000000000000001 R11: ffffed0039984898 R12: ffff8801ccc244c4
    R13: ffff8801ccc244c0 R14: ffff8801d96b7c06 R15: ffff8801d96b7b40
    FS:  00007febd562d700(0000) GS:ffff8801db300000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff8801cccb8000 CR3: 00000001ccb2f006 CR4: 00000000001606e0
    DR0: 0000000020000000 DR1: 0000000020000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000600
    Call Trace:
     memmove include/linux/string.h:360 [inline]
     skb_reorder_vlan_header net/core/skbuff.c:5031 [inline]
     skb_vlan_untag+0x470/0xc40 net/core/skbuff.c:5061
     __netif_receive_skb_core+0x119c/0x3460 net/core/dev.c:4460
     __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:4627
     netif_receive_skb_internal+0x10b/0x670 net/core/dev.c:4701
     netif_receive_skb+0xae/0x390 net/core/dev.c:4725
     tun_rx_batched.isra.50+0x5ee/0x870 drivers/net/tun.c:1555
     tun_get_user+0x299e/0x3c20 drivers/net/tun.c:1962
     tun_chr_write_iter+0xb9/0x160 drivers/net/tun.c:1990
     call_write_iter include/linux/fs.h:1782 [inline]
     new_sync_write fs/read_write.c:469 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:482
     vfs_write+0x189/0x510 fs/read_write.c:544
     SYSC_write fs/read_write.c:589 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:581
     do_syscall_64+0x281/0x940 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x42/0xb7
    RIP: 0033:0x454879
    RSP: 002b:00007febd562cc68 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 00007febd562d6d4 RCX: 0000000000454879
    RDX: 0000000000000157 RSI: 0000000020000180 RDI: 0000000000000014
    RBP: 000000000072bea0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00000000000006b0 R14: 00000000006fc120 R15: 0000000000000000
    Code: 90 90 90 90 90 90 90 48 89 f8 48 83 fa 20 0f 82 03 01 00 00 48 39 fe 7d 0f 49 89 f0 49 01 d0 49 39 f8 0f 8f 9f 00 00 00 48 89 d1 <f3> a4 c3 48 81 fa a8 02 00 00 72 05 40 38 fe 74 3b 48 83 ea 20
    RIP: __memmove+0x24/0x1a0 arch/x86/lib/memmove_64.S:43 RSP: ffff8801cc046e28
    CR2: ffff8801cccb8000
    ====
    
    We don't need to copy headers for packets which do not have preceding
    headers of vlan headers, so skip memmove() in that case.
    
    Fixes: 4bbb3e0e8239 ("net: Fix vlan untag for bridge and vlan_dev with reorder_hdr off")
    Reported-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 000fe789aa763723ec2767b743bfbc598bcc49c3 ......
	 orig commit -> 75fd4fec3e4c43b131c7c4958adb3ab9f1665513 ......
checking ac2b8f5e361f34b33670d05ef12e0c54167c40e4 ......
	 orig commit -> e829b17caf96c2da34620e335fb777592990906c ......
checking 85e5ae55652ec8da9fa39c4bd5ab88f35b280547 ......
	 orig commit -> 334167decf98f01a66c91ea84180c278bc4ad290 ......
checking 404cbeb36ef7f67e3c89b977df8c563dd1b92e96 ......
	 orig commit -> 46c0ef6e1eb95f619d9f62da4332749153db92f7 ......
checking 942138f356aab8371545f2331e015599e45a7d0b ......
	 orig commit -> 9e75dc61eaa9acd1bff83c3b814ac2af6dc1f64c ......
checking 872398068503bfb5eb58f5ff5aaac38c3cea41d8 ......
	 orig commit -> 6a055b92de15af987b4027826d43aa103c65a3c4 ......
checking 418c85ea458a01522a2a61f5fd111043940b8e4e ......
	 orig commit -> 746d024c3211813946b319411aeb2b47767f8fb0 ......
checking 05c401183c2f55c96354be2a1174f8ae297ac1d2 ......
	 orig commit -> 62b06f8f429cd233e4e2e7bbd21081ad60c9018f ......
checking 6ef5b2e5241a2b74b9a8f6386eb742d2e42ad826 ......
	 orig commit -> cf55612a945039476abfd73e39064b2e721c3272 ......
checking 8387fbac8e18e26a60559adc63e0b7067303b0a4 ......
	 orig commit -> d52e5a7e7ca49457dd31fc8b42fb7c0d58a31221 ......
		 d52e5a7e7ca49457dd31fc8b42fb7c0d58a31221 has problem. Fixes commit -> 28d35bcdd3925e7293408cdb8aa5f2aac5f0d6e3
checking 7c84e5e9c62cec8a3c49bf32ddabf2f285cb371b ......
	 orig commit -> 537f4146c53c95aac977852b371bafb9c6755ee1 ......
checking 845c2de9578675a0969fd76162b53561938b39aa ......
	 orig commit -> 3c4fe80b32c685bdc02b280814d0cfe80d441c72 ......
checking 27eebf0800cf12e178aed4526eb95e814eb4de5c ......
	 orig commit -> c9b3bce18da4a0aebc27853052dea39aa64b7d75 ......
checking 27fe367cdde0c49c5147ff397ca59fc4a09551de ......
	 orig commit -> b7db978ac283b237835129ac87f26cbac94d04e7 ......
checking 533f5f847dfdfc76d965ecbeb0e5f572e015c524 ......
	 orig commit -> 932909d9b28d27e807ff8eecb68c7748f6701628 ......
checking 2299285fb1819ef8459c116fd1eafe1458bb9ca1 ......
	 orig commit -> 3cd2c313f1d618f92d1294addc6c685c17065761 ......
checking e2d9442dfe84062d9fdb96b0a755013fc5c2fa6d ......
	 orig commit -> ac68b1b3b9c73e652dc7ce0585672e23c5a2dca4 ......
checking 21ccc62ec7259f3c33dc18b895ff8550a8b16b32 ......
	 orig commit -> 0627be7d3c871035364923559543c9b2ff5357f2 ......
checking bad682e26d6a0345cc0c12dabb340e2545f135ad ......
	 orig commit -> e21da1c992007594d391e7b301779cf30f438691 ......
checking 341029c2024ba907462a494517b14487c254e264 ......
	 orig commit -> c4dc56be7e26040bfc60ce73425353516a356955 ......
		 c4dc56be7e26040bfc60ce73425353516a356955 has problem. Fixes commit -> d45622c0eaa5992a1a2248cbe93e1ff7a2da7be4
commit 034a9e9b235efa6ab98b67cd0bac57496d702589
Author: Sekhar Nori <nsekhar@ti.com>
Date:   Tue Apr 24 20:05:06 2018 +0530

    ARM: davinci: board-omapl138-hawk: fix GPIO numbers for MMC/SD lookup
    
    [ Upstream commit d45622c0eaa5992a1a2248cbe93e1ff7a2da7be4 ]
    
    commit c4dc56be7e26 ("ARM: davinci: fix the GPIO lookup for omapl138-hawk")
    fixed the GPIO chip name for look-up of MMC/SD CD and WP pins, but forgot
    to change the GPIO numbers passed.
    
    The GPIO numbers are not offsets from within a 32 GPIO bank. Fix the
    GPIO numbers as well as remove the misleading comment.
    
    Fixes: c4dc56be7e26 ("ARM: davinci: fix the GPIO lookup for omapl138-hawk")
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b7f1129a2c77f1dacd413a822fec90e2922855f8 ......
	 orig commit -> b0dee7910317f41f398838992516af6a3b981d86 ......
checking b37bc05f44c6b4b7cb25583f8c5c85b81d6eb9e0 ......
	 orig commit -> 35a57b7fef136fa3d5b735ba773f191b95110fa0 ......
checking 9241c4f472054a46605d0a820e3b93fa59c23406 ......
	 orig commit -> de3d50aadd40bf68614db9fd157b275ce9c2d467 ......
checking e7f2b054916fcc02ebbaafdb4dc8aa7af579ebb7 ......
	 orig commit -> 351b2bccede1cb673ec7957b35ea997ea24c8884 ......
checking 9238d1fa3ee60e26909b5ca38e4fbfcd1dbc2201 ......
	 orig commit -> 7ed8ce1c5fc7cf25b3602c73bef897a3466a6645 ......
		 7ed8ce1c5fc7cf25b3602c73bef897a3466a6645 has problem. Fixes commit -> 6cc4a0863c9709c512280c64e698d68443ac8053
commit 4e6d30de2e44fab869078194a6b1686659579a70
Author: Manjunath Patil <manjunath.b.patil@oracle.com>
Date:   Tue Oct 30 09:49:21 2018 -0700

    xen-blkfront: fix kernel panic with negotiate_mq error path
    
    commit 6cc4a0863c9709c512280c64e698d68443ac8053 upstream.
    
    info->nr_rings isn't adjusted in case of ENOMEM error from
    negotiate_mq(). This leads to kernel panic in error path.
    
    Typical call stack involving panic -
     #8 page_fault at ffffffff8175936f
        [exception RIP: blkif_free_ring+33]
        RIP: ffffffffa0149491  RSP: ffff8804f7673c08  RFLAGS: 00010292
     ...
     #9 blkif_free at ffffffffa0149aaa [xen_blkfront]
     #10 talk_to_blkback at ffffffffa014c8cd [xen_blkfront]
     #11 blkback_changed at ffffffffa014ea8b [xen_blkfront]
     #12 xenbus_otherend_changed at ffffffff81424670
     #13 backend_changed at ffffffff81426dc3
     #14 xenwatch_thread at ffffffff81422f29
     #15 kthread at ffffffff810abe6a
     #16 ret_from_fork at ffffffff81754078
    
    Cc: stable@vger.kernel.org
    Fixes: 7ed8ce1c5fc7 ("xen-blkfront: move negotiate_mq to cover all cases of new VBDs")
    Signed-off-by: Manjunath Patil <manjunath.b.patil@oracle.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b2709f78674177e9e8670132eaa73977cf61582a ......
	 orig commit -> b06ef18a4c255609388ed6e068a1c69c797545e0 ......
checking ba5b9b64e883fdae2db278c2c0b5670e9838d062 ......
	 orig commit -> bb7f8f199c354c4cf155b1d6d55f86eaaed7fa5a ......
checking 7ae100c413931659f9c89e1320066458a6a2bf1d ......
	 orig commit -> e06513d78d54e6c7026c9043a39e2c01ee25bdbe ......
checking a2b2d6ae5a3f8cb49b7533d3f450bc3be0c3c2bc ......
	 orig commit -> cc5db3150e87fe7f7e947bf333b6c1c97f848ecb ......
checking c6ce72d59cab7c3e5d0224773e0cd9cfa523e20a ......
	 orig commit -> 9de506a547c0d172d13a91d69b1a399e6a2c0efa ......
		 9de506a547c0d172d13a91d69b1a399e6a2c0efa has problem. Fixes commit -> f89782c2d131e6eae0d1ea2569ba76bc4c5875fe
checking 7538ab34136d9dc2ca2ead75edf130fe8051e9dc ......
	 orig commit -> 803fafbe0cd522fa6b9e41ca3b96cfb2e2a2222d ......
checking ccf92117d49d77f3d88ad81d63ea5c0d02a94e3f ......
	 orig commit -> 250c6c49e3b68756b14983c076183568636e2bde ......
checking 175e365a66624fd67f32e354755a2e689c736ee1 ......
	 orig commit -> 5d414b178e950ce9685c253994cc730893d5d887 ......
checking 5759427a0ca87ea5a39c10f60420768416d9d468 ......
	 orig commit -> a18177925c252da7801149abe217c05b80884798 ......
checking 9636bbd409ba1df2c2cc69d12933f2107a92ab02 ......
	 orig commit -> 0077416a3d529baccbe07ab3242e8db541cfadf6 ......
checking 7b10604ddf519affe0cf56dee1169523d7e060c3 ......
	 orig commit -> 551e1c67b4207455375a2e7a285dea1c7e8fc361 ......
checking 40fe662649beff1050201b5a1e47acfe824e6624 ......
	 orig commit -> e3fd112cbf21d049faf64ba1471d72b93c22109a ......
checking 87bcb00aa934e6e48d462dc32e82995d208a7a24 ......
	 orig commit -> 69c907022a7d9325cdc5c9dd064571e445df9a47 ......
checking d98ba4f4567ddbd0b4c8b982a43875d39fa46104 ......
	 orig commit -> aea3fca005fb45f80869f2e8d56fd4e64c1d1fdb ......
checking d1355ae4c345454f749b1cd54a8d201ac20ca270 ......
	 orig commit -> 4e7dc08e57c95673d2edaba8983c3de4dd1f65f5 ......
checking f766148e47d7d3b8a7128cae511971c0f793e38e ......
	 orig commit -> ad46e48c65fa1f204fa29eaff1b91174d314a94b ......
checking 8997115bf7917677399b638a29f8eb44f42ceef6 ......
	 orig commit -> 4e943a890cef42e90f43ce6be64728a290b97c55 ......
checking a0cc3c18d34cdd474ebdb0f6bb4f3408b6223ce0 ......
	 orig commit -> bee9d41b37ea6b1f860e5bc0989cf1cf1d7e6ab3 ......
		 bee9d41b37ea6b1f860e5bc0989cf1cf1d7e6ab3 has problem. Fixes commit -> b0dee7910317f41f398838992516af6a3b981d86
35a57b7fef136fa3d5b735ba773f191b95110fa0
commit b7f1129a2c77f1dacd413a822fec90e2922855f8
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Wed Mar 7 13:49:12 2018 -0800

    hv_netvsc: fix locking during VF setup
    
    [ Upstream commit b0dee7910317f41f398838992516af6a3b981d86 ]
    
    The dev_uc/mc_sync calls need to have the device address list
    locked. This was spotted by running with lockdep enabled.
    
    Fixes: bee9d41b37ea ("hv_netvsc: propagate rx filters to VF")
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b37bc05f44c6b4b7cb25583f8c5c85b81d6eb9e0
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Wed Mar 7 13:49:11 2018 -0800

    hv_netvsc: fix locking for rx_mode
    
    [ Upstream commit 35a57b7fef136fa3d5b735ba773f191b95110fa0 ]
    
    The rx_mode operation handler is different than other callbacks
    in that is not always called with rtnl held. Therefore use
    RCU to ensure that references are valid.
    
    Fixes: bee9d41b37ea ("hv_netvsc: propagate rx filters to VF")
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit b7f1129a2c77f1dacd413a822fec90e2922855f8
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Wed Mar 7 13:49:12 2018 -0800

    hv_netvsc: fix locking during VF setup
    
    [ Upstream commit b0dee7910317f41f398838992516af6a3b981d86 ]
    
    The dev_uc/mc_sync calls need to have the device address list
    locked. This was spotted by running with lockdep enabled.
    
    Fixes: bee9d41b37ea ("hv_netvsc: propagate rx filters to VF")
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ed85935eeafbc847ffcf38caa60d1ffd9cc95a51 ......
	 orig commit -> 009f766ca2383d8788acd65c2c36c51bbfb19470 ......
		 009f766ca2383d8788acd65c2c36c51bbfb19470 has problem. Fixes commit -> f03dbb06dc380274e351ca4b1ee1587ed4529e62
de3d50aadd40bf68614db9fd157b275ce9c2d467
commit 78c986bf85b793980cce4eb6b048492bf0aa4f82
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Tue Mar 27 11:28:48 2018 -0700

    hv_netvsc: enable multicast if necessary
    
    [ Upstream commit f03dbb06dc380274e351ca4b1ee1587ed4529e62 ]
    
    My recent change to netvsc drive in how receive flags are handled
    broke multicast.  The Hyper-v/Azure virtual interface there is not a
    multicast filter list, filtering is only all or none. The driver must
    enable all multicast if any multicast address is present.
    
    Fixes: 009f766ca238 ("hv_netvsc: filter multicast/broadcast")
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9241c4f472054a46605d0a820e3b93fa59c23406
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Wed Mar 7 13:49:09 2018 -0800

    hv_netvsc: fix filter flags
    
    [ Upstream commit de3d50aadd40bf68614db9fd157b275ce9c2d467 ]
    
    The recent change to not always enable all multicast and broadcast
    was broken; meant to set filter, not change flags.
    
    Fixes: 009f766ca238 ("hv_netvsc: filter multicast/broadcast")
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 78c986bf85b793980cce4eb6b048492bf0aa4f82
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Tue Mar 27 11:28:48 2018 -0700

    hv_netvsc: enable multicast if necessary
    
    [ Upstream commit f03dbb06dc380274e351ca4b1ee1587ed4529e62 ]
    
    My recent change to netvsc drive in how receive flags are handled
    broke multicast.  The Hyper-v/Azure virtual interface there is not a
    multicast filter list, filtering is only all or none. The driver must
    enable all multicast if any multicast address is present.
    
    Fixes: 009f766ca238 ("hv_netvsc: filter multicast/broadcast")
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c039c53d19521540b494fb4ae7d5269dcf91ef99 ......
	 orig commit -> 68633edaef655ce94e51088ecef5dd4e1d2f6f34 ......
checking 5f8156fd34cf7d10a70f147130bc565857621732 ......
	 orig commit -> 74c12c630fe310eb7fcae1b292257d47781fff0a ......
checking 73ecd80bca2bab39fd926aadf2a0665ee25e026e ......
	 orig commit -> 93ac3deb7c220cbcec032a967220a1f109d58431 ......
checking 49995a2931bba15fd53879ec3c8116f6d3644dca ......
	 orig commit -> 7bd3e7b743956afbec30fb525bc3c5e22e3d475c ......
checking 266675ab52db3cfbf1de8747d9cf1445dafbc436 ......
	 orig commit -> 84eef2b2187ed73c0e4520cbfeb874e964a0b56a ......
checking 2b6e7f2ff81a612cce9cccfc64264b8598fa4b4e ......
	 orig commit -> 6508de0305d560235b366cc2cc98f7bcfb029e92 ......
checking 3f2eb4ded1ecb3853c2f0a4fc802fab0b36afb32 ......
	 orig commit -> 7c305de2b9548ab6b65fce342c78618bbed5db73 ......
		 7c305de2b9548ab6b65fce342c78618bbed5db73 has problem. Fixes commit -> 65c3b582ecab7a403efdf08babbf87fdbe27369c
checking ef3dfb138159344ed73d230ded0ee23d7de766f2 ......
	 orig commit -> e4f13ad07823b24a1537518d2163bd164292fb10 ......
checking 3a0bbca21ca5e97029e5d08199eb114f3e4f427f ......
	 orig commit -> 8745f12a6600dd9d31122588621d4c8ddb332cd7 ......
checking 233d806172489f9213b2a75eede2feda5fbf68ae ......
	 orig commit -> 63dd5d022f4766e6b05ee611124afcc7cbfbb953 ......
checking 6f970847f0e9d8601b87efba473dae36f46697bd ......
	 orig commit -> 40d53f4a60c9eb10d4fa58066c23ba1af8a59e39 ......
checking d6bcdf0b14d8fbec88d9e8c6217017f913443c67 ......
	 orig commit -> de04d4fbf87b769ab18c480e4f020c53e74bbdd2 ......
checking d9ed3aed6d83a6ff60f2e4781ae47d5b3e19619a ......
	 orig commit -> a6d50512b4d86ecd9f5952525e454583be1c3b14 ......
checking f03cd5862f55956afb208b695e45e681b160181e ......
	 orig commit -> cd4a6f3ab4d80cb919d15897eb3cbc85c2009d4b ......
checking 2b103dee283f3fcec7b1141aa041d1346176e0cf ......
	 orig commit -> 16ccfff2897613007b5eda9e29d65303c6280026 ......
checking d68e660604881f9c6de082c4db1473e015f0d41f ......
	 orig commit -> 651438bb0af5213f1f70d66e75bf11d08cb5537a ......
checking 3c84b5aaf7a5ebbdf08ebe08d79c911670712d20 ......
	 orig commit -> 9c0fb1e313aaf4e8edec22433c8b22dd308e466c ......
checking 07d3fb191b5a51af584e21e962fb796919d7db3f ......
	 orig commit -> 1c789249578895bb14ab62b4327306439b754857 ......
checking 010f5ccbf4c4dcceed770e779089cd24737a1218 ......
	 orig commit -> 9a6509c4daa91400b52a5fd541a5521c649a8fea ......
checking 9925eea3225eae9f86cec251e73715ca484bd614 ......
	 orig commit -> d4dfc0f4d39475ccbbac947880b5464a74c30b99 ......
checking b114296692b08e196f5bd900d1158487c1a34983 ......
	 orig commit -> a8fd1f71749387c9a1053a83ff1c16287499a4e7 ......
checking acb162b9cdb6bc71618d9a9e745bd498c7462b0a ......
	 orig commit -> e64b6afa98f3629d0c0c46233bbdbe8acdb56f06 ......
checking cd2dee1ea6d553a044a03585b5c1ec7c4657b854 ......
	 orig commit -> 2560da49de5d0cfec22e9564023aebfffa094732 ......
checking 5877f41cf8c83a6bb31137bb3f304fb8638aceba ......
	 orig commit -> b8b549eec8187ac1b12075d69a2d84d89b5e811a ......
checking 30310d4077157bd05bdad6712d69f08f318a3739 ......
	 orig commit -> 585b7f161c85bd5ca675b97580faf21c506541e3 ......
checking 5b71573794b0f80cccb479b44ba4d62a20516742 ......
	 orig commit -> 910f8befdf5bccf25287d9f1743e3e546bcb7ce0 ......
checking 62ee80d3b45b7328e6415e4477d845b96cb6668f ......
	 orig commit -> 497158aa5f520db50452ef928c0f955cb42f2e77 ......
		 497158aa5f520db50452ef928c0f955cb42f2e77 has problem. Fixes commit -> a6c66d6a08b88cc10aca9d3f65cfae31e7652a99
checking 2bce0d98b9d98b75484c2248b51f6194bdf7308e ......
	 orig commit -> c354dff00db8df80f271418d8392065e10ffffb6 ......
checking 466199b440d990d9c340defa6dd91243939905a4 ......
	 orig commit -> a45bc17b360d75fac9ced85e99fda14bf38b4dc3 ......
checking b73bc820c4d1ca3d8cf46a09898c43a446eff6b6 ......
	 orig commit -> 65389322b28f81cc137b60a41044c2d958a7b950 ......
checking 2a71d94e4f6b0426cc938d6ae276bd9f8bde3c38 ......
	 orig commit -> 8a949fff0302b50063f74bb345a66190015528d0 ......
checking 738310e1dbc98cacd89f9b5241e6f4f6e343dd17 ......
	 orig commit -> a29a25275452c97fe35815f1eb9564f2a07a1965 ......
checking f7f78191c910d741c5971094003dfe7233c29743 ......
	 orig commit -> f3205de98db2fc8083796dd5ad81b191e436fab8 ......
checking 50de7f4347cf0dbe7b9c28e273a8cf498067790e ......
	 orig commit -> 07423d00a2b2a71a97e4287d9262cb83c4c4c89f ......
checking e44fe4d2a81bce519cb1109592948e5c2feee1a8 ......
	 orig commit -> b3529af6bb0d4fe72defdd539712ceffaa054fb3 ......
		 b3529af6bb0d4fe72defdd539712ceffaa054fb3 has problem. Fixes commit -> 9e25826ffc942e985b8595b2f1cf2065d3880514
commit 73990abb1a04a526c011780e1c06b9c80d613e1a
Author: Petr Machata <petrm@mellanox.com>
Date:   Fri Jun 15 16:23:38 2018 +0300

    mlxsw: spectrum_switchdev: Fix port_vlan refcounting
    
    [ Upstream commit 9e25826ffc942e985b8595b2f1cf2065d3880514 ]
    
    Switchdev notifications for addition of SWITCHDEV_OBJ_ID_PORT_VLAN are
    distributed not only on clean addition, but also when flags on an
    existing VLAN are changed. mlxsw_sp_bridge_port_vlan_add() calls
    mlxsw_sp_port_vlan_get() to get at the port_vlan in question, which
    implicitly references the object. This then leads to discrepancies in
    reference counting when the VLAN is removed. spectrum.c warns about the
    problem when the module is removed:
    
    [13578.493090] WARNING: CPU: 0 PID: 2454 at drivers/net/ethernet/mellanox/mlxsw/spectrum.c:2973 mlxsw_sp_port_remove+0xfd/0x110 [mlxsw_spectrum]
    [...]
    [13578.627106] Call Trace:
    [13578.629617]  mlxsw_sp_fini+0x2a/0xe0 [mlxsw_spectrum]
    [13578.634748]  mlxsw_core_bus_device_unregister+0x3e/0x130 [mlxsw_core]
    [13578.641290]  mlxsw_pci_remove+0x13/0x40 [mlxsw_pci]
    [13578.646238]  pci_device_remove+0x31/0xb0
    [13578.650244]  device_release_driver_internal+0x14f/0x220
    [13578.655562]  driver_detach+0x32/0x70
    [13578.659183]  bus_remove_driver+0x47/0xa0
    [13578.663134]  pci_unregister_driver+0x1e/0x80
    [13578.667486]  mlxsw_sp_module_exit+0xc/0x3fa [mlxsw_spectrum]
    [13578.673207]  __x64_sys_delete_module+0x13b/0x1e0
    [13578.677888]  ? exit_to_usermode_loop+0x78/0x80
    [13578.682374]  do_syscall_64+0x39/0xe0
    [13578.685976]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fix by putting the port_vlan when mlxsw_sp_port_vlan_bridge_join()
    determines it's a flag-only change.
    
    Fixes: b3529af6bb0d ("spectrum: Reference count VLAN entries")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5a8392f2dc13b4b4589d2b6b4ba87777deebbe9e ......
	 orig commit -> 9d45deb04c59b628b21fc5014aff4f9a1d38f969 ......
checking 47a8c89258e5dee8e81c4ac716b24978eccd7cf2 ......
	 orig commit -> 2ddc94c76cc4ccaf51b478315912b38dfdde1afc ......
checking 953a64ca335384a51ee047df461993881bc0afe1 ......
	 orig commit -> 2be922f31606f114119f48de3207d122a90e7357 ......
checking e0a5a0f4749fa7019efab95372737f2a502e470b ......
	 orig commit -> bffd2b61670feef18d2535e9b53364d270a1c991 ......
checking c6885fb45d4e40053ee1ef92b56d668340237e2e ......
	 orig commit -> ecc832758a654e375924ebf06a4ac971acb5ce60 ......
checking bb19a6a9b598c807a7d4537d7b043e9180d8a7d0 ......
	 orig commit -> 590399ddf9561f2ed0839311c8ae1be21597ba68 ......
checking 10c7390ee34009a54c97a23eea7e4d53a096a3f5 ......
	 orig commit -> 5753405e27f8fe4c42c1537d3ddbd9e058e54cdc ......
checking f97c2bf56bb799ef109e67c6aebe2d00b5e6e12b ......
	 orig commit -> 64c3f648c25d108f346fdc96c15180c6b7d250e9 ......
checking 9bbedb9742f3947a88da327969ec8849c2134043 ......
	 orig commit -> 808b7de86a0c19582a7efce4c80d6b4e1da7f370 ......
checking c43ff936255bb31feb27cc2b4f2ef3897384733a ......
	 orig commit -> 0a5aff64f20d92c5a6e9aeed7b5950b0b817bcd9 ......
checking 615bf75c46903a2409e95d8e146d2bb0a81f930c ......
	 orig commit -> 0979962f5490abe75b3e2befb07a564fa0cf631b ......
checking d2e2e20bbdd3b527e413044deb0677e7aa3892eb ......
	 orig commit -> 2b3957c34b6d7f03544b12ebbf875eee430745db ......
checking 2b0fbc2fcd2fa5d6abed5e86ba0042000721e4d0 ......
	 orig commit -> a6aa80446234ec0ad38eecdb8efc59e91daae565 ......
checking 29764acd50d33678883b1955334040bef563cd11 ......
	 orig commit -> ffc2b6ee417435605ee8bb1eb4c8f02e9ff4b4a5 ......
checking f07b6505f474a108326ebb99018c0036c789c153 ......
	 orig commit -> 60eb34ec5526e264c2bbaea4f7512d714d791caf ......
checking 421c15e803defb3b439d95ae5994c75f8dcc01e6 ......
	 orig commit -> d716d9b702bb759dd6fb50804f10a174bd156d71 ......
checking 3c08f8140a9a67c48aa133eb0962af71076487ce ......
	 orig commit -> 9a191b114906457c4b2494c474f58ae4142d4e67 ......
checking 8b156a0a49c9f7eb8ae144e49dc52dc200f23d60 ......
	 orig commit -> 4c27bf3c5b7434ccb9ab962301da661c26b467a4 ......
checking 9c3e4e41c206112ad80b93fa06bd41571f11d0da ......
	 orig commit -> 067b25a5639b10dfdd41ce6b4d4140fe84d0a8e7 ......
checking 784858e73805e307509a2664b2c7dcb5f67d306e ......
	 orig commit -> c77f5fbbefc04612755117775e8555c2a7006cac ......
checking 0129ee813ef7ea0c7abafcaf3ec425306282d756 ......
	 orig commit -> 13a55372b64e00e564a08d785ca87bd9d454ba30 ......
checking 3ecb681ccf6b1853e7acd912cb7d13e6f97fb525 ......
	 orig commit -> 68d2059be660944152ba667e43c3b4ec225974bc ......
checking 6c88c93898ca3cebf27c5ea96585560bb81959a2 ......
	 orig commit -> 18106734b512664a8541026519ce4b862498b6c3 ......
checking e080e814deb129f1e3b928af58f61177bd8e8dab ......
	 orig commit -> 937441f3a3158d5510ca8cc78a82453f57a96365 ......
checking 682def914242d13b41c1196e01582d05008ffd43 ......
	 orig commit -> f287eb9013ccf199cbfa4eabd80c36fedfc15a73 ......
checking 44cb7ed6e5e2f933958c568dc0f01c9331e7083f ......
	 orig commit -> f25a2dfc20e3a3ed8fe6618c331799dd7bd01190 ......
checking 588078bb272e816a45f8e8e9873cadbb82eef4fa ......
	 orig commit -> fce672db548ff19e76a08a32a829544617229bc2 ......
checking f03c64fbdd9b0bd75dbc7a992579b78f61a023a0 ......
	 orig commit -> b0264ecdfeab5f889b02ec54af7ca8cc1c245e2f ......
checking f08cabec0696517f8c811cd8279df5f56d0ab15d ......
	 orig commit -> 011c935fceae5252619ef730baa610c655281dda ......
checking 8b7e379faf15f26b271225f60c5b9a654076193d ......
	 orig commit -> 10d570284258a30dc104c50787c5289ec49f3d23 ......
checking dd20ff0d079da24afa6b34c5323e46272d091228 ......
	 orig commit -> fc6a5d0601c5ac1d02f283a46f60b87b2033e5ca ......
checking 84fc57f472f9fcf42ba3ef27734694d1a2a75b23 ......
	 orig commit -> 1a9da5937386dbe553ffcf6c65d985bd48c347c5 ......
checking 596816fabe42d41d81e862b056761bab50a93ae2 ......
	 orig commit -> 8ae56822812ddedc26a152ab1916eb30120b4748 ......
checking ff8c6751ecf35b4a57a73b8b5c32fd8914d69b6d ......
	 orig commit -> 3bf2a09da956b43ecfaa630a2ef9a477f991a46a ......
checking ee7a88fc775e91fe1f250f6a9843aae2ae7df62a ......
	 orig commit -> abd6360591d3f8259f41c34e31ac4826dfe621b8 ......
checking 879a73b10a93c8f7b59e7ce1f2d19f6c73fb73b6 ......
	 orig commit -> 3de59bb9d551428cbdc76a9ea57883f82e350b4d ......
checking 0a4c60471d13ff01ab042b16f37e7912f872d985 ......
	 orig commit -> 8876391e440ba615b10eef729576e111f0315f87 ......
checking 2565b271aed0199f5ff977429486e3b59e68e708 ......
	 orig commit -> 8cc07c808c9d595e81cbe5aad419b7769eb2e5c9 ......
checking 3623c1f37efaf6ab2eed458a2ad11e49ebc2e08b ......
	 orig commit -> 015555fd4d2930bc0c86952c46ad88b3392f66e4 ......
checking ed49851ce15c08c310c64b11cb68f8e134528bec ......
	 orig commit -> c0c6bb2322964bd264b4ddedaa5776f40c709f0c ......
checking 5f95541a0db52dd4edf2dcca3d3e3ba54b97d3cf ......
	 orig commit -> 076467490b8176eb96eddc548a14d4135c7b5852 ......
checking 1fe15ab15935c40a0dc99158e460aa36b6927b52 ......
	 orig commit -> 135a06c3a515bbd17729eb04f4f26316d48363d7 ......
checking ce8bdc7aabf973f8256f16181c52df402758aeca ......
	 orig commit -> 4e14bf4236490306004782813b8b4494b18f5e60 ......
checking a383f44e7a3455179f906cac19497de6935ee541 ......
	 orig commit -> 9f416319f40cd857d2bb517630e5855a905ef3fb ......
checking 3d82155f85477cb40cf0b303af5de39fb17b7e01 ......
	 orig commit -> b323ac19b7734a1c464b2785a082ee50bccd3b91 ......
checking dff5da4724bb13687b65072ae5347c0b3f84326f ......
	 orig commit -> 4596749339e06dc7a424fc08a15eded850ed78b7 ......
checking 95e8297ab2060bfdbe0cc7170d576d6857be36bb ......
	 orig commit -> 472e8c55cf6622d1c112dc2bc777f68bbd4189db ......
		 472e8c55cf6622d1c112dc2bc777f68bbd4189db has problem. Fixes commit -> fbfcd0199170984bd3c2812e49ed0fe7b226959a
checking 4ba4273e7218fb68d2365ef3a3814bc1e2f8bf9c ......
	 orig commit -> 36e74d355297dde6e69a39c838d24710e442babe ......
checking 09897fcbd42ae88d3f4ed4a8bf99e56a2bfc5778 ......
	 orig commit -> 120f3b11ef88fc38ce1d0ff9c9a4b37860ad3140 ......
checking 0b9f26e97f2bd557cc41de670cffd0c594ebf6b9 ......
	 orig commit -> 657308f73e674e86b60509a430a46e569bf02846 ......
		 657308f73e674e86b60509a430a46e569bf02846 has problem. Fixes commit -> 9b9322db5c5a1917a66c71fe47c3848a9a31227e
commit 0839b0ce6eb667e556f240b83bf429165dd567b6
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Wed Mar 14 20:02:59 2018 +0100

    brcmfmac: Fix check for ISO3166 code
    
    [ Upstream commit 9b9322db5c5a1917a66c71fe47c3848a9a31227e ]
    
    The commit "regulatory: add NUL to request alpha2" increases the length of
    alpha2 to 3. This causes a regression on brcmfmac, because
    brcmf_cfg80211_reg_notifier() expect valid ISO3166 codes in the complete
    array. So fix this accordingly.
    
    Fixes: 657308f73e67 ("regulatory: add NUL to request alpha2")
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Acked-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c254a86a333c77c70bebbda7277a73c0d6a11c8c ......
	 orig commit -> 88e80c62671ceecdbb77c902731ec95a4bfa62f9 ......
checking cc4a2d71cff36bb36e8576c0cbe353ce4ced433d ......
	 orig commit -> ba6887836178d43b3665b9da075c2c5dfe1d207c ......
checking 90c9ae5943c31de6fd8dfe1503a405bfcbfa3524 ......
	 orig commit -> ad86f605c59500da82d196ac312cfbac3daba31d ......
checking 4b0a3b9a511d55fcff4b0a0c91d3661417a31c5b ......
	 orig commit -> e2c8d283c4e2f468bed1bcfedb80b670b1bc8ab1 ......
checking e47c1bf99a14a78389d91a58a760a9154747dfe3 ......
	 orig commit -> 6459ae386699a5fe0dc52cf30255f75274fa43a4 ......
checking a72612a1c39dd86863c1e3af57e321ad41a26f2d ......
	 orig commit -> 80475c48c6a8a65171e035e0915dc7996b5a0a65 ......
checking dac5d3a100c62bba3795286d44ac9200573c9c44 ......
	 orig commit -> 410d5e13e7638bc146321671e223d56495fbf3c7 ......
checking c5b1b2e2185db4c5eeb72d8f61a1ba0c1f7a752c ......
	 orig commit -> 770b55c995d171f026a9efb85e71e3b1ea47b93d ......
checking 5df337455c5a7a4adb1dc71a577608d63221fd1e ......
	 orig commit -> f97a6b6c47d2f329a24f92cc0ca3c6df5727ba73 ......
checking aa6eeca7bcd714cc1e41227aa9d9599570117742 ......
	 orig commit -> 083b20907185b076f21c265b30fe5b5f24c03d8c ......
checking e1bb3673ae9dc689af2371517b3f98c5ab7e3c9a ......
	 orig commit -> 7801c545e706674aeed40256eb806ad37b18ad71 ......
checking e65cd9a20343ea90f576c24c38ee85ab6e7d5fec ......
	 orig commit -> d057dc4e35e16050befa3dda943876dab39cbf80 ......
checking 32e139dfb684acc630e9c3ca7b400c62cc00b1dd ......
	 orig commit -> bdefe01a6b14bde268741435ac854fda4ef7e847 ......
checking 305eb32d45f00730f8f61a1cff111e3c4b07a766 ......
	 orig commit -> 173a3efd3edb2ef6ef07471397c5f542a360e9c1 ......
		 173a3efd3edb2ef6ef07471397c5f542a360e9c1 has problem. Fixes commit -> 906d441febc0de974b2a6ef848a8f058f3bfada3
commit f18ed65d70f019aae09437e5b6a317d365571208
Author: Paul Burton <paul.burton@mips.com>
Date:   Mon Aug 20 15:36:18 2018 -0700

    MIPS: Workaround GCC __builtin_unreachable reordering bug
    
    [ Upstream commit 906d441febc0de974b2a6ef848a8f058f3bfada3 ]
    
    Some versions of GCC for the MIPS architecture suffer from a bug which
    can lead to instructions from beyond an unreachable statement being
    incorrectly reordered into earlier branch delay slots if the unreachable
    statement is the only content of a case in a switch statement. This can
    lead to seemingly random behaviour, such as invalid memory accesses from
    incorrectly reordered loads or stores, and link failures on microMIPS
    builds.
    
    See this potential GCC fix for details:
    
        https://gcc.gnu.org/ml/gcc-patches/2015-09/msg00360.html
    
    Runtime problems resulting from this bug were initially observed using a
    maltasmvp_defconfig v4.4 kernel built using GCC 4.9.2 (from a Codescape
    SDK 2015.06-05 toolchain), with the result being an address exception
    taken after log messages about the L1 caches (during probe of the L2
    cache):
    
        Initmem setup node 0 [mem 0x0000000080000000-0x000000009fffffff]
        VPE topology {2,2} total 4
        Primary instruction cache 64kB, VIPT, 4-way, linesize 32 bytes.
        Primary data cache 64kB, 4-way, PIPT, no aliases, linesize 32 bytes
        <AdEL exception here>
    
    This is early enough that the kernel exception vectors are not in use,
    so any further output depends upon the bootloader. This is reproducible
    in QEMU where no further output occurs - ie. the system hangs here.
    Given the nature of the bug it may potentially be hit with differing
    symptoms. The bug is known to affect GCC versions as recent as 7.3, and
    it is unclear whether GCC 8 fixed it or just happens not to encounter
    the bug in the testcase found at the link above due to differing
    optimizations.
    
    This bug can be worked around by placing a volatile asm statement, which
    GCC is prevented from reordering past, prior to the
    __builtin_unreachable call.
    
    That was actually done already for other reasons by commit 173a3efd3edb
    ("bug.h: work around GCC PR82365 in BUG()"), but creates problems for
    microMIPS builds due to the lack of a .insn directive. The microMIPS ISA
    allows for interlinking with regular MIPS32 code by repurposing bit 0 of
    the program counter as an ISA mode bit. To switch modes one changes the
    value of this bit in the PC. However typical branch instructions encode
    their offsets as multiples of 2-byte instruction halfwords, which means
    they cannot change ISA mode - this must be done using either an indirect
    branch (a jump-register in MIPS terminology) or a dedicated jalx
    instruction. In order to ensure that regular branches don't attempt to
    target code in a different ISA which they can't actually switch to, the
    linker will check that branch targets are code in the same ISA as the
    branch.
    
    Unfortunately our empty asm volatile statements don't qualify as code,
    and the link for microMIPS builds fails with errors such as:
    
        arch/mips/mm/dma-default.s:3265: Error: branch to a symbol in another ISA mode
        arch/mips/mm/dma-default.s:5027: Error: branch to a symbol in another ISA mode
    
    Resolve this by adding a .insn directive within the asm statement which
    declares that what comes next is code. This may or may not be true,
    since we don't really know what comes next, but as this code is in an
    unreachable path anyway that doesn't matter since we won't execute it.
    
    We do this in asm/compiler.h & select CONFIG_HAVE_ARCH_COMPILER_H in
    order to have this included by linux/compiler_types.h after
    linux/compiler-gcc.h. This will result in asm/compiler.h being included
    in all C compilations via the -include linux/compiler_types.h argument
    in c_flags, which should be harmless.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: 173a3efd3edb ("bug.h: work around GCC PR82365 in BUG()")
    Patchwork: https://patchwork.linux-mips.org/patch/20270/
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: linux-mips@linux-mips.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 14488f25339e40444c578d49b422f9e40673fd9a ......
	 orig commit -> 88913bd8ea2a75d7e460a4bed5f75e1c32660d7e ......
checking cf15cd63000bb800b2a3b455054186fb093b518d ......
	 orig commit -> 95dbe9e7b3720efa5cf83d21f44f6d953f7cf4a2 ......
checking 0e498db68095a466fe00c757f1bba5ce401cd375 ......
	 orig commit -> 53b8d89ddbdbb0e4625a46d2cdbb6f106c52f801 ......
checking ca353544670d9448033645a0d5c0bf0d9d90fed5 ......
	 orig commit -> cb13b424e986aed68d74cbaec3449ea23c50e167 ......
checking badacb781dce84a4942071828c2c248482055d66 ......
	 orig commit -> 001a2fc0c8cc29241305e44ffbce52d1daf8782b ......
checking 2e9f41ace36b52039ce195a9109cb221a8ad93d2 ......
	 orig commit -> abe27a885d9e6575e663a16176dabc58ce9d7188 ......
checking 775cc792bb0879d65f7fa446ce4bd82096447e34 ......
	 orig commit -> dcdaba08062b4726500b9456f8664bfda896c664 ......
checking c0935f1ef990a50cc891aede2b4298038a1c5504 ......
	 orig commit -> 6b4521f5174c26020ae0deb3ef7f2c28557cf445 ......
checking c5c0632b9c7b80914f8704b10e2ebd4adf41ed2a ......
	 orig commit -> 0331365edb1d6ccd6ae68b1038111da85d4c68d1 ......
checking 33b3f7b5af5dbd7364c98845350e68b325c8f265 ......
	 orig commit -> e88230a3744a71a0b5ecfb45e08ddfe1c884e50d ......
checking 2c6a5cc09b46a6478ed7c0597b2f92906b87d7e7 ......
	 orig commit -> 1293b6191010672c0c9dacae8f71c6f3e4d70cbe ......
checking 3f925cc2d3995f56be58b10870f4f424300b8ad8 ......
	 orig commit -> a588a8bb7b25a3fb4f7fed00feb7aec541fc2632 ......
checking c5db4c271ca5b9ab0c7809c44462d469e77487be ......
	 orig commit -> 01a69cab01c184d3786af09e9339311123d63d22 ......
checking 3ed913b61e6a3cde1e8ef93123e183dc5ea17e12 ......
	 orig commit -> 3addaba8141bc6a4f649a48f46e552af32922147 ......
checking 9ccb1d53c6ac959abba61ba446585cb7f1c5b6c9 ......
	 orig commit -> c795f3052b60b01e80485fad98c53e5e67d093c9 ......
checking 8dcb7ddb2c8356cd8f19324f97c3aa3e4da70889 ......
	 orig commit -> 3b07029729e347f288c70227cfe3c66b085d6b0b ......
checking 707c81727baa201e125241f5a82cc5726fa3f7a6 ......
	 orig commit -> 191da271ac260700db3e5b4bb982a17ca78769d6 ......
checking f6bfc88f14cc176d9dae7739ab19a3e59b101f57 ......
	 orig commit -> 3027a8e799b20fc922496a12f8ad2f9f36a8a696 ......
checking a7f126b2e1ad9f4ae347d31f48946e129a86fc3f ......
	 orig commit -> 95f3ce6a77893ac828ba841df44421620de4314b ......
checking 99d4fe95e4f6289176a403722e5c8dd5815a64a8 ......
	 orig commit -> d78d9ee9d40aca4781d2c5334972544601a4c3a2 ......
checking f49e3a9acc524b8641bcacf8e33a1cac27371213 ......
	 orig commit -> 651b9920d7a694ffb1f885aef2bbb068a25d9d66 ......
checking 020c32a91ee0d2744479dad9b2f8aab8a7081024 ......
	 orig commit -> 143a4454daaf0e80a2b9f37159a0d6d2b61e64ed ......
checking d0d9330fa2a382dbe09574e6d3f69d24ca242ab9 ......
	 orig commit -> 9487cfd3430d07366801886bdf185799a2b6f066 ......
checking e08f866978350ecc9dd90a2cfeb907b2abb74392 ......
	 orig commit -> 4b6c1060eaa6495aa5b0032e8f2d51dd936b1257 ......
checking ca4363bf7cb882aa725762bdfa2e1e87ac431e2f ......
	 orig commit -> b126194cbb799f9980b92a77e58db6ad794c8082 ......
checking f146c6e6506fe9a3c9578caddcf0f9837bd6a90f ......
	 orig commit -> a16b8d0cf2ec1e626d24bc2a7b9e64ace6f7501d ......
checking 54881db3251a48f9a27ac8b7223a9b421757d395 ......
	 orig commit -> fe9c842695e26d8116b61b80bfb905356f07834b ......
checking e5ea0a89bf7b2efb19beebaa683e42f6e99a1b85 ......
	 orig commit -> 6b7a5aea71b342ec0593d23b08383e1f33da4c9a ......
		 6b7a5aea71b342ec0593d23b08383e1f33da4c9a has problem. Fixes commit -> 2859de7637b541dc7191f4d3fce4a1adba80fb3e
checking 6e752ba6436bc51d66ca9b302ae0a3d35427ec2b ......
	 orig commit -> fc07bd8ce19bff9e7479c04077ddb5957d1a27be ......
checking 8c1cc43e745d86092f1c5b2d0a58d7879b119d27 ......
	 orig commit -> 5ab2ba931255d8bf03009c06d58dce97de32797c ......
checking 1510627c63b77210f9501c4c1c13b915883dec78 ......
	 orig commit -> e78c637127ee7683d606737f2e62b5da6fd7b1c3 ......
checking 23b738ce746a151c13f2c53ea6cd95e350e3d659 ......
	 orig commit -> ca9eee95a2decc6f60bed65b5b836a26bff825c1 ......
checking 357b528e6b701314c34f10afa34a408c4eca0f65 ......
	 orig commit -> ec6f8401c48a86809237e86878a6fac6b281118f ......
checking 5b0622bfe6371b132a4e54d1cb2e7534386fa801 ......
	 orig commit -> 4d39a959bc1f3d164b5a54147fdeb19f84b1ed58 ......
checking cdd37f48d6a09caa30f35b3068e0922e604d8408 ......
	 orig commit -> 3d89459e2ef92cc0e5a50dde868780ccda9786c1 ......
checking 44ef222ad099c0293e360eaba84193b9ad467a5d ......
	 orig commit -> bde0716d1f076e4c913c7946bcc858f71243c7a0 ......
checking 94203f213c1938aec35f063c411bc5a73a9b814b ......
	 orig commit -> a1dfa6812b682eef750412dd5a90e7d38d7af068 ......
checking cec7d77a1db83c6b9dfdac5b6963cd1cdaaacb77 ......
	 orig commit -> d0869c0071e40c4407d1a4d7c9497653cf47253b ......
		 d0869c0071e40c4407d1a4d7c9497653cf47253b has problem. Fixes commit -> abe27a885d9e6575e663a16176dabc58ce9d7188
commit 2e9f41ace36b52039ce195a9109cb221a8ad93d2
Author: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
Date:   Mon Feb 19 20:12:57 2018 -0600

    ibmvnic: Check for NULL skb's in NAPI poll routine
    
    [ Upstream commit abe27a885d9e6575e663a16176dabc58ce9d7188 ]
    
    After introduction of commit d0869c0071e4, there were some instances of
    RX queue entries from a previous session (before the device was closed
    and reopened) returned to the NAPI polling routine. Since the corresponding
    socket buffers were freed, this resulted in a panic on reopen. Include
    a check for a NULL skb here to avoid this.
    
    Fixes: d0869c0071e4 ("ibmvnic: Clean RX pool buffers during device close")
    Signed-off-by: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 322d7195572de565d170b04f2d7d819b21e75ee8 ......
	 orig commit -> 4b9b0f01350500173f17e2b2e65beb4df4ef99c7 ......
checking 4431066edd13f20964626689ccabd7ac315444a7 ......
	 orig commit -> cc85c02edfe48a34865ae00f7d22298a3fdd17aa ......
checking ddca5c776fff3dac6f3b5ef94dbb25133fd4799b ......
	 orig commit -> 8cbbf1745dcde7ba7e423dc70619d223de90fd43 ......
checking d615dddc6e0c298fc42454364fe48b884c979a4c ......
	 orig commit -> fe27f16794f313f5fc16f6d2f42d8c2b2f4d70cc ......
checking c22e3886fc6549624f4f588efa8d9ef4c70b51a7 ......
	 orig commit -> d3be6d2a08bd26580562d9714d3d97ea9ba22c73 ......
checking 7ffe100ce67c9ca9e2ef41dacac94793d8cdbde7 ......
	 orig commit -> db35340c536f1af0108ec9a0b2126a05d358d14a ......
checking b2f5d98f3300b4035a700fb1cfdb5e07cc2b45bf ......
	 orig commit -> 9a606f8d55cfc932ec02172aaed4124fdc150047 ......
checking b9ddf39dd5791da516d56bd013c174b60c7884e0 ......
	 orig commit -> 9a379e77033f02c4a071891afdf0f0a01eff8ccb ......
checking a666ad4bbcfbf9db0d9402d98d2406abf1cbabc9 ......
	 orig commit -> 70b574e7d719bdf96d26528cb289f3e782e83979 ......
checking 198e26a0efefb21c9854adc630011837bca45a72 ......
	 orig commit -> b2c93e300a11b419b4c67ce08e16fa1436d8118c ......
checking 4adc95c5a020996a2088b44f9e3bbf2e0b518efb ......
	 orig commit -> 0d3e45bc6507bd1f8728bf586ebd16c2d9e40613 ......
checking afe088b034b4dde7abebe6cd104d7129d0a58ef8 ......
	 orig commit -> 2b7d2ed1af2e2c0c90a1a8b97926b7b6c6cb03ed ......
checking fa4cf9010ed60b11b8693d67b7f1dc117e0000b5 ......
	 orig commit -> 73e42e18669934fa96cf2bb54291da54177076d7 ......
checking 6fc72fd1565bcd7f872ad89cd0c7a60a7cf68c96 ......
	 orig commit -> 54e02162d4454a99227f520948bf4494c3d972d0 ......
checking 052eb2d6dc619700281b1f70bb0eb9304ec04b07 ......
	 orig commit -> 827cc2fa024dd6517d62de7a44c7b42f32af371b ......
checking 0f097096b77abc51ea9b17643b6113f1d53205e9 ......
	 orig commit -> c4de37ee2b55deac7d6aeac33e02e3d6be243898 ......
checking 49e30752177f405a1acf0c42253d4bf7fdef64f9 ......
	 orig commit -> 9a9ab3078e2744a1a55163cfaec73a5798aae33e ......
checking 3084902aa9fd314cca547ae9a4ba2c73845e1202 ......
	 orig commit -> a048a07d7f4535baa4cbad6bc024f175317ab938 ......
checking b90a6bddc8af8bf82ae4a7251a464c3b45bcd168 ......
	 orig commit -> 501a78cbc17c329fabf8e9750a1e9ab810c88a0e ......
checking 1618f211f96e3725615074a92f05dfe19be53b44 ......
	 orig commit -> 6232774f1599028a15418179d17f7df47ede770a ......
checking f092a180128e00e520ba721b111b184c09fc3536 ......
	 orig commit -> e7347a86830f38dc3e40c8f7e28c04412b12a2e7 ......
checking a28ff26d5e4426c9d5587e981e020818adde93fb ......
	 orig commit -> 0f9bdfe3c77091e8704d2e510eb7c2c2c6cde524 ......
checking 046e9adae42afa8d7c12c05fdad8aefa99ca90c2 ......
	 orig commit -> d6fbe1c55c55c6937cbea3531af7da84ab7473c3 ......
		 d6fbe1c55c55c6937cbea3531af7da84ab7473c3 has problem. Fixes commit -> 6d44acae1937b81cf8115ada8958e04f601f3f2e
commit 5159e24439a1863b2f237bca8880ead7da608400
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri Mar 29 22:25:55 2019 +1100

    powerpc64s: Show ori31 availability in spectre_v1 sysfs file not v2
    
    commit 6d44acae1937b81cf8115ada8958e04f601f3f2e upstream.
    
    When I added the spectre_v2 information in sysfs, I included the
    availability of the ori31 speculation barrier.
    
    Although the ori31 barrier can be used to mitigate v2, it's primarily
    intended as a spectre v1 mitigation. Spectre v2 is mitigated by
    hardware changes.
    
    So rework the sysfs files to show the ori31 information in the
    spectre_v1 file, rather than v2.
    
    Currently we display eg:
    
      $ grep . spectre_v*
      spectre_v1:Mitigation: __user pointer sanitization
      spectre_v2:Mitigation: Indirect branch cache disabled, ori31 speculation barrier enabled
    
    After:
    
      $ grep . spectre_v*
      spectre_v1:Mitigation: __user pointer sanitization, ori31 speculation barrier enabled
      spectre_v2:Mitigation: Indirect branch cache disabled
    
    Fixes: d6fbe1c55c55 ("powerpc/64s: Wire up cpu_show_spectre_v2()")
    Cc: stable@vger.kernel.org # v4.17+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 6e77feadbfbc9fa5ca760c1df88492cadbf1fb5c ......
	 orig commit -> 56986016cb8cd9050e601831fe89f332b4e3c46e ......
checking 7a62b0f64804b1987225377c2944a86f9db63f37 ......
	 orig commit -> 2e4a16161fcd324b1f9bf6cb6856529f7eaf0689 ......
checking 3bf1695bbb24a848f7b6258fb5e9725833d6ddc4 ......
	 orig commit -> 37c0bdd00d3ae83369ab60a6712c28e11e6458d5 ......
checking d71a3e0a2d0a9be5174fac1be0d97f67a16d8c8f ......
	 orig commit -> ff348355e9c72493947be337bb4fae4fc1a41eba ......
checking ae8afdf604d3393141b5b6e5f52af247caedf87f ......
	 orig commit -> 8ad33041563a10b34988800c682ada14b2612533 ......
checking f2fdeebd8537b946363384e37447bd5862b39df3 ......
	 orig commit -> 77addf6e95c8689e478d607176b399a6242a777e ......
checking 9ba774cc0f752380e5a788258249f2062d042cdc ......
	 orig commit -> f636c14790ead6cc22cf62279b1f8d7e11a67116 ......
		 f636c14790ead6cc22cf62279b1f8d7e11a67116 has problem. Fixes commit -> 6232774f1599028a15418179d17f7df47ede770a
0f9bdfe3c77091e8704d2e510eb7c2c2c6cde524
commit a28ff26d5e4426c9d5587e981e020818adde93fb
Author: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
Date:   Sat May 26 14:27:45 2018 +1000

    powerpc/pseries: Fix clearing of security feature flags
    
    commit 0f9bdfe3c77091e8704d2e510eb7c2c2c6cde524 upstream.
    
    The H_CPU_BEHAV_* flags should be checked for in the 'behaviour' field
    of 'struct h_cpu_char_result' -- 'character' is for H_CPU_CHAR_*
    flags.
    
    Found by playing around with QEMU's implementation of the hypercall:
    
      H_CPU_CHAR=0xf000000000000000
      H_CPU_BEHAV=0x0000000000000000
    
      This clears H_CPU_BEHAV_FAVOUR_SECURITY and H_CPU_BEHAV_L1D_FLUSH_PR
      so pseries_setup_rfi_flush() disables 'rfi_flush'; and it also
      clears H_CPU_CHAR_L1D_THREAD_PRIV flag. So there is no RFI flush
      mitigation at all for cpu_show_meltdown() to report; but currently
      it does:
    
      Original kernel:
    
        # cat /sys/devices/system/cpu/vulnerabilities/meltdown
        Mitigation: RFI Flush
    
      Patched kernel:
    
        # cat /sys/devices/system/cpu/vulnerabilities/meltdown
        Not affected
    
      H_CPU_CHAR=0x0000000000000000
      H_CPU_BEHAV=0xf000000000000000
    
      This sets H_CPU_BEHAV_BNDS_CHK_SPEC_BAR so cpu_show_spectre_v1() should
      report vulnerable; but currently it doesn't:
    
      Original kernel:
    
        # cat /sys/devices/system/cpu/vulnerabilities/spectre_v1
        Not affected
    
      Patched kernel:
    
        # cat /sys/devices/system/cpu/vulnerabilities/spectre_v1
        Vulnerable
    
    Brown-paper-bag-by: Michael Ellerman <mpe@ellerman.id.au>
    Fixes: f636c14790ea ("powerpc/pseries: Set or clear security feature flags")
    Signed-off-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 1618f211f96e3725615074a92f05dfe19be53b44
Author: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
Date:   Sat May 26 14:27:47 2018 +1000

    powerpc/pseries: Restore default security feature flags on setup
    
    commit 6232774f1599028a15418179d17f7df47ede770a upstream.
    
    After migration the security feature flags might have changed (e.g.,
    destination system with unpatched firmware), but some flags are not
    set/clear again in init_cpu_char_feature_flags() because it assumes
    the security flags to be the defaults.
    
    Additionally, if the H_GET_CPU_CHARACTERISTICS hypercall fails then
    init_cpu_char_feature_flags() does not run again, which potentially
    might leave the system in an insecure or sub-optimal configuration.
    
    So, just restore the security feature flags to the defaults assumed
    by init_cpu_char_feature_flags() so it can set/clear them correctly,
    and to ensure safe settings are in place in case the hypercall fail.
    
    Fixes: f636c14790ea ("powerpc/pseries: Set or clear security feature flags")
    Depends-on: 19887d6a28e2 ("powerpc: Move default security feature flags")
    Signed-off-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a28ff26d5e4426c9d5587e981e020818adde93fb
Author: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
Date:   Sat May 26 14:27:45 2018 +1000

    powerpc/pseries: Fix clearing of security feature flags
    
    commit 0f9bdfe3c77091e8704d2e510eb7c2c2c6cde524 upstream.
    
    The H_CPU_BEHAV_* flags should be checked for in the 'behaviour' field
    of 'struct h_cpu_char_result' -- 'character' is for H_CPU_CHAR_*
    flags.
    
    Found by playing around with QEMU's implementation of the hypercall:
    
      H_CPU_CHAR=0xf000000000000000
      H_CPU_BEHAV=0x0000000000000000
    
      This clears H_CPU_BEHAV_FAVOUR_SECURITY and H_CPU_BEHAV_L1D_FLUSH_PR
      so pseries_setup_rfi_flush() disables 'rfi_flush'; and it also
      clears H_CPU_CHAR_L1D_THREAD_PRIV flag. So there is no RFI flush
      mitigation at all for cpu_show_meltdown() to report; but currently
      it does:
    
      Original kernel:
    
        # cat /sys/devices/system/cpu/vulnerabilities/meltdown
        Mitigation: RFI Flush
    
      Patched kernel:
    
        # cat /sys/devices/system/cpu/vulnerabilities/meltdown
        Not affected
    
      H_CPU_CHAR=0x0000000000000000
      H_CPU_BEHAV=0xf000000000000000
    
      This sets H_CPU_BEHAV_BNDS_CHK_SPEC_BAR so cpu_show_spectre_v1() should
      report vulnerable; but currently it doesn't:
    
      Original kernel:
    
        # cat /sys/devices/system/cpu/vulnerabilities/spectre_v1
        Not affected
    
      Patched kernel:
    
        # cat /sys/devices/system/cpu/vulnerabilities/spectre_v1
        Vulnerable
    
    Brown-paper-bag-by: Michael Ellerman <mpe@ellerman.id.au>
    Fixes: f636c14790ea ("powerpc/pseries: Set or clear security feature flags")
    Signed-off-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e2ba26dba5307d01fb9dd2ab813ee3b10f424cb0 ......
	 orig commit -> 9a868f634349e62922c226834aa23e3d1329ae7f ......
checking 4c5463a5a374c119a17a62f39ac3d1e2f8b7ea8d ......
	 orig commit -> c4bc36628d7f8b664657d8bd6ad1c44c177880b7 ......
checking d1cb5ff450d3ae87f57f680d9dcb707460302f8c ......
	 orig commit -> 921bc6cf807ceb2ab8005319cf39f33494d6b100 ......
checking 123f6d5ccaa2c3614b12bd12da14cab2b79f637f ......
	 orig commit -> 0063d61ccfc011f379a31acaeba6de7c926fed2c ......
checking 6af06dcdea08b1eace8088f6b39852d80a66312f ......
	 orig commit -> 84749a58b6e382f109abf1e734bc4dd43c2c25bb ......
checking d744f8457f2f0cc8c019ccbcf1432ea96896cb8b ......
	 orig commit -> abf110f3e1cea40f5ea15e85f5d67c39c14568a7 ......
		 abf110f3e1cea40f5ea15e85f5d67c39c14568a7 has problem. Fixes commit -> 501a78cbc17c329fabf8e9750a1e9ab810c88a0e
commit b90a6bddc8af8bf82ae4a7251a464c3b45bcd168
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Sat May 26 14:27:48 2018 +1000

    powerpc/64s: Fix section mismatch warnings from setup_rfi_flush()
    
    commit 501a78cbc17c329fabf8e9750a1e9ab810c88a0e upstream.
    
    The recent LPM changes to setup_rfi_flush() are causing some section
    mismatch warnings because we removed the __init annotation on
    setup_rfi_flush():
    
      The function setup_rfi_flush() references
      the function __init ppc64_bolted_size().
      the function __init memblock_alloc_base().
    
    The references are actually in init_fallback_flush(), but that is
    inlined into setup_rfi_flush().
    
    These references are safe because:
     - only pseries calls setup_rfi_flush() at runtime
     - pseries always passes L1D_FLUSH_FALLBACK at boot
     - so the fallback flush area will always be allocated
     - so the check in init_fallback_flush() will always return early:
       /* Only allocate the fallback flush area once (at boot time). */
       if (l1d_flush_fallback_area)
            return;
    
     - and therefore we won't actually call the freed init routines.
    
    We should rework the code to make it safer by default rather than
    relying on the above, but for now as a quick-fix just add a __ref
    annotation to squash the warning.
    
    Fixes: abf110f3e1ce ("powerpc/rfi-flush: Make it possible to call setup_rfi_flush() again")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5412a9d91d650ffbe8af17ffbf2f65f84fbd58e3 ......
	 orig commit -> 1e2a9fc7496955faacbbed49461d611b704a7505 ......
checking bf434b31bad640ef4ec34e5f92c5dc95b9e4ed44 ......
	 orig commit -> eb0a2d2620ae431c543963c8c7f08f597366fc60 ......
checking dff1a7e6c3ae2b79cdc23503d732a2b8c19a0296 ......
	 orig commit -> 582605a429e20ae68fd0b041b2e840af296edd08 ......
checking 2245d95d9f7a2746af23962e212ea556dc4ea653 ......
	 orig commit -> bdcb1aefc5b3f7d0f1dc8b02673602bca2ff7a4b ......
checking 421e1fadb0b0a648cc75afd5b3c826fa7daeaffc ......
	 orig commit -> d8f2f498d9ed0c5010bc1bbc1146f94c8bf9f8cc ......
checking b3ce16455c4b4de25e1c0dc23d0d4c03d5324e86 ......
	 orig commit -> 1eaafe91a0df4157521b6417b3dd8430bf5f52f0 ......
		 1eaafe91a0df4157521b6417b3dd8430bf5f52f0 has problem. Fixes commit -> 0cf9135b773bf32fba9dd8e6699c1b331ee4b749
commit 0c60bc18506e1157624107fbab1d7883f894fc72
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Mar 7 15:43:02 2019 -0800

    KVM: x86: Emulate MSR_IA32_ARCH_CAPABILITIES on AMD hosts
    
    commit 0cf9135b773bf32fba9dd8e6699c1b331ee4b749 upstream.
    
    The CPUID flag ARCH_CAPABILITIES is unconditioinally exposed to host
    userspace for all x86 hosts, i.e. KVM advertises ARCH_CAPABILITIES
    regardless of hardware support under the pretense that KVM fully
    emulates MSR_IA32_ARCH_CAPABILITIES.  Unfortunately, only VMX hosts
    handle accesses to MSR_IA32_ARCH_CAPABILITIES (despite KVM_GET_MSRS
    also reporting MSR_IA32_ARCH_CAPABILITIES for all hosts).
    
    Move the MSR_IA32_ARCH_CAPABILITIES handling to common x86 code so
    that it's emulated on AMD hosts.
    
    Fixes: 1eaafe91a0df4 ("kvm: x86: IA32_ARCH_CAPABILITIES is always supported")
    Cc: stable@vger.kernel.org
    Reported-by: Xiaoyao Li <xiaoyao.li@linux.intel.com>
    Cc: Jim Mattson <jmattson@google.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e765fd97e0c208623b810687a1f8d0a9b280dbbb ......
	 orig commit -> c4d2188206bafa177ea58e9a25b952baa0bf7712 ......
checking 16c463a4ecfa9f6720a79df3dcb49cbf89905051 ......
	 orig commit -> f4a551b72358facbbe5714248dff78404272feee ......
checking 9c5eee605677b460e6f759e6875769cc104d5ee0 ......
	 orig commit -> 0aa48468d00959c8a37cd3ac727284f4f7359151 ......
checking 058dfcf9c24f74f30a78f7c837b784054736cdf1 ......
	 orig commit -> 23d6aef74da86a33fa6bb75f79565e0a16ee97c2 ......
checking 1da530fe155d8c0d93d532ebd0df03955ebf931d ......
	 orig commit -> 3f1959721558a976aaf9c2024d5bc884e6411bf7 ......
checking b052960484fd40d6144a78773313c17154443177 ......
	 orig commit -> ed1596f9ab958dd156a66c9ff1029d3761c1786a ......
checking 9c7821c67a71884d338639ec00dc8f8519705214 ......
	 orig commit -> 0f901dcbc31f88ae41a2aaa365f7802b5d520a28 ......
checking afdc490b36b02426f54c166eb794fc009c48a6de ......
	 orig commit -> 8f89c007b6dec16a1793cb88de88fcc02117bbbc ......
checking 67dd0bad818914614e77c00ca2f259d2ad69f5a3 ......
	 orig commit -> a73ab244f0dad8fffb3291b905f73e2d3eaa7c00 ......
checking 0472f94cef2e2ba43c809875c13d7221d7f264c3 ......
	 orig commit -> 7a4deea1aa8bddfed4ef1b35fc2b6732563d8ad5 ......
checking 2a039b93679fb2e974bedf5b0d76da81731474ba ......
	 orig commit -> f7068114d45ec55996b9040e98111afa56e010fe ......
checking a59bd819576d9dc0ca279f2c1a4b3903ca786d12 ......
	 orig commit -> 8e907ed4882714fd13cfe670681fc6cb5284c780 ......
checking 7a5b3b91f858b8b63131fedd0d51c17c4e7b498f ......
	 orig commit -> f9e76ca3771bf23d2142a81a88ddd8f31f5c4c03 ......
checking df07f27184409a3d1ff4abc553a6f4a0366841ef ......
	 orig commit -> faf37c44a105f3608115785f17cbbf3500f8bc71 ......
checking 92169a015bdd69ca7cb31cc517d009256148a970 ......
	 orig commit -> 32c3fa7cdf0c4a3eb8405fc3e13398de019e828b ......
checking 760e4d7e89a53599a628cf7f176a4145b0e9dd29 ......
	 orig commit -> 938ae7259c908ad031da35d551da297640bb640c ......
checking a0f8cbce7b573a2d646e9fbbc33d59007d99c8e6 ......
	 orig commit -> 4855c92dbb7b3b85c23e88ab7ca04f99b9677b41 ......
checking 4182f5a075f134b93ed4ba79bfd3ed8f9fd1e8da ......
	 orig commit -> 136d769e0b3475d71350aa3648a116a6ee7a8f6c ......
checking 21712abb8ba2703185f4ea71c4355618bebc6b22 ......
	 orig commit -> 322579dcc865b94b47345ad1b6002ad167f85405 ......
checking f2a3c8bb4d102330bb0a5d60d729a29c26e2ebcc ......
	 orig commit -> 3de06d5a1f05c11c94cbb68af14dbfa7fb81d78b ......
checking 4da8f20a992c83f363f9302d5c316a4da4fc7485 ......
	 orig commit -> 5f651b870485ee60f5abbbd85195a6852978894a ......
checking ebedf0b290473b0bfb782a5354af85c98262b655 ......
	 orig commit -> 4c94238f37af87a2165c3fb491b4a8b50e90649c ......
checking f440ea85d429e59f63d626e017403cb09d9adbdb ......
	 orig commit -> 1e2e547a93a00ebc21582c06ca3c6cfea2a309ee ......
checking ba3fbb7afde9a70ac2f902fa62b79793789c3328 ......
	 orig commit -> 3ae180972564846e6d794e3615e1ab0a1e6c4ef9 ......
checking fbcede36bbfd69a9df511a22d14bccaaf36b412a ......
	 orig commit -> baf10564fbb66ea222cae66fbff11c444590ffd9 ......
checking b9659ff375cbb965bbfa3cbce1336b917aa0831e ......
	 orig commit -> 79f546a696bff2590169fb5684e23d65f4d9f591 ......
checking 1e5edf32e44d74f211d958c3fbe117f8f356010e ......
	 orig commit -> 30da870ce4a4e007c901858a96e9e394a1daa74a ......
checking 2871a701329c40f4d2e1581e19beae88a4715fd4 ......
	 orig commit -> ba3696e94d9d590d9a7e55f68e81c25dba515191 ......
checking bba75a0ccdb58317dda14464ae1c8dabfa55b230 ......
	 orig commit -> 9a3a92ccfe3620743d4ae57c987dc8e9c5f88996 ......
checking 769fc447cced0178dacdeb414a82ba70a7bd1188 ......
	 orig commit -> 71e909c0cdad28a1df1fa14442929e68615dee45 ......
checking 368b70857dd7d8a39735a2faa2f844a38f932d35 ......
	 orig commit -> 55a2aa08b3af519a9693f99cdf7fa6d8b62d9f65 ......

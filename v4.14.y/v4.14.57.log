Check from v4.14.57 to v4.14.58
Commit count: 45
checking f952480a8fc14ea24a4de9582e425924f98c92d3 ......
checking 3fcc143edcdd2ce497c9d2a0327c9b7ca1bbf403 ......
	 orig commit -> 229bc19fd7aca4f37964af06e3583c1c8f36b5d6 ......
checking ff42682f21d7084e0808171a973b0bcecd14ec14 ......
	 orig commit -> b03897cf318dfc47de33a7ecbc7655584266f034 ......
checking ea8a50e5f829ad3e855f45b29e96612a92bb1418 ......
	 orig commit -> d202797f480c0e5918e7642d6716cdc62b3ab5c9 ......
checking b12c7d0847e224301fb2323b5a85d866ead87199 ......
	 orig commit -> f88a333b44318643282b8acc92af90deda441f5e ......
checking 78cdeb665fb1f4cdc8fdbb95c584f916ba11f0f1 ......
	 orig commit -> 5c968f48021a9b3faa61ac2543cfab32461c0e05 ......
checking bbf9b1a46420191fe147a3d83bdce71fe594fea3 ......
	 orig commit -> e66515999b627368892ccc9b3a13a506f2ea1357 ......
checking 7c14cf21867cee5cb8f6b830d08769f01c1b69a7 ......
	 orig commit -> 9e3bff923913729d76d87f0015848ee7b8ff7083 ......
checking 65851c6b6d6ef51cfd37bd19e00a8045a58812ef ......
	 orig commit -> 432e629e56432064761be63bcd5e263c0920430d ......
checking 7e7fefde7dec77475457453f3e7e28acf3be1171 ......
	 orig commit -> 6b81b193b83e87da1ea13217d684b54fccf8ee8a ......
checking c7daaa272ddab653e2f2144e9dd497ded53a5bf7 ......
	 orig commit -> 3a498606bb04af603a46ebde8296040b2de350d1 ......
checking c84c7d8383c29effa009a03f05555ded0dce9bf3 ......
	 orig commit -> 38cd58ed9c4e389799b507bcffe02a7a7a180b33 ......
checking 294dc77bb75e358c9e8350fd6217305c680bf1b3 ......
	 orig commit -> 9ba8376ce1e2cbf4ce44f7e4bee1d0648e10d594 ......
checking 811ad4b366a60a7e05b20c3c8262bb95e69d4ade ......
	 orig commit -> df8ed346d4a806a6eef2db5924285e839604b3f9 ......
checking 78382d78bb4a99ba312bfeef8b23006eb9f2e368 ......
	 orig commit -> e7372197e15856ec4ee66b668020a662994db103 ......
checking 829f4fd66354560fa66c83a3d199453036bef7ed ......
	 orig commit -> e78bfb0751d4e312699106ba7efbed2bab1a53ca ......
checking 6403b54a4f7e097842d7814fe20124b32e5d3e1d ......
	 orig commit -> 8b7008620b8452728cadead460a36f64ed78c460 ......
		 8b7008620b8452728cadead460a36f64ed78c460 has problem. Fixes commit -> e78bfb0751d4e312699106ba7efbed2bab1a53ca
commit 829f4fd66354560fa66c83a3d199453036bef7ed
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Fri Jul 13 13:21:07 2018 +0200

    skbuff: Unconditionally copy pfmemalloc in __skb_clone()
    
    [ Upstream commit e78bfb0751d4e312699106ba7efbed2bab1a53ca ]
    
    Commit 8b7008620b84 ("net: Don't copy pfmemalloc flag in
    __copy_skb_header()") introduced a different handling for the
    pfmemalloc flag in copy and clone paths.
    
    In __skb_clone(), now, the flag is set only if it was set in the
    original skb, but not cleared if it wasn't. This is wrong and
    might lead to socket buffers being flagged with pfmemalloc even
    if the skb data wasn't allocated from pfmemalloc reserves. Copy
    the flag instead of ORing it.
    
    Reported-by: Sabrina Dubroca <sd@queasysnail.net>
    Fixes: 8b7008620b84 ("net: Don't copy pfmemalloc flag in __copy_skb_header()")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Tested-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking cc0ab64759c89a640e8d57c106e85e6816380337 ......
	 orig commit -> acc2cf4e37174646a24cba42fa53c668b2338d4e ......
checking cfb876dc30429879584dde6ced2b18f8d0757b3e ......
	 orig commit -> 107d01f5ba10f4162c38109496607eb197059064 ......
checking 9f7276ce825bb1324dca2515d7b5e5d320af77f2 ......
	 orig commit -> 83ed7d1fe2d2d4a11b30660dec20168bb473d9c1 ......
checking a5d33d38bd37a16b4af224d35f4abfc686bfab01 ......
	 orig commit -> 169dc027fb02492ea37a0575db6a658cf922b854 ......
checking 0348dcd98af3b9bf3ddf4785e74b335bdc65bc4d ......
	 orig commit -> 70ba5b6db96ff7324b8cfc87e0d0383cf59c9677 ......
checking c8347d91cfd7134e4fb242ac0a16511b589d7a5a ......
	 orig commit -> d5a672ac9f48f81b20b1cad1d9ed7bbf4e418d4c ......
checking dd1363ca743eebf1dd7ccb6f9010b9d6de3afafc ......
	 orig commit -> 37afe55b4ae0600deafe7c0e0e658593c4754f1b ......
checking 22c4488c864922b19dfed41c16ebf9568f78743b ......
	 orig commit -> 22b76bbe089cd901f5260ecb9a3dc41f9edb97a0 ......
checking 387362c3ed80bd266ab8cfdf971311044adbd478 ......
	 orig commit -> 96a85cc517a9ee4ae5e8d7f5a36cba05023784eb ......
checking d21fb63010c4c8ca6768c3744cfe9ed2c399c130 ......
	 orig commit -> 9fb8d5dc4b649dd190e1af4ead670753e71bf907 ......
		 9fb8d5dc4b649dd190e1af4ead670753e71bf907 has problem. Fixes commit -> 2610e88946632afb78aa58e61f11368ac4c0af7b
commit b6f194b64b11e897ba084778d626ce6f57a0563a
Author: Isaac J. Manjarres <isaacm@codeaurora.org>
Date:   Tue Jul 17 12:35:29 2018 -0700

    stop_machine: Disable preemption after queueing stopper threads
    
    commit 2610e88946632afb78aa58e61f11368ac4c0af7b upstream.
    
    This commit:
    
      9fb8d5dc4b64 ("stop_machine, Disable preemption when waking two stopper threads")
    
    does not fully address the race condition that can occur
    as follows:
    
    On one CPU, call it CPU 3, thread 1 invokes
    cpu_stop_queue_two_works(2, 3,...), and the execution is such
    that thread 1 queues the works for migration/2 and migration/3,
    and is preempted after releasing the locks for migration/2 and
    migration/3, but before waking the threads.
    
    Then, On CPU 2, a kworker, call it thread 2, is running,
    and it invokes cpu_stop_queue_two_works(1, 2,...), such that
    thread 2 queues the works for migration/1 and migration/2.
    Meanwhile, on CPU 3, thread 1 resumes execution, and wakes
    migration/2 and migration/3. This means that when CPU 2
    releases the locks for migration/1 and migration/2, but before
    it wakes those threads, it can be preempted by migration/2.
    
    If thread 2 is preempted by migration/2, then migration/2 will
    execute the first work item successfully, since migration/3
    was woken up by CPU 3, but when it goes to execute the second
    work item, it disables preemption, calls multi_cpu_stop(),
    and thus, CPU 2 will wait forever for migration/1, which should
    have been woken up by thread 2. However migration/1 cannot be
    woken up by thread 2, since it is a kworker, so it is affine to
    CPU 2, but CPU 2 is running migration/2 with preemption
    disabled, so thread 2 will never run.
    
    Disable preemption after queueing works for stopper threads
    to ensure that the operation of queueing the works and waking
    the stopper threads is atomic.
    
    Co-Developed-by: Prasad Sodagudi <psodagud@codeaurora.org>
    Co-Developed-by: Pavankumar Kondeti <pkondeti@codeaurora.org>
    Signed-off-by: Isaac J. Manjarres <isaacm@codeaurora.org>
    Signed-off-by: Prasad Sodagudi <psodagud@codeaurora.org>
    Signed-off-by: Pavankumar Kondeti <pkondeti@codeaurora.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: bigeasy@linutronix.de
    Cc: gregkh@linuxfoundation.org
    Cc: matt@codeblueprint.co.uk
    Fixes: 9fb8d5dc4b64 ("stop_machine, Disable preemption when waking two stopper threads")
    Link: http://lkml.kernel.org/r/1531856129-9871-1-git-send-email-isaacm@codeaurora.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 9a2e4a01ded2c88e11ef6640443462862c990a9b ......
	 orig commit -> 1463edca6734d42ab4406fa2896e20b45478ea36 ......
checking a5b8eae536723d3377d21fe60cb2f294332bb322 ......
	 orig commit -> 0e714d27786ce1fb3efa9aac58abc096e68b1c2a ......
checking dfc328156ddea2385394240c373a49bb42320b4c ......
	 orig commit -> 95d6c0857e54b788982746071130d822a795026b ......
checking 70ef1db1f21d5a9ee2ec997e57f9307cbbbbf5bb ......
	 orig commit -> e1f1b1572e8db87a56609fd05bef76f98f0e456a ......
checking be2657752e9eae45f21d69ffdd732f36e347cf62 ......
	 orig commit -> 9f15bde671355c351cf20d9f879004b234353100 ......
checking 95c58105bd974153505a3343537b009773e63b77 ......
	 orig commit -> 93312b6da4df31e4102ce5420e6217135a16c7ea ......
checking 3c732b3ab3a5fbfba43165140a8aa8d2d32592c7 ......
	 orig commit -> 64234961c145606b36eaa82c47b11be842b21049 ......
checking 13e5197d7ef6662f68fd033630f47c2d62d7ccd6 ......
	 orig commit -> 6e3761145a9ba3ce267c330b6bff51cf6a057b06 ......
checking edb5e3eeb14a5260e19010d0e3bb4cd0ebb3ca82 ......
	 orig commit -> af1fc5baa724c63ce1733dfcf855bad5ef6078e3 ......
checking a82d4478337a366dc2f95ac961a81260c6b4589e ......
	 orig commit -> 9a6249d2a145226ec1b294116fcb08744cf7ab56 ......
checking feefc072d10d646ee441289184b44d9db7ff2213 ......
	 orig commit -> 0fca97a29b83e3f315c14ed2372cfd0f9ee0a006 ......
checking 5d251646ab1588077b26e89dcaa116aba105d097 ......
	 orig commit -> 39675f7a7c7e7702f7d5341f1e0d01db746543a0 ......
checking 321089a0aa35bcc09f423180847aa15b69dc4f9f ......
	 orig commit -> 35033ab988c396ad7bce3b6d24060c16a9066db8 ......
checking 1450a7c5da03292fe4b022e58a92c9a9b91b27aa ......
	 orig commit -> fbdb328c6bae0a7c78d75734a738b66b86dffc96 ......
checking aa49e48232ee4dc78d736939f83057dc12d04366 ......
	 orig commit -> 2c991e408df6a407476dbc453d725e1e975479e7 ......
checking b4108288eab85f74e0fbe7ba781e319f365a26e7 ......
	 orig commit -> 6f6060a5c9cc76fdbc22748264e6aa3779ec2427 ......
checking 3a46a033bfa81d624a649bc11b92dad37d2f8d8b ......
	 orig commit -> b5020a8e6b54d2ece80b1e7dedb33c79a40ebd47 ......
checking 763ccb4d1980155e1f71290f9fc7950065ec77a6 ......
	 orig commit -> f13cff6c25bd8986627365346d123312ee7baa78 ......

Check from v4.14.89 to v4.14.90
Commit count: 73
checking 592f5569e18471c07208f74540f4e0f646b226f7 ......
checking ad962d20d4eb1e690ace8ca9e390e2b05a786999 ......
checking f1e1eb5c90b6b6a359e584e01468ce0c05801f4d ......
	 orig commit -> cd7f3a249dbed2858e6c2f30e5be7f1f7a709ee2 ......
checking 60e3480e0bbf00ffcec4b1409131cf01b69c7cf1 ......
	 orig commit -> d7dcdf9d4e15189ecfda24cc87339a3425448d5c ......
checking 07d4f1c4cd57b6ba4b23d243bcb8d1a63316e784 ......
	 orig commit -> ece27a337d42a3197935711997f2880f0957ed7e ......
checking 90265a60aff7ad21eed76a9e62159760d1d364b2 ......
	 orig commit -> 8469636ab5d8c77645b953746c10fda6983a8830 ......
checking c39910b57c7f557d304f50775eab28b6c892a7fd ......
	 orig commit -> 0544ee4b1ad574aec3b6379af5f5cdee42840971 ......
checking 4bdfff5c4f913c50a419b1e28e5893ebc04a09ff ......
	 orig commit -> 6c7f25cae54b840302e4f1b371dbf318fbf09ab2 ......
checking 73c821e378e86d9152bb53d9e261ac128b05e582 ......
	 orig commit -> 993107fea5eefdfdfde1ca38d3f01f0bebf76e77 ......
checking 7e43eec4b4587716505fcf388879e4191331e6fa ......
	 orig commit -> c38f57da428b033f2721b611d84b1f40bde674a8 ......
checking ab9697222a1da17b6a4e909fab554b6ae5691789 ......
	 orig commit -> 6e785302dad32228819d8066e5376acd15d0e6ba ......
checking 938199486ba9bc203fd312a6e02f7edb1640b2b4 ......
	 orig commit -> e594a5e349ddbfdaca1951bb3f8d72f3f1660d73 ......
checking d126d4bf34807707445c8716d9d7c3584a478cfe ......
	 orig commit -> ecb239d96d369c23c33d41708646df646de669f4 ......
checking a2cc1b2d1954ec291ef61aa6976ae10467895f8d ......
	 orig commit -> 3d0358d0ba048c5afb1385787aaec8fa5ad78fcc ......
checking 394f9a113b4c42672c24ce03697712643dc87dee ......
	 orig commit -> a1208f6a822ac29933e772ef1f637c5d67838da9 ......
checking e7c36edac701bad12b54f182de7b63b137307e62 ......
	 orig commit -> 1b603f9e4313348608f256b564ed6e3d9e67f377 ......
checking 1a130bc711d3931567575c0449cdd255859c1e58 ......
	 orig commit -> a74515604a7b171f2702bdcbd1e231225fb456d0 ......
checking 4b427e57f4f6eb3ad1c02d3faa3d551336f2fd59 ......
	 orig commit -> fd6f32f78645db32b6b95a42e45da2ddd6de0e67 ......
checking 647492ad7341cc76a9ebafeb67cea1664f674cca ......
	 orig commit -> 6c3516fed7b61a3527459ccfa67fab130d910610 ......
checking 2dc84c590cea6b1852e866132edb0079d477dbf6 ......
	 orig commit -> 5a6dab15f7a79817cab4af612ddd99eda793fce6 ......
checking 2f74717d0237cde6fa63a70be9de7b275e2e8cd0 ......
	 orig commit -> 2e85c57493e391b93445c1e0d530b36b95becc64 ......
checking d5f2432339ba2827d75f682887eac604afb06535 ......
	 orig commit -> d9f5b7f5dd0fa74a89de5a7ac1e26366f211ccee ......
checking 308d65a18461c90b2e4e14dac55478376382a5d3 ......
	 orig commit -> 098336deb946f37a70afc0979af388b615c378bf ......
checking 8b9860ad1efa031be8b37bbd60cdb699d0fdb64c ......
	 orig commit -> a51921c0db3fd26c4ed83dc0ec5d32988fa02aa5 ......
checking a19e57563ce7416727c7b318162972d780334020 ......
	 orig commit -> dac097c4546e4c5b16dd303a1e97c1d319c8ab3e ......
checking 6b37106bc20ab5265b113a67563d4fb0b5191153 ......
	 orig commit -> 6bd520ab7cf69486ea81fd3cdfd2d5a390ad1100 ......
checking 923e09c74a9ca2761d3fa5f2c31b497360138244 ......
	 orig commit -> 87d81a23e24f24ebe014891e8bdf3ff8785031e8 ......
checking c3f68415c9871e4828255ffb52b01ed4fe28dca1 ......
	 orig commit -> 0a9a4304f3614e25d9de9b63502ca633c01c0d70 ......
checking 76413fbfc7c1193b9b5b2a0fde8a90003adb32d3 ......
	 orig commit -> ad3cba223ac02dc769c3bbe88efe277bbb457566 ......
checking 27be23532ed8cdc4dbe872b9b3b16887d3252e17 ......
	 orig commit -> c01ac66b38660f2b507ccd0b75d28e3002d56fbb ......
checking 87c1a07b0e7f7127aa4be68864ef9cf6112e0535 ......
	 orig commit -> 3b5b3a3331d141e8f2a7aaae3a94dfa1e61ecbe4 ......
checking 32f91e02d0e93535b914bb8ed7111e5004dfdecd ......
	 orig commit -> 10d443431dc2bb733cf7add99b453e3fb9047a2e ......
checking 5094dea5acab748453e75fcb53db6fe9ce629ab7 ......
	 orig commit -> 3b712e43e3876b42b38321ecf790a1f5fe59c834 ......
checking 81710cedad2fa7ea3221cdf77bcb1d39683f07ac ......
	 orig commit -> 79c2206d369b87b19ac29cb47601059b6bf5c291 ......
checking 3a2c2aae1bca2e176bcc93f02ce4cc8fe8bda326 ......
	 orig commit -> 02f425f811cefcc4d325d7a72272651e622dc97e ......
checking 1e30cdb191150be718bb01d0eb21c790ac24a1c3 ......
	 orig commit -> 5db6dd14b31397e8cccaaddab2ff44ebec1acf25 ......
checking ce28c745aafcd5ae6a5a85731c8585e1cf0e3e2e ......
	 orig commit -> 10f91c73cc41ceead210a905dbd196398e99c7d2 ......
checking 0d2d1629780025966c3fc793c201e387da18f5be ......
	 orig commit -> 05cc09de4c017663a217630682041066f2f9a5cd ......
checking 1f972505011c27d09423a46707789192a039b66a ......
	 orig commit -> 6cc65be4f6f2a7186af8f3e09900787c7912dad2 ......
checking 12f75e8ad273df5b4e0bdab97d55cc23be1a0d7f ......
	 orig commit -> 28a9a9e83ceae2cee25b9af9ad20d53aaa9ab951 ......
checking 8f8a5a9be2b422af6a7ea12a8fe2bdefdab754c5 ......
	 orig commit -> 911a26484c33e10de6237228ca1d7293548e9f49 ......
checking 603bd4dc73594c8ac39a578d9fae997ea04e3a17 ......
	 orig commit -> c470bdc1aaf36669e04ba65faf1092b2d1c6cabe ......
		 c470bdc1aaf36669e04ba65faf1092b2d1c6cabe has problem. Fixes commit -> 911a26484c33e10de6237228ca1d7293548e9f49
commit 8f8a5a9be2b422af6a7ea12a8fe2bdefdab754c5
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Tue Apr 3 11:35:22 2018 +0300

    mac80211: Fix condition validating WMM IE
    
    [ Upstream commit 911a26484c33e10de6237228ca1d7293548e9f49 ]
    
    Commit c470bdc1aaf3 ("mac80211: don't WARN on bad WMM parameters from
    buggy APs") handled cases where an AP reports a zeroed WMM
    IE. However, the condition that checks the validity accessed the wrong
    index in the ieee80211_tx_queue_params array, thus wrongly deducing
    that the parameters are invalid. Fix it.
    
    Fixes: c470bdc1aaf3 ("mac80211: don't WARN on bad WMM parameters from buggy APs")
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 5515c5bd3f560e89222cce52ea2f71c71687a2e8 ......
	 orig commit -> 0b8d9073539e217f79ec1bff65eb205ac796723d ......
checking 2a35d21a4d12fe774c46d17831e2938781179c83 ......
	 orig commit -> 2527d99789e248576ac8081530cd4fd88730f8c7 ......
checking 5d01e063296a80e93abe93803602e5cf37309865 ......
	 orig commit -> 7aa54be2976550f17c11a1c3e3630002dea39303 ......
		 7aa54be2976550f17c11a1c3e3630002dea39303 has problem. Fixes commit -> b987ffc18fb3b3b76b059aa9e372dbee26f7c4f2
checking 4e21502d37a503d4311e2bdb46a66aef783a7cfe ......
	 orig commit -> b247be3fe89b6aba928bf80f4453d1c4ba8d2063 ......
checking 49849a651b8456263391ae767be6f7d02af8ef26 ......
	 orig commit -> 53bf57fab7321fb42b703056a4c80fc9d986d170 ......
checking f2f76a2c666e9b09fa1fb903bdb20c756dc90e21 ......
	 orig commit -> c61da58d8a9ba9238250a548f00826eaf44af0f7 ......
checking 075703d79c3a0a603a69e09167f96c1a2502eabe ......
	 orig commit -> 3bea9adc96842b8a7345c7fb202c16ae9c8d5b25 ......
checking 7a617996cba577806960e87882e60d7444d01df4 ......
	 orig commit -> 59fb586b4a07b4e1a0ee577140ab4842ba451acd ......
		 59fb586b4a07b4e1a0ee577140ab4842ba451acd has problem. Fixes commit -> 7aa54be2976550f17c11a1c3e3630002dea39303
commit 5d01e063296a80e93abe93803602e5cf37309865
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Dec 18 18:14:00 2018 +0100

    locking/qspinlock, x86: Provide liveness guarantee
    
    commit 7aa54be2976550f17c11a1c3e3630002dea39303 upstream.
    
    On x86 we cannot do fetch_or() with a single instruction and thus end up
    using a cmpxchg loop, this reduces determinism. Replace the fetch_or()
    with a composite operation: tas-pending + load.
    
    Using two instructions of course opens a window we previously did not
    have. Consider the scenario:
    
            CPU0            CPU1            CPU2
    
     1)     lock
              trylock -> (0,0,1)
    
     2)                     lock
                              trylock /* fail */
    
     3)     unlock -> (0,0,0)
    
     4)                                     lock
                                              trylock -> (0,0,1)
    
     5)                       tas-pending -> (0,1,1)
                              load-val <- (0,1,0) from 3
    
     6)                       clear-pending-set-locked -> (0,0,1)
    
                              FAIL: _2_ owners
    
    where 5) is our new composite operation. When we consider each part of
    the qspinlock state as a separate variable (as we can when
    _Q_PENDING_BITS == 8) then the above is entirely possible, because
    tas-pending will only RmW the pending byte, so the later load is able
    to observe prior tail and lock state (but not earlier than its own
    trylock, which operates on the whole word, due to coherence).
    
    To avoid this we need 2 things:
    
     - the load must come after the tas-pending (obviously, otherwise it
       can trivially observe prior state).
    
     - the tas-pending must be a full word RmW instruction, it cannot be an XCHGB for
       example, such that we cannot observe other state prior to setting
       pending.
    
    On x86 we can realize this by using "LOCK BTS m32, r32" for
    tas-pending followed by a regular load.
    
    Note that observing later state is not a problem:
    
     - if we fail to observe a later unlock, we'll simply spin-wait for
       that store to become visible.
    
     - if we observe a later xchg_tail(), there is no difference from that
       xchg_tail() having taken place before the tas-pending.
    
    Suggested-by: Will Deacon <will.deacon@arm.com>
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Will Deacon <will.deacon@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: andrea.parri@amarulasolutions.com
    Cc: longman@redhat.com
    Fixes: 59fb586b4a07 ("locking/qspinlock: Remove unbounded cmpxchg() loop from locking slowpath")
    Link: https://lkml.kernel.org/r/20181003130957.183726335@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    [bigeasy: GEN_BINARY_RMWcc macro redo]
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 5261ad70e2d673b9cfea7c81f309cabc847b7a27 ......
	 orig commit -> 625e88be1f41b53cec55827c984e4a89ea8ee9f9 ......
		 625e88be1f41b53cec55827c984e4a89ea8ee9f9 has problem. Fixes commit -> 6cc65be4f6f2a7186af8f3e09900787c7912dad2
commit 1f972505011c27d09423a46707789192a039b66a
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Jun 21 20:35:26 2018 -0400

    locking/qspinlock: Fix build for anonymous union in older GCC compilers
    
    [ Upstream commit 6cc65be4f6f2a7186af8f3e09900787c7912dad2 ]
    
    One of my tests compiles the kernel with gcc 4.5.3, and I hit the
    following build error:
    
      include/linux/semaphore.h: In function 'sema_init':
      include/linux/semaphore.h:35:17: error: unknown field 'val' specified in initializer
      include/linux/semaphore.h:35:17: warning: missing braces around initializer
      include/linux/semaphore.h:35:17: warning: (near initialization for '(anonymous).raw_lock.<anonymous>.val')
    
    I bisected it down to:
    
     625e88be1f41 ("locking/qspinlock: Merge 'struct __qspinlock' into 'struct qspinlock'")
    
    ... which makes qspinlock have an anonymous union, which makes initializing it special
    for older compilers. By adding strategic brackets, it makes the build
    happy again.
    
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Fixes: 625e88be1f41 ("locking/qspinlock: Merge 'struct __qspinlock' into 'struct qspinlock'")
    Link: http://lkml.kernel.org/r/20180621203526.172ab5c4@vmware.local.home
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 3dab30f33814dc0b97c001921d3d724004c09b5f ......
	 orig commit -> 6512276d97b160d90b53285bd06f7f201459a7e3 ......
checking 13f14c36323d71e2178d7d97dc65808c0e5c872e ......
	 orig commit -> 95bcade33a8af38755c9b0636e36a36ad3789fe6 ......
checking a9febd662cee68712aea69012944df00033d2dd8 ......
	 orig commit -> 548095dea63ffc016d39c35b32c628d033638aca ......
checking f02ef68bdad39ebf881f64cab027e8696fe57ade ......
	 orig commit -> 25896d073d8a0403b07e6dec56f58e6c33678207 ......
checking c8626858b2d873e2528d3099b896459947996247 ......
	 orig commit -> d55d8be0747c96db28a1d08fc24d22ccd9b448ac ......
checking 8a20046277e31905a1be1dc159f81668bc871d8c ......
	 orig commit -> cf66b8a0ba142fbd1bf10ac8f3ae92d1b0cb7b8f ......
checking 8b1bdb94166862ac57b5a1f39d8e293265326e58 ......
	 orig commit -> 63238173b2faf3d6b85a416f1c69af6c7be2413f ......
		 63238173b2faf3d6b85a416f1c69af6c7be2413f has problem. Fixes commit -> b8f9d7f37b6af829c34c49d1a4f73ce6ed58e403
checking d0a954cbfbd09c9106192f880dbe52bf448f11a8 ......
	 orig commit -> 24199c5436f267399afed0c4f1f57663c0408f57 ......
checking e89aa818353bccf626c317f0dee0d1cd7cdc6772 ......
	 orig commit -> 78e7b15e17ac175e7eed9e21c6f92d03d3b0a6fa ......
checking a28d5f3d9c08a160801754804490dbac4ef9e2e1 ......
	 orig commit -> 2840f84f74035e5a535959d5f17269c69fa6edc5 ......
checking b2e08ad9d4cb0d2c6776ff0a73903084ddc7588b ......
	 orig commit -> 3cec638b3d793b7cacdec5b8072364b41caeb0e1 ......
checking d17cc664f1ebc528b11a8db74c5b84910bf4ab14 ......
	 orig commit -> 687cf4412a343a63928a5c9d91bdc0f522939d43 ......
checking cd5d8a9203ed16bfb16a03c570fb4cf7e7899125 ......
	 orig commit -> f6c367585d0d851349d3a9e607c43e5bea993fa1 ......
checking 529571392b7a3efb91d12d70551ece5c0e60ece6 ......
	 orig commit -> 76f4e2c3b6a560cdd7a75b87df543e04d05a9e5f ......
checking c1149b873482a1f2a85659692376103e7d052dde ......
	 orig commit -> 2e64ff154ce6ce9a8dc0f9556463916efa6ff460 ......
checking 38ef9c5a931163eb8abf8f1c654d1b13de26f792 ......
	 orig commit -> b704441e38f645dcfba1348ca3cc1ba43d1a9f31 ......
checking 30d358d804dacc04c095a95ba8584fabca155e83 ......
	 orig commit -> e8cde625bfe8a714a856e1366bcbb259d7346095 ......
checking 87d143de94e24bc209b10750b1937d7b5b9ee648 ......
	 orig commit -> 3238c359acee4ab57f15abb5a82b8ab38a661ee7 ......
checking b99eaefb6850b38abdd8a2029bbfde08170ec6c9 ......
	 orig commit -> 01e881f5a1fca4677e82733061868c6d6ea05ca7 ......
checking 5f4610fe2ed4351b45c0d82b3246f18b886d26f9 ......
	 orig commit -> a538e3ff9dabcdf6c3f477a373c629213d1c3066 ......
checking 7ff0bcb2cb31602dd347b216f5f70851102d5067 ......
	 orig commit -> 478b6767ad26ab86d9ecc341027dd09a87b1f997 ......
checking 30c64b5a4f2b88de1c69fcc556eb4a1238ad5ac3 ......
	 orig commit -> 8e7df2b5b7f245c9bd11064712db5cb69044a362 ......

Check from v4.14.17 to v4.14.18
Commit count: 65
checking 81d0cc85caabe062991ea45ddada814835d47fb0 ......
checking 8d1ed7d4e1ce6d4d08676f5b2bb1a4e83b3ad5f7 ......
	 orig commit -> 0f5eb1545907edeea7672a9c1652c4231150ff22 ......
checking a252f37c5f8b998ccd419d1562a3c069890eb1d4 ......
	 orig commit -> 44117a1d1732c513875d5a163f10d9adbe866c08 ......
checking f6d90612c96c99d98f204c7641becfd7295a6fc2 ......
	 orig commit -> b2ac58f90540e39324e7a29a7ad471407ae0bf48 ......
checking 4a82531c96a20ab008e7f5a903e85d46a81fd3a3 ......
	 orig commit -> d28b387fb74da95d69d2615732f50cceb38e9a4d ......
		 d28b387fb74da95d69d2615732f50cceb38e9a4d has problem. Fixes commit -> ecb586bd29c99fb4de599dec388658e74388daad
commit 0d62a56dc454699790a43a57ffa4258ff909b3f5
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Feb 22 16:43:17 2018 +0100

    KVM/x86: Remove indirect MSR op calls from SPEC_CTRL
    
    commit ecb586bd29c99fb4de599dec388658e74388daad upstream.
    
    Having a paravirt indirect call in the IBRS restore path is not a
    good idea, since we are trying to protect from speculative execution
    of bogus indirect branch targets.  It is also slower, so use
    native_wrmsrl() on the vmentry path too.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Cc: David Woodhouse <dwmw@amazon.co.uk>
    Cc: KarimAllah Ahmed <karahmed@amazon.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kvm@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: d28b387fb74da95d69d2615732f50cceb38e9a4d
    Link: http://lkml.kernel.org/r/20180222154318.20361-2-pbonzini@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0716f551d5a29dc3abb128996aa02269b527fa45 ......
	 orig commit -> 28c1c9fabf48d6ad596273a11c46e0d0da3e14cd ......
		 28c1c9fabf48d6ad596273a11c46e0d0da3e14cd has problem. Fixes commit -> 1eaafe91a0df4157521b6417b3dd8430bf5f52f0
commit b3ce16455c4b4de25e1c0dc23d0d4c03d5324e86
Author: Jim Mattson <jmattson@google.com>
Date:   Wed May 9 14:29:35 2018 -0700

    kvm: x86: IA32_ARCH_CAPABILITIES is always supported
    
    commit 1eaafe91a0df4157521b6417b3dd8430bf5f52f0 upstream.
    
    If there is a possibility that a VM may migrate to a Skylake host,
    then the hypervisor should report IA32_ARCH_CAPABILITIES.RSBA[bit 2]
    as being set (future work, of course). This implies that
    CPUID.(EAX=7,ECX=0):EDX.ARCH_CAPABILITIES[bit 29] should be
    set. Therefore, kvm should report this CPUID bit as being supported
    whether or not the host supports it.  Userspace is still free to clear
    the bit if it chooses.
    
    For more information on RSBA, see Intel's white paper, "Retpoline: A
    Branch Target Injection Mitigation" (Document Number 337131-001),
    currently available at https://bugzilla.kernel.org/show_bug.cgi?id=199511.
    
    Since the IA32_ARCH_CAPABILITIES MSR is emulated in kvm, there is no
    dependency on hardware support for this feature.
    
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Fixes: 28c1c9fabf48 ("KVM/VMX: Emulate MSR_IA32_ARCH_CAPABILITIES")
    Cc: stable@vger.kernel.org
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d395d69de67ea95760e1f207eb0f6fdfbcb6e069 ......
	 orig commit -> 15d45071523d89b3fb7372e2135fbd72f6af9506 ......
		 15d45071523d89b3fb7372e2135fbd72f6af9506 has problem. Fixes commit -> fd65d3142f734bc4376053c8d75670041903134d
commit 57e972ecad4fdee027a690b64c7d619dae489015
Author: Jim Mattson <jmattson@google.com>
Date:   Tue May 22 09:54:20 2018 -0700

    kvm: svm: Ensure an IBPB on all affected CPUs when freeing a vmcb
    
    commit fd65d3142f734bc4376053c8d75670041903134d upstream.
    
    Previously, we only called indirect_branch_prediction_barrier on the
    logical CPU that freed a vmcb. This function should be called on all
    logical CPUs that last loaded the vmcb in question.
    
    Fixes: 15d45071523d ("KVM/x86: Add IBPB support")
    Reported-by: Neel Natu <neelnatu@google.com>
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8f7c4d52a0e82854e5ccc15a2b53d3ab3efe0452 ......
	 orig commit -> b7b27aa011a1df42728d1768fc181d9ce69e6911 ......
checking 4c8298c1fdd3317658a3dcd055b19a4c60df947d ......
	 orig commit -> af189c95a371b59f493dbe0f50c0a09724868881 ......
checking 6dd1f6989a545446661d0cbecf8748c8d2093549 ......
	 orig commit -> 4bf5d56d429cbc96c23d809a08f63cd29e1a702e ......
checking ebaf2271a024a7000dc83e061349f7bbf2b44281 ......
	 orig commit -> 9005c6834c0ffdfe46afa76656bd9276cca864f6 ......
		 9005c6834c0ffdfe46afa76656bd9276cca864f6 has problem. Fixes commit -> 9de29eac8d2189424d81c0d840cd0469aa3d41c8
commit 7d7ebee6ce113fff252f1b923fbbbad83b1221b8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Feb 14 10:14:17 2018 +0300

    x86/spectre: Fix an error message
    
    commit 9de29eac8d2189424d81c0d840cd0469aa3d41c8 upstream.
    
    If i == ARRAY_SIZE(mitigation_options) then we accidentally print
    garbage from one space beyond the end of the mitigation_options[] array.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: David Woodhouse <dwmw@amazon.co.uk>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: KarimAllah Ahmed <karahmed@amazon.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kernel-janitors@vger.kernel.org
    Fixes: 9005c6834c0f ("x86/spectre: Simplify spectre_v2 command line parsing")
    Link: http://lkml.kernel.org/r/20180214071416.GA26677@mwanda
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 838dbae0acd06da5fb0d0173dfddc72ca5650eb0 ......
	 orig commit -> 66f793099a636862a71c59d4a6ba91387b155e0c ......
checking 6f6eb84b14aca572ebe50984be94e036075e6e2b ......
	 orig commit -> 085331dfc6bbe3501fb936e657331ca943827600 ......
checking 7f8da2c8a191f274600bafcf6e58f54e16d5c8de ......
	 orig commit -> 904e14fb7cb96401a7dc803ca2863fd5ba32ffe6 ......
checking ad368e5b2d56ed059ebc8343cd7e713f3a7717d4 ......
	 orig commit -> 12c69f1e94c89d40696e83804dd2f0965b5250cd ......
checking 7a3f12294da45e779b313b33077f04b87782985b ......
	 orig commit -> 18bf3c3ea8ece8f03b6fc58508f2dfd23c7711c7 ......
		 18bf3c3ea8ece8f03b6fc58508f2dfd23c7711c7 has problem. Fixes commit -> dbfe2953f63c640463c630746cd5d9de8b2f63ae
commit 4741e31931b27b9eba1e9df02d781a2f808b7d82
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue Sep 25 14:38:18 2018 +0200

    x86/speculation: Apply IBPB more strictly to avoid cross-process data leak
    
    commit dbfe2953f63c640463c630746cd5d9de8b2f63ae upstream
    
    Currently, IBPB is only issued in cases when switching into a non-dumpable
    process, the rationale being to protect such 'important and security
    sensitive' processess (such as GPG) from data leaking into a different
    userspace process via spectre v2.
    
    This is however completely insufficient to provide proper userspace-to-userpace
    spectrev2 protection, as any process can poison branch buffers before being
    scheduled out, and the newly scheduled process immediately becomes spectrev2
    victim.
    
    In order to minimize the performance impact (for usecases that do require
    spectrev2 protection), issue the barrier only in cases when switching between
    processess where the victim can't be ptraced by the potential attacker (as in
    such cases, the attacker doesn't have to bother with branch buffers at all).
    
    [ tglx: Split up PTRACE_MODE_NOACCESS_CHK into PTRACE_MODE_SCHED and
      PTRACE_MODE_IBPB to be able to do ptrace() context tracking reasonably
      fine-grained ]
    
    Fixes: 18bf3c3ea8 ("x86/speculation: Use Indirect Branch Prediction Barrier in context switch")
    Originally-by: Tim Chen <tim.c.chen@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc:  "WoodhouseDavid" <dwmw@amazon.co.uk>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc:  "SchauflerCasey" <casey.schaufler@intel.com>
    Link: https://lkml.kernel.org/r/nycvar.YFH.7.76.1809251437340.15880@cbobk.fhfr.pm
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 85543d7613c481392d564a4956850591b2025f5d ......
	 orig commit -> 7fcae1118f5fd44a862aa5c3525248e35ee67c3b ......
checking c962dfa4aca010e05730ff458210b04c4eb9af14 ......
	 orig commit -> e698dcdfcda41efd0984de539767b4cddd235f1e ......
checking 863b308dbb1945949529a0e523c34636430884a7 ......
	 orig commit -> edfbae53dab8348fca778531be9f4855d2ca0360 ......
checking c9daf8144642b9daad69ab50e9cba5ecea2c8e25 ......
	 orig commit -> 259d8c1e984318497c84eef547bbb6b1d9f4eb05 ......
checking 98116c32d3b4b60bc1add46a81ed4f991ef02a7d ......
	 orig commit -> 56c30ba7b348b90484969054d561f711ba196507 ......
checking 0035134041207f990e0756e2a6f63b7dc3bfe95b ......
	 orig commit -> 2fbd7af5af8665d18bcefae3e9700be07e22b681 ......
checking edaf1538d3a5620862544a20aab14cb601787e1a ......
	 orig commit -> c7f631cb07e7da06ac1d231ca178452339e32a94 ......
checking 5f40de41ccae0c17105d8336e44d704dc5500a50 ......
	 orig commit -> 304ec1b050310548db33063e567123fae8fd0301 ......
checking 2406eb9f4568098f2353f1c9267dbe7e7f4a546b ......
	 orig commit -> b5c4ae4f35325d520b230bab6eb3310613b72ac1 ......
checking 31c5b332189ec6692ddd92269261db93c835a4d9 ......
	 orig commit -> b3bbfb3fb5d25776b8e3f361d2eedaabb0b496cd ......
checking 437ac7b6868da05620764c143c0e4f7aa91e8fc7 ......
	 orig commit -> b3d7ad85b80bbc404635dca80f5b129f6242bc7a ......
checking 4820d42835b2741fc18b8f6135c90dc1128974bc ......
	 orig commit -> babdde2698d482b6c0de1eab4f697cf5856c5859 ......
		 babdde2698d482b6c0de1eab4f697cf5856c5859 has problem. Fixes commit -> eab6870fee877258122a042bfd99ee7908c40280
commit 3ce79716a9ff97cfe2283606aed360ff7a8e3955
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jun 7 09:13:48 2018 -0700

    x86/spectre_v1: Disable compiler optimizations over array_index_mask_nospec()
    
    commit eab6870fee877258122a042bfd99ee7908c40280 upstream.
    
    Mark Rutland noticed that GCC optimization passes have the potential to elide
    necessary invocations of the array_index_mask_nospec() instruction sequence,
    so mark the asm() volatile.
    
    Mark explains:
    
    "The volatile will inhibit *some* cases where the compiler could lift the
     array_index_nospec() call out of a branch, e.g. where there are multiple
     invocations of array_index_nospec() with the same arguments:
    
            if (idx < foo) {
                    idx1 = array_idx_nospec(idx, foo)
                    do_something(idx1);
            }
    
            < some other code >
    
            if (idx < foo) {
                    idx2 = array_idx_nospec(idx, foo);
                    do_something_else(idx2);
            }
    
     ... since the compiler can determine that the two invocations yield the same
     result, and reuse the first result (likely the same register as idx was in
     originally) for the second branch, effectively re-writing the above as:
    
            if (idx < foo) {
                    idx = array_idx_nospec(idx, foo);
                    do_something(idx);
            }
    
            < some other code >
    
            if (idx < foo) {
                    do_something_else(idx);
            }
    
     ... if we don't take the first branch, then speculatively take the second, we
     lose the nospec protection.
    
     There's more info on volatile asm in the GCC docs:
    
       https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#Volatile
     "
    
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Fixes: babdde2698d4 ("x86: Implement array_index_mask_nospec")
    Link: https://lkml.kernel.org/lkml/152838798950.14521.4893346294059739135.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 478742cf80b732f6c3227c572184e18b6e8bcb05 ......
	 orig commit -> f3804203306e098dae9ca51540fcd5eb700d7f40 ......
checking e72041f70c3c7d149a8c444262173b7e70e3d4f8 ......
	 orig commit -> f84a56f73dddaeac1dba8045b007f742f61cd2da ......
checking fb9f2d9ab83d9ab1d5286db9432266b353c201c1 ......
	 orig commit -> 37a8f7c38339b22b69876d6f5a0ab851565284e3 ......
checking 90522d30b223fe35957fc8c8ee3b7a63dc9844b1 ......
	 orig commit -> d1f7732009e0549eedf8ea1db948dc37be77fd46 ......
checking 8459ebcbd6ecbbefd6455315985dc0da1a450b13 ......
	 orig commit -> 21d375b6b34ff511a507de27bf316b3dde6938d9 ......
checking 74ae346691dd34d49a5e733af40ca25a4dd42245 ......
	 orig commit -> 9471eee9186a46893726e22ebb54cade3f9bc043 ......
checking 04e073072d1494ce9f60cc2db68fb79aee4283dd ......
	 orig commit -> 55f49fcb879fbeebf2a8c1ac7c9e6d90df55f798 ......
checking 23a4ca4e749a300a29abff1e304c55b55b6e59a3 ......
	 orig commit -> 830c1e3d16b2c1733cd1ec9c8f4d47a398ae31bc ......
checking 3e04e09855c5cbc4f18c2d14bec326b1ff6f11f6 ......
	 orig commit -> 17bc33914bcc98ba3c6b426fd1c49587a25c0597 ......
checking a358df03279e806f8f4217eacf813c5b6c3578ee ......
	 orig commit -> a845c7cf4b4cb5e9e3b2823867892b27646f3a98 ......
checking 92f4b68ed14c7731cadd5bf7501a98da5302c093 ......
	 orig commit -> f21f165ef922c2146cc5bdc620f542953c41714b ......
checking 2e9521197f08d8cec826d3a5ff04131e40a79120 ......
	 orig commit -> de3a0021a60635de96aa92713c1a31a96747d72c ......
checking 76f06358ec400cd5f7c8260fd290e7a7ee20fbcf ......
	 orig commit -> 0cab20cec0b663b7be8e2be5998d5a4113647f86 ......
checking bc484da3e18c13b15badcc861e816514ccd86f8c ......
	 orig commit -> 0b9335cbd38e3bd2025bcc23b5758df4ac035f75 ......
checking ce094a80f019049a7bfb6860a91f3856bd53ec3b ......
	 orig commit -> 9a0ebbc93547d88f422905c34dcceebe928f3e9e ......
checking c8aa5cd906a583332f831b88a9d7177f0427b986 ......
	 orig commit -> 09c479f7f1fbfaf848e5813996793966cd50be81 ......
checking 9f8955f96bd520efc7def658ae61b67db20b1b46 ......
	 orig commit -> 64e16720ea0879f8ab4547e3b9758936d483909b ......
checking 52d78bce4965e685eea60763076f688272f963ea ......
	 orig commit -> 1dde7415e99933bb7293d6b2843752cbdb43ec11 ......
checking 7f3e0daa9e125d3d4d7720136370303009edbdeb ......
	 orig commit -> 2961298efe1ea1b6fc0d7ee8b76018fa6c0bcef2 ......
		 2961298efe1ea1b6fc0d7ee8b76018fa6c0bcef2 has problem. Fixes commit -> 7fcae1118f5fd44a862aa5c3525248e35ee67c3b
checking 249b1f7a7f09c9c5243f8c592ea7fb13871968bc ......
	 orig commit -> e383095c7fe8d218e00ec0f83e4b95ed4e627b02 ......
checking 91ff9a75f360eb89e913fcc4b3a7fbb602c67cbb ......
	 orig commit -> 55fa19d3e51f33d9cd4056d25836d93abf9438db ......
checking b955239cf4ea953eb5fca5409a5524daf20f642a ......
	 orig commit -> 7a32fc51ca938e67974cbb9db31e1a43f98345a9 ......
checking 67eb59b8ecfb319438706cee2cb67a3045b54494 ......
	 orig commit -> 0e6c16c652cadaffd25a6bb326ec10da5bcec6b4 ......
checking dbbbafce5380f2df32e142e5f08f17cf1b55b59c ......
	 orig commit -> 20ffa1caecca4db8f79fe665acdeaa5af815a24d ......
		 20ffa1caecca4db8f79fe665acdeaa5af815a24d has problem. Fixes commit -> ea00f301285ea2f07393678cd2b6057878320c9d
commit 1fed58f610b57c1190862819eba6f7bc5396b08d
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Feb 13 14:28:19 2018 +0100

    x86/speculation: Add <asm/msr-index.h> dependency
    
    commit ea00f301285ea2f07393678cd2b6057878320c9d upstream.
    
    Joe Konno reported a compile failure resulting from using an MSR
    without inclusion of <asm/msr-index.h>, and while the current code builds
    fine (by accident) this needs fixing for future patches.
    
    Reported-by: Joe Konno <joe.konno@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: arjan@linux.intel.com
    Cc: bp@alien8.de
    Cc: dan.j.williams@intel.com
    Cc: dave.hansen@linux.intel.com
    Cc: dwmw2@infradead.org
    Cc: dwmw@amazon.co.uk
    Cc: gregkh@linuxfoundation.org
    Cc: hpa@zytor.com
    Cc: jpoimboe@redhat.com
    Cc: linux-tip-commits@vger.kernel.org
    Cc: luto@kernel.org
    Fixes: 20ffa1caecca ("x86/speculation: Add basic IBPB (Indirect Branch Prediction Barrier) support")
    Link: http://lkml.kernel.org/r/20180213132819.GJ25201@hirez.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0fd222b19766ba28cf6e45b6ad461f1a303831bd ......
	 orig commit -> a5b2966364538a0e68c9fa29bc0a3a1651799035 ......
		 a5b2966364538a0e68c9fa29bc0a3a1651799035 has problem. Fixes commit -> 1ab534e85c93945f7862378d8c8adcf408205b19
commit f64979512c5e2c4015ed4b2bdf2291b4f294d451
Author: Andi Kleen <ak@linux.intel.com>
Date:   Fri Aug 24 10:03:51 2018 -0700

    x86/spectre: Add missing family 6 check to microcode check
    
    commit 1ab534e85c93945f7862378d8c8adcf408205b19 upstream.
    
    The check for Spectre microcodes does not check for family 6, only the
    model numbers.
    
    Add a family 6 check to avoid ambiguity with other families.
    
    Fixes: a5b296636453 ("x86/cpufeature: Blacklist SPEC_CTRL/PRED_CMD on early Spectre v2 microcodes")
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86@kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180824170351.34874-2-andi@firstfloor.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d9b47a41160c71b217582b9876129e3fbf587225 ......
	 orig commit -> fec9434a12f38d3aeafeb75711b71d8a1fdef621 ......
		 fec9434a12f38d3aeafeb75711b71d8a1fdef621 has problem. Fixes commit -> 4bf5d56d429cbc96c23d809a08f63cd29e1a702e
checking a65710dc584c1c424eb358a1f6e8c01d706e9f81 ......
	 orig commit -> 1e340c60d0dd3ae07b5bedc16a0469c14b9f3410 ......
checking 15ee82be40b6895edeb324435621ef1869aac173 ......
	 orig commit -> 5d10cbc91d9eb5537998b65608441b592eec65e7 ......
checking 343c91242d092852ab22411780f886317d7001aa ......
	 orig commit -> fc67dd70adb711a45d2ef34e12d1a8be75edde61 ......
checking 76c4bd53969bcbaf19fe12218785411b390fd14b ......
	 orig commit -> 95ca0ee8636059ea2800dfbac9ecac6212d6b38f ......
checking 86b5b1eb18aa49eedff2c9a9087fc48d03099844 ......
	 orig commit -> caf7501a1b4ec964190f31f9c3f163de252273b8 ......
		 caf7501a1b4ec964190f31f9c3f163de252273b8 has problem. Fixes commit -> e383095c7fe8d218e00ec0f83e4b95ed4e627b02
checking c927726674c7dfe42e8de585b70ffbd9ec775fc6 ......
	 orig commit -> c940a3fb1e2e9b7d03228ab28f375fb5a47ff699 ......
checking 76bee09efb89b0a71566bec5f36d9e65d9034aef ......
	 orig commit -> 1a29b5b7f347a1a9230c1e0af5b37e3e571588ab ......
checking 4ce354deed2cc18b5b2175cf487011e375e89c75 ......
	 orig commit -> 1df37383a8aeabb9b418698f0bcdffea01f4b1b2 ......
checking d6eded6c94530cb2f359f1fbffcb5f92ee0fa8b2 ......
	 orig commit -> 236003e6b5443c45c18e613d2b0d776a9f87540e ......
checking 517bdccc3af650316046801fdcd828d7b6aa42ba ......
	 orig commit -> fd6e440f20b1a4304553775fc55938848ff617c9 ......
checking 16d3d10d29f753d0247d94f5e889e93dd13f56bb ......
	 orig commit -> 4cc90b4cc3d4955f79eae4f7f9d64e67e17b468e ......

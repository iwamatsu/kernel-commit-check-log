Check from v4.14.2 to v4.14.3
Commit count: 194
checking 191314edb326764c4481b09ccf7d00159abe4679 ......
checking 0f478f25d50cb6464678284a13f514fefc16e271 ......
	 orig commit -> b10effb92e272051dd1ec0d7be56bf9ca85ab927 ......
checking 10d0fd29310387313680b12cb69f7b9e11938c8e ......
	 orig commit -> 4aea7a5c5e940c1723add439f4088844cd26196d ......
		 4aea7a5c5e940c1723add439f4088844cd26196d has problem. Fixes commit -> 361a954e6a7215de11a6179ad9bdc07d7e394b04
745d0bd3af99ccc8c5f5822f808cd133eadad6ac
commit 0d99649c5eeac23cb9bd5f473170e922f0bf693f
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Wed Jan 31 16:26:27 2018 +0900

    e1000e: Remove Other from EIAC
    
    commit 745d0bd3af99ccc8c5f5822f808cd133eadad6ac upstream.
    
    It was reported that emulated e1000e devices in vmware esxi 6.5 Build
    7526125 do not link up after commit 4aea7a5c5e94 ("e1000e: Avoid receiver
    overrun interrupt bursts", v4.15-rc1). Some tracing shows that after
    e1000e_trigger_lsc() is called, ICR reads out as 0x0 in e1000_msix_other()
    on emulated e1000e devices. In comparison, on real e1000e 82574 hardware,
    icr=0x80000004 (_INT_ASSERTED | _LSC) in the same situation.
    
    Some experimentation showed that this flaw in vmware e1000e emulation can
    be worked around by not setting Other in EIAC. This is how it was before
    16ecba59bc33 ("e1000e: Do not read ICR in Other interrupt", v4.5-rc1).
    
    Fixes: 4aea7a5c5e94 ("e1000e: Avoid receiver overrun interrupt bursts")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit dd5456adab14a89c660508c01f7c736f6c6bebd4
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Thu Feb 8 15:47:13 2018 +0900

    e1000e: Fix queue interrupt re-raising in Other interrupt
    
    commit 361a954e6a7215de11a6179ad9bdc07d7e394b04 upstream.
    
    Restores the ICS write for Rx/Tx queue interrupts which was present before
    commit 16ecba59bc33 ("e1000e: Do not read ICR in Other interrupt", v4.5-rc1)
    but was not restored in commit 4aea7a5c5e94
    ("e1000e: Avoid receiver overrun interrupt bursts", v4.15-rc1).
    
    This re-raises the queue interrupts in case the txq or rxq bits were set in
    ICR and the Other interrupt handler read and cleared ICR before the queue
    interrupt was raised.
    
    Fixes: 4aea7a5c5e94 ("e1000e: Avoid receiver overrun interrupt bursts")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Acked-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d99649c5eeac23cb9bd5f473170e922f0bf693f
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Wed Jan 31 16:26:27 2018 +0900

    e1000e: Remove Other from EIAC
    
    commit 745d0bd3af99ccc8c5f5822f808cd133eadad6ac upstream.
    
    It was reported that emulated e1000e devices in vmware esxi 6.5 Build
    7526125 do not link up after commit 4aea7a5c5e94 ("e1000e: Avoid receiver
    overrun interrupt bursts", v4.15-rc1). Some tracing shows that after
    e1000e_trigger_lsc() is called, ICR reads out as 0x0 in e1000_msix_other()
    on emulated e1000e devices. In comparison, on real e1000e 82574 hardware,
    icr=0x80000004 (_INT_ASSERTED | _LSC) in the same situation.
    
    Some experimentation showed that this flaw in vmware e1000e emulation can
    be worked around by not setting Other in EIAC. This is how it was before
    16ecba59bc33 ("e1000e: Do not read ICR in Other interrupt", v4.5-rc1).
    
    Fixes: 4aea7a5c5e94 ("e1000e: Avoid receiver overrun interrupt bursts")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 830466993daf09adbd179e4c74db07279a088f8c ......
	 orig commit -> 19110cfbb34d4af0cdfe14cd243f3b09dc95b013 ......
		 19110cfbb34d4af0cdfe14cd243f3b09dc95b013 has problem. Fixes commit -> 4e7dc08e57c95673d2edaba8983c3de4dd1f65f5
4110e02eb45ea447ec6f5459c9934de0a273fb91
commit dc2aa33a101d4fae88272819029a14c603d1168a
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Tue Mar 6 10:55:52 2018 +0900

    Revert "e1000e: Separate signaling for link check/link up"
    
    commit 3016e0a0c91246e55418825ba9aae271be267522 upstream.
    
    This reverts commit 19110cfbb34d4af0cdfe14cd243f3b09dc95b013.
    This reverts commit 4110e02eb45ea447ec6f5459c9934de0a273fb91.
    This reverts commit d3604515c9eda464a92e8e67aae82dfe07fe3c98.
    
    Commit 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    changed what happens to the link status when there is an error which
    happens after "get_link_status = false" in the copper check_for_link
    callbacks. Previously, such an error would be ignored and the link
    considered up. After that commit, any error implies that the link is down.
    
    Revert commit 19110cfbb34d ("e1000e: Separate signaling for link check/link
    up") and its followups. After reverting, the race condition described in
    the log of commit 19110cfbb34d is reintroduced. It may still be triggered
    by LSC events but this should keep the link down in case the link is
    electrically unstable, as discussed. The race may no longer be
    triggered by RXO events because commit 4aea7a5c5e94 ("e1000e: Avoid
    receiver overrun interrupt bursts") restored reading icr in the Other
    handler.
    
    Link: https://lkml.org/lkml/2018/3/1/789
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Acked-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1355ae4c345454f749b1cd54a8d201ac20ca270
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Tue Feb 20 15:12:00 2018 +0900

    e1000e: Fix check_for_link return value with autoneg off
    
    [ Upstream commit 4e7dc08e57c95673d2edaba8983c3de4dd1f65f5 ]
    
    When autoneg is off, the .check_for_link callback functions clear the
    get_link_status flag and systematically return a "pseudo-error". This means
    that the link is not detected as up until the next execution of the
    e1000_watchdog_task() 2 seconds later.
    
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbbc6c4eeb0a55935e0d4d89a46f3783cf170b84
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Mon Dec 11 16:26:40 2017 +0900

    e1000e: Fix e1000_check_for_copper_link_ich8lan return value.
    
    commit 4110e02eb45ea447ec6f5459c9934de0a273fb91 upstream.
    
    e1000e_check_for_copper_link() and e1000_check_for_copper_link_ich8lan()
    are the two functions that may be assigned to mac.ops.check_for_link when
    phy.media_type == e1000_media_type_copper. Commit 19110cfbb34d ("e1000e:
    Separate signaling for link check/link up") changed the meaning of the
    return value of check_for_link for copper media but only adjusted the first
    function. This patch adjusts the second function likewise.
    
    Reported-by: Christian Hesse <list@eworm.de>
    Reported-by: Gabriel C <nix.or.die@gmail.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=198047
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Tested-by: Christian Hesse <list@eworm.de>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 9884746ef5c21a9e7aeff6774825359796ef5cf3
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Tue Feb 20 15:12:00 2018 +0900

    e1000e: Fix check_for_link return value with autoneg off
    
    commit 4e7dc08e57c95673d2edaba8983c3de4dd1f65f5 upstream.
    
    When autoneg is off, the .check_for_link callback functions clear the
    get_link_status flag and systematically return a "pseudo-error". This means
    that the link is not detected as up until the next execution of the
    e1000_watchdog_task() 2 seconds later.
    
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1355ae4c345454f749b1cd54a8d201ac20ca270
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Tue Feb 20 15:12:00 2018 +0900

    e1000e: Fix check_for_link return value with autoneg off
    
    [ Upstream commit 4e7dc08e57c95673d2edaba8983c3de4dd1f65f5 ]
    
    When autoneg is off, the .check_for_link callback functions clear the
    get_link_status flag and systematically return a "pseudo-error". This means
    that the link is not detected as up until the next execution of the
    e1000_watchdog_task() 2 seconds later.
    
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbbc6c4eeb0a55935e0d4d89a46f3783cf170b84
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Mon Dec 11 16:26:40 2017 +0900

    e1000e: Fix e1000_check_for_copper_link_ich8lan return value.
    
    commit 4110e02eb45ea447ec6f5459c9934de0a273fb91 upstream.
    
    e1000e_check_for_copper_link() and e1000_check_for_copper_link_ich8lan()
    are the two functions that may be assigned to mac.ops.check_for_link when
    phy.media_type == e1000_media_type_copper. Commit 19110cfbb34d ("e1000e:
    Separate signaling for link check/link up") changed the meaning of the
    return value of check_for_link for copper media but only adjusted the first
    function. This patch adjusts the second function likewise.
    
    Reported-by: Christian Hesse <list@eworm.de>
    Reported-by: Gabriel C <nix.or.die@gmail.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=198047
    Fixes: 19110cfbb34d ("e1000e: Separate signaling for link check/link up")
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Tested-by: Christian Hesse <list@eworm.de>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2b91745f8a4accb0f04c07433ee4297054bc88b1 ......
	 orig commit -> d3509f8bc7b0560044c15f0e3ecfde1d9af757a6 ......
checking 8606bf0219f6632a931f7317dad0d4b672b1e035 ......
	 orig commit -> c4c40e51f9c32c6dd8adf606624c930a1c4d9bbb ......
checking 391243ca6dc70e52afed671c0837aceae198abf7 ......
	 orig commit -> dac4df1c5f2c34903f61b1bc4fc722e31b4199e7 ......
checking 5f24172d80a4a9d93e20d03b34491ee7a76602cd ......
	 orig commit -> dbc89253a7e15f8f031fb1eeb956de91204655e3 ......
checking 9f4482f1a31784fce0a09a68d1d5a19883c0eadf ......
	 orig commit -> d669fc2d42a43ee0abcf2396df6e9c5a124aa984 ......
checking 2b2c1ae5b3cb13673db2394cd90ad5eec5afefed ......
	 orig commit -> 7cddbef445631109bd530ce7cdacaa04ff0a62d1 ......
checking 3e85efe021070671b8d773560b49b03a16a4c9ec ......
	 orig commit -> 57b36f7fcb39c5eae8c1f463699f747af69643ba ......
checking 150dc29e1d99f0a58d52ec9fe0c93bb5ae86df37 ......
	 orig commit -> 1105a337375258515ed09b92a83fd7bfd6775958 ......
checking 2b4c45dc7d1b149dd4742d0579cdba044bde3482 ......
	 orig commit -> d048b36b9654c4e0cf0d3576be2d1ed2a3084c6f ......
checking 98f581f6aa4f79dbad1d00271f334d813e0870c2 ......
	 orig commit -> f7f5873bbd45a67d3097dfb55237ade2ad520184 ......
checking 7a51c88c35ae6fbd858a50eef3f30719242659c5 ......
	 orig commit -> 4ee8e51b9edfe7845a094690a365c844e5a35b4b ......
checking 2e7706a2a5e989b3f02d083c3c8829a39ec8482f ......
	 orig commit -> e69b987a97599456b95b5fef4aca8dcdb1505aea ......
checking 88a703f31bdf4b609e838495c733aa6c3f270c33 ......
	 orig commit -> 5232c37ce244db04fd50d160b92e40d2df46a2e9 ......
checking 242ceaf6dc6159e71078fb6d53ecf62d2627da9f ......
	 orig commit -> cd1a77e3c9cc6dbb57f02aa50e1740fc144d2dad ......
checking ab7724bf5bc1811fc83743627a8acbcd17ba7f7b ......
	 orig commit -> 9cac9d2fb2fe0e0cadacdb94415b3fe49e3f724f ......
checking 5a482b8a75500ec7516f3d11c7fb063e3f4abc45 ......
	 orig commit -> 6c3b047fa2d2286d5e438bcb470c7b1a49f415f6 ......
checking cfec97f26d299f64cb5dd94f5e391d74c9977486 ......
	 orig commit -> 829bbf268894d0866bb9dd2b1e430cfa5c5f0779 ......
checking e82273a266d03aeb00f0d27762ca306abbf14e01 ......
	 orig commit -> 3e45067f94bbd61dec0619b1c32744eb0de480c8 ......
checking 7da7bed3c80ffc818ea3955d1fb21df119c3e9d7 ......
	 orig commit -> b3120d2cc447ee77b9d69bf4ad7b452c9adb4d39 ......
checking 275e5c44679dcaed07007a8fbc634721afc7020d ......
	 orig commit -> 35602f82d0c765f991420e319c8d3a596c921eb8 ......
checking 34c8d3ffb64883b9279c03e79c1b08c9a1931940 ......
	 orig commit -> effc1b25088502fbd30305c79773de2d1f7470a6 ......
checking 2279e9c895778cc8942b82e6e9fa153d5024acc2 ......
	 orig commit -> 6a72dc038b615229a1b285829d6c8378d15c2347 ......
checking 45567ab5983900c5363019c5465b1dc46fa0218d ......
	 orig commit -> 7ece370996b694ae263025e056ad785afc1be5ab ......
checking de9c35508f80fc77804402f0d5a50885b43e3339 ......
	 orig commit -> 85e3f1adcb9d49300b0a943bb93f9604be375bfb ......
checking cee5a6e8c3966b146a255f121425a064559a0767 ......
	 orig commit -> 475b581ff57bc01437cbc680e281869918447763 ......
checking 586fa9ed8b4916c84f1284020843c825fff97e2c ......
	 orig commit -> 46725b17f1c6c815a41429259b3f070c01e71bc1 ......
checking 0b090846da0a14d24a2c943d3ae030692594c9f6 ......
	 orig commit -> f3f1dfd600ff82b18b7ea73d80eb27f476a6aa97 ......
checking 44a4adbc9949653a89e027a86caf373ec49a2fd1 ......
	 orig commit -> f79ad50ea3c73fb1ea5b09e95c864e5bb263adfb ......
checking df4d69feaf017cd2d6d521d5d32870e7e05f7121 ......
	 orig commit -> 252eb55816a6f69ef9464cad303cdb3326cdc61d ......
checking c7311af0e236710e57a71bc942d1fd1f968865a5 ......
	 orig commit -> 05f016d2ca7a4fab99d5d5472168506ddf95e74f ......
checking 00f886bb5545ea5eb82a9a0abf656257bb570957 ......
	 orig commit -> 0a9a17e3bb4564caf4bfe2a6783ae1287667d188 ......
checking 730501f25a42c88487458b0c08253734fd6ac6b2 ......
	 orig commit -> 7b8edcc685b5e2c3c37aa13dc50a88e84a5bfef8 ......
checking 61cef8f08c5121f1e7d192190c4f71a7eb6ec58f ......
	 orig commit -> f72271e2a0ae4277d53c4053f5eed8bb346ba38a ......
checking bc46257bf4d825e56566d2710b56efdc913b0eb6 ......
	 orig commit -> ae0c585d93dfaf923d2c7eb44b2c3ab92854ea9b ......
checking 0d8be80e5fc4c2e03bc9df9b0fb53e62981e8d53 ......
	 orig commit -> 1e1f9ca546556e508d021545861f6b5fc75a95fe ......
checking 8379910921d1658391d62d24e6534c4725563252 ......
	 orig commit -> c4cb99185b4cc96c0a1c70104dc21ae14d7e7f28 ......
checking 5727faafa56eeacb1f409969b373d912ef259ca5 ......
	 orig commit -> 52c6912fde0133981ee50ba08808f257829c4c93 ......
checking bb76fcebb9c9edf843581e44c6a0a60033f3a66f ......
	 orig commit -> 9d63f17661e25fd28714dac94bdebc4ff5b75f09 ......
checking eb2499b394805094884601b85d209bb9a9d16384 ......
	 orig commit -> c45e3e4c5b134b081e8af362109905427967eb19 ......
checking f92dea588014ae5083cac7ee33c88d58c9e87127 ......
	 orig commit -> 877add28178a7fa3c68f29c450d050a8e6513f08 ......
checking 2477321f8a1ae2920ba503e4216992bddfb33687 ......
	 orig commit -> 89548bcafec7ecfeea58c553f0834b5d575a66eb ......
checking c15ec17e8d8da60e07f81afe7c6f699b6233d80e ......
	 orig commit -> 8a0d18c62121d3c554a83eb96e2752861d84d937 ......
checking d555533d4238957beebbce0e92d190b95c8f5908 ......
	 orig commit -> d7d626179fb283aba73699071af0df6d00e32138 ......
checking 5449283f245d85c80077fd024491de5ae0e40907 ......
	 orig commit -> 5a3dc32372439eb9a0d6027c54cbfff64803fce5 ......
checking d56fd8a032ab2879b70f9b69c4f59713552c1f9a ......
	 orig commit -> c70ca38960399a63d5c048b7b700612ea321d17e ......
checking a7a05def6f722746259ae58079470ebb891b584d ......
	 orig commit -> 0bad47cada5defba13e98827d22d06f13258dfb3 ......
checking 65551fb50f05057da3f731059355fd67e6837a7b ......
	 orig commit -> c1fb3542074fd0c4d901d778bd52455111e4eb6f ......
checking d6667298d1d0d47de619b23078ceb83ec2c09d46 ......
	 orig commit -> b8ff981f88df03c72a4de2f6eaa9ce447a10ac03 ......
checking 913ff23bac73a9a8825942c957b6252ab3f8f198 ......
	 orig commit -> b18d4b8a25af6fe83d7692191d6ff962ea611c4f ......
checking 9a31016ea05be4c90ddf691f29aaf999e606e55e ......
	 orig commit -> 26417ae4fc6108f8db436f24108b08f68bdc520e ......
checking 0f8fb6d5c2b77631c9b8d45417d2146e914ddb1b ......
	 orig commit -> d34cb808402898e53b9a9bcbbedd01667a78723b ......
checking bf93b23582af410df8e9ddd682e9a5c4d48b2c65 ......
	 orig commit -> 33ec6dbc5a02677509d97fe36cd2105753f0f0ea ......
checking 210ecdf24e06fb076f40bf3d904d947deb70055e ......
	 orig commit -> e9d4bf219c83d09579bc62512fea2ca10f025d93 ......
checking d1c2e5668cfd6b0332330e711f3e86d7bfe29230 ......
	 orig commit -> 9f586fff6574f6ecbf323f92d44ffaf0d96225fe ......
checking c21261e6311a7d237da47b608e933f3abd7e534e ......
	 orig commit -> 957ac8c421ad8b5eef9b17fe98e146d8311a541e ......
checking a77360e989f3dc06e4f177a0837d533d13a20d91 ......
	 orig commit -> 8a1b43922d0d1279e7936ba85c4c2a870403c95f ......
checking 04d7f0cfd5a50cab9edfd73ceca460de5bdd55ac ......
	 orig commit -> 15038e14724799b8c205beb5f20f9e54896013c3 ......
checking 0b09ee40aae7ca0c4a7956dcbc5361c5ef7ccf2e ......
	 orig commit -> 21f2d551183847bc7fbe8d866151d00cdad18752 ......
checking f5073bc7c18358d08bc9dd39458bc469dc9e978d ......
	 orig commit -> 00bb6ae5006205e041ce9784c819460562351d47 ......
checking 665e6619705a19910ab3aaa81eb34343e9628da4 ......
	 orig commit -> dc3033e16c59a2c4e62b31341258a5786cbcee56 ......
checking ca655bc65e830819ded1b7a0b51a3beb204103a2 ......
	 orig commit -> 00ee9a1ca5080202bc37b44e998c3b2c74d45817 ......
checking c01dd3addb99763551f2717d1c7c6d20bd9491de ......
	 orig commit -> 4f8413a3a799c958f7a10a6310a451e6b8aef5ad ......
checking d92105f93aeb2c80f6840bed9af71d3f97321916 ......
	 orig commit -> f6eca2d43ed694ab8124dd24c88277f7eca93b7d ......
checking 77a38e88ccbc9e6451333f742b18d0fe5176c5cd ......
	 orig commit -> 4e9b6f20828ac880dbc1fa2fdbafae779473d1af ......
checking bbf6614675482ae339510e331c2350455b2292b8 ......
	 orig commit -> fc09785de0a364427a5df63d703bae9a306ed116 ......
checking 90b54bccdd9793d6e906baeb5975afa337987db8 ......
	 orig commit -> a371c10ea4b38a5f120e86d906d404d50a0f4660 ......
		 a371c10ea4b38a5f120e86d906d404d50a0f4660 has problem. Fixes commit -> d7bf31a0f85faaf63c63c39d55154825a1eaaea9
commit 2f29bedd5fc0387807d891ec1b7078d8807f5b6e
Author: Rayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>
Date:   Mon Feb 4 11:21:29 2019 -0800

    mailbox: bcm-flexrm-mailbox: Fix FlexRM ring flush timeout issue
    
    [ Upstream commit d7bf31a0f85faaf63c63c39d55154825a1eaaea9 ]
    
    RING_CONTROL reg was not written due to wrong address, hence all
    the subsequent ring flush was timing out.
    
    Fixes: a371c10ea4b3 ("mailbox: bcm-flexrm-mailbox: Fix FlexRM ring flush sequence")
    
    Signed-off-by: Rayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>
    Signed-off-by: Ray Jui <ray.jui@broadcom.com>
    Reviewed-by: Scott Branden <scott.branden@broadcom.com>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 39b3926aad065a371e6dba925d7835117a4b9c16 ......
	 orig commit -> 1d2fcdcf33339c7c8016243de0f7f31cf6845e8d ......
checking ff342113b7788420ae7da409e59afb8cd206b08d ......
	 orig commit -> 30863e38ebeb500a31cecee8096fb5002677dd9b ......
checking d54ca1d0ea19feb7aedd256b9f58a7478ef23819 ......
	 orig commit -> 739c64414f01748a36e7d82c8e0611dea94412bd ......
checking 54d8f6c8a454c5f177906d1a3a74b02113afc9bf ......
	 orig commit -> 1533bfa6f6b6bcca1ea1f172ef4a1c5ce5e7b335 ......
checking 460bad5fe1ae2ebcd9cb73ad7b51538996b722b2 ......
	 orig commit -> b9bb98424c51437973b854691aa1e9b2bfd348f5 ......
checking 7ad1a61d32af8a7d39dedcafaaf1f209237fa806 ......
	 orig commit -> 1530578abdac4edce9244c7a1962ded3ffdb58ce ......
checking fe1325027b4de33159853e0cf942abee58d01b74 ......
	 orig commit -> 1c21a48055a67ceb693e9c2587824a8de60a217c ......
checking 3c68944bda81603075e1205f066c9ff855d3ffe0 ......
	 orig commit -> 9574a497df2bbc0a676b609ce0dd24d237cee3a6 ......
checking 16870b7ba2855204af532c23fa973d530f4959b6 ......
	 orig commit -> fd2f928b0ddd2fe8876d4f1344df2ace2b715a4d ......
	 orig commit -> e3b88ee95b4e4bf3e9729a4695d695b9c7c296c8 ......
checking 66abe4fc44689abe5c8b23c22ea5a4092f46d7eb ......
	 orig commit -> 1c79df1f349fb6050016cea4ef1dfbc3853a5685 ......
checking 2ecb83e55b71c2831b96140aa564e6d72e956f0c ......
	 orig commit -> c58a252beb04cf0e02d6a746b2ed7ea89b6deb71 ......
	 orig commit -> a85d667e58bddf73be84d1981b41eaac985ed216 ......
checking 31c913191db3c680e1b71547e8d46713103ee805 ......
	 orig commit -> 88fb2fa7db7510bf1078226ab48d162d9854f3d4 ......
	 orig commit -> 51ec502a32665fed66c7f03799ede4023b212536 ......
checking 8009209a65167c899729e9a9d40fd3b809474c9d ......
	 orig commit -> 3fc9fb13a4b2576aeab86c62fd64eb29ab68659c ......
checking 84ab17cf4f30740eff6247d2bf657f8ee527b034 ......
	 orig commit -> ae072726f6109bb1c94841d6fb3a82dde298ea85 ......
checking f5b7da1110a481f64f3a0530862a1ac19fc4d48d ......
	 orig commit -> e7981a2c725f8e237f749fa1358997707d57e32c ......
checking 55d8b65043e7726d907c99d0034ad29669f98167 ......
	 orig commit -> 8e036a9497c5d565baafda4c648f2f372999a547 ......
checking 27b1313ce913feeef151d167eabc4a8f175d3ad3 ......
	 orig commit -> 1234a6d54fed8a00091968c4eb2fb52e1cbb8e2e ......
checking 6d697650498c0e540d2c1a23b07395ca7997055e ......
	 orig commit -> 401bb4169da655f3e5d28d0b208182e1ab60bf2a ......
checking 890d9fcd787e31d746070f6e4d5cdb674f8f1efc ......
	 orig commit -> 1901762f2ca2747ed269239ca5332a8023ce4e3d ......
checking 49414387c4ac273cb7e62632269ea3bef2c7f422 ......
	 orig commit -> 4a109032e3941413d8a029f619543fc5aec1d26d ......
checking 645fbe74f18409fcafca73763812190e077d2174 ......
	 orig commit -> 8653188763b56e0bcbdcab30cc7b059672c900ac ......
checking b5c87f23a703ac257134ac77f7902d0cc10d0a09 ......
	 orig commit -> 9523feac272ccad2ad8186ba4fcc89103754de52 ......
checking b178968f557219ae359cbd6c12d84f159038a38d ......
	 orig commit -> 8ee031631546cf2f7859cc69593bd60bbdd70b46 ......
checking d8319b3bbc296db662736b5c00ff79dccafa19a0 ......
	 orig commit -> 61b272c3aa170b3e461b8df636407b29f35f98eb ......
checking 357621bca2cb346513d7f4d8f57edb53bd7bbe44 ......
	 orig commit -> 11d49e9d089ccec81be87c2386dfdd010d7f7f6e ......
checking 04dd27af8ea24db24d0777a9ef3259621f32d6f5 ......
	 orig commit -> 07d70913dce59f3c8e5d0ca76250861158a9ca6c ......
checking 79e019f2a539a4ff25327a3831c7c74d0c73c196 ......
	 orig commit -> 316b7758c998fb13371d14bb6c9e45ab129c19a7 ......
checking eca496d8fe4bcad503e61dd4510907478ce00118 ......
	 orig commit -> 18c1bf35c1c09bca05cf70bc984a4764e0b0372b ......
checking 0bc4abfb872532fd567397ed414b3336f6df7971 ......
	 orig commit -> 560bfe774f058e97596f30ff71cffdac52b72914 ......
checking b177556318a731878a1e9e8a9bb28b98f7bc832c ......
	 orig commit -> 2d7fe6185722b0817bb345f62ab06b76a7b26542 ......
checking 665000d9507ac332b7dede78fb3f5dd7b6f77177 ......
	 orig commit -> d6c0615f510bc1ee26cfb2b9a3343ac99b9c46fb ......
checking 2ee1a8cf61714a960f7286d07890499553ea28e0 ......
	 orig commit -> c2432466f583cb719b35a41e757da587d9ab1d00 ......
checking 072c5925f867ecf3b1567f898abe7ace6b283079 ......
	 orig commit -> 3aabf94c2d95fe465d5fa8590113d1c1f7d8333d ......
checking 6352ec905f914143ca80ea68b8cbf30f6ae27aa3 ......
	 orig commit -> 3d4e8303f2c747c8540a0a0126d0151514f6468b ......
checking 47f25441ffcfb262b83ec8acc7d94eddc4727014 ......
	 orig commit -> 0a62d6c966956d77397c32836a5bbfe3af786fc1 ......
checking 5f7873c9945dd026e20d006dd18b75b8f05cdb5a ......
	 orig commit -> f658f17b5e0e339935dca23e77e0f3cad591926b ......
checking 7a0e3e553e0dfcabd7b5928f33352c0559afeb75 ......
	 orig commit -> d937cd6790a2bef2d07b500487646bd794c039bb ......
checking 27180144e50dccd03979469c3d714cad4815aa04 ......
	 orig commit -> 20e3f985bb875fea4f86b04eba4b6cc29bfd6b71 ......
checking 22e5190899e8d159fe59e0c0e3b9a1085ee5d4e8 ......
	 orig commit -> e9072d859df3e0f2c3ba450f0d1739595c2d5d13 ......
checking 713cb65003f1d1038d211606871b12ff555fb3f3 ......
	 orig commit -> 559db4c6d784ceedc2a5418ced4d357cb843e221 ......
checking b891e716b8f89b87e1da4976047810aeaf3bd59f ......
	 orig commit -> 51e3ae81ec58e95f10a98ef3dd6d7bce5d8e35a2 ......
checking 496e65f64903a3ad420a07466c5d008432136985 ......
	 orig commit -> f1601113ddc0339a745e702f4fb1ca37d4875e65 ......
checking 2f5be981622190fa85ba3eed31e974d73a2cae71 ......
	 orig commit -> 9a31d7ad997f55768c687974ce36b759065b49e5 ......
checking 9e9569f05ea699e2453f25fed562b3cb969b8aef ......
	 orig commit -> 0d6ec079d6aaa098b978d6395973bb027c752a03 ......
checking 47b02dcac666c310705621187557a84f0176d0f9 ......
	 orig commit -> 24c20305c7fc8959836211cb8c50aab93ae0e54f ......
checking a6ff2fb417898b57e5f81349731855763260b266 ......
	 orig commit -> 938b533d479e7428b7fa1b8179283646d2e2c53d ......
checking 5912d9ca14f93b7f10bdf75067d1d9cef4c161a6 ......
	 orig commit -> 6e518111060c2290427d79c43d4add9600ad852b ......
checking 7cd7a7aa01203bc4aebf6b89e09d39148f9b0bce ......
	 orig commit -> b90f6ff080c52e2f05364210733df120e3c4e597 ......
checking 459aad50a56bfca28cc41408448d08abdd7e17ae ......
	 orig commit -> d47c8ad261f787af22a220ffcc2d07afba809223 ......
checking 55e357bc316bc3f46e96bc55415cb7d512c8db6f ......
	 orig commit -> c2c48ddfc8b03b9ecb51d2832b586497b37531bc ......
checking 404dcc55b001e2d56d75fa0ea65635963f16fe68 ......
	 orig commit -> 3f2a162fab15aee243178b5308bb5d1206fc4043 ......
checking 9f724960c581097e6a84a2f4b9c77a9f17a372cc ......
	 orig commit -> 519ce2f933fa14acf69d5c8cabcc18711943d629 ......
checking 584f0bb5681a1ed7e05b30aabab2764d55cbc3cb ......
	 orig commit -> 95da1b3a5aded124dd1bda1e3cdb876184813140 ......
checking 5756707370240737fc8fca120c6e2b81c6b348c1 ......
	 orig commit -> b688741cb06695312f18b730653d6611e1bad28d ......
checking 2deb89453f74c576e145f4fd21664d175daf6bee ......
	 orig commit -> 3944369db701f075092357b511fd9f5755771585 ......
checking aed1a43399c78d7c329ec39b9a4d352216c40a16 ......
	 orig commit -> c05cefcc72416a37eba5a2b35f0704ed758a9145 ......
checking 57f3c05d030d38355daa001ac28a4c37238e2eb8 ......
	 orig commit -> fcfa447062b2061e11f68b846d61cbfe60d0d604 ......
checking afaacc000e07b084e37f5b0a0f79ce62a399f0c9 ......
	 orig commit -> f02fee227e5f21981152850744a6084ff3fa94ee ......
checking d628ac8abdfc0d3631cb76d6fc1f0b80d988b34f ......
	 orig commit -> 5b4267d195dd887c4412e34b5a7365baa741b679 ......
checking f1117628310079bbdd4a0fa951602419f258bead ......
	 orig commit -> 996478ca9c460886ac147eb0d00e99841b71d31b ......
checking f2122d66edb0a2df551eabce64ed364c8eb2d5da ......
	 orig commit -> 34be4dbf87fc3e474a842305394534216d428f5d ......
checking 1dd7dd07e875428e5f05ec55d90472ed6089b08e ......
	 orig commit -> f37650f1c7c71cf5180b43229d13b421d81e7170 ......
checking 5c21c3dde403cdf4b9c777e9dbd9399e6eb8e9b6 ......
	 orig commit -> 67f2519fe2903c4041c0e94394d14d372fe51399 ......
checking e9c80881b383df54cd519e10314dce4c47df8b8a ......
	 orig commit -> 91af8300d9c1d7c6b6a2fd754109e08d4798b8d8 ......
checking bcae2363e26309c8063384706dc1e546caed8a36 ......
	 orig commit -> b11270853fa3654f08d4a6a03b23ddb220512d8d ......
checking bc6e896836242678cd85252336e33d77039cdff3 ......
	 orig commit -> db86be3a12d0b6e5c5b51c2ab2a48f06329cb590 ......
checking ddf1264ec523c7ac7ae0dcbcaccd03a0a034b1b6 ......
	 orig commit -> a0b3bc855374c50b5ea85273553485af48caf2f7 ......
checking f94782668b5ae6ee496aadfdea2055dad610b0d5 ......
	 orig commit -> 31ccb1f7ba3cfe29631587d451cf5bb8ab593550 ......
checking 7b7f543793b95fe1d21d520ea5479e72bd11e7af ......
	 orig commit -> ecc0c469f27765ed1e2b967be0aa17cee1a60b76 ......
		 ecc0c469f27765ed1e2b967be0aa17cee1a60b76 has problem. Fixes commit -> 302ec300ef8a545a7fc7f667e5fd743b091c2eeb
commit d3d2f01a6eaf6022167c94afba34b6d6722392c9
Author: NeilBrown <neilb@suse.com>
Date:   Thu Dec 14 15:32:38 2017 -0800

    autofs: fix careless error in recent commit
    
    commit 302ec300ef8a545a7fc7f667e5fd743b091c2eeb upstream.
    
    Commit ecc0c469f277 ("autofs: don't fail mount for transient error") was
    meant to replace an 'if' with a 'switch', but instead added the 'switch'
    leaving the case in place.
    
    Link: http://lkml.kernel.org/r/87zi6wstmw.fsf@notabene.neil.brown.name
    Fixes: ecc0c469f277 ("autofs: don't fail mount for transient error")
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: NeilBrown <neilb@suse.com>
    Cc: Ian Kent <raven@themaw.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c1a14af38a50f714fb32581fcd083b49a28c7d41 ......
	 orig commit -> 5d03a6613957785e94af7a4a6212ad4af66aa5c2 ......
checking 769bfea594f5edb92b077b50ee58866a989ca2bb ......
	 orig commit -> bfa62a52cad93686bb8d8171ea5288813248a7c6 ......
checking 085d66519c3e643f15b91ed0ece025200a2257a5 ......
	 orig commit -> 409fcace9963c1e8d2cb0f7ac62e8b34d47ef979 ......
checking 8d187fa8e9b56a8516291df055d956ca32d453ee ......
	 orig commit -> 56a46acf62af5ba44fca2f3f1c7c25a2d5385b19 ......
checking dc3aceed47c35bfc5bcf67efea75c1109c7f6e20 ......
	 orig commit -> 547da673173de51f73887377eb275304775064ad ......
checking 43bce9f2eb96e6dd87dbb5850138960a6265b11a ......
	 orig commit -> 3cad14d56adbf7d621fc5a35db42f3acc0a2d6e8 ......
checking d63534042a1b279ab50b907a4d9bcd5f9d632e98 ......
	 orig commit -> 22b8ba765a726d90e9830ff6134c32b04f12c10f ......
		 22b8ba765a726d90e9830ff6134c32b04f12c10f has problem. Fixes commit -> c7fd89a6407ea3a44a2a2fa12d290162c42499c4
commit 43292e652771658e976dd6e263172b7043cb98f0
Author: James Hogan <jhogan@kernel.org>
Date:   Fri Nov 10 11:46:54 2017 +0000

    MIPS: Fix odd fp register warnings with MIPS64r2
    
    commit c7fd89a6407ea3a44a2a2fa12d290162c42499c4 upstream.
    
    Building 32-bit MIPS64r2 kernels produces warnings like the following
    on certain toolchains (such as GNU assembler 2.24.90, but not GNU
    assembler 2.28.51) since commit 22b8ba765a72 ("MIPS: Fix MIPS64 FP
    save/restore on 32-bit kernels"), due to the exposure of fpu_save_16odd
    from fpu_save_double and fpu_restore_16odd from fpu_restore_double:
    
    arch/mips/kernel/r4k_fpu.S:47: Warning: float register should be even, was 1
    ...
    arch/mips/kernel/r4k_fpu.S:59: Warning: float register should be even, was 1
    ...
    
    This appears to be because .set mips64r2 does not change the FPU ABI to
    64-bit when -march=mips64r2 (or e.g. -march=xlp) is provided on the
    command line on that toolchain, from the default FPU ABI of 32-bit due
    to the -mabi=32. This makes access to the odd FPU registers invalid.
    
    Fix by explicitly changing the FPU ABI with .set fp=64 directives in
    fpu_save_16odd and fpu_restore_16odd, and moving the undefine of fp up
    in asmmacro.h so fp doesn't turn into $30.
    
    Fixes: 22b8ba765a72 ("MIPS: Fix MIPS64 FP save/restore on 32-bit kernels")
    Signed-off-by: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/17656/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 43292e652771658e976dd6e263172b7043cb98f0 ......
	 orig commit -> c7fd89a6407ea3a44a2a2fa12d290162c42499c4 ......
checking e39516d24fb8c3c1bcf1b1b5ba20e0c7093e1512 ......
	 orig commit -> 8a74d29d541cd86569139c6f3f44b2d210458071 ......
checking 3bfb87ecb4f7e19c53c31b7beca4ecd9bb906a67 ......
	 orig commit -> b9a41d21dceadf8104812626ef85dc56ee8a60ed ......
checking 9be341edebf5880a53ff8b27d05c7d229797c4be ......
	 orig commit -> 8593b18ad348733b5d5ddfa0c79dcabf51dff308 ......
checking f17c786b28a3060a566a170c2cf3bd7441fc30a3 ......
	 orig commit -> 4bdced5c9a2922521e325896a7bbbf0132c94e56 ......
		 4bdced5c9a2922521e325896a7bbbf0132c94e56 has problem. Fixes commit -> 364f56653708ba8bcdefd4f0da2a42904baa8eeb
ad0f1d9d65938aec72a698116cd73a980916895e
f73c52a5bcd1710994e53fbccc378c42b97a06b6
commit 9c41a8453c826b58e470d23302d0e10aba3fd168
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Jan 23 20:45:37 2018 -0500

    sched/rt: Use container_of() to get root domain in rto_push_irq_work_func()
    
    commit ad0f1d9d65938aec72a698116cd73a980916895e upstream.
    
    When the rto_push_irq_work_func() is called, it looks at the RT overloaded
    bitmask in the root domain via the runqueue (rq->rd). The problem is that
    during CPU up and down, nothing here stops rq->rd from changing between
    taking the rq->rd->rto_lock and releasing it. That means the lock that is
    released is not the same lock that was taken.
    
    Instead of using this_rq()->rd to get the root domain, as the irq work is
    part of the root domain, we can simply get the root domain from the irq work
    that is passed to the routine:
    
     container_of(work, struct root_domain, rto_push_work)
    
    This keeps the root domain consistent.
    
    Reported-by: Pavan Kondeti <pkondeti@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 4bdced5c9a292 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/CAEU1=PkiHO35Dzna8EQqNSKW1fr1y1zRQ5y66X117MG06sQtNA@mail.gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 282e4b259d4f9429f7813efc8076dd601ed59f45
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Sat Dec 2 13:04:54 2017 -0500

    sched/rt: Do not pull from current CPU if only one CPU to pull
    
    commit f73c52a5bcd1710994e53fbccc378c42b97a06b6 upstream.
    
    Daniel Wagner reported a crash on the BeagleBone Black SoC.
    
    This is a single CPU architecture, and does not have a functional
    arch_send_call_function_single_ipi() implementation which can crash
    the kernel if that is called.
    
    As it only has one CPU, it shouldn't be called, but if the kernel is
    compiled for SMP, the push/pull RT scheduling logic now calls it for
    irq_work if the one CPU is overloaded, it can use that function to call
    itself and crash the kernel.
    
    Ideally, we should disable the SCHED_FEAT(RT_PUSH_IPI) if the system
    only has a single CPU. But SCHED_FEAT is a constant if sched debugging
    is turned off. Another fix can also be used, and this should also help
    with normal SMP machines. That is, do not initiate the pull code if
    there's only one RT overloaded CPU, and that CPU happens to be the
    current CPU that is scheduling in a lower priority task.
    
    Even on a system with many CPUs, if there's many RT tasks waiting to
    run on a single CPU, and that CPU schedules in another RT task of lower
    priority, it will initiate the PULL logic in case there's a higher
    priority RT task on another CPU that is waiting to run. But if there is
    no other CPU with waiting RT tasks, it will initiate the RT pull logic
    on itself (as it still has RT tasks waiting to run). This is a wasted
    effort.
    
    Not only does this help with SMP code where the current CPU is the only
    one with RT overloaded tasks, it should also solve the issue that
    Daniel encountered, because it will prevent the PULL logic from
    executing, as there's only one CPU on the system, and the check added
    here will cause it to exit the RT pull code.
    
    Reported-by: Daniel Wagner <wagi@monom.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-rt-users <linux-rt-users@vger.kernel.org>
    Fixes: 4bdced5c9 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/20171202130454.4cbbfe8d@vmware.local.home
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit d9c3131f2ab45eacb6641b29ea6ee69039c727a7
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Jan 23 20:45:38 2018 -0500

    sched/rt: Up the root domain ref count when passing it around via IPIs
    
    commit 364f56653708ba8bcdefd4f0da2a42904baa8eeb upstream.
    
    When issuing an IPI RT push, where an IPI is sent to each CPU that has more
    than one RT task scheduled on it, it references the root domain's rto_mask,
    that contains all the CPUs within the root domain that has more than one RT
    task in the runable state. The problem is, after the IPIs are initiated, the
    rq->lock is released. This means that the root domain that is associated to
    the run queue could be freed while the IPIs are going around.
    
    Add a sched_get_rd() and a sched_put_rd() that will increment and decrement
    the root domain's ref count respectively. This way when initiating the IPIs,
    the scheduler will up the root domain's ref count before releasing the
    rq->lock, ensuring that the root domain does not go away until the IPI round
    is complete.
    
    Reported-by: Pavan Kondeti <pkondeti@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 4bdced5c9a292 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/CAEU1=PkiHO35Dzna8EQqNSKW1fr1y1zRQ5y66X117MG06sQtNA@mail.gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c41a8453c826b58e470d23302d0e10aba3fd168
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Jan 23 20:45:37 2018 -0500

    sched/rt: Use container_of() to get root domain in rto_push_irq_work_func()
    
    commit ad0f1d9d65938aec72a698116cd73a980916895e upstream.
    
    When the rto_push_irq_work_func() is called, it looks at the RT overloaded
    bitmask in the root domain via the runqueue (rq->rd). The problem is that
    during CPU up and down, nothing here stops rq->rd from changing between
    taking the rq->rd->rto_lock and releasing it. That means the lock that is
    released is not the same lock that was taken.
    
    Instead of using this_rq()->rd to get the root domain, as the irq work is
    part of the root domain, we can simply get the root domain from the irq work
    that is passed to the routine:
    
     container_of(work, struct root_domain, rto_push_work)
    
    This keeps the root domain consistent.
    
    Reported-by: Pavan Kondeti <pkondeti@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 4bdced5c9a292 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/CAEU1=PkiHO35Dzna8EQqNSKW1fr1y1zRQ5y66X117MG06sQtNA@mail.gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 282e4b259d4f9429f7813efc8076dd601ed59f45
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Sat Dec 2 13:04:54 2017 -0500

    sched/rt: Do not pull from current CPU if only one CPU to pull
    
    commit f73c52a5bcd1710994e53fbccc378c42b97a06b6 upstream.
    
    Daniel Wagner reported a crash on the BeagleBone Black SoC.
    
    This is a single CPU architecture, and does not have a functional
    arch_send_call_function_single_ipi() implementation which can crash
    the kernel if that is called.
    
    As it only has one CPU, it shouldn't be called, but if the kernel is
    compiled for SMP, the push/pull RT scheduling logic now calls it for
    irq_work if the one CPU is overloaded, it can use that function to call
    itself and crash the kernel.
    
    Ideally, we should disable the SCHED_FEAT(RT_PUSH_IPI) if the system
    only has a single CPU. But SCHED_FEAT is a constant if sched debugging
    is turned off. Another fix can also be used, and this should also help
    with normal SMP machines. That is, do not initiate the pull code if
    there's only one RT overloaded CPU, and that CPU happens to be the
    current CPU that is scheduling in a lower priority task.
    
    Even on a system with many CPUs, if there's many RT tasks waiting to
    run on a single CPU, and that CPU schedules in another RT task of lower
    priority, it will initiate the PULL logic in case there's a higher
    priority RT task on another CPU that is waiting to run. But if there is
    no other CPU with waiting RT tasks, it will initiate the RT pull logic
    on itself (as it still has RT tasks waiting to run). This is a wasted
    effort.
    
    Not only does this help with SMP code where the current CPU is the only
    one with RT overloaded tasks, it should also solve the issue that
    Daniel encountered, because it will prevent the PULL logic from
    executing, as there's only one CPU on the system, and the check added
    here will cause it to exit the RT pull code.
    
    Reported-by: Daniel Wagner <wagi@monom.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-rt-users <linux-rt-users@vger.kernel.org>
    Fixes: 4bdced5c9 ("sched/rt: Simplify the IPI based RT balancing logic")
    Link: http://lkml.kernel.org/r/20171202130454.4cbbfe8d@vmware.local.home
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2bf483c9a402941b5594e5ac8ad3b2b4a335fd34 ......
	 orig commit -> 856eb0916d181da6d043cc33e03f54d5c5bbe54a ......
checking 13e6560075607ff354b48556f306bee925328325 ......
	 orig commit -> 5455f92b54e516995a9ca45bbf790d3629c27a93 ......
checking 08720bf98b6ac0a3ebffeb80c6c6cc992c374d90 ......
	 orig commit -> 74d4108d9e681dbbe4a2940ed8fdff1f6868184c ......
checking 4d7a55f5b8099224e250e5e87882e4d7168af129 ......
	 orig commit -> 9dc112e2daf87b40607fd8d357e2d7de32290d45 ......
checking ac29afdb459c9a75916edc1ee77e2d1e73c50353 ......
	 orig commit -> 114e025968b5990ad0b57bf60697ea64ee206aac ......
checking 8f71f493f46168bf48a02aaba5ae95335d8c7bb3 ......
	 orig commit -> 0440d5c0ca9744b92a07aeb6df0a9a75db6f4280 ......
checking ec544ec956bc791f08d66101bc1269c4d944df7f ......
	 orig commit -> d1260e2a3f85f4c1010510a15f89597001318b1b ......
checking a502cd2dd4689f0092c27c450786731c087a56e6 ......
	 orig commit -> 95b1369a9638cfa322ad1c0cde8efbe524059884 ......
checking ca90f34e2e80597dee73c2e8d55de364a34c112b ......
	 orig commit -> 9ceace3c9c18c67676e75141032a65a8e01f9a7a ......
checking a529422a5cb9c489f47647523779d2ea740d9918 ......
	 orig commit -> f2ddaf8dfd4a5071ad09074d2f95ab85d35c8a1e ......
checking f97ca60715d43d826657961db82b4704cb2f68c4 ......
	 orig commit -> 7f342678634f16795892677204366e835e450dda ......
checking c85364c66e7dd03336d70e98dd6fc5881f34dcb8 ......
	 orig commit -> 79aa801e899417a56863d6713f76c4e108856000 ......
checking d42e6a246cd75143e9133f740ac979011f81bc43 ......
	 orig commit -> c00054f540bf81e592e1fee709b0bdbf20f478b5 ......
checking 576bdf9642d97c8aafb0305960c00259d7438b06 ......
	 orig commit -> 94ac327e043ee40d7fc57b54541da50507ef4e99 ......
checking 7b4c6a3b394f86f6b78a688c092d8dcea976a59c ......
	 orig commit -> 7978db344719dab1e56d05e6fc04aaaddcde0a5e ......
checking 2031e243efeea84f4f121018715e8c7755ee1914 ......
	 orig commit -> 6a468d5990ecd1c2d07dd85f8633bbdd0ba61c40 ......
checking f6b7c54c2d0ee8fe4d3b1cdfdb1961a80be60d3f ......
	 orig commit -> ff57dc94faec023abc267cdc45766fccff497557 ......
checking a59e386c4f4fce346161c0a62a5e1fbc1f435d6f ......
	 orig commit -> 0d63785c6b94b5d2f095f90755825f90eea791f5 ......
checking 0d0a61fbc66724b2fdbbc7bf2b34354a4452efcd ......
	 orig commit -> 05a67cc258e75ac9758e6f13d26337b8be51162a ......
checking 8086ac5cdda0199d1231267808acc74cc75d6edf ......
	 orig commit -> 8ef4b43cd3794d63052d85898e42424fd3b14d24 ......
checking c792238027157d0fc6a80a8ea1b9d73443459d75 ......
	 orig commit -> a3f143106596d739e7fbc4b84c96b1475247d876 ......
checking 8177aa54c509056c599e7cf1c7e91630814686e6 ......
	 orig commit -> 0eef304bc9f7d079a1165e8cd2f24b078e9e1f2a ......
checking 33e58deefa0907ffba4d5a4c69f3641a649358d3 ......
	 orig commit -> b9f3eb499d84f8d4adcb2f9212ec655700b28228 ......
checking 30d3389d80eb0c6d2a49ffa07c8fd1eec5a49873 ......
	 orig commit -> 3b0c0c922ff4be275a8beb87ce5657d16f355b54 ......
checking cb7cc998a0e5f0f4572609ccc334de5a6260b406 ......
	 orig commit -> 400eeffaffc7232c0ae1134fe04e14ae4fb48d8c ......
checking ecc3c4795bc3c7624c7b727c91ef5328fda6fc79 ......
	 orig commit -> 6218f96c58dbf44a06aeaf767aab1f54fc397838 ......
checking c35be334862c2cc6f4dd58ba638c0e7b341c7862 ......
	 orig commit -> 58ba4d5a25579e5c7e312bd359c95f3a9a0a242c ......
checking f9a64e23a9da528e7d8aa1bd2c7bb92be4ebb724 ......
	 orig commit -> ca37e57bbe0cf1455ea3e84eb89ed04a132d59e1 ......
		 ca37e57bbe0cf1455ea3e84eb89ed04a132d59e1 has problem. Fixes commit -> 5b06bbcfc2c621da3009da8decb7511500c293ed
commit 3363914c6b2bf9370708ef296a004edc84012f24
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Nov 30 07:57:57 2017 -0800

    x86/power: Fix some ordering bugs in __restore_processor_context()
    
    [ Upstream commit 5b06bbcfc2c621da3009da8decb7511500c293ed ]
    
    __restore_processor_context() had a couple of ordering bugs.  It
    restored GSBASE after calling load_gs_index(), and the latter can
    call into tracing code.  It also tried to restore segment registers
    before restoring the LDT, which is straight-up wrong.
    
    Reorder the code so that we restore GSBASE, then the descriptor
    tables, then the segments.
    
    This fixes two bugs.  First, it fixes a regression that broke resume
    under certain configurations due to irqflag tracing in
    native_load_gs_index().  Second, it fixes resume when the userspace
    process that initiated suspect had funny segments.  The latter can be
    reproduced by compiling this:
    
    // SPDX-License-Identifier: GPL-2.0
    /*
     * ldt_echo.c - Echo argv[1] while using an LDT segment
     */
    
    int main(int argc, char **argv)
    {
            int ret;
            size_t len;
            char *buf;
    
            const struct user_desc desc = {
                    .entry_number    = 0,
                    .base_addr       = 0,
                    .limit           = 0xfffff,
                    .seg_32bit       = 1,
                    .contents        = 0, /* Data, grow-up */
                    .read_exec_only  = 0,
                    .limit_in_pages  = 1,
                    .seg_not_present = 0,
                    .useable         = 0
            };
    
            if (argc != 2)
                    errx(1, "Usage: %s STRING", argv[0]);
    
            len = asprintf(&buf, "%s\n", argv[1]);
            if (len < 0)
                    errx(1, "Out of memory");
    
            ret = syscall(SYS_modify_ldt, 1, &desc, sizeof(desc));
            if (ret < -1)
                    errno = -ret;
            if (ret)
                    err(1, "modify_ldt");
    
            asm volatile ("movw %0, %%es" :: "rm" ((unsigned short)7));
            write(1, buf, len);
            return 0;
    }
    
    and running ldt_echo >/sys/power/mem
    
    Without the fix, the latter causes a triple fault on resume.
    
    Fixes: ca37e57bbe0c ("x86/entry/64: Add missing irqflags tracing to native_load_gs_index()")
    Reported-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: https://lkml.kernel.org/r/6b31721ea92f51ea839e79bd97ade4a75b1eeea2.1512057304.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking c91f3fc2411d9f007fbbaf9b10f772805e01cafe ......
	 orig commit -> 548c3050ea8d16997ae27f9e080a8338a606fc93 ......
checking 00d5e292a8ea9675c6ac4583743b811fda6ba157 ......
	 orig commit -> 12a78d43de767eaf8fb272facb7a7b6f2dc6a9df ......
checking 46855f80d1a0174b008ac7c6b8439a1c294bcb53 ......
	 orig commit -> ac5292e9a294618cecb31109d1ba265e3d027ba2 ......
checking ce922b7b4a5178279eb5453e7fcb0b116c757f1e ......
	 orig commit -> 1d9ddde12e3c9bab7f3d3484eb9446315e3571ca ......
checking 9f088f6a6752c18ceb1338e07b7b702a0b086914 ......
	 orig commit -> 7c2102e56a3f7d85b5d8f33efbd7aecc1f36fdd8 ......
checking 668a1285187668ce162a3aa6b4f5e3272e659954 ......
	 orig commit -> 08fcee289f341786eb3b44e5f2d1dc850943238e ......
checking b79974945e48f9583861c464a8558d1db432c613 ......
	 orig commit -> 07458f6a5171d97511dfbdf6ce549ed2ca0280c7 ......
checking 3fe36d0c58a2a786308563163a999943bdc7b8b2 ......
	 orig commit -> 53c5eaabaea9a1b7a96f95ccc486d2ad721d95bb ......
checking ef2b11c0a31df460cfda8bdc1a79806f9f95a3c5 ......
	 orig commit -> ff1656790b3a4caca94505c52fd0250f981ea187 ......
checking 6047980008d8db5de9ef5c7ad897f5d2caac003c ......
	 orig commit -> b192571d1ae375e0bbe0aa3ccfa1a3c3704454b9 ......
		 b192571d1ae375e0bbe0aa3ccfa1a3c3704454b9 has problem. Fixes commit -> 26f4e759ef9b8a2bab1823d692ed6d56d40b66e3
checking 15e82cdb4d8da6c9ab0782c8bea008d03f52a97a ......
	 orig commit -> 5c50538752af7968f53924b22dede8ed4ce4cb3b ......
checking 7ee3f026aeb388248ecdc5cd6760169ee6a9e5af ......
	 orig commit -> fa1edf3f63c05ca8eacafcd7048ed91e5360f1a8 ......
checking 27576413d9484cd9df933e3e4c802cb0cfb9c915 ......
	 orig commit -> d6e646ad7cfa7034d280459b2b2546288f247144 ......
checking 21caac65d29b7d985a7cd1672ad1dd316b227974 ......
	 orig commit -> d0e810eeb3d326978f248b8f0233a2f30f58c72d ......
checking 236f6e7283f593cf485b5233c8f540cf9f8120b9 ......
	 orig commit -> a1c5befc1c24eb9c1ee83f711e0f21ee79cbb556 ......

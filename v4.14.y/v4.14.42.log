Check from v4.14.42 to v4.14.43
Commit count: 96
checking 1dff08485b9e835d00bfb34a435bc6f07dadb6fd ......
checking 92a3c944d6d5d3e08335cd3b6a75df907a43a960 ......
	 orig commit -> 240da953fcc6a9008c92fae5b1f727ee5ed167ab ......
checking e8837f0a000f79e1e629ad8a00eceb3c452bf3bc ......
	 orig commit -> bc226f07dcd3c9ef0b7f6236fe356ea4a9cb4769 ......
checking 3f44c1a3c29379aa976be27df1da0fc4b9e7c364 ......
	 orig commit -> 47c61b3955cf712cadfc25635bf9bc174af030ea ......
checking 71179d5dcbb96afc70c3344fd4b35db0c33d6008 ......
	 orig commit -> be6fcb5478e95bb1c91f489121238deb3abca46a ......
checking d13f068b94a18b8d9fafaf2519fd1f43d4965f36 ......
	 orig commit -> 4b59bdb569453a60b752b274ca61f009e37f4dae ......
checking 987f49474b0680db37f9bfcecc8e563803c55f52 ......
	 orig commit -> fa8ac4988249c38476f6ad678a4848a736373403 ......
checking 6befd3a735e0228b8128f2916309ed218d9c49dd ......
	 orig commit -> cc69b34989210f067b2c51d5539b5f96ebcc3a01 ......
checking 3e6ab4ca1345b8b7ff09ea00e0abffa276c6919c ......
	 orig commit -> 0270be3e34efb05a88bc4c422572ece038ef3608 ......
checking 8e1c285a050ca8bcbe30c47f102497e44319f12c ......
	 orig commit -> 11fb0683493b2da112cd64c9dada221b52463bf7 ......
checking 72f46c229ac286c0a734888f50a3af274036290f ......
	 orig commit -> ccbcd2674472a978b48c91c1fbfb66c0ff959f24 ......
checking b213ab46cde40368b793daac516be9218beaa750 ......
	 orig commit -> 1f50ddb4f4189243c05926b842dc1a0332195f31 ......
		 1f50ddb4f4189243c05926b842dc1a0332195f31 has problem. Fixes commit -> 2f5fb19341883bb6e37da351bc3700489d8506a7
024d83cadc6b2af027e473720f3c3da97496c318
74899d92e66663dc7671a8017b3146dcd4735f3b
commit 933e1ab12051d00b6502732438c796a95f7db0d3
Author: Thomas Gleixner <tglx@xxxxxxxxxxxxx>
Date:   Sun Aug 12 20:41:45 2018 +0200

    KVM: x86: SVM: Call x86_spec_ctrl_set_guest/host() with interrupts disabled
    
    commit 024d83cadc6b2af027e473720f3c3da97496c318 upstream.
    
    Mikhail reported the following lockdep splat:
    
    WARNING: possible irq lock inversion dependency detected
    CPU 0/KVM/10284 just changed the state of lock:
      000000000d538a88 (&st->lock){+...}, at:
      speculative_store_bypass_update+0x10b/0x170
    
    but this lock was taken by another, HARDIRQ-safe lock
    in the past:
    
    (&(&sighand->siglock)->rlock){-.-.}
    
       and interrupts could create inverse lock ordering between them.
    
    Possible interrupt unsafe locking scenario:
    
        CPU0                    CPU1
        ----                    ----
       lock(&st->lock);
                               local_irq_disable();
                               lock(&(&sighand->siglock)->rlock);
                               lock(&st->lock);
        <Interrupt>
         lock(&(&sighand->siglock)->rlock);
         *** DEADLOCK ***
    
    The code path which connects those locks is:
    
       speculative_store_bypass_update()
       ssb_prctl_set()
       do_seccomp()
       do_syscall_64()
    
    In svm_vcpu_run() speculative_store_bypass_update() is called with
    interupts enabled via x86_virt_spec_ctrl_set_guest/host().
    
    This is actually a false positive, because GIF=0 so interrupts are
    disabled even if IF=1; however, we can easily move the invocations of
    x86_virt_spec_ctrl_set_guest/host() into the interrupt disabled region to
    cure it, and it's a good idea to keep the GIF=0/IF=1 area as small
    and self-contained as possible.
    
    Fixes: 1f50ddb4f418 ("x86/speculation: Handle HT correctly on AMD")
    Reported-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: kvm@vger.kernel.org
    Cc: x86@kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbb37d98b93d239269420cd9848bd730cb33530b
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Jun 21 10:43:31 2018 +0200

    x86/xen: Add call of speculative_store_bypass_ht_init() to PV paths
    
    commit 74899d92e66663dc7671a8017b3146dcd4735f3b upstream.
    
    Commit:
    
      1f50ddb4f418 ("x86/speculation: Handle HT correctly on AMD")
    
    ... added speculative_store_bypass_ht_init() to the per-CPU initialization sequence.
    
    speculative_store_bypass_ht_init() needs to be called on each CPU for
    PV guests, too.
    
    Reported-by: Brian Woods <brian.woods@amd.com>
    Tested-by: Brian Woods <brian.woods@amd.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Cc: <stable@vger.kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: boris.ostrovsky@oracle.com
    Cc: xen-devel@lists.xenproject.org
    Fixes: 1f50ddb4f4189243c05926b842dc1a0332195f31 ("x86/speculation: Handle HT correctly on AMD")
    Link: https://lore.kernel.org/lkml/20180621084331.21228-1-jgross@suse.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 3b921dc46fe13fa20d7bc83df3eaa7511bb2717e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Apr 14 19:51:06 2019 +0200

    x86/speculation: Prevent deadlock on ssb_state::lock
    
    commit 2f5fb19341883bb6e37da351bc3700489d8506a7 upstream.
    
    Mikhail reported a lockdep splat related to the AMD specific ssb_state
    lock:
    
      CPU0                       CPU1
      lock(&st->lock);
                                 local_irq_disable();
                                 lock(&(&sighand->siglock)->rlock);
                                 lock(&st->lock);
      <Interrupt>
         lock(&(&sighand->siglock)->rlock);
    
      *** DEADLOCK ***
    
    The connection between sighand->siglock and st->lock comes through seccomp,
    which takes st->lock while holding sighand->siglock.
    
    Make sure interrupts are disabled when __speculation_ctrl_update() is
    invoked via prctl() -> speculation_ctrl_update(). Add a lockdep assert to
    catch future offenders.
    
    Fixes: 1f50ddb4f418 ("x86/speculation: Handle HT correctly on AMD")
    Reported-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Cc: Thomas Lendacky <thomas.lendacky@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1904141948200.4917@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 933e1ab12051d00b6502732438c796a95f7db0d3
Author: Thomas Gleixner <tglx@xxxxxxxxxxxxx>
Date:   Sun Aug 12 20:41:45 2018 +0200

    KVM: x86: SVM: Call x86_spec_ctrl_set_guest/host() with interrupts disabled
    
    commit 024d83cadc6b2af027e473720f3c3da97496c318 upstream.
    
    Mikhail reported the following lockdep splat:
    
    WARNING: possible irq lock inversion dependency detected
    CPU 0/KVM/10284 just changed the state of lock:
      000000000d538a88 (&st->lock){+...}, at:
      speculative_store_bypass_update+0x10b/0x170
    
    but this lock was taken by another, HARDIRQ-safe lock
    in the past:
    
    (&(&sighand->siglock)->rlock){-.-.}
    
       and interrupts could create inverse lock ordering between them.
    
    Possible interrupt unsafe locking scenario:
    
        CPU0                    CPU1
        ----                    ----
       lock(&st->lock);
                               local_irq_disable();
                               lock(&(&sighand->siglock)->rlock);
                               lock(&st->lock);
        <Interrupt>
         lock(&(&sighand->siglock)->rlock);
         *** DEADLOCK ***
    
    The code path which connects those locks is:
    
       speculative_store_bypass_update()
       ssb_prctl_set()
       do_seccomp()
       do_syscall_64()
    
    In svm_vcpu_run() speculative_store_bypass_update() is called with
    interupts enabled via x86_virt_spec_ctrl_set_guest/host().
    
    This is actually a false positive, because GIF=0 so interrupts are
    disabled even if IF=1; however, we can easily move the invocations of
    x86_virt_spec_ctrl_set_guest/host() into the interrupt disabled region to
    cure it, and it's a good idea to keep the GIF=0/IF=1 area as small
    and self-contained as possible.
    
    Fixes: 1f50ddb4f418 ("x86/speculation: Handle HT correctly on AMD")
    Reported-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: kvm@vger.kernel.org
    Cc: x86@kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbb37d98b93d239269420cd9848bd730cb33530b
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Jun 21 10:43:31 2018 +0200

    x86/xen: Add call of speculative_store_bypass_ht_init() to PV paths
    
    commit 74899d92e66663dc7671a8017b3146dcd4735f3b upstream.
    
    Commit:
    
      1f50ddb4f418 ("x86/speculation: Handle HT correctly on AMD")
    
    ... added speculative_store_bypass_ht_init() to the per-CPU initialization sequence.
    
    speculative_store_bypass_ht_init() needs to be called on each CPU for
    PV guests, too.
    
    Reported-by: Brian Woods <brian.woods@amd.com>
    Tested-by: Brian Woods <brian.woods@amd.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Cc: <stable@vger.kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: boris.ostrovsky@oracle.com
    Cc: xen-devel@lists.xenproject.org
    Fixes: 1f50ddb4f4189243c05926b842dc1a0332195f31 ("x86/speculation: Handle HT correctly on AMD")
    Link: https://lore.kernel.org/lkml/20180621084331.21228-1-jgross@suse.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 7f1efb5e74e3e1a01b73d3364d223f71044f5049 ......
	 orig commit -> d1035d971829dcf80e8686ccde26f94b0a069472 ......
checking bbc0d1c335664660acc2c6e68901d350805a1ff1 ......
	 orig commit -> 52817587e706686fcdb27f14c1b000c92f266c96 ......
		 52817587e706686fcdb27f14c1b000c92f266c96 has problem. Fixes commit -> 0aa48468d00959c8a37cd3ac727284f4f7359151
commit 9c5eee605677b460e6f759e6875769cc104d5ee0
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon May 21 17:54:49 2018 -0400

    KVM/VMX: Expose SSBD properly to guests
    
    commit 0aa48468d00959c8a37cd3ac727284f4f7359151 upstream.
    
    The X86_FEATURE_SSBD is an synthetic CPU feature - that is
    it bit location has no relevance to the real CPUID 0x7.EBX[31]
    bit position. For that we need the new CPU feature name.
    
    Fixes: 52817587e706 ("x86/cpufeatures: Disentangle SSBD enumeration")
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: kvm@vger.kernel.org
    Cc: "Radim Krčmář" <rkrcmar@redhat.com>
    Cc: stable@vger.kernel.org
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Link: https://lkml.kernel.org/r/20180521215449.26423-2-konrad.wilk@oracle.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8e0836d1413b86ef6e85142c3902990815cf1cba ......
	 orig commit -> 7eb8956a7fec3c1f0abc2a5517dada99ccc8a961 ......
checking b1d1984f389865e655076ae18d4626b1a65ba82c ......
	 orig commit -> e7c587da125291db39ddf1f49b18e5970adbac17 ......
checking b1a6028c23748afc3b970bf2a740a3ebc7424e12 ......
	 orig commit -> 15e6c22fd8e5a42c5ed6d487b7c9fe44c2517765 ......
checking bd2059282934fc009d755d24527187df5fe448de ......
	 orig commit -> 5f2b745f5e1304f438f9b2cd03ebc8120b6e0d3b ......
checking 5a53a5fefb73c150d754907916188d0cf3fb36d8 ......
	 orig commit -> ffed645e3be0e32f8e9ab068d257aee8d0fe8eec ......
checking f69c4dd36766666077b96e30e7d0d1122642c00a ......
	 orig commit -> 7bb4d366cba992904bffa4820d24e70a3de93e76 ......
		 7bb4d366cba992904bffa4820d24e70a3de93e76 has problem. Fixes commit -> ffed645e3be0e32f8e9ab068d257aee8d0fe8eec
commit 5a53a5fefb73c150d754907916188d0cf3fb36d8
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Fri May 11 16:50:35 2018 -0400

    x86/bugs: Fix the parameters alignment and missing void
    
    commit ffed645e3be0e32f8e9ab068d257aee8d0fe8eec upstream
    
    Fixes: 7bb4d366c ("x86/bugs: Make cpu_show_common() static")
    Fixes: 24f7fc83b ("x86/bugs: Provide boot parameters for the spec_store_bypass_disable mitigation")
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4fbc01632e779977bbdcbb14877dcc80d7beeb0b ......
	 orig commit -> d66d8ff3d21667b41eddbe86b35ab411e40d8c5f ......
checking 8dc742f930ccbb6b41d538bb35b81693cd8bad43 ......
	 orig commit -> dd0792699c4058e63c0715d9a7c2d40226fcdddc ......
checking 43c47eb2a274fa12029ac5485ae4360048a398af ......
	 orig commit -> e96f46ee8587607a828f783daa6eb5b44d25004d ......
checking 89ba80e61a395afc40a865d008931c576d20724d ......
	 orig commit -> 9f65fb29374ee37856dbad847b4e121aab72b510 ......
checking 0f18f44ce076e48d25c1b03e15f3b588ba0f9df1 ......
	 orig commit -> f21b53b20c754021935ea43364dbf53778eeba32 ......
checking 61dfdc12ff35cd6f196a543271174ae611e36fb1 ......
	 orig commit -> 8bf37d8c067bb7eb8e7c381bdadf9bd89182b6bc ......
checking 9939db75cd5b686ca43c4aa26e24d6b73ffa66e0 ......
	 orig commit -> 00a02d0c502a06d15e07b857f8ff921e3e402675 ......
checking d829fcceb8f532966bfb07fb67cb968374fcbbd2 ......
	 orig commit -> b849a812f7eb92e96d1c8239b06581b2cfd8b275 ......
checking 20d036a2e223a5c4327bcf432ef995f59f51d1d1 ......
	 orig commit -> 356e4bfff2c5489e016fdb925adbf12a1e3950ee ......
checking c024722ffecd484fcb35ad61e822c214b6913196 ......
	 orig commit -> f9544b2b076ca90d887c5ae5d74fab4c21bb7c13 ......
checking 87895ae1e9b22a04441992921b79b6d32e22142a ......
	 orig commit -> 5c3070890d06ff82eecb808d02d2ca39169533ef ......
checking dd88d569eeff59a03b897ba0168547a465091aca ......
	 orig commit -> fae1fa0fc6cca8beee3ab8ed71d54f9a78fa3f64 ......
		 fae1fa0fc6cca8beee3ab8ed71d54f9a78fa3f64 has problem. Fixes commit -> e96f46ee8587607a828f783daa6eb5b44d25004d
commit 43c47eb2a274fa12029ac5485ae4360048a398af
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Wed May 9 21:41:38 2018 +0200

    proc: Use underscores for SSBD in 'status'
    
    commit e96f46ee8587607a828f783daa6eb5b44d25004d upstream
    
    The style for the 'status' file is CamelCase or this. _.
    
    Fixes: fae1fa0fc ("proc: Provide details on speculation flaw mitigations")
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 7d1254a1489c4ecc23a6afdfd1a17bdbb4cd186d ......
	 orig commit -> 7bbf1373e228840bb0295a2ca26d548ef37f448e ......
checking d8553911627ab1d9789d08c9902f5e43194f99f7 ......
	 orig commit -> a73ec77ee17ec556fe7f165d00314cb7c047b1ac ......
checking 704609d396801c86bca6dcdb14676489dd623da5 ......
	 orig commit -> 885f82bfbc6fefb6664ea27965c3ab9ac4194b8c ......
		 885f82bfbc6fefb6664ea27965c3ab9ac4194b8c has problem. Fixes commit -> 15e6c22fd8e5a42c5ed6d487b7c9fe44c2517765
commit b1a6028c23748afc3b970bf2a740a3ebc7424e12
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri May 11 15:21:01 2018 +0200

    KVM: SVM: Move spec control call after restore of GS
    
    commit 15e6c22fd8e5a42c5ed6d487b7c9fe44c2517765 upstream
    
    svm_vcpu_run() invokes x86_spec_ctrl_restore_host() after VMEXIT, but
    before the host GS is restored. x86_spec_ctrl_restore_host() uses 'current'
    to determine the host SSBD state of the thread. 'current' is GS based, but
    host GS is not yet restored and the access causes a triple fault.
    
    Move the call after the host GS restore.
    
    Fixes: 885f82bfbc6f x86/process: Allow runtime control of Speculative Store Bypass
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 33f6a06810cb3f3f0ba20914db334c7c4855ba80 ......
	 orig commit -> b617cfc858161140d69cc0b5cc211996b557a1c7 ......
checking 81c3c2b5917af382a90d116a5ccd034fe5d32c2a ......
	 orig commit -> 28a2775217b17208811fa43a9e96bd1fdf417b86 ......
checking 97224b3da69810155b44f173cc8959eea565a98d ......
	 orig commit -> da39556f66f5cfe8f9c989206974f1cb16ca5d7c ......
checking 716bfae3b3f40de8c0a6ae83f199d96fd152b3cc ......
	 orig commit -> 764f3c21588a059cd783c6ba0734d4db2d72822d ......
checking fa2f1c65246d956106fa964cf0ed953162af88e5 ......
	 orig commit -> 1115a859f33276fe8afb31c60cf9d8e657872558 ......
checking 128e69909f7c245765f75d7f350dd67eb8fe8a7b ......
	 orig commit -> 772439717dbf703b39990be58d8d4e3e4ad0598a ......
checking 65f747a6b1089f13e80b0b2e0c4128e72d135a70 ......
	 orig commit -> 24f7fc83b9204d20f878c57cb77d261ae825e033 ......
		 24f7fc83b9204d20f878c57cb77d261ae825e033 has problem. Fixes commit -> ffed645e3be0e32f8e9ab068d257aee8d0fe8eec
d66d8ff3d21667b41eddbe86b35ab411e40d8c5f
commit 4fbc01632e779977bbdcbb14877dcc80d7beeb0b
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu May 10 22:47:18 2018 +0200

    x86/bugs: Fix __ssb_select_mitigation() return type
    
    commit d66d8ff3d21667b41eddbe86b35ab411e40d8c5f upstream
    
    __ssb_select_mitigation() returns one of the members of enum ssb_mitigation,
    not ssb_mitigation_cmd; fix the prototype to reflect that.
    
    Fixes: 24f7fc83b9204 ("x86/bugs: Provide boot parameters for the spec_store_bypass_disable mitigation")
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 5a53a5fefb73c150d754907916188d0cf3fb36d8
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Fri May 11 16:50:35 2018 -0400

    x86/bugs: Fix the parameters alignment and missing void
    
    commit ffed645e3be0e32f8e9ab068d257aee8d0fe8eec upstream
    
    Fixes: 7bb4d366c ("x86/bugs: Make cpu_show_common() static")
    Fixes: 24f7fc83b ("x86/bugs: Provide boot parameters for the spec_store_bypass_disable mitigation")
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fbc01632e779977bbdcbb14877dcc80d7beeb0b
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu May 10 22:47:18 2018 +0200

    x86/bugs: Fix __ssb_select_mitigation() return type
    
    commit d66d8ff3d21667b41eddbe86b35ab411e40d8c5f upstream
    
    __ssb_select_mitigation() returns one of the members of enum ssb_mitigation,
    not ssb_mitigation_cmd; fix the prototype to reflect that.
    
    Fixes: 24f7fc83b9204 ("x86/bugs: Provide boot parameters for the spec_store_bypass_disable mitigation")
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 832b579e1e83f17e14a8c054ccc768eaf5e80269 ......
	 orig commit -> 0cc5fa00b0a88dad140b4e5c2cead9951ad36822 ......
checking c6dc89dd04e3adfb713c40c20817a8791a8deda6 ......
	 orig commit -> c456442cd3a59eeb1d60293c26cbe2ff2c4e42cf ......
checking 94ae9d26284369da199dfb2581fe0b7ea66f7733 ......
	 orig commit -> 5cf687548705412da47c9cec342fd952d71ed3d5 ......
checking 7c9b4959cda48f22ecd6ceb88bda7f939f2016b3 ......
	 orig commit -> 1b86883ccb8d5d9506529d42dbe1a5257cb30b18 ......
checking 3ce1634f6165ba638546bf83123f1e5c51b1afcd ......
	 orig commit -> d1059518b4789cabe34bb4b714d07e6089c82ca1 ......
checking 69dc73805969ea919786c56d18e5a51fb8c128f2 ......
	 orig commit -> 4a28bfe3267b68e22c663ac26185aa16c9b879ef ......
checking 8410540f5aaf06ab01197443371be89822971e58 ......
	 orig commit -> 1aa7a5735a41418d8e01fa7c9565eb2657e2ea3f ......
checking 671c9a69f426d55b95af0e12838bf07f0a164a89 ......
	 orig commit -> 02a3307aa9c20b4f6626255b028f07f6cfa16feb ......
checking 7ea5cff55c45e14f8e33e4e143e99497278f6a8d ......
	 orig commit -> fe816d0f1d4c31c4c31d42ca78a87660565fc800 ......
checking 0d670384af3cf655cd3ddf3c7b48a239b449138f ......
	 orig commit -> 2b8773313494ede83a26fb372466e634564002ed ......
checking 1d16f615bb7d1742e1616dcbdcc4c7d5d1e5a5a5 ......
	 orig commit -> 02ee654d3a04563c67bfe658a05384548b9bb105 ......
checking f9b02febeabf687bae3861d0af80fb61cfa94683 ......
	 orig commit -> 1a63c198ddb810c790101d693c7071cca703b3c7 ......
checking de1f96cc4a30194c5869ca52f74733747558f13e ......
	 orig commit -> 6f2f0b394b54e2b159ef969a0b5274e9bbf82ff2 ......
checking 59bbb5ca4d95c2a6ab6ae69ed077f022e2678e9c ......
	 orig commit -> 9a8fca62aacc1599fea8e813d01e1955513e4fad ......
checking ca477b42aeaa8fcbd109bdc09f68e62bd9c9a432 ......
	 orig commit -> 0d73c3f8e7f6ee2aab1bb350f60c180f5ae21a2c ......
checking bd4aeb75dab5ac3658ea981922fa1dc16708c823 ......
	 orig commit -> 70948c05fdde0aac32f9667856a88725c192fa40 ......
checking 14b4cfb5ab54a0a59d0c797751f6a58191404597 ......
	 orig commit -> 69af7e23a6870df2ea6fa79ca16493d59b3eebeb ......
checking 6986750cb57c1805a5049f3e7e1b50527395a153 ......
	 orig commit -> 5596fe34495cf0f645f417eb928ef224df3e3cb4 ......
checking a697b90ef09e9f4f38a2c4053c0a6c4d69b5776c ......
	 orig commit -> acf46020012ccbca1172e9c7aeab399c950d9212 ......
checking 5f3ca3928e08fc0c0a7199dcd80fb3788e0da884 ......
	 orig commit -> eb0146daefdde65665b7f076fbff7b49dade95b9 ......
checking e5cefe3570a0903a36fccbb036ee1fa5e7e3b167 ......
	 orig commit -> 0b3225ab9407f557a8e20f23f37aa7236c10a9b1 ......
checking 83a39c0e4adb49e11ae1c3c8f9dcc53f3cc4d548 ......
	 orig commit -> 2fa9d1cfaf0e02f8abef0757002bff12dfcfa4e6 ......
checking 359b8ff3281cacb63e52945fcfa33b29006bf5f4 ......
	 orig commit -> 0a0b152083cfc44ec1bb599b57b7aab41327f998 ......
checking a6565fdd90cbe63e60bf8edc447992bf47f4791c ......
	 orig commit -> 9f18fff63cfd6f559daa1eaae60640372c65f84b ......
checking ce2e68b3c2604e4d06d972358ef139a38cdf8740 ......
	 orig commit -> 2e68adcd2fb21b7188ba449f0fab3bee2910e500 ......
checking 56130d9322326202d66d9ab4c148aa8b5f7abb50 ......
	 orig commit -> 4bbaf2584b86b0772413edeac22ff448f36351b1 ......
checking c568bdf37b6ecf37aa5823f8845c3ecf07f19ab3 ......
	 orig commit -> e521813468f786271a87e78e8644243bead48fad ......
checking e2266ea100ea54556c0524a7763a844f7c4eca17 ......
	 orig commit -> b579f924a90f42fa561afd8201514fc216b71949 ......
checking fc170bda228368f9e0b18d822cb7556dbbe60f7c ......
	 orig commit -> ab1e8d8960b68f54af42b6484b5950bd13a4054b ......
checking 572e2385ae35f56cdc06ce37d0a117e8487f9845 ......
	 orig commit -> 9f418224e8114156d995b98fa4e0f4fd21f685fe ......
checking f6c0f020ee5bf3c44e3659b5eba346e1edb8cf8c ......
	 orig commit -> 1e3054b98c5415d5cb5f8824fc33b548ae5644c3 ......
checking 5b86f020a789d09398689c16a3cbc2f287aa8cd6 ......
	 orig commit -> 7f6df440b8623c441c42d070bf592e2d2c1fa9bb ......
checking 094595ce570121ecd03011c25eb30716caf845d3 ......
	 orig commit -> c1d2a31397ec51f0370f6bd17b19b39152c263cb ......
checking f4f05f62d3d19fc9c541a9186e511584ff9000b2 ......
	 orig commit -> 06cb616b1bca7080824acfedb3d4c898e7a64836 ......
checking f9882808e355376a524c53bf2e66af12c775eb5b ......
	 orig commit -> 32c1733f0dd4bd11d6e65512bf4dc337c0452c8e ......
checking d233f8d5bdd39ef13112147d8659bc2f5b9f6b8f ......
	 orig commit -> 569ccae68b38654f04b6842b034aa33857f605fe ......
checking 321bc88ec098845ec93d047858a010d41be26ed9 ......
	 orig commit -> 2f6adf481527c8ab8033c601f55bfb5b3712b2ac ......
checking bca7faea5410d50d2a3be4b11688f02a2fb2ee95 ......
	 orig commit -> bb765d1c331f62b59049d35607ed2e365802bef9 ......
checking 9a19a93bddb383548a04afaf40cec847de6296f8 ......
	 orig commit -> 45dd9b0666a162f8e4be76096716670cf1741f0e ......
checking d2dee2253be8d2f401f23015fc5e8226772ba479 ......
	 orig commit -> d66a7355717ec903d455277a550d930ba13df4a8 ......
checking 92ce74164efa1e2b8b2232a1c7b562126188beb0 ......
	 orig commit -> 349524bc0da698ec77f2057cf4a4948eb6349265 ......
checking 27ea98a4c50c7aff5cfa132c15d6c68764b493fa ......
	 orig commit -> bf308242ab98b5d1648c3663e753556bef9bec01 ......
		 bf308242ab98b5d1648c3663e753556bef9bec01 has problem. Fixes commit -> 7494cec6cb3ba7385a6a223b81906384f15aae34
a6ecfb11bf37743c1ac49b266595582b107b61d4
commit 423ad0b9b095a23e3cde27f2e79e6835e134968e
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Mar 19 12:56:23 2019 +0000

    KVM: arm/arm64: vgic-its: Take the srcu lock when parsing the memslots
    
    [ Upstream commit 7494cec6cb3ba7385a6a223b81906384f15aae34 ]
    
    Calling kvm_is_visible_gfn() implies that we're parsing the memslots,
    and doing this without the srcu lock is frown upon:
    
    [12704.164532] =============================
    [12704.164544] WARNING: suspicious RCU usage
    [12704.164560] 5.1.0-rc1-00008-g600025238f51-dirty #16 Tainted: G        W
    [12704.164573] -----------------------------
    [12704.164589] ./include/linux/kvm_host.h:605 suspicious rcu_dereference_check() usage!
    [12704.164602] other info that might help us debug this:
    [12704.164616] rcu_scheduler_active = 2, debug_locks = 1
    [12704.164631] 6 locks held by qemu-system-aar/13968:
    [12704.164644]  #0: 000000007ebdae4f (&kvm->lock){+.+.}, at: vgic_its_set_attr+0x244/0x3a0
    [12704.164691]  #1: 000000007d751022 (&its->its_lock){+.+.}, at: vgic_its_set_attr+0x250/0x3a0
    [12704.164726]  #2: 00000000219d2706 (&vcpu->mutex){+.+.}, at: lock_all_vcpus+0x64/0xd0
    [12704.164761]  #3: 00000000a760aecd (&vcpu->mutex){+.+.}, at: lock_all_vcpus+0x64/0xd0
    [12704.164794]  #4: 000000000ef8e31d (&vcpu->mutex){+.+.}, at: lock_all_vcpus+0x64/0xd0
    [12704.164827]  #5: 000000007a872093 (&vcpu->mutex){+.+.}, at: lock_all_vcpus+0x64/0xd0
    [12704.164861] stack backtrace:
    [12704.164878] CPU: 2 PID: 13968 Comm: qemu-system-aar Tainted: G        W         5.1.0-rc1-00008-g600025238f51-dirty #16
    [12704.164887] Hardware name: rockchip evb_rk3399/evb_rk3399, BIOS 2019.04-rc3-00124-g2feec69fb1 03/15/2019
    [12704.164896] Call trace:
    [12704.164910]  dump_backtrace+0x0/0x138
    [12704.164920]  show_stack+0x24/0x30
    [12704.164934]  dump_stack+0xbc/0x104
    [12704.164946]  lockdep_rcu_suspicious+0xcc/0x110
    [12704.164958]  gfn_to_memslot+0x174/0x190
    [12704.164969]  kvm_is_visible_gfn+0x28/0x70
    [12704.164980]  vgic_its_check_id.isra.0+0xec/0x1e8
    [12704.164991]  vgic_its_save_tables_v0+0x1ac/0x330
    [12704.165001]  vgic_its_set_attr+0x298/0x3a0
    [12704.165012]  kvm_device_ioctl_attr+0x9c/0xd8
    [12704.165022]  kvm_device_ioctl+0x8c/0xf8
    [12704.165035]  do_vfs_ioctl+0xc8/0x960
    [12704.165045]  ksys_ioctl+0x8c/0xa0
    [12704.165055]  __arm64_sys_ioctl+0x28/0x38
    [12704.165067]  el0_svc_common+0xd8/0x138
    [12704.165078]  el0_svc_handler+0x38/0x78
    [12704.165089]  el0_svc+0x8/0xc
    
    Make sure the lock is taken when doing this.
    
    Fixes: bf308242ab98 ("KVM: arm/arm64: VGIC/ITS: protect kvm_read_guest() calls with SRCU lock")
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Sasha Levin (Microsoft) <sashal@kernel.org>
commit 423ad0b9b095a23e3cde27f2e79e6835e134968e
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Mar 19 12:56:23 2019 +0000

    KVM: arm/arm64: vgic-its: Take the srcu lock when parsing the memslots
    
    [ Upstream commit 7494cec6cb3ba7385a6a223b81906384f15aae34 ]
    
    Calling kvm_is_visible_gfn() implies that we're parsing the memslots,
    and doing this without the srcu lock is frown upon:
    
    [12704.164532] =============================
    [12704.164544] WARNING: suspicious RCU usage
    [12704.164560] 5.1.0-rc1-00008-g600025238f51-dirty #16 Tainted: G        W
    [12704.164573] -----------------------------
    [12704.164589] ./include/linux/kvm_host.h:605 suspicious rcu_dereference_check() usage!
    [12704.164602] other info that might help us debug this:
    [12704.164616] rcu_scheduler_active = 2, debug_locks = 1
    [12704.164631] 6 locks held by qemu-system-aar/13968:
    [12704.164644]  #0: 000000007ebdae4f (&kvm->lock){+.+.}, at: vgic_its_set_attr+0x244/0x3a0
    [12704.164691]  #1: 000000007d751022 (&its->its_lock){+.+.}, at: vgic_its_set_attr+0x250/0x3a0
    [12704.164726]  #2: 00000000219d2706 (&vcpu->mutex){+.+.}, at: lock_all_vcpus+0x64/0xd0
    [12704.164761]  #3: 00000000a760aecd (&vcpu->mutex){+.+.}, at: lock_all_vcpus+0x64/0xd0
    [12704.164794]  #4: 000000000ef8e31d (&vcpu->mutex){+.+.}, at: lock_all_vcpus+0x64/0xd0
    [12704.164827]  #5: 000000007a872093 (&vcpu->mutex){+.+.}, at: lock_all_vcpus+0x64/0xd0
    [12704.164861] stack backtrace:
    [12704.164878] CPU: 2 PID: 13968 Comm: qemu-system-aar Tainted: G        W         5.1.0-rc1-00008-g600025238f51-dirty #16
    [12704.164887] Hardware name: rockchip evb_rk3399/evb_rk3399, BIOS 2019.04-rc3-00124-g2feec69fb1 03/15/2019
    [12704.164896] Call trace:
    [12704.164910]  dump_backtrace+0x0/0x138
    [12704.164920]  show_stack+0x24/0x30
    [12704.164934]  dump_stack+0xbc/0x104
    [12704.164946]  lockdep_rcu_suspicious+0xcc/0x110
    [12704.164958]  gfn_to_memslot+0x174/0x190
    [12704.164969]  kvm_is_visible_gfn+0x28/0x70
    [12704.164980]  vgic_its_check_id.isra.0+0xec/0x1e8
    [12704.164991]  vgic_its_save_tables_v0+0x1ac/0x330
    [12704.165001]  vgic_its_set_attr+0x298/0x3a0
    [12704.165012]  kvm_device_ioctl_attr+0x9c/0xd8
    [12704.165022]  kvm_device_ioctl+0x8c/0xf8
    [12704.165035]  do_vfs_ioctl+0xc8/0x960
    [12704.165045]  ksys_ioctl+0x8c/0xa0
    [12704.165055]  __arm64_sys_ioctl+0x28/0x38
    [12704.165067]  el0_svc_common+0xd8/0x138
    [12704.165078]  el0_svc_handler+0x38/0x78
    [12704.165089]  el0_svc+0x8/0xc
    
    Make sure the lock is taken when doing this.
    
    Fixes: bf308242ab98 ("KVM: arm/arm64: VGIC/ITS: protect kvm_read_guest() calls with SRCU lock")
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Sasha Levin (Microsoft) <sashal@kernel.org>
checking b6f6d8bfe779294e58f424bff08eab9914570d9b ......
	 orig commit -> 711702b57cc3c50b84bd648de0f1ca0a378805be ......
checking b7f0fc1f06155e55ad7c0b3e245a6fd39ca0b6e3 ......
	 orig commit -> 602805fb618b018b7a41fbb3f93c1992b078b1ae ......
checking d18c3d2304de3c099f147ece9f757767e2eaeef1 ......
	 orig commit -> 5eb9a07a4ae1008b67d8bcd47bddb3dae97456b7 ......
checking 45804b0e3cb3f654383db94cc46af9ee7ed3bf08 ......
	 orig commit -> efc4a13724b852ddaa3358402a8dec024ffbcb17 ......
checking 50c0e85887bff4b9dda38789f8cf29cd41ef4507 ......
	 orig commit -> 3f12888dfae2a48741c4caa9214885b3aaf350f9 ......
checking 6283fcc9b93ac1f264416f63962730a9f5056af0 ......
	 orig commit -> c8beccc19b92f5172994c0732db689c08f4f98e5 ......
checking 13fe9058ed09d5f89c28afdf971614f0c70dc9d3 ......
	 orig commit -> 21493316a3c4598f308d5a9fa31cc74639c4caff ......
checking e842726eccf347212a9568470d78be268c513aad ......
	 orig commit -> c171654caa875919be3c533d3518da8be5be966e ......
checking ec0c93951ecb3ab9463c9a0d0a79c69e4bcb2b2a ......
	 orig commit -> 22076557b07c12086eeb16b8ce2b0b735f7a27e7 ......
		 22076557b07c12086eeb16b8ce2b0b735f7a27e7 has problem. Fixes commit -> c171654caa875919be3c533d3518da8be5be966e
commit e842726eccf347212a9568470d78be268c513aad
Author: Shuah Khan (Samsung OSG) <shuah@kernel.org>
Date:   Tue May 15 17:57:23 2018 -0600

    usbip: usbip_host: fix bad unlock balance during stub_probe()
    
    commit c171654caa875919be3c533d3518da8be5be966e upstream.
    
    stub_probe() calls put_busid_priv() in an error path when device isn't
    found in the busid_table. Fix it by making put_busid_priv() safe to be
    called with null struct bus_id_priv pointer.
    
    This problem happens when "usbip bind" is run without loading usbip_host
    driver and then running modprobe. The first failed bind attempt unbinds
    the device from the original driver and when usbip_host is modprobed,
    stub_probe() runs and doesn't find the device in its busid table and calls
    put_busid_priv(0 with null bus_id_priv pointer.
    
    usbip-host 3-10.2: 3-10.2 is not in match_busid table...  skip!
    
    [  367.359679] =====================================
    [  367.359681] WARNING: bad unlock balance detected!
    [  367.359683] 4.17.0-rc4+ #5 Not tainted
    [  367.359685] -------------------------------------
    [  367.359688] modprobe/2768 is trying to release lock (
    [  367.359689]
    ==================================================================
    [  367.359696] BUG: KASAN: null-ptr-deref in print_unlock_imbalance_bug+0x99/0x110
    [  367.359699] Read of size 8 at addr 0000000000000058 by task modprobe/2768
    
    [  367.359705] CPU: 4 PID: 2768 Comm: modprobe Not tainted 4.17.0-rc4+ #5
    
    Fixes: 22076557b07c ("usbip: usbip_host: fix NULL-ptr deref and use-after-free errors") in usb-linus
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5cd4dd77782e9882e0a158344fe48223c24f5c95 ......
	 orig commit -> 7510df3f29d44685bab7b1918b61a8ccd57126a9 ......
checking cf3bcc3231ade09dd2733ca7d0f34d90ee7fe8fd ......
	 orig commit -> 1e180f167d4e413afccbbb4a421b48b2de832549 ......
checking a3d5f6ecba9923a669a5991b8dbd3398c59bf892 ......
	 orig commit -> 28b68acc4a88dcf91fd1dcf2577371dc9bf574cc ......

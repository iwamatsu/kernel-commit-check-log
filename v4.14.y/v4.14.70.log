Check from v4.14.70 to v4.14.71
Commit count: 127
checking 1244bbb3e92135d247e2dddfa6fe5e3e171a9635 ......
checking 06274364edb4407b386a996a7ff46c3ca3459b70 ......
	 orig commit -> 7a9cdebdcc17e426fb5287e4a82db1dfe86339b2 ......
		 7a9cdebdcc17e426fb5287e4a82db1dfe86339b2 has problem. Fixes commit -> 28e2c4bb99aa40f9d5f07ac130cbc4da0ea93079
commit 8676e0b4a28fa12200ec742e7d8250b11d52916f
Author: Jann Horn <jannh@google.com>
Date:   Fri Oct 5 15:52:03 2018 -0700

    mm/vmstat.c: fix outdated vmstat_text
    
    commit 28e2c4bb99aa40f9d5f07ac130cbc4da0ea93079 upstream.
    
    7a9cdebdcc17 ("mm: get rid of vmacache_flush_all() entirely") removed the
    VMACACHE_FULL_FLUSHES statistics, but didn't remove the corresponding
    entry in vmstat_text.  This causes an out-of-bounds access in
    vmstat_show().
    
    Luckily this only affects kernels with CONFIG_DEBUG_VM_VMACACHE=y, which
    is probably very rare.
    
    Link: http://lkml.kernel.org/r/20181001143138.95119-1-jannh@google.com
    Fixes: 7a9cdebdcc17 ("mm: get rid of vmacache_flush_all() entirely")
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Christoph Lameter <clameter@sgi.com>
    Cc: Kemi Wang <kemi.wang@intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8b34a7b14ee73ed625c1d32ae3f5e59ee22fc709 ......
	 orig commit -> 0633da48f0793aeba27f82d30605624416723a91 ......
checking daf0ca743b28050664c7bd03b6fb46a95d94d248 ......
	 orig commit -> 7063efd33bb15abc0160347f89eb5aba6b7d000e ......
checking ab75811f71815092dc4f66e283b3851dbc989b2e ......
	 orig commit -> b196d88aba8ac72b775137854121097f4c4c6862 ......
		 b196d88aba8ac72b775137854121097f4c4c6862 has problem. Fixes commit -> 7063efd33bb15abc0160347f89eb5aba6b7d000e
commit daf0ca743b28050664c7bd03b6fb46a95d94d248
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed May 16 20:39:33 2018 +0800

    tuntap: fix use after free during release
    
    commit 7063efd33bb15abc0160347f89eb5aba6b7d000e upstream.
    
    After commit b196d88aba8a ("tun: fix use after free for ptr_ring") we
    need clean up tx ring during release(). But unfortunately, it tries to
    do the cleanup blindly after socket were destroyed which will lead
    another use-after-free. Fix this by doing the cleanup before dropping
    the last reference of the socket in __tun_detach().
    
    Backport Note :-
    Upstream commit moves the ptr_ring_cleanup call from tun_chr_close to
    __tun_detach. Upstream applied that patch after replacing skb_array with
    ptr_ring. This patch moves the skb_array_cleanup call from
    tun_chr_close to __tun_detach.
    
    Reported-by: Andrei Vagin <avagin@virtuozzo.com>
    Acked-by: Andrei Vagin <avagin@virtuozzo.com>
    Fixes: b196d88aba8a ("tun: fix use after free for ptr_ring")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8626c40a30937960926727a8606c6d0d8207425c ......
	 orig commit -> 7233982ade15eeac05c6f351e8d347406e6bcd2f ......
checking 08fb833b40e361ce927c64d40e348af96996d9eb ......
	 orig commit -> 5d407b071dc369c26a38398326ee2be53651cfe4 ......
checking b3a0c61b73699b3764a6568e85c67f599158c541 ......
checking c91f27fb571666a176e1446646726f78d4657ddb ......
checking 04b28f406e86512a3592664553b5e17efe663ece ......
checking 6b921536f1707a240e6f53843f1f26231016fda5 ......
	 orig commit -> bffa72cf7f9df842f0016ba03586039296b4caaf ......
checking 37c7cc80b1d7de36a6ed54796ae30ee091d05eab ......
checking 6bf32cda46ebfbaf13da3c48a0a009adae925703 ......
checking 5123ffdad65954b3c308e055b388db08987a13ff ......
checking 3bde783eca23d5d3019c220752f5a29083dea27c ......
checking 7750c414b89bd8204901855bda21c512e269be35 ......
checking 1c44969111cc68f361638b6e54f5a176609aa05a ......
checking 5fff99e88a1f4b4e62fd07bf3eb87305c88f3400 ......
checking 48c2afc16888873da727f9ed7102a620a178fad8 ......
checking 8291cd943a9b4e2d764a4a294999bbb2f94f153c ......
checking bd946fb5226e205530bea2581d867642e4b457ed ......
checking 3226bdcb044862084c3bfc3278d148948600ebc4 ......
checking 085a0147447a4f82138825b6a3a329b997c2fb13 ......
checking 990204ddc5f67530b2ac616767a5c6937c9fc2af ......
checking caa4249eca082c5954ea377aa3ef86b5fc5c1ac1 ......
checking 5b1b3ad46dd100932925e979562aeefaf9ef189e ......
checking bd3df633f17d64523828d0ef5d74e4f1a768683c ......
checking 9aee41eff751e4c789ff785c561d7bf7ad72c286 ......
checking 33dc9f7c5d127bfc203a17f7a31d4dcc754376df ......
checking 11be675bf0aaf4a6dcde817126168b9cbd8ba90e ......
checking 266da0fb83f32e26470017d3eb32cb092b2210ed ......
checking eb1686ae5e20b4455b80be571e7e41f1c9d7b2ac ......
checking 0512f7e93504386cd1223990d9692c20a878d2d9 ......
checking 0cbf74b9519d8f73dd27cc6fad6e03851788f956 ......
checking 673220d6417de8812b20bfeb4d2f809e05a82463 ......
checking 6093d5abcf5ada86d2bb61bd5154bc144bf5a3aa ......
checking 6f7bf899b92ddb5e6a4dd3b0bc2762aec4836685 ......
	 orig commit -> 6209c285e7a5e68dbcdf8fd2456c6dd68433806b ......
checking bdbf6e0b93261127196a6dbfc180aabf44e1a296 ......
	 orig commit -> 643d213a9a034fa04f5575a40dfc8548e33ce04f ......
checking 0d1d365d1d4423b55e3a18e1d1ad2036aa1708ea ......
	 orig commit -> d4da0e97baea8768b3d66ccef3967bebd50dfc3b ......
checking 1181e8687a8d075841b1e8876ec6cc503219e207 ......
	 orig commit -> bd3d16a887b0c19a2a20d35ffed499e3a3637feb ......
checking 0983ef553d8fbda2d7bd1fb4783b567f7d563151 ......
	 orig commit -> c77ec61ca0a49544ca81881cc5d5529858f7e196 ......
checking 7beff543897c6766b8e131150bdde8947ca7ea66 ......
	 orig commit -> c2b1509c77a99a0dcea0a9051ca743cb88385f50 ......
checking b28c14ae3576f69563d063d66f438651a1649a39 ......
	 orig commit -> 46583e8c48c5a094ba28060615b3a7c8c576690f ......
checking 1252c1daa9c38ab807548b2703f90192a4ff5eb1 ......
	 orig commit -> 2a96d8ad94ce57cb0072f7a660b1039720c47716 ......
checking 9d54a48ef29663ede2b012e0b1cda39e1eb36b20 ......
	 orig commit -> 6aead1617b3adf2b7e2c56f0f13e4e0ee42ebb4a ......
checking 9e850bc7691a46ae2abee995631d7361a7b71012 ......
	 orig commit -> a00e5f074b3f3cd39d1ccdc53d4d805b014df3f3 ......
checking 5deea7d63ba14027cee70936881c4d9171d8fa30 ......
	 orig commit -> 14cb2c8a6c5dae57ee3e2da10fa3db2b9087e39e ......
checking f3677a5c7d080ccc03a5acbfdc90f22ccf984877 ......
	 orig commit -> d43fdae7bac2def8c4314b5a49822cb7f08a45f1 ......
checking 758289892a132d9497d3a9f9e17823dbadb41ba9 ......
	 orig commit -> 4faeaf9c0f4581667ce5826f9c90c4fd463ef086 ......
checking b0a6faaa6060e842b12e442ec5fdea02cb672fb2 ......
	 orig commit -> 36f5d9ef26e52edff046b4b097855db89bf0cd4a ......
checking e85940a5bb5fe04dc5b241dd6f6ba7ce43ab13d9 ......
	 orig commit -> af9313c32c0fa2a0ac3b113669273833d60cc9de ......
checking 94f885db2a18b9c6d36b31f1f4af7c1c820fac60 ......
	 orig commit -> 08193d1a893c802c4b807e4d522865061f4e9f4f ......
checking 946cf3fe1be660a0fd8520524f7385a2dab47ecc ......
	 orig commit -> 28ec2238f37e72a3a40a7eb46893e7651bcc40a6 ......
checking e607db7ce9845620173d70a8885390ee224c4787 ......
	 orig commit -> b1259519e618d479ede8a0db5474b3aff99f5056 ......
checking 7fb2b50ee59689578d5a712633d1e6755fc98933 ......
	 orig commit -> 4dbe38dc386910c668c75ae616b99b823b59f3eb ......
checking ee5067c60606cba72a571333411ff0941b6e04f0 ......
	 orig commit -> bb853aac2c478ce78116128263801189408ad2a8 ......
checking cf503dbe5c22c6ab9797e1cf864a11597d711c3a ......
	 orig commit -> 1a339b658d9dbe1471f67b78237cf8fa08bbbeb5 ......
checking 894b7c6584ed5efa83ee717a657064d80258e685 ......
	 orig commit -> 10d255c3540239c7920f52d2eb223756e186af56 ......
checking 7141f97cdd831e88223fb44b0f09e92b95bf7c35 ......
	 orig commit -> 55690c07b44a82cc3359ce0c233f4ba7d80ba145 ......
checking 5f91efc475c8c9fc70e429d8fbb4c69c58e4f9ef ......
	 orig commit -> 4b270a8cc5047682f0a3f3f9af3b498408dbd2bc ......
checking fd4e3615936cb2cce9d96c32211fa21f0aaea673 ......
	 orig commit -> 8466baf788ec3e18836bd9c91ba0b1a07af25878 ......
checking 0cfe17c2a90928f6bedd935188c8c7feea252c82 ......
	 orig commit -> 8bbed1eef001fdfc0ee9595f64cc4f769d265af4 ......
checking acd73639c38c44a24c3892c1e258d5957c58c955 ......
	 orig commit -> 4bf4eed44bfe288f459496eaf38089502ef91a79 ......
checking 1fc16c07d63b8113146b1e3d06dcc003eb3fc6ea ......
	 orig commit -> b4859f3edb47825f62d1b2efdd75fe7945996f49 ......
checking 591ee8d9cd2f3c47771a3b363b383669753fb64a ......
	 orig commit -> 6863ea0cda8725072522cd78bda332d9a0b73150 ......
		 6863ea0cda8725072522cd78bda332d9a0b73150 has problem. Fixes commit -> a65c88e16f32aa9ef2e8caa68ea5c29bd5eb0ff0
checking 60deae3d9fc96d4080ccd0a7f406ec20e1364cd2 ......
	 orig commit -> b3cadaa485f0c20add1644a5c877b0765b285c0c ......
checking 1dac27c707c871f0a9352016d78d880979fa41d8 ......
	 orig commit -> 673bc519c55843c68c3aecff71a4101e79d28d2b ......
checking 6158c2b70a8a555b6257ea350f99803bf5cf49bf ......
	 orig commit -> 45df5d3dc0c7289c1e67afe6d2ba806ad5174314 ......
checking 383195f9fecab79d35e5e27f2e4d24275c95ffcc ......
	 orig commit -> 4dc98c1995482262e70e83ef029135247fafe0f2 ......
checking 62128a8d8489cf0918ca1de0388ab5efa93ed023 ......
	 orig commit -> 2dbb3ec29a6c069035857a2fc4c24e80e5dfe3cc ......
checking 7cadaaa96c07553dce8e39dae64d8235be7f31eb ......
	 orig commit -> 11c291461b6ea8d1195a96d6bba6673a94aacebc ......
checking 3f3d6c0608b7aaf504e5d1f6f85a94c38b91f581 ......
	 orig commit -> 0494d7ffdcebc6935410ea0719b24ab626675351 ......
checking 1ed3a93072307265d6385031b72929a904b50f87 ......
	 orig commit -> fe782affd0f440a4e60e2cc81b8f2eccb2923113 ......
checking 0e890d1cf491ee34dc82f0841f1126e5bb750b7f ......
	 orig commit -> 37a634f60fd6dfbda2c312657eec7ef0750546e7 ......
checking bd21eb8aa705bb97a7eb33f2a2c6dc306dfa3916 ......
	 orig commit -> 3f259111583801013cb605bb4414aa529adccf1c ......
checking 2dacb8cc67ef4364440b2fbee3a845cc1a99e5c8 ......
	 orig commit -> 461d8a6bb9879b0e619752d040292e67aa06f1d2 ......
checking 473983f319cc88dbecc4651c3e87f2ae131de93a ......
	 orig commit -> 36e14a787dd0b459760de3622e9709edb745a6af ......
checking 40992419f135b568a9dab8d3c4a827331158b7db ......
	 orig commit -> 576d5290d678a651b9f36050fc1717e0573aca13 ......
checking 968f03158db561485f37334dfc342330ec28497b ......
	 orig commit -> 95035c5e167ae6e740b1ddd30210ae0eaf39a5db ......
checking cc33476b67b8d08268948bf16b17d455ded3c6ee ......
	 orig commit -> 73978332572ccf5e364c31e9a70ba953f8202b46 ......
checking 521aedea92cddf019ce5d0a26e90363209d6f023 ......
	 orig commit -> 32cd3ee511f4e07ca25d71163b50e704808d22f4 ......
checking c39273ce0d85f076a98cc79d151ef83bc75f4049 ......
	 orig commit -> 21b8732eb4479b579bda9ee38e62b2c312c2a0e5 ......
checking e296ac45b5687817e3ab39a421e4ee71507e5103 ......
	 orig commit -> cb15d1e43db0a6341c1e26ac6a2c74e61b74f1aa ......
checking e04910746abe90f9fc8e9d8991a611649c536640 ......
	 orig commit -> 3611ce9911267cb93d364bd71ddea6821278d11f ......
checking d85e49570227411fd47a915bfefd4b58d64417b4 ......
	 orig commit -> 82cf4f132e6d16dca6fc3bd955019246141bc645 ......
checking ca21de151016d69c3415d95731761c9dd0bf1e00 ......
	 orig commit -> 0419056ec8fd01ddf5460d2dba0491aad22657dd ......
checking 4bb1d3ec658c9a1f071bab691c6e5778860efb6a ......
	 orig commit -> 572086325ce9a9e348b8748e830653f3959e88b6 ......
checking eec63d96d0e40c8a2aac9e0b1e777e089983d692 ......
	 orig commit -> 45ca3f76de0507ecf143f770570af2942f263812 ......
checking 16c6e01a4a98f3b212990746145e5021058c166b ......
	 orig commit -> f019f07ecf6a6b8bd6d7853bce70925d90af02d1 ......
		 f019f07ecf6a6b8bd6d7853bce70925d90af02d1 has problem. Fixes commit -> 432798195bbce1f8cd33d1c0284d0538835e25fb
commit f6a6ae4e0f345aa481535bfe2046cd33f4dc37b8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Oct 26 10:19:51 2018 +0300

    uio: Fix an Oops on load
    
    commit 432798195bbce1f8cd33d1c0284d0538835e25fb upstream.
    
    I was trying to solve a double free but I introduced a more serious
    NULL dereference bug.  The problem is that if there is an IRQ which
    triggers immediately, then we need "info->uio_dev" but it's not set yet.
    
    This patch puts the original initialization back to how it was and just
    sets info->uio_dev to NULL on the error path so it should solve both
    the Oops and the double free.
    
    Fixes: f019f07ecf6a ("uio: potential double frees if __uio_register_device() fails")
    Reported-by: Mathias Thore <Mathias.Thore@infinera.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Mathias Thore <Mathias.Thore@infinera.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2458e91302aab6ee8333886b4bff820d92033a5e ......
	 orig commit -> 81ae962d7f180c0092859440c82996cccb254976 ......
checking 8e6ee30ad80f8a7acb371a0ce3599c435dcc9a15 ......
	 orig commit -> 2d87e6c1b99c402360fdfe19ce4f579ab2f96adf ......
checking 3b9909896570390b8f3c35e7261fcfa0ce5abe54 ......
	 orig commit -> c628e78899ff8006b5f9d8206da54ed3bb994342 ......
checking cb71229f64835c6c570c7697884054e589630bfd ......
	 orig commit -> 363e934d8811d799c88faffc5bfca782fd728334 ......
checking d1060bfcdc72353a48530674d344466eea7a0946 ......
	 orig commit -> d63e2fc804c46e50eee825c5d3a7228e07048b47 ......
checking 1f6324f4ea5b496fcb4d20350956b808ad43b977 ......
	 orig commit -> 6a64f6e1591322beb8ce16e952a53582caf2a15c ......
checking 3ddbcd49bbb3e50145a9fdefb3bfd6ca6a12c353 ......
	 orig commit -> 75d6e175fc511e95ae3eb8f708680133bc211ed3 ......
checking 47a6917f4b7220cbabe9d9e11219c589abd8902d ......
	 orig commit -> 77fefa93bfebe4df44f154f2aa5938e32630d0bf ......
checking 6b7c7186c210df8fd3f2bd6f074715f4ac07979b ......
	 orig commit -> 299c7007e93645067e1d2743f4e50156de78c4ff ......
checking cbd5e67820a998cfb7f3d7a1b995d0bc2a1f00f7 ......
	 orig commit -> 61e641f36ed81ae473177c085f0bfd83ad3b55ed ......
checking 77e120a9c64afb52b3ca199d23ef45b4c840dccc ......
	 orig commit -> 0069fb854364da79fd99236ea620affc8e1152d5 ......
checking 274977d99c195f662ebd48142ac65c38708a7928 ......
	 orig commit -> 9eab9901b015f489199105c470de1ffc337cfabb ......
checking 16aa222d2293a9af37e33b350042ab2997a30dac ......
	 orig commit -> 40b25bce0adbe641a744d1291bc0e51fb7f3c3d8 ......
checking fb281ed2e4dc876f749bad95128678d9b724d933 ......
	 orig commit -> 6c3711ec64fd23a9abc8aaf59a9429569a6282df ......
checking 0455f5d63b3e8ddeaaf20d026e4d2b15e3263e0a ......
	 orig commit -> 5799c4b2f1dbc0166d9b1d94443deaafc6e7a070 ......
checking 5ffdd121d0c4de83a13e42be1e52203e7582dde1 ......
	 orig commit -> d89d41556141a527030a15233135ba622ba3350d ......
checking 96e5b8cc3cfd367fd85d6f720eed456645dacade ......
	 orig commit -> a39284ae9d2ad09975c8ae33f1bd0f05fbfbf6ee ......
checking 0b2d28449e68ec90b811a36a3f5115995238978f ......
	 orig commit -> c83532fb0fe053d2e43e9387354cb1b52ba26427 ......
checking e5d857d5f1fc0893a2efa46a7acdec1ef67363d7 ......
	 orig commit -> 627448e85c766587f6fdde1ea3886d6615081c77 ......
		 627448e85c766587f6fdde1ea3886d6615081c77 has problem. Fixes commit -> 01f54664a4db0d612de0ece8e0022f21f9374e9b
commit cb2520535f6de543038a909746bee607e2138164
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Tue Oct 16 16:37:16 2018 +0300

    tpm: tpm_try_transmit() refactor error flow.
    
    commit 01f54664a4db0d612de0ece8e0022f21f9374e9b upstream.
    
    First, rename out_no_locality to out_locality for bailing out on
    both tpm_cmd_ready() and tpm_request_locality() failure.
    Second, ignore the return value of go_to_idle() as  it may override
    the return value of the actual tpm operation, the go_to_idle() error
    will be caught on any consequent command.
    Last, fix the wrong 'goto out', that jumped back instead of forward.
    
    Cc: stable@vger.kernel.org
    Fixes: 627448e85c76 ("tpm: separate cmd_ready/go_idle from runtime_pm")
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 64def6f35348f67c0ae99c38f5bd506fd396a1a2 ......
	 orig commit -> 6e36719fbe90213fbba9f50093fa2d4d69b0e93c ......
checking 0fad94cf10165084189bc160cc48f8004ea11ee8 ......
	 orig commit -> 46feb6b495f7628a6dbf36c4e6d80faf378372d4 ......
checking ff225750dc4e70ce5c4288fe3850ae9dc69df024 ......
	 orig commit -> 8da38ebaad23fe1b0c4a205438676f6356607cfc ......
checking 05104410c9d109e1d9b4d2e59f7de9d9722ec47f ......
	 orig commit -> 370a132bb2227ff76278f98370e0e701d86ff752 ......
checking 1d92a611db50f1b19d5d7ed27bd4dec6000d06e4 ......
	 orig commit -> 69fa6eb7d6a64801ea261025cce9723d9442d773 ......
checking cb26258540913d80cc3fe2f36e9b02fe3b91cf0f ......
	 orig commit -> f8b7530aa0a1def79c93101216b5b17cf408a70a ......
checking cc427108861907dffd590598e300b36420de7e75 ......
	 orig commit -> 16037643969e095509cd8446a3f8e406a6dc3a2c ......
checking a709c46fdcd07940ae75bbca417b5b825bf92bce ......
	 orig commit -> c4409905cd6eb42cfd06126e9226b0150e05a715 ......
checking d5fca5314c4da9d17b2db5d01a57fce48ec0f081 ......
	 orig commit -> 204c97245612b6c255edf4e21e24d417c4a0c008 ......
checking ae3968b416459f3754feefb0bc685e9f3261bb3e ......
	 orig commit -> de02b9f6bb65a6a1848f346f7a3617b7a9b930c0 ......
		 de02b9f6bb65a6a1848f346f7a3617b7a9b930c0 has problem. Fixes commit -> 11023d3f5fdf89bba5e1142127701ca6e6014587
commit c7a082fb631a3282667b60ad36bfbeea45322cdd
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Nov 5 11:14:05 2018 +0000

    Btrfs: fix infinite loop on inode eviction after deduplication of eof block
    
    commit 11023d3f5fdf89bba5e1142127701ca6e6014587 upstream.
    
    If we attempt to deduplicate the last block of a file A into the middle of
    a file B, and file A's size is not a multiple of the block size, we end
    rounding the deduplication length to 0 bytes, to avoid the data corruption
    issue fixed by commit de02b9f6bb65 ("Btrfs: fix data corruption when
    deduplicating between different files"). However a length of zero will
    cause the insertion of an extent state with a start value greater (by 1)
    then the end value, leading to a corrupt extent state that will trigger a
    warning and cause chaos such as an infinite loop during inode eviction.
    Example trace:
    
     [96049.833585] ------------[ cut here ]------------
     [96049.833714] WARNING: CPU: 0 PID: 24448 at fs/btrfs/extent_io.c:436 insert_state+0x101/0x120 [btrfs]
     [96049.833767] CPU: 0 PID: 24448 Comm: xfs_io Not tainted 4.19.0-rc7-btrfs-next-39 #1
     [96049.833768] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626ccb91-prebuilt.qemu-project.org 04/01/2014
     [96049.833780] RIP: 0010:insert_state+0x101/0x120 [btrfs]
     [96049.833783] RSP: 0018:ffffafd2c3707af0 EFLAGS: 00010282
     [96049.833785] RAX: 0000000000000000 RBX: 000000000004dfff RCX: 0000000000000006
     [96049.833786] RDX: 0000000000000007 RSI: ffff99045c143230 RDI: ffff99047b2168a0
     [96049.833787] RBP: ffff990457851cd0 R08: 0000000000000001 R09: 0000000000000000
     [96049.833787] R10: ffffafd2c3707ab8 R11: 0000000000000000 R12: ffff9903b93b12c8
     [96049.833788] R13: 000000000004e000 R14: ffffafd2c3707b80 R15: ffffafd2c3707b78
     [96049.833790] FS:  00007f5c14e7d700(0000) GS:ffff99047b200000(0000) knlGS:0000000000000000
     [96049.833791] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [96049.833792] CR2: 00007f5c146abff8 CR3: 0000000115f4c004 CR4: 00000000003606f0
     [96049.833795] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     [96049.833796] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     [96049.833796] Call Trace:
     [96049.833809]  __set_extent_bit+0x46c/0x6a0 [btrfs]
     [96049.833823]  lock_extent_bits+0x6b/0x210 [btrfs]
     [96049.833831]  ? _raw_spin_unlock+0x24/0x30
     [96049.833841]  ? test_range_bit+0xdf/0x130 [btrfs]
     [96049.833853]  lock_extent_range+0x8e/0x150 [btrfs]
     [96049.833864]  btrfs_double_extent_lock+0x78/0xb0 [btrfs]
     [96049.833875]  btrfs_extent_same_range+0x14e/0x550 [btrfs]
     [96049.833885]  ? rcu_read_lock_sched_held+0x3f/0x70
     [96049.833890]  ? __kmalloc_node+0x2b0/0x2f0
     [96049.833899]  ? btrfs_dedupe_file_range+0x19a/0x280 [btrfs]
     [96049.833909]  btrfs_dedupe_file_range+0x270/0x280 [btrfs]
     [96049.833916]  vfs_dedupe_file_range_one+0xd9/0xe0
     [96049.833919]  vfs_dedupe_file_range+0x131/0x1b0
     [96049.833924]  do_vfs_ioctl+0x272/0x6e0
     [96049.833927]  ? __fget+0x113/0x200
     [96049.833931]  ksys_ioctl+0x70/0x80
     [96049.833933]  __x64_sys_ioctl+0x16/0x20
     [96049.833937]  do_syscall_64+0x60/0x1b0
     [96049.833939]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
     [96049.833941] RIP: 0033:0x7f5c1478ddd7
     [96049.833943] RSP: 002b:00007ffe15b196a8 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
     [96049.833945] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f5c1478ddd7
     [96049.833946] RDX: 00005625ece322d0 RSI: 00000000c0189436 RDI: 0000000000000004
     [96049.833947] RBP: 0000000000000000 R08: 00007f5c14a46f48 R09: 0000000000000040
     [96049.833948] R10: 0000000000000541 R11: 0000000000000202 R12: 0000000000000000
     [96049.833949] R13: 0000000000000000 R14: 0000000000000004 R15: 00005625ece322d0
     [96049.833954] irq event stamp: 6196
     [96049.833956] hardirqs last  enabled at (6195): [<ffffffff91b00663>] console_unlock+0x503/0x640
     [96049.833958] hardirqs last disabled at (6196): [<ffffffff91a037dd>] trace_hardirqs_off_thunk+0x1a/0x1c
     [96049.833959] softirqs last  enabled at (6114): [<ffffffff92600370>] __do_softirq+0x370/0x421
     [96049.833964] softirqs last disabled at (6095): [<ffffffff91a8dd4d>] irq_exit+0xcd/0xe0
     [96049.833965] ---[ end trace db7b05f01b7fa10c ]---
     [96049.935816] R13: 0000000000000000 R14: 00005562e5259240 R15: 00007ffff092b910
     [96049.935822] irq event stamp: 6584
     [96049.935823] hardirqs last  enabled at (6583): [<ffffffff91b00663>] console_unlock+0x503/0x640
     [96049.935825] hardirqs last disabled at (6584): [<ffffffff91a037dd>] trace_hardirqs_off_thunk+0x1a/0x1c
     [96049.935827] softirqs last  enabled at (6328): [<ffffffff92600370>] __do_softirq+0x370/0x421
     [96049.935828] softirqs last disabled at (6313): [<ffffffff91a8dd4d>] irq_exit+0xcd/0xe0
     [96049.935829] ---[ end trace db7b05f01b7fa123 ]---
     [96049.935840] ------------[ cut here ]------------
     [96049.936065] WARNING: CPU: 1 PID: 24463 at fs/btrfs/extent_io.c:436 insert_state+0x101/0x120 [btrfs]
     [96049.936107] CPU: 1 PID: 24463 Comm: umount Tainted: G        W         4.19.0-rc7-btrfs-next-39 #1
     [96049.936108] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626ccb91-prebuilt.qemu-project.org 04/01/2014
     [96049.936117] RIP: 0010:insert_state+0x101/0x120 [btrfs]
     [96049.936119] RSP: 0018:ffffafd2c3637bc0 EFLAGS: 00010282
     [96049.936120] RAX: 0000000000000000 RBX: 000000000004dfff RCX: 0000000000000006
     [96049.936121] RDX: 0000000000000007 RSI: ffff990445cf88e0 RDI: ffff99047b2968a0
     [96049.936122] RBP: ffff990457851cd0 R08: 0000000000000001 R09: 0000000000000000
     [96049.936123] R10: ffffafd2c3637b88 R11: 0000000000000000 R12: ffff9904574301e8
     [96049.936124] R13: 000000000004e000 R14: ffffafd2c3637c50 R15: ffffafd2c3637c48
     [96049.936125] FS:  00007fe4b87e72c0(0000) GS:ffff99047b280000(0000) knlGS:0000000000000000
     [96049.936126] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [96049.936128] CR2: 00005562e52618d8 CR3: 00000001151c8005 CR4: 00000000003606e0
     [96049.936129] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     [96049.936131] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     [96049.936131] Call Trace:
     [96049.936141]  __set_extent_bit+0x46c/0x6a0 [btrfs]
     [96049.936154]  lock_extent_bits+0x6b/0x210 [btrfs]
     [96049.936167]  btrfs_evict_inode+0x1e1/0x5a0 [btrfs]
     [96049.936172]  evict+0xbf/0x1c0
     [96049.936174]  dispose_list+0x51/0x80
     [96049.936176]  evict_inodes+0x193/0x1c0
     [96049.936180]  generic_shutdown_super+0x3f/0x110
     [96049.936182]  kill_anon_super+0xe/0x30
     [96049.936189]  btrfs_kill_super+0x13/0x100 [btrfs]
     [96049.936191]  deactivate_locked_super+0x3a/0x70
     [96049.936193]  cleanup_mnt+0x3b/0x80
     [96049.936195]  task_work_run+0x93/0xc0
     [96049.936198]  exit_to_usermode_loop+0xfa/0x100
     [96049.936201]  do_syscall_64+0x17f/0x1b0
     [96049.936202]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
     [96049.936204] RIP: 0033:0x7fe4b80cfb37
     [96049.936206] RSP: 002b:00007ffff092b688 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
     [96049.936207] RAX: 0000000000000000 RBX: 00005562e5259060 RCX: 00007fe4b80cfb37
     [96049.936208] RDX: 0000000000000001 RSI: 0000000000000000 RDI: 00005562e525faa0
     [96049.936209] RBP: 00005562e525faa0 R08: 00005562e525f770 R09: 0000000000000015
     [96049.936210] R10: 00000000000006b4 R11: 0000000000000246 R12: 00007fe4b85d1e64
     [96049.936211] R13: 0000000000000000 R14: 00005562e5259240 R15: 00007ffff092b910
     [96049.936211] R13: 0000000000000000 R14: 00005562e5259240 R15: 00007ffff092b910
     [96049.936216] irq event stamp: 6616
     [96049.936219] hardirqs last  enabled at (6615): [<ffffffff91b00663>] console_unlock+0x503/0x640
     [96049.936219] hardirqs last disabled at (6616): [<ffffffff91a037dd>] trace_hardirqs_off_thunk+0x1a/0x1c
     [96049.936222] softirqs last  enabled at (6328): [<ffffffff92600370>] __do_softirq+0x370/0x421
     [96049.936222] softirqs last disabled at (6313): [<ffffffff91a8dd4d>] irq_exit+0xcd/0xe0
     [96049.936223] ---[ end trace db7b05f01b7fa124 ]---
    
    The second stack trace, from inode eviction, is repeated forever due to
    the infinite loop during eviction.
    
    This is the same type of problem fixed way back in 2015 by commit
    113e8283869b ("Btrfs: fix inode eviction infinite loop after extent_same
    ioctl") and commit ccccf3d67294 ("Btrfs: fix inode eviction infinite loop
    after cloning into it").
    
    So fix this by returning immediately if the deduplication range length
    gets rounded down to 0 bytes, as there is nothing that needs to be done in
    such case.
    
    Example reproducer:
    
     $ mkfs.btrfs -f /dev/sdb
     $ mount /dev/sdb /mnt
    
     $ xfs_io -f -c "pwrite -S 0xe6 0 100" /mnt/foo
     $ xfs_io -f -c "pwrite -S 0xe6 0 1M" /mnt/bar
    
     # Unmount the filesystem and mount it again so that we start without any
     # extent state records when we ask for the deduplication.
     $ umount /mnt
     $ mount /dev/sdb /mnt
    
     $ xfs_io -c "dedupe /mnt/foo 0 500K 100" /mnt/bar
    
     # This unmount triggers the infinite loop.
     $ umount /mnt
    
    A test case for fstests will follow soon.
    
    Fixes: de02b9f6bb65 ("Btrfs: fix data corruption when deduplicating between different files")
    CC: <stable@vger.kernel.org> # 4.19+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 55bcfe019ac4a2ab2308cec4dae83b7830fa9b6a ......
	 orig commit -> f801568332321e2b1e7a8bd26c3e4913a312a2ec ......
checking b0b69369eecc4cdc6680e1bf6e14a632d5a447d9 ......
	 orig commit -> 5e19697b56a64004e2d0ff1bb952ea05493c088f ......
checking 9efcaa7c4afba5628f2650a76f69c798f47eeb18 ......
	 orig commit -> 0f02cfbc3d9e413d450d8d0fd660077c23f67eff ......
checking 492519107c9d5ecfe3298586e3f5a33ac968b62c ......
	 orig commit -> da1b9564e85b1d7baf66cbfabcab27e183a1db63 ......
checking 381992bcccac4185ccdbbd2d9a3018238982b963 ......
	 orig commit -> d5274b3cd6a814ccb2f56d81ee87cbbf51bd4cf7 ......
checking 23ecbbad7bf921f83a5c99718ded203676ddd91c ......
	 orig commit -> bc811f05d77f47059c197a98b6ad242eb03999cb ......
checking 425739151e03c00487910a9d9cdfbd55cceb9975 ......
	 orig commit -> 53e13ee087a80e8d4fc95436318436e5c2c1f8c2 ......
checking d98b67089c0e34578d31257c08633ea60b087c1e ......
	 orig commit -> 851a15114895c5bce163a6f2d57e0aa4658a1be4 ......
checking 831223b294f8531616c2487d139a2f8d7b67d8c4 ......
	 orig commit -> ae7304c3ea28a3ba47a7a8312c76c654ef24967e ......

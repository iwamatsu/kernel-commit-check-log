Check from v4.14.31 to v4.14.32
Commit count: 44
checking 9a2e216d9e892249b63d10603c75495749202df9 ......
checking bba757a2c128ff890025acd1122e844faeb809ec ......
	 orig commit -> a6c3d93963e4b333c764fde69802c3ea9eaa9d5c ......
checking e5245642201733746170c0f8abc6b7cfaac7e531 ......
	 orig commit -> 17bf8c9b3d499d5168537c98b61eb7a1fcbca6c2 ......
checking dd5ec7314030ed1e536244e8be1cbed8188616ac ......
	 orig commit -> 1063e432bb45be209427ed3f1ca3908e4aa3c7d7 ......
checking b469bdd0f511f510bd99a4a62796cfe1310a2e09 ......
	 orig commit -> 6be687395b3124f002a653c1a50b3260222b3cd7 ......
checking 299902b581ea6c9d3c05ac1f06851969b68626c6 ......
	 orig commit -> 82d141cd19d088ee41feafde4a6f86eeb40d93c5 ......
checking 5bf75fca436785a3b7a175ec56eb74f6e3bf3b4b ......
	 orig commit -> e4d1b37c17d000a3da9368a3e260fb9ea4927c25 ......
checking dde9b6a837975a39051d99127f952314dc39e016 ......
	 orig commit -> 565186362b73226a288830abe595f05f0cec0bbc ......
checking 5bbb99d2fde047df596379be6c58e265e2ddbe1f ......
	 orig commit -> 88075256ee817041d68c2387f29065b5cb2b342a ......
checking 29cd9c2d1f428c281962135ea046a9d7bda88d14 ......
	 orig commit -> 96f413f47677366e0ae03797409bfcc4151dbf9e ......
checking 43d8f3c5d3ad77329545f5464c2b7e08074eea1a ......
	 orig commit -> cbcc607e18422555db569b593608aec26111cb0b ......
checking 329f4710f89c028d5a8904040af913dfc5727362 ......
	 orig commit -> 6e5d58fdc9bedd0255a8781b258f10bbdc63e975 ......
checking e90e9771d9a33b8b14486c69c1b3183978d23eb5 ......
	 orig commit -> 4609adc27175839408359822523de7247d56c87f ......
checking c6841b478e6bb9493fbaccaf50f4c8a2f66f3219 ......
	 orig commit -> 484d802d0f2f29c335563fcac2a8facf174a1bbc ......
checking 474aa5149753393c97ac01780cfb234194d5b91c ......
	 orig commit -> 2cbb4ea7de167b02ffa63e9cdfdb07a7e7094615 ......
checking 06d3f43d52bbf58dd040c7612ac7372cf6649208 ......
	 orig commit -> 02a2385f37a7c6594c9d89b64c4a1451276f08eb ......
checking 2980f37b6111557c2d8dbb08bce2e14bdbb83fb2 ......
	 orig commit -> fa6a91e9b907231d2e38ea5ed89c537b3525df3d ......
checking a14b791d9863539b63b38bfab133b28fdd5029d4 ......
	 orig commit -> a069215cf5985f3aa1bba550264907d6bd05c5f7 ......
checking 9cdb0f25fbb4b46ed46361a962f98cfffc4640a9 ......
	 orig commit -> f9db50691db4a7d860fce985f080bb3fc23a7ede ......
checking 89142a0e0b70ffa5d47175dd881aaba21e5875cb ......
	 orig commit -> 00777fac28ba3e126b9e63e789a613e8bd2cab25 ......
checking 2d5b0ed04c5ab5e0bd7626b27161ea055e578963 ......
	 orig commit -> 17cfe79a65f98abe535261856c5aef14f306dff7 ......
checking 18c647456ac9d61371a69e447df74daf9730f987 ......
	 orig commit -> 9f62c15f28b0d1d746734666d88a79f08ba1e43e ......
checking 91d27e0c302501e148460db9981b5b04481781ce ......
	 orig commit -> 67f93df79aeefc3add4e4b31a752600f834236e2 ......
checking 946b9671ac02842c454f4da7b560feb9c84a4356 ......
	 orig commit -> a560002437d3646dafccecb1bf32d1685112ddda ......
checking 4ff5078b0396960c69718a41f916f81a6c59b074 ......
	 orig commit -> 4dcb31d4649df36297296b819437709f5407059c ......
checking f6cdb675ca0a0f1e1913b48060414933dbd08565 ......
	 orig commit -> ca0edb131bdf1e6beaeb2b8289fd6b374b74147d ......
checking f77ff13a06c1185491169b78e33bfb6a169a933c ......
	 orig commit -> 35d889d10b649fda66121891ec05eca88150059d ......
		 35d889d10b649fda66121891ec05eca88150059d has problem. Fixes commit -> 5845f706388a4cde0f6b80f9e5d33527e942b7d9
commit 4de7d30668cb8b06330992e1cd336f91700a2ce7
Author: Sheng Lan <lansheng@huawei.com>
Date:   Thu Feb 28 18:47:58 2019 +0800

    net: netem: fix skb length BUG_ON in __skb_to_sgvec
    
    [ Upstream commit 5845f706388a4cde0f6b80f9e5d33527e942b7d9 ]
    
    It can be reproduced by following steps:
    1. virtio_net NIC is configured with gso/tso on
    2. configure nginx as http server with an index file bigger than 1M bytes
    3. use tc netem to produce duplicate packets and delay:
       tc qdisc add dev eth0 root netem delay 100ms 10ms 30% duplicate 90%
    4. continually curl the nginx http server to get index file on client
    5. BUG_ON is seen quickly
    
    [10258690.371129] kernel BUG at net/core/skbuff.c:4028!
    [10258690.371748] invalid opcode: 0000 [#1] SMP PTI
    [10258690.372094] CPU: 5 PID: 0 Comm: swapper/5 Tainted: G        W         5.0.0-rc6 #2
    [10258690.372094] RSP: 0018:ffffa05797b43da0 EFLAGS: 00010202
    [10258690.372094] RBP: 00000000000005ea R08: 0000000000000000 R09: 00000000000005ea
    [10258690.372094] R10: ffffa0579334d800 R11: 00000000000002c0 R12: 0000000000000002
    [10258690.372094] R13: 0000000000000000 R14: ffffa05793122900 R15: ffffa0578f7cb028
    [10258690.372094] FS:  0000000000000000(0000) GS:ffffa05797b40000(0000) knlGS:0000000000000000
    [10258690.372094] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [10258690.372094] CR2: 00007f1a6dc00868 CR3: 000000001000e000 CR4: 00000000000006e0
    [10258690.372094] Call Trace:
    [10258690.372094]  <IRQ>
    [10258690.372094]  skb_to_sgvec+0x11/0x40
    [10258690.372094]  start_xmit+0x38c/0x520 [virtio_net]
    [10258690.372094]  dev_hard_start_xmit+0x9b/0x200
    [10258690.372094]  sch_direct_xmit+0xff/0x260
    [10258690.372094]  __qdisc_run+0x15e/0x4e0
    [10258690.372094]  net_tx_action+0x137/0x210
    [10258690.372094]  __do_softirq+0xd6/0x2a9
    [10258690.372094]  irq_exit+0xde/0xf0
    [10258690.372094]  smp_apic_timer_interrupt+0x74/0x140
    [10258690.372094]  apic_timer_interrupt+0xf/0x20
    [10258690.372094]  </IRQ>
    
    In __skb_to_sgvec(), the skb->len is not equal to the sum of the skb's
    linear data size and nonlinear data size, thus BUG_ON triggered.
    Because the skb is cloned and a part of nonlinear data is split off.
    
    Duplicate packet is cloned in netem_enqueue() and may be delayed
    some time in qdisc. When qdisc len reached the limit and returns
    NET_XMIT_DROP, the skb will be retransmit later in write queue.
    the skb will be fragmented by tso_fragment(), the limit size
    that depends on cwnd and mss decrease, the skb's nonlinear
    data will be split off. The length of the skb cloned by netem
    will not be updated. When we use virtio_net NIC and invoke skb_to_sgvec(),
    the BUG_ON trigger.
    
    To fix it, netem returns NET_XMIT_SUCCESS to upper stack
    when it clones a duplicate packet.
    
    Fixes: 35d889d1 ("sch_netem: fix skb leak in netem_enqueue()")
    Signed-off-by: Sheng Lan <lansheng@huawei.com>
    Reported-by: Qin Ji <jiqin.ji@huawei.com>
    Suggested-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 515bc34124f3aaf7ea2508fa2707906623eba748 ......
	 orig commit -> 2cc683e88c0c993ac3721d9b702cb0630abe2879 ......
checking 07cf9d303c7ce8620ea34e3407e08facf65c732d ......
	 orig commit -> d3dcf8eb615537526bd42ff27a081d46d337816e ......
checking 090da7ced80b738e5ea0a055e8dc982740a951b5 ......
	 orig commit -> 6d066734e9f09cdea4a3b9cb76136db3f29cfb02 ......
checking 28b488f7cb3a6af9f4512981b113f6e5d7e9752e ......
	 orig commit -> 51d4740f88affd85d49c04e3c9cd129c0e33bcb9 ......
checking 2274d77c36752d80e3bc91eb289c601c3f3795d9 ......
	 orig commit -> a2c054a896b8ac794ddcfc7c92e2dc7ec4ed4ed5 ......
checking 42cf2a1e5ac4a8c4b66d89fe674e79a8d17f806a ......
	 orig commit -> bcdd5de80a2275f7879dc278bfc747f1caf94442 ......
checking dbad5abd2b167a3e7b981e833fd7f21747e3b47b ......
	 orig commit -> 191f86ca8ef27f7a492fd1c03620498c6e94f0ac ......
checking cb4963b49426fb6d86fde623366460dadac2908e ......
	 orig commit -> 8936ef7604c11b5d701580d779e0f5684abc7b68 ......
		 8936ef7604c11b5d701580d779e0f5684abc7b68 has problem. Fixes commit -> a957fa190aa9d9168b33d460a5241a6d088c6265
commit a370d8a3aaf268896eabaf510e1e8ca4b7ea0a34
Author: Ahmed Abdelsalam <amsalam20@gmail.com>
Date:   Fri Apr 20 15:58:05 2018 +0200

    ipv6: sr: fix NULL pointer dereference in seg6_do_srh_encap()- v4 pkts
    
    
    [ Upstream commit a957fa190aa9d9168b33d460a5241a6d088c6265 ]
    
    In case of seg6 in encap mode, seg6_do_srh_encap() calls set_tun_src()
    in order to set the src addr of outer IPv6 header.
    
    The net_device is required for set_tun_src(). However calling ip6_dst_idev()
    on dst_entry in case of IPv4 traffic results on the following bug.
    
    Using just dst->dev should fix this BUG.
    
    [  196.242461] BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
    [  196.242975] PGD 800000010f076067 P4D 800000010f076067 PUD 10f060067 PMD 0
    [  196.243329] Oops: 0000 [#1] SMP PTI
    [  196.243468] Modules linked in: nfsd auth_rpcgss nfs_acl nfs lockd grace fscache sunrpc crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc aesni_intel aes_x86_64 crypto_simd cryptd input_leds glue_helper led_class pcspkr serio_raw mac_hid video autofs4 hid_generic usbhid hid e1000 i2c_piix4 ahci pata_acpi libahci
    [  196.244362] CPU: 2 PID: 1089 Comm: ping Not tainted 4.16.0+ #1
    [  196.244606] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  196.244968] RIP: 0010:seg6_do_srh_encap+0x1ac/0x300
    [  196.245236] RSP: 0018:ffffb2ce00b23a60 EFLAGS: 00010202
    [  196.245464] RAX: 0000000000000000 RBX: ffff8c7f53eea300 RCX: 0000000000000000
    [  196.245742] RDX: 0000f10000000000 RSI: ffff8c7f52085a6c RDI: ffff8c7f41166850
    [  196.246018] RBP: ffffb2ce00b23aa8 R08: 00000000000261e0 R09: ffff8c7f41166800
    [  196.246294] R10: ffffdce5040ac780 R11: ffff8c7f41166828 R12: ffff8c7f41166808
    [  196.246570] R13: ffff8c7f52085a44 R14: ffffffffb73211c0 R15: ffff8c7e69e44200
    [  196.246846] FS:  00007fc448789700(0000) GS:ffff8c7f59d00000(0000) knlGS:0000000000000000
    [  196.247286] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  196.247526] CR2: 0000000000000000 CR3: 000000010f05a000 CR4: 00000000000406e0
    [  196.247804] Call Trace:
    [  196.247972]  seg6_do_srh+0x15b/0x1c0
    [  196.248156]  seg6_output+0x3c/0x220
    [  196.248341]  ? prandom_u32+0x14/0x20
    [  196.248526]  ? ip_idents_reserve+0x6c/0x80
    [  196.248723]  ? __ip_select_ident+0x90/0x100
    [  196.248923]  ? ip_append_data.part.50+0x6c/0xd0
    [  196.249133]  lwtunnel_output+0x44/0x70
    [  196.249328]  ip_send_skb+0x15/0x40
    [  196.249515]  raw_sendmsg+0x8c3/0xac0
    [  196.249701]  ? _copy_from_user+0x2e/0x60
    [  196.249897]  ? rw_copy_check_uvector+0x53/0x110
    [  196.250106]  ? _copy_from_user+0x2e/0x60
    [  196.250299]  ? copy_msghdr_from_user+0xce/0x140
    [  196.250508]  sock_sendmsg+0x36/0x40
    [  196.250690]  ___sys_sendmsg+0x292/0x2a0
    [  196.250881]  ? _cond_resched+0x15/0x30
    [  196.251074]  ? copy_termios+0x1e/0x70
    [  196.251261]  ? _copy_to_user+0x22/0x30
    [  196.251575]  ? tty_mode_ioctl+0x1c3/0x4e0
    [  196.251782]  ? _cond_resched+0x15/0x30
    [  196.251972]  ? mutex_lock+0xe/0x30
    [  196.252152]  ? vvar_fault+0xd2/0x110
    [  196.252337]  ? __do_fault+0x1f/0xc0
    [  196.252521]  ? __handle_mm_fault+0xc1f/0x12d0
    [  196.252727]  ? __sys_sendmsg+0x63/0xa0
    [  196.252919]  __sys_sendmsg+0x63/0xa0
    [  196.253107]  do_syscall_64+0x72/0x200
    [  196.253305]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    [  196.253530] RIP: 0033:0x7fc4480b0690
    [  196.253715] RSP: 002b:00007ffde9f252f8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    [  196.254053] RAX: ffffffffffffffda RBX: 0000000000000040 RCX: 00007fc4480b0690
    [  196.254331] RDX: 0000000000000000 RSI: 000000000060a360 RDI: 0000000000000003
    [  196.254608] RBP: 00007ffde9f253f0 R08: 00000000002d1e81 R09: 0000000000000002
    [  196.254884] R10: 00007ffde9f250c0 R11: 0000000000000246 R12: 0000000000b22070
    [  196.255205] R13: 20c49ba5e353f7cf R14: 431bde82d7b634db R15: 00007ffde9f278fe
    [  196.255484] Code: a5 0f b6 45 c0 41 88 41 28 41 0f b6 41 2c 48 c1 e0 04 49 8b 54 01 38 49 8b 44 01 30 49 89 51 20 49 89 41 18 48 8b 83 b0 00 00 00 <48> 8b 30 49 8b 86 08 0b 00 00 48 8b 40 20 48 8b 50 08 48 0b 10
    [  196.256190] RIP: seg6_do_srh_encap+0x1ac/0x300 RSP: ffffb2ce00b23a60
    [  196.256445] CR2: 0000000000000000
    [  196.256676] ---[ end trace 71af7d093603885c ]---
    
    Fixes: 8936ef7604c11 ("ipv6: sr: fix NULL pointer dereference when setting encap source address")
    Signed-off-by: Ahmed Abdelsalam <amsalam20@gmail.com>
    Acked-by: David Lebrun <dlebrun@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5defa8c9269a4c5e7b284631e9a60abe1d57f20b ......
	 orig commit -> 5f2fb802eee1df0810b47ea251942fe3fd36589a ......
checking a8f02befc87d6f1a882c9b14a31bcfa1fbd3d430 ......
	 orig commit -> 2f987a76a97773beafbc615b9c4d8fe79129a7f4 ......
		 2f987a76a97773beafbc615b9c4d8fe79129a7f4 has problem. Fixes commit -> 5f2fb802eee1df0810b47ea251942fe3fd36589a
commit 5defa8c9269a4c5e7b284631e9a60abe1d57f20b
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Mon Mar 19 11:24:58 2018 +0100

    ipv6: old_dport should be a __be16 in __ip6_datagram_connect()
    
    
    [ Upstream commit 5f2fb802eee1df0810b47ea251942fe3fd36589a ]
    
    Fixes: 2f987a76a977 ("net: ipv6: keep sk status consistent after datagram connect failure")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 82fb817863e3a853715e8cc606ea4ed37b9a55ce ......
	 orig commit -> 13fbcc8dc573482dd3f27568257fd7087f8935f4 ......
checking b51eb57dac9cbd09e1ad3b1aed68ea11bcb83743 ......
	 orig commit -> 7fe4d6dcbcb43fe0282d4213fc52be178bb30e91 ......
checking 67a1dc5675670f17a77a0ac65f688d4b5adeeefa ......
	 orig commit -> 4414b3ed74be0e205e04e12cd83542a727d88255 ......
checking 223c542442527ca04cfd9843450ca103b822e558 ......
	 orig commit -> 2399ac42e762ab25c58420e25359b2921afdc55f ......
checking 497166d63780f0a7835f14d9cebb40cf098b1c55 ......
	 orig commit -> 16da09047d3fb991dc48af41f6d255fd578e8ca2 ......
checking e44c1733059c69868e81f82eb09fcb6bbc492050 ......
	 orig commit -> e05836ac07c77dd90377f8c8140bce2a44af5fe7 ......
checking dbbf2d1e4077bab0c65ece2765d3fc69cf7d610f ......

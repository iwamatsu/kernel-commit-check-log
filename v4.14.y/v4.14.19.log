Check from v4.14.19 to v4.14.20
Commit count: 196
checking 7e83b2ff485cacbf73d27f821e07a8c78ad8cc68 ......
checking 1dbdcf117b227eb966691818e850a2fde589f2a2 ......
	 orig commit -> 96cf727fe8f102bf92150b741db71ee39fb8c521 ......
checking 5fc77964eaa97884e630487254e4c265644fb116 ......
	 orig commit -> e4b9794efdce13242f4af6682f3ed48ce3864a87 ......
checking ce6faf10fd6544febcf5c3efe453193def873c60 ......
	 orig commit -> 156baec39732f025dc778e00da95fc10d6e45885 ......
checking c561093ed6843684690436dea034af53b462cfe5 ......
	 orig commit -> 3bd6f43f5cb3714f70c591514f344389df593501 ......
		 3bd6f43f5cb3714f70c591514f344389df593501 has problem. Fixes commit -> 3be8828fc507cdafe7040a3dcf361a2bcd8e305b
commit 4dbc3e4d8b281e7dcaf2063a94e67e7b5d1851a9
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Thu Feb 22 11:30:20 2018 -0800

    scsi: core: Avoid that ATA error handling can trigger a kernel hang or oops
    
    commit 3be8828fc507cdafe7040a3dcf361a2bcd8e305b upstream.
    
    Avoid that the recently introduced call_rcu() call in the SCSI core
    triggers a double call_rcu() call.
    
    Reported-by: Natanael Copa <ncopa@alpinelinux.org>
    Reported-by: Damien Le Moal <damien.lemoal@wdc.com>
    References: https://bugzilla.kernel.org/show_bug.cgi?id=198861
    Fixes: 3bd6f43f5cb3 ("scsi: core: Ensure that the SCSI error handler gets woken up")
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Tested-by: Damien Le Moal <damien.lemoal@wdc.com>
    Cc: Natanael Copa <ncopa@alpinelinux.org>
    Cc: Damien Le Moal <damien.lemoal@wdc.com>
    Cc: Alexandre Oliva <oliva@gnu.org>
    Cc: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Johannes Thumshirn <jthumshirn@suse.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b470fb7b791039d8afea0e4ebcbd6f4a41723c47 ......
	 orig commit -> 7b6586562708d2b3a04fe49f217ddbadbbbb0546 ......
checking d9ef4003744321041b8cd2495a576c0be83c4b91 ......
	 orig commit -> c9cc8d01fb04117928830449388512a5047569c9 ......
checking dff5406432ffd805e6917d7b7005e1098354596b ......
	 orig commit -> 6ac1dc736b323011a55ecd1fc5897c24c4f77cbd ......
checking c7aee3941e1e10a662e5b22f345933280f0caac8 ......
	 orig commit -> a5a927a7c82e28ea76599dee4019c41e372c911f ......
checking e822be7502707b994a4847f618b49f17d1c02dae ......
	 orig commit -> d796e77f1dd541fe34481af2eee6454688d13982 ......
checking 9fc03876355ac0bbbb774d15a362e35805c9db85 ......
	 orig commit -> 23fbd7c70aec7600e3227eb24259fc55bf6e4881 ......
checking f232bfdcdd768bb6ba5945f1f8f28faa94fc10b8 ......
	 orig commit -> 43cdd1b716b26f6af16da4e145b6578f98798bf6 ......
checking a51421b4cb099ce36cbc85689cabc0b3525d0e29 ......
	 orig commit -> 5643205c6340b565a3be0fe0e7305dc4aa551c74 ......
checking 812245b4dbf663aa8c4d5483e2e7c5d2c0fb01fb ......
	 orig commit -> 474c5885582c4a79c21bcf01ed98f98c935f1f4a ......
checking 2a3d3015a73cff4a701db85b935f464492e49901 ......
	 orig commit -> 99ce7962d52d1948ad6f2785e308d48e76e0a6ef ......
checking 4063cd5683ce4d4a18e89a61b9dbf8492c9faf31 ......
	 orig commit -> f3038ee3a3f1017a1cbe9907e31fa12d366c5dcb ......
checking 2617e62c2f120fe02a14e01232db4127f8e414a2 ......
	 orig commit -> 42440c1f9911b4b7b8ba3dc4e90c1197bc561211 ......
checking 5a5df7771064defa931d44ed28fec673fe66752f ......
	 orig commit -> b8fe1120b4ba342b4f156d24e952d6e686b20298 ......
checking c87806a8e565e1253cad5072577b759f76f79fdb ......
	 orig commit -> e0aeca3d8cbaea514eb98df1149faa918f9ec42d ......
checking 392640fd18f8f7433820d618c02e7d3d696f3d64 ......
	 orig commit -> c2856ae2f315d754a0b6a268e4c6745b332b42e7 ......
		 c2856ae2f315d754a0b6a268e4c6745b332b42e7 has problem. Fixes commit -> 1311326cf4755c7ffefd20f576144ecf46d9906b
commit b520f00da41f748fcf90b01d5399e2e2b28cb2f4
Author: Ming Lei <ming.lei@redhat.com>
Date:   Mon Jun 25 19:31:49 2018 +0800

    blk-mq: avoid to synchronize rcu inside blk_cleanup_queue()
    
    [ Upstream commit 1311326cf4755c7ffefd20f576144ecf46d9906b ]
    
    SCSI probing may synchronously create and destroy a lot of request_queues
    for non-existent devices. Any synchronize_rcu() in queue creation or
    destroy path may introduce long latency during booting, see detailed
    description in comment of blk_register_queue().
    
    This patch removes one synchronize_rcu() inside blk_cleanup_queue()
    for this case, commit c2856ae2f315d75(blk-mq: quiesce queue before freeing queue)
    needs synchronize_rcu() for implementing blk_mq_quiesce_queue(), but
    when queue isn't initialized, it isn't necessary to do that since
    only pass-through requests are involved, no original issue in
    scsi_execute() at all.
    
    Without this patch and previous one, it may take more 20+ seconds for
    virtio-scsi to complete disk probe. With the two patches, the time becomes
    less than 100ms.
    
    Fixes: c2856ae2f315d75 ("blk-mq: quiesce queue before freeing queue")
    Reported-by: Andrew Jones <drjones@redhat.com>
    Cc: Omar Sandoval <osandov@fb.com>
    Cc: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: linux-scsi@vger.kernel.org
    Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Tested-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c846868070d0426667902c55a89008333584af50 ......
	 orig commit -> 882d4171a8950646413b1a3cbe0e4a6a612fe82e ......
checking 030dcf7d1af39b0dc341702cb7d2482df93d3c71 ......
	 orig commit -> 5a0ec388ef0f6e33841aeb810d7fa23f049ec4cd ......
checking f04fe1192e5607f203e7c0096340fc867da8e84c ......
	 orig commit -> b930151e5b55a0e62a3aad06876de891ac980471 ......
checking 5219eedf2d5e19fdcd03aa685426eb891be85af6 ......
	 orig commit -> 1a1d39e1b8dd1d0f92a79da4fcc1ab0be3ae9bfc ......
checking 89cad3fa54919ba00004e0e202f549391a074a7c ......
	 orig commit -> 0657cb50b5a75abd92956028727dc255d690a4a6 ......
checking 688d1b8c4721e247649383bbfcafedca3cdff89a ......
	 orig commit -> 02e389e63e3523828fc3832f27e0341885f60f6f ......
		 02e389e63e3523828fc3832f27e0341885f60f6f has problem. Fixes commit -> f259f896f2348f0302f6f88d4382378cf9d23a7e
commit b3e4b3c70a0a4028d481b8b1e84b06acdc80d1ec
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Tue Oct 2 10:06:46 2018 +0200

    pinctrl: mcp23s08: fix irq and irqchip setup order
    
    commit f259f896f2348f0302f6f88d4382378cf9d23a7e upstream.
    
    Since 'commit 02e389e63e35 ("pinctrl: mcp23s08: fix irq setup order")' the
    irq request isn't the last devm_* allocation. Without a deeper look at
    the irq and testing this isn't a good solution. Since this driver relies
    on the devm mechanism, requesting a interrupt should be the last thing
    to avoid memory corruptions during unbinding.
    
    'Commit 02e389e63e35 ("pinctrl: mcp23s08: fix irq setup order")' fixed the
    order for the interrupt-controller use case only. The
    mcp23s08_irq_setup() must be split into two to fix it for the
    interrupt-controller use case and to register the irq at last. So the
    irq will be freed first during unbind.
    
    Cc: stable@vger.kernel.org
    Cc: Jan Kundr√°t <jan.kundrat@cesnet.cz>
    Cc: Dmitry Mastykin <mastichi@gmail.com>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Fixes: 82039d244f87 ("pinctrl: mcp23s08: add pinconf support")
    Fixes: 02e389e63e35 ("pinctrl: mcp23s08: fix irq setup order")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Tested-by: Phil Reid <preid@electromag.com.au>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 05c9297f34053ca2f6aea1fd9a07ddea1d4793a4 ......
	 orig commit -> f5a26acf0162477af6ee4c11b4fb9cffe5d3e257 ......
checking bed938ba673c9c5045fda278305ec541e5d13fc8 ......
	 orig commit -> 544e92581a2ac44607d7cc602c6b54d18656f56d ......
checking e68d638e4931236aebcf3bf66f18136ba59f852e ......
	 orig commit -> ca47480921587ae30417dd234a9f79af188e3666 ......
checking 12ab9e1e8d61b2384f97e2e6fb2a17aec677b01a ......
	 orig commit -> 4b01abdb32fc36abe877503bfbd33019159fad71 ......
checking bef0563f39cd457d090c0d0713f4699b670fd918 ......
	 orig commit -> 55fc633c41a08ce9244ff5f528f420b16b1e04d6 ......
checking 371c5ada2af7fc456d2c4ea5aa1e0ab6cb7a5efe ......
	 orig commit -> 84e455361ec97ea6037d31d42a2955628ea2094b ......
checking 90d17505219a7f382e6a295580e4382091bef7f6 ......
	 orig commit -> 47669fb6b5951d0e09fc99719653e0ac92b50b99 ......
checking 632a537b3c6b031834a7480f95fbf98132262376 ......
	 orig commit -> 21ffceda1c8b3807615c40d440d7815e0c85d366 ......
checking 16256f2658806cbd84d649ac700e673b16a06168 ......
	 orig commit -> 0e88bb002a9b2ee8cc3cc9478ce2dc126f849696 ......
checking 34ad59099ead42461b968e36f939020821e82cef ......
	 orig commit -> 500d58300571b6602341b041f97c082a461ef994 ......
checking 765ae618ad9f106f6231570f29d0d5be3b56d269 ......
	 orig commit -> 5516e21a1e95e9b9f39985598431a25477d91643 ......
checking fed016a79b42943f7dea7409d107b641fe3d1080 ......
	 orig commit -> 61f5acea8737d9b717fcc22bb6679924f3c82b98 ......
		 61f5acea8737d9b717fcc22bb6679924f3c82b98 has problem. Fixes commit -> 1fdb926974695d3dbc05a429bafa266fdd16510e
commit 971039cc4da1b1a800ec1f43edaa2c0aecf338a7
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Feb 20 09:06:18 2018 +0100

    Bluetooth: btusb: Use DMI matching for QCA reset_resume quirking
    
    commit 1fdb926974695d3dbc05a429bafa266fdd16510e upstream.
    
    Commit 61f5acea8737 ("Bluetooth: btusb: Restore QCA Rome suspend/resume fix
    with a "rewritten" version") applied the USB_QUIRK_RESET_RESUME to all QCA
    USB Bluetooth modules. But it turns out that the resume problems are not
    caused by the QCA Rome chipset, on most platforms it resumes fine. The
    resume problems are actually a platform problem (likely the platform
    cutting all power when suspended).
    
    The USB_QUIRK_RESET_RESUME quirk also disables runtime suspend, so by
    matching on usb-ids, we're causing all boards with these chips to use extra
    power, to fix resume problems which only happen on some boards.
    
    This commit fixes this by applying the quirk based on DMI matching instead
    of on usb-ids, so that we match the platform and not the chipset.
    
    Here is the /sys/kernel/debug/usb/devices for the Bluetooth module:
    
    T:  Bus=01 Lev=01 Prnt=01 Port=07 Cnt=04 Dev#=  5 Spd=12   MxCh= 0
    D:  Ver= 2.01 Cls=e0(wlcon) Sub=01 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=0cf3 ProdID=e300 Rev= 0.01
    C:* #Ifs= 2 Cfg#= 1 Atr=e0 MxPwr=100mA
    I:* If#= 0 Alt= 0 #EPs= 3 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=81(I) Atr=03(Int.) MxPS=  16 Ivl=1ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=  64 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=  64 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=83(I) Atr=01(Isoc) MxPS=   0 Ivl=1ms
    E:  Ad=03(O) Atr=01(Isoc) MxPS=   0 Ivl=1ms
    I:  If#= 1 Alt= 1 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=83(I) Atr=01(Isoc) MxPS=   9 Ivl=1ms
    E:  Ad=03(O) Atr=01(Isoc) MxPS=   9 Ivl=1ms
    I:  If#= 1 Alt= 2 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  17 Ivl=1ms
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  17 Ivl=1ms
    I:  If#= 1 Alt= 3 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  25 Ivl=1ms
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  25 Ivl=1ms
    I:  If#= 1 Alt= 4 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  33 Ivl=1ms
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  33 Ivl=1ms
    I:  If#= 1 Alt= 5 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  49 Ivl=1ms
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  49 Ivl=1ms
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1514836
    Fixes: 61f5acea8737 ("Bluetooth: btusb: Restore QCA Rome suspend/resume..")
    Cc: stable@vger.kernel.org
    Cc: Brian Norris <briannorris@chromium.org>
    Cc: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reported-and-tested-by: Kevin Fenzi <kevin@scrye.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2a2ee0c1fee7268f0cdf29415ba2708d3c2bfa33 ......
	 orig commit -> 7d06d5895c159f64c46560dc258e553ad8670fe0 ......
		 7d06d5895c159f64c46560dc258e553ad8670fe0 has problem. Fixes commit -> 61f5acea8737d9b717fcc22bb6679924f3c82b98
commit fed016a79b42943f7dea7409d107b641fe3d1080
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Jan 8 10:44:16 2018 +0100

    Bluetooth: btusb: Restore QCA Rome suspend/resume fix with a "rewritten" version
    
    commit 61f5acea8737d9b717fcc22bb6679924f3c82b98 upstream.
    
    Commit 7d06d5895c15 ("Revert "Bluetooth: btusb: fix QCA...suspend/resume"")
    removed the setting of the BTUSB_RESET_RESUME quirk for QCA Rome devices,
    instead favoring adding USB_QUIRK_RESET_RESUME quirks in usb/core/quirks.c.
    
    This was done because the DIY BTUSB_RESET_RESUME reset-resume handling
    has several issues (see the original commit message). An added advantage
    of moving over to the USB-core reset-resume handling is that it also
    disables autosuspend for these devices, which is similarly broken on these.
    
    But there are 2 issues with this approach:
    1) It leaves the broken DIY BTUSB_RESET_RESUME code in place for Realtek
       devices.
    2) Sofar only 2 of the 10 QCA devices known to the btusb code have been
       added to usb/core/quirks.c and if we fix the Realtek case the same way
       we need to add an additional 14 entries. So in essence we need to
       duplicate a large part of the usb_device_id table in btusb.c in
       usb/core/quirks.c and manually keep them in sync.
    
    This commit instead restores setting a reset-resume quirk for QCA devices
    in the btusb.c code, avoiding the duplicate usb_device_id table problem.
    
    This commit avoids the problems with the original DIY BTUSB_RESET_RESUME
    code by simply setting the USB_QUIRK_RESET_RESUME quirk directly on the
    usb_device.
    
    This commit also moves the BTUSB_REALTEK case over to directly setting the
    USB_QUIRK_RESET_RESUME on the usb_device and removes the now unused
    BTUSB_RESET_RESUME code.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1514836
    Fixes: 7d06d5895c15 ("Revert "Bluetooth: btusb: fix QCA...suspend/resume"")
    Cc: Leif Liddy <leif.linux@gmail.com>
    Cc: Matthias Kaehlcke <mka@chromium.org>
    Cc: Brian Norris <briannorris@chromium.org>
    Cc: Daniel Drake <drake@endlessm.com>
    Cc: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ed72fcf6436271f63a4afc122770ae6537c8d3ce ......
	 orig commit -> b4cdaba274247c9c841c6a682c08fa91fb3aa549 ......
checking 0e4ac4aed9f92796c4177f065f4dbd1bc9c3a432 ......
	 orig commit -> edfc3722cfef4217c7fe92b272cbe0288ba1ff57 ......
checking 703b37d845987cedd76c534df7719bb8024ad66e ......
	 orig commit -> 9903a91c763ecdae333a04a9d89d79d2b8966503 ......
checking a125e9a42302c5dc3c85b88eebc32c43bb65dd07 ......
	 orig commit -> 85c2dd5473b2718b4b63e74bfeb1ca876868e11f ......
checking 75526a9bd3f4fe83161ae2f723fbc036e07194ae ......
	 orig commit -> a1be1f3931bfe0a42b46fef77a04593c2b136e7f ......
checking 838f9cc948b00a31a56c0aa115a1ceca507b084b ......
	 orig commit -> 4f7e988e63e336827f4150de48163bed05d653bd ......
checking 7e54b58285e1e5b3f2430342d40f98a53401bb91 ......
	 orig commit -> d0290bc20d4739b7a900ae37eb5d4cc3be2b393f ......
checking ebe2ba53851e785243d4ee3d7f4fcf64653a987b ......
	 orig commit -> 9893b905e743ded332575ca04486bd586c0772f7 ......
checking 7a401e25f0a5909abf3f3e4fc7518b173cc5328f ......
	 orig commit -> 81742be14b6a90c9fd0ff6eb4218bdf696ad8e46 ......
checking ad91b2e392be4339e09eefd8479675b4232ddfa1 ......
	 orig commit -> 3cd890dbe2a4f14cc44c85bb6cf37e5e22d4dd0e ......
checking 062cd3463c176c71d23e6ca92cda76500ad158d3 ......
	 orig commit -> e7c52b84fb18f08ce49b6067ae6285aca79084a8 ......
checking e186d8bfdabddcff429b3231948d4af860ae7fc7 ......
	 orig commit -> 0e410e158e5baa1300bdf678cea4f4e0cf9d8b94 ......
checking d16919a3fe2d83ae159b82808933fefb54fc2f6e ......
	 orig commit -> 0198e5b707cfeb5defbd1b71b1ec6e71580d7db9 ......
checking e06f7b686daa871c4a4cf745be30fd1864b6f9c8 ......
	 orig commit -> 0be267255cef64e1c58475baa7b25568355a3816 ......
checking b897f1dc780e1ac019977297f2f32369776a30b1 ......
	 orig commit -> 20a1ea2222e7cbf96e9bf8579362e971491e6aea ......
checking 4562bfdeac8708371dec016f868a2a18ec6d1285 ......
	 orig commit -> c66234cfedfc3e6e3b62563a5f2c1562be09a35d ......
checking e747a02d9fcf76c4146a5f151e2136591df5b0a3 ......
	 orig commit -> 57ea5f161a7de5b1913c212d04f57a175b159fdf ......
checking 985bf39913428d1797427e779d747ae76b144901 ......
	 orig commit -> 58d6b15e9da5042a99c9c30ad725792e4569150e ......
checking be54d79b43fdb796787d004afbacef57bbab3074 ......
	 orig commit -> 36ee41d161c67a6fcf696d4817a0da31f778938c ......
checking 88b64450cc0a9340145331b2ffefdff15a0f96d3 ......
	 orig commit -> 43ff3f65234061e08d234bdef5a9aadc19832b74 ......
checking fe90a3a6f88179dfa427a758dbef47cb371b6be7 ......
	 orig commit -> 5c7d4f9ad39d980728b39752304ce10bb2960cbf ......
checking 6bad51166f875751657d11b9ff9cd79540302c90 ......
	 orig commit -> 6b6977117f50d60455ace86b2d256f6fb4f3de05 ......
checking 7dffdb31ad13e37c3037185d3ac04a5e44ebacbd ......
	 orig commit -> 20e8175d246e9f9deb377f2784b3e7dfb2ad3e86 ......
checking f37a798e7724b2b8c008a45e7604bc2cc75870d2 ......
	 orig commit -> eff84b379089cd8b4e83599639c1f5f6e34ef7bf ......
checking f428567e005fa2a7f630266cb48f2036d7f01698 ......
	 orig commit -> 225ece3e7dad4cfc44cca38ce7a3a80f255ea8f1 ......
checking 1a4834092539674b68f03f9b4f13f48c6b424a27 ......
	 orig commit -> 273caa260035c03d89ad63d72d8cd3d9e5c5e3f1 ......
checking ad01b40bb9be0987e883655205606c710a8785a5 ......
	 orig commit -> a1dfb4c48cc1e64eeb7800a27c66a6f7e88d075a ......
checking b3f69836c92b336cd1ca08bcedf3250265e66e46 ......
	 orig commit -> d83a8243aaefe62ace433e4384a4f077bed86acb ......
checking efabe94f8a0d1aedb1df67c2e1a56d310baf7ce2 ......
	 orig commit -> 169f24ca68bf0f247d111aef07af00dd3a02ae88 ......
checking a20ab4df701b76b10eedcdcbe0a108462d76d6b6 ......
	 orig commit -> a751be5b142ef6bcbbb96d9899516f4d9c8d0ef4 ......
checking f1b572d34648313a07856e5b315d8329eb649c93 ......
	 orig commit -> b8c601e8af2d08f733d74defa8465303391bb930 ......
		 b8c601e8af2d08f733d74defa8465303391bb930 has problem. Fixes commit -> 273caa260035c03d89ad63d72d8cd3d9e5c5e3f1
commit 1a4834092539674b68f03f9b4f13f48c6b424a27
Author: Hans Verkuil <hansverk@cisco.com>
Date:   Wed Feb 14 12:44:34 2018 +0100

    media: v4l2-compat-ioctl32.c: make ctrl_is_pointer work for subdevs
    
    commit 273caa260035c03d89ad63d72d8cd3d9e5c5e3f1 upstream.
    
    If the device is of type VFL_TYPE_SUBDEV then vdev->ioctl_ops
    is NULL so the 'if (!ops->vidioc_query_ext_ctrl)' check would crash.
    Add a test for !ops to the condition.
    
    All sub-devices that have controls will use the control framework,
    so they do not have an equivalent to ops->vidioc_query_ext_ctrl.
    Returning false if ops is NULL is the correct thing to do here.
    
    Fixes: b8c601e8af ("v4l2-compat-ioctl32.c: fix ctrl_is_pointer")
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reported-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3df1197724661c15d23b8359ec42af04a648b848 ......
	 orig commit -> 8ed5a59dcb47a6f76034ee760b36e089f3e82529 ......
checking 16c25072560fb30df50c766260b69b14e3795194 ......
	 orig commit -> 333b1e9f96ce05f7498b581509bb30cde03018bf ......
checking a38becb087b20a34bdbfa63567f69671849025ad ......
	 orig commit -> 486c521510c44a04cd756a9267e7d1e271c8a4ba ......
checking 0b7d6ac53606ab9991b76e95ab3e54348b3b9b89 ......
	 orig commit -> b7b957d429f601d6d1942122b339474f31191d75 ......
checking 2b991eeb5cfb34838c4e984334e5975d3351c026 ......
	 orig commit -> 3ee6d040719ae09110e5cdf24d5386abe5d1b776 ......
checking 2d280dab382eef93311f089da0bb428336431208 ......
	 orig commit -> 181a4a2d5a0a7b43cab08a70710d727e7764ccdd ......
checking ea96d8f676dd3caeb77e3dc509c880cc81d303a6 ......
	 orig commit -> b2469c814fbc8f1f19676dd4912717b798df511e ......
checking 2f00eb27908895b46e807b632b53824d0844012f ......
	 orig commit -> 9fa68f620041be04720d0cbfb1bd3ddfc6310b24 ......
		 9fa68f620041be04720d0cbfb1bd3ddfc6310b24 has problem. Fixes commit -> ba7d7433a0e998c902132bd47330e355a1eaa894
f3aefb6a7066e24bfea7fcf1b07907576de69d63
commit e4fa275b8fddea4fa24872207aa64b8f2cdb8335
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Mar 28 10:57:22 2018 -0700

    sunrpc: remove incorrect HMAC request initialization
    
    commit f3aefb6a7066e24bfea7fcf1b07907576de69d63 upstream.
    
    make_checksum_hmac_md5() is allocating an HMAC transform and doing
    crypto API calls in the following order:
    
        crypto_ahash_init()
        crypto_ahash_setkey()
        crypto_ahash_digest()
    
    This is wrong because it makes no sense to init() the request before a
    key has been set, given that the initial state depends on the key.  And
    digest() is short for init() + update() + final(), so in this case
    there's no need to explicitly call init() at all.
    
    Before commit 9fa68f620041 ("crypto: hash - prevent using keyed hashes
    without setting key") the extra init() had no real effect, at least for
    the software HMAC implementation.  (There are also hardware drivers that
    implement HMAC-MD5, and it's not immediately obvious how gracefully they
    handle init() before setkey().)  But now the crypto API detects this
    incorrect initialization and returns -ENOKEY.  This is breaking NFS
    mounts in some cases.
    
    Fix it by removing the incorrect call to crypto_ahash_init().
    
    Reported-by: Michael Young <m.a.young@durham.ac.uk>
    Fixes: 9fa68f620041 ("crypto: hash - prevent using keyed hashes without setting key")
    Fixes: fffdaef2eb4a ("gss_krb5: Add support for rc4-hmac encryption")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 3a48ec7084ed70f0d1877ded8bc2b2844a5beb29
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Jan 6 18:47:42 2019 -0800

    crypto: hash - set CRYPTO_TFM_NEED_KEY if ->setkey() fails
    
    commit ba7d7433a0e998c902132bd47330e355a1eaa894 upstream.
    
    Some algorithms have a ->setkey() method that is not atomic, in the
    sense that setting a key can fail after changes were already made to the
    tfm context.  In this case, if a key was already set the tfm can end up
    in a state that corresponds to neither the old key nor the new key.
    
    It's not feasible to make all ->setkey() methods atomic, especially ones
    that have to key multiple sub-tfms.  Therefore, make the crypto API set
    CRYPTO_TFM_NEED_KEY if ->setkey() fails and the algorithm requires a
    key, to prevent the tfm from being used until a new key is set.
    
    Note: we can't set CRYPTO_TFM_NEED_KEY for OPTIONAL_KEY algorithms, so
    ->setkey() for those must nevertheless be atomic.  That's fine for now
    since only the crc32 and crc32c algorithms set OPTIONAL_KEY, and it's
    not intended that OPTIONAL_KEY be used much.
    
    [Cc stable mainly because when introducing the NEED_KEY flag I changed
     AF_ALG to rely on it; and unlike in-kernel crypto API users, AF_ALG
     previously didn't have this problem.  So these "incompletely keyed"
     states became theoretically accessible via AF_ALG -- though, the
     opportunities for causing real mischief seem pretty limited.]
    
    Fixes: 9fa68f620041 ("crypto: hash - prevent using keyed hashes without setting key")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4fa275b8fddea4fa24872207aa64b8f2cdb8335
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Mar 28 10:57:22 2018 -0700

    sunrpc: remove incorrect HMAC request initialization
    
    commit f3aefb6a7066e24bfea7fcf1b07907576de69d63 upstream.
    
    make_checksum_hmac_md5() is allocating an HMAC transform and doing
    crypto API calls in the following order:
    
        crypto_ahash_init()
        crypto_ahash_setkey()
        crypto_ahash_digest()
    
    This is wrong because it makes no sense to init() the request before a
    key has been set, given that the initial state depends on the key.  And
    digest() is short for init() + update() + final(), so in this case
    there's no need to explicitly call init() at all.
    
    Before commit 9fa68f620041 ("crypto: hash - prevent using keyed hashes
    without setting key") the extra init() had no real effect, at least for
    the software HMAC implementation.  (There are also hardware drivers that
    implement HMAC-MD5, and it's not immediately obvious how gracefully they
    handle init() before setkey().)  But now the crypto API detects this
    incorrect initialization and returns -ENOKEY.  This is breaking NFS
    mounts in some cases.
    
    Fix it by removing the incorrect call to crypto_ahash_init().
    
    Reported-by: Michael Young <m.a.young@durham.ac.uk>
    Fixes: 9fa68f620041 ("crypto: hash - prevent using keyed hashes without setting key")
    Fixes: fffdaef2eb4a ("gss_krb5: Add support for rc4-hmac encryption")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8d906d183bce4b0eb812e5766ee5016f16dc201c ......
	 orig commit -> a208fa8f33031b9e0aba44c7d1b7e68eb0cbd29e ......
checking b806c0cc4c73511be382da411effdbb96f15919a ......
	 orig commit -> a16e772e664b9a261424107784804cffc8894977 ......
checking 16210524c424a5df0cdd9b2b6aaee037f995f6ad ......
	 orig commit -> fa59b92d299f2787e6bae1ff078ee0982e80211f ......
checking ed7b0af0ca02877cb4e23546da0d44dd49156bd7 ......
	 orig commit -> 841a3ff329713f796a63356fef6e2f72e4a3f6a3 ......
checking b8b32e2e68f0a3dd67edb34710964dc3e67bdf3b ......
	 orig commit -> cd6ed77ad5d223dc6299fb58f62e0f5267f7e2ba ......
checking 449704d3ba6f45585da8cc033af2e3178d7344a7 ......
	 orig commit -> f919dde0772a894c693a1eeabc77df69d6a9b937 ......
checking 53c5963da84337b71abff8b85291cd25a1002c17 ......
	 orig commit -> 998008b779e424bd7513c434d0ab9c1268459009 ......
checking e985f7c8ac3801ce6b684d1b248f63701190154b ......
	 orig commit -> ca1b4974bd237f2373b0e980b11957aac3499b56 ......
checking 650d3d8512c6c542d7c11ece049b46d5f2337ce8 ......
	 orig commit -> ba87977a49913129962af8ac35b0e13e0fa4382d ......
checking f1e31607e73d5f4546ff8d1e40e1153230392188 ......
	 orig commit -> e231c6879cfd44e4fffd384bb6dd7d313249a523 ......
checking 1c38ad2f26d8511cde75ce5767313e8c3e789d69 ......
	 orig commit -> 49686cbbb3ebafe42e63868222f269d8053ead00 ......
checking 60017643c21060b600faeae9a58e450804ea288d ......
	 orig commit -> 1b8d97b0a837beaf48a8449955b52c650a7114b4 ......
checking 6421f29eb8af8992fd8a85823b435d44bb055b1c ......
	 orig commit -> 8634ef5e05311f32d7f2aee06f6b27a8834a3bd6 ......
checking 3d03af006438b91dab7c1feb474a5c899554acac ......
	 orig commit -> 7f1bda447c9bd48b415acedba6b830f61591601f ......
checking 3ac2d17a6ed38d3e662e56ad79e0ba1a98247830 ......
	 orig commit -> 7ff4cff637aa0bd2abbd81f53b2a6206c50afd95 ......
checking ace34428faa6be2098c9ac295394c11e65db2263 ......
	 orig commit -> ba4a76f703ab7eb72941fdaac848502073d6e9ee ......
checking 068e53f9b1921bd6a3ed2340dc5d85792bdde089 ......
	 orig commit -> 6b46d444146eb8d0b99562795cea8086639d7282 ......
checking e9a35f8b73f10c605fba4548957c8317228848c7 ......
	 orig commit -> 7f29ae9f977bcdc3654e68bc36d170223c52fd48 ......
checking 5793f39de7f64938c23cc062b1e170505789b0b0 ......
	 orig commit -> f78e5623f45bab2b726eec29dc5cefbbab2d0b1c ......
		 f78e5623f45bab2b726eec29dc5cefbbab2d0b1c has problem. Fixes commit -> 7233982ade15eeac05c6f351e8d347406e6bcd2f
commit 8626c40a30937960926727a8606c6d0d8207425c
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu Jan 18 14:05:05 2018 +0000

    mtd: ubi: wl: Fix error return code in ubi_wl_init()
    
    commit 7233982ade15eeac05c6f351e8d347406e6bcd2f upstream.
    
    Fix to return error code -ENOMEM from the kmem_cache_alloc() error
    handling case instead of 0, as done elsewhere in this function.
    
    Fixes: f78e5623f45b ("ubi: fastmap: Erase outdated anchor PEBs during
    attach")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Reviewed-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c94c39ac85f11698f3f0babb515f79656df3917e ......
	 orig commit -> a51a0c8d213594bc094cb8e54aad0cb6d7f7b9a6 ......
checking 7eb52a6889e90bcb1280cf2d93f8a80602191d5c ......
	 orig commit -> f4c6cd1a7f2275d5bc0e494b21fff26f8dde80f0 ......
checking 16d11602c83b45f448355e02dd97a0d855016ef3 ......
	 orig commit -> 87e89ce8d0d14f573c068c61bec2117751fb5103 ......
checking 4527b0887bc5ae69513215f91233c27808cd1f04 ......
	 orig commit -> f953f0f89663c39f08f4baaa8a4a881401b65654 ......
checking 0763f0418bb53f4724a6d711bf3b735a71ce3d24 ......
	 orig commit -> 9e343e87d2c4c707ef8fae2844864d4dde3a2d13 ......
		 9e343e87d2c4c707ef8fae2844864d4dde3a2d13 has problem. Fixes commit -> ea739a287f4f16d6250bea779a1026ead79695f2
commit a92a286361572e65988e37ac7c5da91a04e26a01
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Thu May 10 19:20:54 2018 +0100

    mtd: Fix comparison in map_word_andequal()
    
    [ Upstream commit ea739a287f4f16d6250bea779a1026ead79695f2 ]
    
    Commit 9e343e87d2c4 ("mtd: cfi: convert inline functions to macros")
    changed map_word_andequal() into a macro, but also changed the right
    hand side of the comparison from val3 to val2.  Change it back to use
    val3 on the right hand side.
    
    Thankfully this did not cause a regression because all callers
    currently pass the same argument for val2 and val3.
    
    Fixes: 9e343e87d2c4 ("mtd: cfi: convert inline functions to macros")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c584c903bae9a1ec6e881847713df9c1b8b87df0 ......
checking dbca45b996550f1ab646011f48bede5b9c2e2ea9 ......
checking ac63fdb4a2b229bdd7ad8449a88791ad5da5f572 ......
checking 37dc3e6c117eced753d6ce6cce85535cec3ad013 ......
checking 908ad7a1484d78228bc88d242121574f86eb35e8 ......
checking 906a9f396cc8005807f6741e881da0ad317c4091 ......
checking 6db26ad1dc4685843ab3c4d655b51777e04d131e ......
checking e47273d086236d06c3c2851fa8599971086b2a73 ......
checking 2cfe8929f6247dbee8def7e94f334909fe5ac084 ......
checking 98be7165d9f71f5df9802548b7d8ab2cf6ccb211 ......
checking 45e2061147c329fc08f81a7e2a551b92bcc2a6a3 ......
checking 4ba100aa94a0f8c44de187c46fee4917ce1e06aa ......
checking ce15f32d48840bbaf49bf5b9ba540befb59548cb ......
checking 4efa1a863a1218d4b884a67178735950aab85c2e ......
checking 591862b560003518dfc369d44d1e177d96f7104c ......
checking 0b3512fa7b0a4f1f187a5e38112c5bebaea87fc1 ......
checking 402aeac58753ad5c3582eb8175a336f8e1fb62f4 ......
checking 9b26a45c34e40575e53287365be7571b9cda21ab ......
checking 48993dfa1af8c719576a18c0e2ca1d611297e34e ......
checking 3317097b2b4affdd0b600ef0eb558a3e82964dc6 ......
checking 48c3538c35780838da19773b615ede148e6af2b0 ......
checking 6b47a8256a56c261ab008863a548f245fdcc8b11 ......
checking aab3306701f10c5dc35d8da74431cde6249baf0b ......
checking 9107ac4ea3da68af722d1b6820f90cf0c119b134 ......
checking 5bee81c980297f3f5486539881ab4241c5f0dea3 ......
checking c10e4aa77814063ac459fab673a5a392b7334b42 ......
checking f91f190708b25df0a5675800bcabae13bf2aa882 ......
checking be53742befea9329b034f143e7e932cac54d3609 ......
checking 9da836a476fe5f90348ca5edfb5af68c2ebb558b ......
checking da1f67921d2ff82ac3dfbf193dc4596da569a5c6 ......
checking d9ef050f28953658ab1621a65c4090600e30bfde ......
checking ba32050d308a8bcd8ea300daf00dc197523d47f8 ......
checking 28d8886d985ccc84e4e8f567c60f491acb1ae51c ......
checking 1ccaee9dea60f97e2f64fe17b8c23ff06fe95041 ......
checking 7a51d7d2f7f77cea72fe0f73bd40d39852cd0702 ......
checking 2e985d2647a07bad21892811e8eb85f5231a1d4a ......
checking 535357c9d3e94115b87e11a3014ea29c8a0c26fb ......
checking 0a532ea3ef1481c5af869728abac9179609acba8 ......
checking 6afdaf109c34acd9cbc85ef687e3e4e991e5fd89 ......
checking 1449a173a2ee0db4fef6669c1bdc71a5561cb267 ......
checking 8703f27d7c5db70ffd793a813160f28e810cc1bc ......
checking e39247ca17146e8baae3b0703fe5f27298a60189 ......
checking 2feb36ebe4503551927d9c798cd454b7f01bd442 ......
checking ee28fed5ccc66fbdef4119451aa6754501705a7e ......
checking 69288201803aecffd7f17ffa9c0c5043ffb8367c ......
checking c98c8c23585643cbf255415b02cb32c95baac82e ......
checking 7aca19ea5a45e575de769578d5d78ab7a540ebcc ......
checking fedf5a743cf2e024c5b557abfb1a45f3c06b3c81 ......
checking 0b2995145ea4fb9f5268f51c13d25213c039486e ......
checking 5385e5fe9724479b3b9d7f1b6466b4d85f4eafa9 ......
checking 83ae3355bdfbd44a594f18946d3a37a74529a801 ......
checking 5e319f4533bfa8df7f03df501d22a169b2f03719 ......
checking 332e0288200f6afe070e2c126680130195cec3d9 ......
checking 68a65ce7039aa247b911e00ed5c743db35167781 ......
checking 3882b5f63f3cfff225cee691dcb8357bf6714d07 ......
checking 7fafcbb04f94d4709a5c8b7fb2c196b5bdf4fd7b ......
checking 2843ade2dad2249900f508f61068d245921ce9f1 ......
checking 4e29f25b2bc1e3a5f545b2ce842911c030277309 ......
checking 15a511c0cbd1b1c8f800ce8c8921fb2390fb2d05 ......
checking 6472f1a3a54f061864a5091788778793661aa7c0 ......
checking 86200f218f98704fa4b78734d574a38519d5ef3c ......
checking 63d13760abd7a819b6e95793c795cdc155bfff44 ......
checking 78422a7b5160954aff02bc3655271adc5d21b04e ......
checking d6c414013bb4c41c93fcef1ffa90df4f56c4cc53 ......
checking 53b13950886c8dd83fdb613cd5b3a150601120e9 ......
checking a8bad38cff23eaed7b962c0bd7b0553fb31dec15 ......
checking 00ff7de671f87cf7b330b563c16ee6fb8f5e3cab ......
checking 95ce0d51f9a8ee5417a3d1d8699d6f654dd90a62 ......
checking 4445cb04410fb5ea845e2991144f77d00a78ba0c ......
checking d26f0a5dc6a6d8237b024a150de6be30fce7b467 ......
checking 59f47f9dcdcde20e0a20c434f18bcc50c7c824e4 ......
checking 78299fafcd78bec4f4ce145decefff5b7f664d80 ......
checking 63380839c575e5ea13c8005332665e31897b2740 ......
checking dd24d173b50af3aadb1ea2e04edaa8d68ca59b23 ......
	 orig commit -> c0f71bbb810237a38734607ca4599632f7f5d47f ......
checking 2bd6279a4a8cd6c8d108b694c5ddb9cb53f6e35c ......
	 orig commit -> 7bf7a7116ed313c601307f7e585419369926ab05 ......
checking fd31a38d268f50afe9c5cd3d4beafa020ad39e90 ......
	 orig commit -> 3d932ee27e852e4904647f15b64dedca51187ad7 ......
checking e5e1e153ecd40c2b09c23d2b2c161a6c8ddbba07 ......
	 orig commit -> 69c64866ce072dea1d1e59a0d61e0f66c0dffb76 ......
checking 050b86b5bf2040a4be87f93510ffd780113c2065 ......
	 orig commit -> 4488496d58200c7511842e049a4cc891d928da56 ......
checking 50018d09843cc4813f1c2b89ff8fbcdf883ab0a3 ......
	 orig commit -> 23ac12732825901b3fc6ac720958d8bff9a0d6ec ......
checking 19d8e5122fefc3e424050a78063f0d385433e191 ......
	 orig commit -> d87ce76402950b8e4d5117276d44465658e886a4 ......
		 d87ce76402950b8e4d5117276d44465658e886a4 has problem. Fixes commit -> 4488496d58200c7511842e049a4cc891d928da56
commit 050b86b5bf2040a4be87f93510ffd780113c2065
Author: Ville Syrj√§l√§ <ville.syrjala@linux.intel.com>
Date:   Wed Nov 29 14:54:11 2017 +0200

    drm/i915: Fix deadlock in i830_disable_pipe()
    
    commit 4488496d58200c7511842e049a4cc891d928da56 upstream.
    
    i830_disable_pipe() gets called from the power well code, and thus
    we're already holding the power domain mutex. That means we can't
    call plane->get_hw_state() as it will also try to grab the
    same mutex and will thus deadlock.
    
    Replace the assert_plane() calls (which calls ->get_hw_state()) with
    just raw register reads in i830_disable_pipe(). As a bonus we can
    now get a warning if plane C is enabled even though we don't even
    expose it as a drm plane.
    
    v2: Do a separate WARN_ON() for each plane (Chris)
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Fixes: d87ce7640295 ("drm/i915: Add .get_hw_state() method for planes")
    Signed-off-by: Ville Syrj√§l√§ <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171129125411.29055-1-ville.syrjala@linux.intel.com
    (cherry picked from commit 5816d9cbc0a0fbf232fe297cefcb85361a3cde90)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d9c3131f2ab45eacb6641b29ea6ee69039c727a7 ......
	 orig commit -> 364f56653708ba8bcdefd4f0da2a42904baa8eeb ......
checking 9c41a8453c826b58e470d23302d0e10aba3fd168 ......
	 orig commit -> ad0f1d9d65938aec72a698116cd73a980916895e ......
checking fea5349eb88bf8e95b0574a7c7d30040c2f07c9c ......
	 orig commit -> 2a266f23550be997d783f27e704b9b40c4010292 ......
checking 4c54eab372f8cd3f3b1f0a07bc484b06eed3c5a0 ......
	 orig commit -> 932b50c7c1c65e6f23002e075b97ee083c4a9e71 ......
checking 0b69ec336d3d5c50710e19aaf0ca5f738fc20bc3 ......
	 orig commit -> c622cc013cece073722592cff1ac6643a33b1622 ......
checking fd7467f82e58e7b6579cac0c9e883495df15f163 ......
	 orig commit -> bc137dfdbec27c0ec5731a89002daded4a4aa1ea ......
checking e94a7de2a3d2da42f0d124c7501195f1cdffa232 ......
	 orig commit -> c6b9d9a33029014446bd9ed84c1688f6d3d4eab9 ......
checking 69373cdc4ae4eacac2eb19da03eb0ad2bb0eda7f ......
	 orig commit -> 66b3bd2356e0a1531c71a3dcf96944621e25c17c ......
checking 7adf1d63ef6567924695e3965418d0ded8c896c8 ......
	 orig commit -> 6066998cbd2b1012a8d5bc9a2957cfd0ad53150e ......
checking 4126cdb73193eb0778ae05d2162cbb3bcd778331 ......
	 orig commit -> 97f4b7276b829a8927ac903a119bef2f963ccc58 ......
checking be6874b4d480d12ec120e195f35091d831ca97bc ......
	 orig commit -> 9aca7e454415f7878b28524e76bebe1170911a88 ......
checking 061df7705a53179ecb7f73a6b995bf7170a794d8 ......
	 orig commit -> f04a703c3d613845ae3141bfaf223489de8ab3eb ......
checking b4a9ffad970244d0a349e4e06e5bb332790d7715 ......
	 orig commit -> 1b689a95ce7427075f9ac9fb4aea1af530742b7f ......
checking 8caab9edccf57540770352825f9d3fa2d8343ae2 ......
	 orig commit -> 24f8d233074badd4c18e4dafd2fb97d65838afed ......

Check from v4.14.58 to v4.14.59
Commit count: 49
checking 53208e12faa5b8c6eac4eb1d23d6e3fae450fc5a ......
checking e94f784fddd58418bf5d97a23cf331d04a1bf5b1 ......
checking 08382d3a1be25a41d9d82b8bba9a26c9b2b22cf3 ......
	 orig commit -> 393753b217f05474e714aea36c37501546ed1202 ......
checking a55d3d73d45787b091b1fadf1b1c0c23613860c1 ......
	 orig commit -> 5d4c94ed9f564224d7b37dbee13f7c5d4a8a01ac ......
checking 60454a9715df60af6f1538826a59b8e0b7d0156f ......
	 orig commit -> 83997997252f5d3fc7f04abc24a89600c2b504ab ......
checking 19c756e01b094e06f025f4a1facd006932455875 ......
	 orig commit -> 2f4f0f338cf453bfcdbcf089e177c16f35f023c8 ......
checking 189c7890f33b21764289e05dde76a196ebf64587 ......
	 orig commit -> 620050d9c2be15c47017ba95efe59e0832e99a56 ......
checking 96bf3257c86655b7f6bac8566d916f25cd3aa946 ......
	 orig commit -> 2574fe54515ed3487405de329e4e9f13d7098c10 ......
checking c5846b2fd57b593180210f74d2f5e937f9e421cc ......
	 orig commit -> 877e0b75947e2c7acf5624331bb17ceb093c98ae ......
checking f820de2a08b65bbe84372108c1975737f0d5d044 ......
	 orig commit -> 8ebd83bdb027f29870d96649dba18b91581ea829 ......
checking 464a3f9139f4ebea238f15db83705eac9561d2bc ......
	 orig commit -> 32852c561bffd613d4ed7ec464b1e03e1b7b6c5c ......
checking 55cb8f40c8d7ee1adb1575257cf739be26561e9e ......
	 orig commit -> 722e5f2b1eec7de61117b7c0a7914761e3da2eda ......
checking 5421694d8cd76e258a3aa2923794f772f2e6a4de ......
	 orig commit -> 4d644abf25698362bd33d17c9ddc8f7122c30f17 ......
checking 68fc92a0f3913d539d1ac68a861f895e34099e46 ......
	 orig commit -> 56406e017a883b54b339207b230f85599f4d70ae ......
checking ac3f65c6b6351b729be072debc44cd28a22e0d0e ......
	 orig commit -> 249a32b7eeb3edb6897dd38f89651a62163ac4ed ......
checking e089c305af4903793dae85dc9d9b706e0d17bfb3 ......
	 orig commit -> 1445cbe476fc3dd09c0b380b206526a49403c071 ......
checking ab9489c4db894cc60f30430f80464eec8ccdf066 ......
	 orig commit -> b96fba8d5855c3617adbfb43ca4723a808cac954 ......
checking 22e3d3178b18115ba60cae7c968a67718f070da0 ......
	 orig commit -> 58152ecbbcc6a0ce7fddd5bf5f6ee535834ece0c ......
checking ec645ae62309a85522c2bc8f700afc6e152e62b9 ......
	 orig commit -> 8541b21e781a22dce52a74fef0b9bed00404a1cd ......
checking 6285a74a536f1ee807488436547cc17cda3306d8 ......
	 orig commit -> 3d4bf93ac12003f9b8e1e2de37fe27983deebdcf ......
checking 81e6b01d1c10015811f52bf04ec125bdb291b4b5 ......
	 orig commit -> f4a3313d8e2ca9fd8d8f45e40a2903ba782607e7 ......
checking f3a5ba6310e11df370f6888ed716d1486896d983 ......
	 orig commit -> 72cd43ba64fc172a443410ce01645895850844c8 ......
checking ae70b61531979a4caaed63be4f19b76fd58e7932 ......
	 orig commit -> a0496ef2c23b3b180902dd185d0d63ccbc624cf8 ......
checking 78636179f6e69f71f2d16e8716c096f297be9356 ......
	 orig commit -> 27cde44a259c380a3c09066fc4b42de7dde9b1ad ......
checking f7f24b36938367d6e97d43f7dd53f0c5714cce1a ......
	 orig commit -> 2987babb6982306509380fc11b450227a844493b ......
checking 68c9bdfc8b425671003e37b27a400e77d288a8fb ......
	 orig commit -> b0c05d0e99d98d7f0cd41efc1eeec94efdc3325d ......
checking 68974d0b9c8662744afdad22dbcb7d93b29a7b94 ......
	 orig commit -> e99465b952861533d9ba748fdbecc96d9a36da3e ......
checking bb0335aacfddee9b7d06a1e2fdca0b62140c791c ......
	 orig commit -> f6e053858671bb156b6e44ad66418acc8c7f4e77 ......
checking 1c345a5292587b29a99d30074fbb1759bccc43b5 ......
	 orig commit -> 7431016b107c95cb5b2014aa1901fcb115f746bc ......
checking 23557c5d34b96e1129c8567a26764faa587dd659 ......
	 orig commit -> 5025f7f7d506fba9b39e7fe8ca10f6f34cb9bc2d ......
		 5025f7f7d506fba9b39e7fe8ca10f6f34cb9bc2d has problem. Fixes commit -> 56a49d7048703f5ffdb84d3a0ee034108fba6850
checking 464e2326a7f5cd39d82f96750bb56a9d302edf8d ......
	 orig commit -> 144fe2bfd236dc814eae587aea7e2af03dbdd755 ......
checking 50b464d33964282fb09be7d6d8a6063475f63814 ......
	 orig commit -> 215d08a85b9acf5e1fe9dbf50f1774cde333efef ......
checking 46f9e1d0bd4e52cd4fefcc6a7a28066f877857af ......
checking 6d5b7d68f45b1208493385a8490b65ff38c4fafe ......
	 orig commit -> 24b711edfc34bc45777a3f068812b7d1ed004a5d ......
checking 047af2d8ced33f16815e3650bfd5e6c732229634 ......
	 orig commit -> 2630bae8018823c3b88788b69fb9f16ea3b4a11e ......
checking c83cd44202b503269388347a959017ebb6573963 ......
	 orig commit -> d2e1c57bcf9a07cbb67f30ecf238f298799bce1c ......
checking 291d99ac4dc273b64b7d98b98f494e18da716744 ......
	 orig commit -> 33180bee86a8940a84950edca46315cd9dd6deb5 ......
checking f208fbad98fde951c9783194e83ecfe004327b33 ......
	 orig commit -> ff907a11a0d68a749ce1a321f4505c03bf72190c ......
checking 6e92f04a4fef1dd178fe1e285e7304bc3bb42ba2 ......
	 orig commit -> 958c696f5a7274d9447a458ad7aa70719b29a50a ......
checking df20f746d68b6982923f0c318cc6a9347c96454f ......
	 orig commit -> 2efd4fca703a6707cad16ab486eaab8fc7f0fd49 ......
		 2efd4fca703a6707cad16ab486eaab8fc7f0fd49 has problem. Fixes commit -> 4a06fa67c4da20148803525151845276cdb995c1
64199fc0a46ba211362472f7f942f900af9492fd
commit 75664d8037efe48e968bda85e690341d12135374
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Jan 7 16:47:33 2019 -0500

    ip: on queued skb use skb_header_pointer instead of pskb_may_pull
    
    [ Upstream commit 4a06fa67c4da20148803525151845276cdb995c1 ]
    
    Commit 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call
    pskb_may_pull") avoided a read beyond the end of the skb linear
    segment by calling pskb_may_pull.
    
    That function can trigger a BUG_ON in pskb_expand_head if the skb is
    shared, which it is when when peeking. It can also return ENOMEM.
    
    Avoid both by switching to safer skb_header_pointer.
    
    Fixes: 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call pskb_may_pull")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32b193216e185a3ba817a179f29a53a9973665a9
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Sep 30 11:33:39 2018 -0700

    ipv4: fix use-after-free in ip_cmsg_recv_dstaddr()
    
    [ Upstream commit 64199fc0a46ba211362472f7f942f900af9492fd ]
    
    Caching ip_hdr(skb) before a call to pskb_may_pull() is buggy,
    do not do it.
    
    Fixes: 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call pskb_may_pull")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 75664d8037efe48e968bda85e690341d12135374
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Jan 7 16:47:33 2019 -0500

    ip: on queued skb use skb_header_pointer instead of pskb_may_pull
    
    [ Upstream commit 4a06fa67c4da20148803525151845276cdb995c1 ]
    
    Commit 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call
    pskb_may_pull") avoided a read beyond the end of the skb linear
    segment by calling pskb_may_pull.
    
    That function can trigger a BUG_ON in pskb_expand_head if the skb is
    shared, which it is when when peeking. It can also return ENOMEM.
    
    Avoid both by switching to safer skb_header_pointer.
    
    Fixes: 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call pskb_may_pull")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c2ce657fd68cd617e7b8e014a141a2e15e799584 ......
	 orig commit -> 3dd1c9a1270736029ffca670e9bd0265f4120600 ......
checking f1fb27fc256ce822ce22838c0edd862c76b04dc6 ......
	 orig commit -> c1f897ce186a529a494441642125479d38727a3d ......
checking 7e454c18b76f07ff14666853aba38a4e6890921f ......
	 orig commit -> eb493fbc150f4a28151ae1ee84f24395989f3600 ......
checking d0bd2c70ffcbf83ad02d551ad6f1c1a1a6664ef1 ......
	 orig commit -> e5d54f1935722f83df7619f3978f774c2b802cd8 ......
checking 58113603a4ea409a2b77daa1e1caa663c648c748 ......
	 orig commit -> 76fa4975f3ed12d15762bc979ca44078598ed8ee ......
		 76fa4975f3ed12d15762bc979ca44078598ed8ee has problem. Fixes commit -> 8cfbdbdc24815417a3ab35101ccf706b9a23ff17
commit 025cc91f8c5290dc1bf2586baf3767547760e899
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Thu Aug 23 10:08:58 2018 +1000

    KVM: PPC: Book3S: Fix guest DMA when guest partially backed by THP pages
    
    commit 8cfbdbdc24815417a3ab35101ccf706b9a23ff17 upstream.
    
    Commit 76fa4975f3ed ("KVM: PPC: Check if IOMMU page is contained in
    the pinned physical page", 2018-07-17) added some checks to ensure
    that guest DMA mappings don't attempt to map more than the guest is
    entitled to access. However, errors in the logic mean that legitimate
    guest requests to map pages for DMA are being denied in some
    situations. Specifically, if the first page of the range passed to
    mm_iommu_get() is mapped with a normal page, and subsequent pages are
    mapped with transparent huge pages, we end up with mem->pageshift ==
    0. That means that the page size checks in mm_iommu_ua_to_hpa() and
    mm_iommu_up_to_hpa_rm() will always fail for every page in that
    region, and thus the guest can never map any memory in that region for
    DMA, typically leading to a flood of error messages like this:
    
      qemu-system-ppc64: VFIO_MAP_DMA: -22
      qemu-system-ppc64: vfio_dma_map(0x10005f47780, 0x800000000000000, 0x10000, 0x7fff63ff0000) = -22 (Invalid argument)
    
    The logic errors in mm_iommu_get() are:
    
      (a) use of 'ua' not 'ua + (i << PAGE_SHIFT)' in the find_linux_pte()
          call (meaning that find_linux_pte() returns the pte for the
          first address in the range, not the address we are currently up
          to);
      (b) use of 'pageshift' as the variable to receive the hugepage shift
          returned by find_linux_pte() - for a normal page this gets set
          to 0, leading to us setting mem->pageshift to 0 when we conclude
          that the pte returned by find_linux_pte() didn't match the page
          we were looking at;
      (c) comparing 'compshift', which is a page order, i.e. log base 2 of
          the number of pages, with 'pageshift', which is a log base 2 of
          the number of bytes.
    
    To fix these problems, this patch introduces 'cur_ua' to hold the
    current user address and uses that in the find_linux_pte() call;
    introduces 'pteshift' to hold the hugepage shift found by
    find_linux_pte(); and compares 'pteshift' with 'compshift +
    PAGE_SHIFT' rather than 'compshift'.
    
    The patch also moves the local_irq_restore to the point after the PTE
    pointer returned by find_linux_pte() has been dereferenced because
    otherwise the PTE could change underneath us, and adds a check to
    avoid doing the find_linux_pte() call once mem->pageshift has been
    reduced to PAGE_SHIFT, as an optimization.
    
    Fixes: 76fa4975f3ed ("KVM: PPC: Check if IOMMU page is contained in the pinned physical page")
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 14500f14e0b6dd3fff66eec70b6bb1cf4d108dfa ......
	 orig commit -> 98014068328c5574de9a4a30b604111fd9d8f901 ......
checking de019e7857fb743bb50db9b82dd447d4894b5610 ......
	 orig commit -> 38c0a74fe06da3be133cae3fb7bde6a9438e698b ......
checking 4c686d73bc3e090c8d8d55a07a1010955dcce9df ......
	 orig commit -> bc88ad2efd11f29e00a4fd60fcd1887abfe76833 ......
checking 4168a84223646130203c7b566c27f9a74abef7ea ......
	 orig commit -> 748144f35514aef14c4fdef5bcaa0db99cb9367a ......
	 orig commit -> f46ecbd97f508e68a7806291a139499794874f3d ......

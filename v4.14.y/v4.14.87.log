Check from v4.14.87 to v4.14.88
Commit count: 68
checking 1bb538a39cf959009d4e424ea4e590a1f58b2ed6 ......
checking 7b6d932725ec18c1d84892b73c9da4d624939955 ......
	 orig commit -> 990d71846a0b7281bd933c34d734e6afc7408e7e ......
checking bbc4242a9c2e3c97a5a8e7822b9c27915599f0c4 ......
	 orig commit -> 9ec1190d065998650fd9260dea8cf3e1f56c0e8c ......
checking a2c934fbbd43b5c349157c05374b9598f53a65f1 ......
	 orig commit -> a317e65face482371de30246b6494feb093ff7f9 ......
checking 9e82abdd0c0341b880f510fc8b19464410912069 ......
	 orig commit -> 5c21e8100dfd57c806e833ae905e26efbb87840f ......
checking 199a81acf2bb66b5a640e6484aacd87bdd2a4854 ......
	 orig commit -> a1881c9b8a1edef0a5ae1d5c1b61406fe3402114 ......
checking 4794d94b44c4903514a878b9097e99417a5e6dbe ......
	 orig commit -> ae86cbfef3818300f1972e52f67a93211acb0e24 ......
		 ae86cbfef3818300f1972e52f67a93211acb0e24 has problem. Fixes commit -> f101ada7da6551127d192c2f1742c1e9e0f62799
commit a3211ba18b10d26e827a7fde380f95985e6f118e
Author: Wei Yang <richardw.yang@linux.intel.com>
Date:   Tue Jan 22 10:48:09 2019 +0800

    libnvdimm, pfn: Fix over-trim in trim_pfn_device()
    
    commit f101ada7da6551127d192c2f1742c1e9e0f62799 upstream.
    
    When trying to see whether current nd_region intersects with others,
    trim_pfn_device() has already calculated the *size* to be expanded to
    SECTION size.
    
    Do not double append 'adjust' to 'size' when calculating whether the end
    of a region collides with the next pmem region.
    
    Fixes: ae86cbfef381 "libnvdimm, pfn: Pad pfn namespaces relative to other regions"
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Wei Yang <richardw.yang@linux.intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b919b4842b42a148ad12754019c58cfc939ae955 ......
	 orig commit -> dada6a43b0402eba438a17ac86fdc64ac56a4607 ......
checking e4c3cc6b08087550e7f000bd7510ccb9a887c543 ......
	 orig commit -> 2a48602615e0a2f563549c7d5c8d507f904cf96e ......
checking 4f50d3a08df40a3ad261b8527345df92c9f1a731 ......
	 orig commit -> 100bc3e2bebf95506da57cbdf5f26b25f6da4c81 ......
checking c1063941e7360e1a5c998c58de789d5de267175b ......
	 orig commit -> 37c2578c0c40e286bc0d30bdc05290b2058cf66e ......
checking eff5e74f7b680d51c9cd9a087f18ce99788b2aba ......
	 orig commit -> a81a7c9c9ea3042ab02d66ac35def74abf091c15 ......
checking 99e6900dfa125ef5062e7b0595f6ce5eb75a6d2c ......
	 orig commit -> d7fd67653f847327e545bdb198b901ee124afd7c ......
checking c33e7a5a3714250ca452ef8353c91cf7ad411ac6 ......
	 orig commit -> 87e4a5405f087427fbf8b437d2796283dce2b38f ......
checking 948ef68099ebe26a52749ad031febb15b4c5dac7 ......
	 orig commit -> 300cd664865bed5d50ae0a42fb4e3a6f415e8a10 ......
checking b505b9b09e531cfe9bfcb602ed9407d8bd902ad4 ......
	 orig commit -> c988de29ca161823db6a7125e803d597ef75b49c ......
checking a604686c468dc0ab9492dbeaa1722cc3878b0582 ......
checking b4e4b85708bb31df79d6fc77661bb171e07e0868 ......
checking f2a4f7622d052eb987e8693633468c239c13575a ......
	 orig commit -> 7d63fb3af87aa67aa7d24466e792f9d7c57d8e79 ......
checking 38fce19d4d7bc8acfa183ee2918758d279a69c9a ......
	 orig commit -> 91291e9998d208370eb8156c760691b873bd7522 ......
checking cacfa255bee4fd7137939411b05a0527475a19ec ......
	 orig commit -> 0472bf06c6fd33c1a18aaead4c8f91e5a03d8d7b ......
checking 3ff0131284e94ddac80520fa549d55a4294776cb ......
	 orig commit -> a7d57abcc8a5bdeb53bbf8e87558e8e0a2c2a29d ......
		 a7d57abcc8a5bdeb53bbf8e87558e8e0a2c2a29d has problem. Fixes commit -> 2419f30a4a4fcaa5f35111563b4c61f1b2b26841
commit 4aa9cf83b766c2b0b31a360c5c93e1987c19e44c
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Mon Dec 17 14:37:40 2018 +0100

    USB: xhci: fix 'broken_suspend' placement in struct xchi_hcd
    
    commit 2419f30a4a4fcaa5f35111563b4c61f1b2b26841 upstream.
    
    As commented in the struct's definition there shouldn't be anything
    underneath its 'priv[0]' member as it would break some macros.
    
    The patch converts the broken_suspend into a bit-field and relocates it
    next to to the rest of bit-fields.
    
    Fixes: a7d57abcc8a5 ("xhci: workaround CSS timeout on AMD SNPS 3.0 xHC")
    Reported-by: Oliver Neukum  <oneukum@suse.com>
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Acked-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f9e0bc710347fadad55910846ee36f0681d0dca8 ......
	 orig commit -> e46daee53bb50bde38805f1823a182979724c229 ......
		 e46daee53bb50bde38805f1823a182979724c229 has problem. Fixes commit -> 0ac569bf6a7983c0c5747d6df8db9dc05bc92b6c
commit d783d3ceb4005584751ca01f71004f1fb4c30f8f
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Tue Feb 5 16:37:40 2019 +0100

    ARM: 8834/1: Fix: kprobes: optimized kprobes illegal instruction
    
    commit 0ac569bf6a7983c0c5747d6df8db9dc05bc92b6c upstream.
    
    commit e46daee53bb5 ("ARM: 8806/1: kprobes: Fix false positive with
    FORTIFY_SOURCE") introduced a regression in optimized kprobes. It
    triggers "invalid instruction" oopses when using kprobes instrumentation
    through lttng and perf. This commit was introduced in kernel v4.20, and
    has been backported to stable kernels 4.19 and 4.14.
    
    This crash was also reported by Hongzhi Song on the redhat bugzilla
    where the patch was originally introduced.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=1639397
    Link: https://bugs.lttng.org/issues/1174
    Link: https://lore.kernel.org/lkml/342740659.2887.1549307721609.JavaMail.zimbra@efficios.com
    
    Fixes: e46daee53bb5 ("ARM: 8806/1: kprobes: Fix false positive with FORTIFY_SOURCE")
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Reported-by: Robert Berger <Robert.Berger@ReliableEmbeddedSystems.com>
    Tested-by: Robert Berger <Robert.Berger@ReliableEmbeddedSystems.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: Robert Berger <Robert.Berger@ReliableEmbeddedSystems.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: William Cohen <wcohen@redhat.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: <stable@vger.kernel.org> # v4.14+
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: patches@armlinux.org.uk
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e47a6e68c3bbfebb6d6f336d92884df37b722e4b ......
	 orig commit -> 59861547ec9a9736e7882f6fb0c096a720ff811a ......
checking bc3d506a116f1a00dba4a380ff511007c71e4db9 ......
	 orig commit -> ffe843b18211301ad25893eba09f402c19d12304 ......
checking e3dccb527cfc97c4027824b6104635714ae14f47 ......
	 orig commit -> 8dae5398ab1ac107b1517e8195ed043d5f422bd0 ......
checking f15c072d6576c5e2b693c22e39ccc9103c952078 ......
	 orig commit -> 834e772c8db0c6a275d75315d90aba4ebbb1e249 ......
		 834e772c8db0c6a275d75315d90aba4ebbb1e249 has problem. Fixes commit -> 7fbe078c37aba3088359c9256c1a1d0c3e39ee81
commit b384efc1fbb944255c096b9372162de4b4c2ceb7
Author: Zha Bin <zhabin@linux.alibaba.com>
Date:   Tue Jan 8 16:07:03 2019 +0800

    vhost/vsock: fix vhost vsock cid hashing inconsistent
    
    commit 7fbe078c37aba3088359c9256c1a1d0c3e39ee81 upstream.
    
    The vsock core only supports 32bit CID, but the Virtio-vsock spec define
    CID (dst_cid and src_cid) as u64 and the upper 32bits is reserved as
    zero. This inconsistency causes one bug in vhost vsock driver. The
    scenarios is:
    
      0. A hash table (vhost_vsock_hash) is used to map an CID to a vsock
      object. And hash_min() is used to compute the hash key. hash_min() is
      defined as:
      (sizeof(val) <= 4 ? hash_32(val, bits) : hash_long(val, bits)).
      That means the hash algorithm has dependency on the size of macro
      argument 'val'.
      0. In function vhost_vsock_set_cid(), a 64bit CID is passed to
      hash_min() to compute the hash key when inserting a vsock object into
      the hash table.
      0. In function vhost_vsock_get(), a 32bit CID is passed to hash_min()
      to compute the hash key when looking up a vsock for an CID.
    
    Because the different size of the CID, hash_min() returns different hash
    key, thus fails to look up the vsock object for an CID.
    
    To fix this bug, we keep CID as u64 in the IOCTLs and virtio message
    headers, but explicitly convert u64 to u32 when deal with the hash table
    and vsock core.
    
    Fixes: 834e772c8db0 ("vhost/vsock: fix use-after-free in network stack callers")
    Link: https://github.com/stefanha/virtio/blob/vsock/trunk/content.tex
    Signed-off-by: Zha Bin <zhabin@linux.alibaba.com>
    Reviewed-by: Liu Jiang <gerry@linux.alibaba.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Shengjing Zhu <i@zhsj.me>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 52b993b4c4c2a88b62601b0cc0662a564e1d65dc ......
	 orig commit -> 78b1a52e05c9db11d293342e8d6d8a230a04b4e7 ......
checking 73f6d525be2cded3bd3dd3bcfcfffec548a79e94 ......
	 orig commit -> 2448a299ec416a80f699940a86f4a6d9a4f643b1 ......
checking 01a02e66228b69b497136168716cb1ba2b5ebd73 ......
	 orig commit -> 54947cd64c1b8290f64bb2958e343c07270e3a58 ......
checking 7852f54f08a0a7222235561fc57ccd83f1c358d4 ......
	 orig commit -> 5363857b916c1f48027e9b96ee8be8376bf20811 ......
checking cabb9539dc1741b2a5bf6077a4aac8156f07a1c8 ......
	 orig commit -> b51abed8355e5556886623b2772fa6b7598d2282 ......
checking 108ab9eafbbeffa17431cb1acd7a930d23bfd197 ......
	 orig commit -> b888a5f713e4d17faaaff24316585a4eb07f35b7 ......
checking 0618c71c73caa194f4d9ac2d42551ad6df047103 ......
	 orig commit -> 3deef52ce10514ccdebba8e8ab85f9cebd0eb3f7 ......
checking 19f74e45746253cafb8cb1e773041e7cadbac622 ......
	 orig commit -> 5f8cf712582617d523120df67d392059eaf2fc4b ......
checking 7b6e85da8d94948201abb8d576d485892a6a878f ......
	 orig commit -> 704620afc70cf47abb9d6a1a57f3825d2bca49cf ......
checking 810487aa9d483262044c41fc1973c7abd95e1d86 ......
	 orig commit -> d7859905301880ad3e16272399d26900af3ac496 ......
checking d2afd22aff69bc448b1defc06fcd311479f336f5 ......
	 orig commit -> 2f2dde6ba89b1ef1fe23c1138131b315d9aa4019 ......
checking 4515bbc4e284066d4e2f4a66eccf13813f6e7206 ......
	 orig commit -> 400e22499dd92613821374c8c6c88c7225359980 ......
checking ccbffb5d7dc88b7e7eecf504d8fa2a271f10ee16 ......
	 orig commit -> c44c749d3b6fdfca39002e7e48e03fe9f9fe37a3 ......
checking 63e307e81cffa11dbc8b513ee2b951ffa59fc61c ......
	 orig commit -> 5ed9dc99107144f83b6c1bb52a69b58875baf540 ......
checking 1c1fbd4d2e9200f4b8a69d2b517e5708b0965a68 ......
	 orig commit -> b7cdec3d699db2e5985ad39de0f25d3b6111928e ......
checking dab45f4d03f01e8d6612803518c225bf859f796c ......
	 orig commit -> bb21ce0ad227b69ec0f83279297ee44232105d96 ......
checking 84f49bb07f9d8f48891976229a6eaed9e1a4d6ca ......
	 orig commit -> 829383e183728dec7ed9150b949cd6de64127809 ......
checking d0decb8d7cbb225336e043a63e9a8c72498834fd ......
	 orig commit -> 426a593e641ebf0d9288f0a2fcab644a86820220 ......
checking f7a6fd087a300dabc4dbde84b1f2d4d0ac5173e0 ......
	 orig commit -> eb62cca9bee842e5b23bd0ddfb1f271ca95e8759 ......
checking 9dded0ffdeb7fa10698d534978892b406b60c91e ......
	 orig commit -> 276d43f0ae963312c0cd0e2b9a85fd11ac65dfcc ......
checking 4b4c6714a19792f616fc03696594dafbb5a9b9a1 ......
	 orig commit -> a6a66f80c85e8e20573ca03fabf32445954a88d5 ......
checking 16f2433ede2374060ccb79767fcd3a69cde2a22f ......
	 orig commit -> 12d43aacf9a74d0eb66fd0ea54ebeb79ca28940f ......
checking 60adf764a94f393d9ec56e05d976987d4d3cfdd3 ......
	 orig commit -> 33bf5519ae5dd356b182a94e3622f42860274a38 ......
checking 6c65ce92019b50861cd0b1763da8ea8217d6a420 ......
	 orig commit -> bff466bac59994cfcceabe4d0be5fdc1c20cd5b8 ......
checking 934f4965b46b99885e31b89fbf3240cb034c0959 ......
	 orig commit -> a463146e67c848cbab5ce706d6528281b7cded08 ......
checking e6e5d3dda0ea79e4c9a52ed2031ed832713f3e99 ......
	 orig commit -> 3ea7e7ea53c9f6ee41cb69a29c375fe9dd9a56a7 ......
checking 471b2b9c525424e5213b4d6084ed1d12758ce8c8 ......
	 orig commit -> bd85fbc2038a1bbe84990b23ff69b6fc81a32b2c ......
checking 65d9e9821b86155dc810ff08c12cc29c7fabbca9 ......
	 orig commit -> a9c859033f6ec772f8e3228c343bb1321584ae0e ......
	 orig commit -> b4194da3f9087dd38d91b40f9bec42d59ce589a8 ......
checking 93663e617b8fdcaceb6f407af6e494df2d5c7067 ......
	 orig commit -> ed4eac20dcffdad47709422e0cb925981b056668 ......
checking 0f1c847db352a87f9974aa1869ca3e6f26b621f7 ......
	 orig commit -> 9aaa4e8ba12972d674caeefbc5f88d83235dd697 ......
checking fd358f42a60d85798b6d4715cd936b438fa2cc3e ......
	 orig commit -> 77e461d14ed141253573eeeb4d34eccc51e38328 ......
checking 41cb057690134a335b689be7e8db6d46db54a8ed ......
	 orig commit -> ab99be4683d9db33b100497d463274ebd23bd67e ......
checking 2761d3237145412c1405b204f152b796bf9df4a2 ......
	 orig commit -> d7d8bbb40a5b1f682ee6589e212934f4c6b8ad60 ......
checking 94f748fd4ed3ac4c90990413681e703444c26225 ......
	 orig commit -> f4156f9656feac21f4de712fac94fae964c5d402 ......
checking a1270af9b1a0d3ba66ac3425771767e677d2fd0d ......
	 orig commit -> 0fd791841a6d67af1155a9c3de54dea51220721e ......
checking 58e0bc43507120ce1185268f588b191c2f5f4df4 ......
	 orig commit -> 8bb0a88600f0267cfcc245d34f8c4abe8c282713 ......
checking c6b578b1b4a7c56b469e16e6afd3ec478e1872c3 ......
	 orig commit -> 68c8d209cd4337da4fa04c672f0b62bb735969bc ......
checking b65fa7b581f8a50ef147055006a7aa28ddb1086d ......
	 orig commit -> e5b78f2e349eef5d4fca5dc1cf5a3b4b2cc27abd ......
checking 8fa55f1d1859a6b0d2e6c1606b6d8fa1a9ef63d2 ......
	 orig commit -> 3401d42c7ea2d064d15c66698ff8eb96553179ce ......
checking df11500b9dbf1bb3dd752f11be62a1cad22ca16d ......
	 orig commit -> 19ed3e2dd8549c1a34914e8dad01b64e7837645a ......
checking bcdfccfd8dee5f024b618a3ec4df17fab1296658 ......
	 orig commit -> 30efae3d789cd0714ef795545a46749236e29558 ......

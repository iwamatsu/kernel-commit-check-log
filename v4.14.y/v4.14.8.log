Check from v4.14.8 to v4.14.9
Commit count: 176
checking dad5c1402c570cd07a80113784bc20a7f930c8ae ......
checking a9772285a7246c2a816da7f50c8c1e94b264770d ......
	 orig commit -> d15155824c5014803d91b829736d249c500bdda6 ......
checking d605778b613a535d258c1e6a931bc2153aa63185 ......
	 orig commit -> 2255f8d520b0a318fc6d387d0940854b2f522a7f ......
checking de31796c052e47c99b1bb342bc70aa826733e862 ......
	 orig commit -> bb7f0f989ca7de1153bd128a40a71709e339fa03 ......
checking cb56cc1b292b8b3f787fad89f1208f8e98d12c7d ......
	 orig commit -> 179d1c5602997fef5a940c6ddcf31212cbfebd14 ......
checking c90268f7cbee0781331b96d1423d0f28a6183889 ......
	 orig commit -> a5ec6ae161d72f01411169a938fa5f8baea16e8f ......
checking 2120fca0ecfb4552d27608d409ebd3403ce02ce4 ......
checking 6c8e098d0324412d4ae9e06c7e611a96b87faf80 ......
	 orig commit -> 468f6eafa6c44cb2c5d8aad35e12f06c240a812a ......
		 468f6eafa6c44cb2c5d8aad35e12f06c240a812a has problem. Fixes commit -> b799207e1e1816b09e7a5920fbb2d5fcf6edd681
commit 10fdfea70d4667abf3724c31443e5d5922fecebd
Author: Jann Horn <jannh@google.com>
Date:   Fri Oct 5 18:17:59 2018 +0200

    bpf: 32-bit RSH verification must truncate input before the ALU op
    
    commit b799207e1e1816b09e7a5920fbb2d5fcf6edd681 upstream.
    
    When I wrote commit 468f6eafa6c4 ("bpf: fix 32-bit ALU op verification"), I
    assumed that, in order to emulate 64-bit arithmetic with 32-bit logic, it
    is sufficient to just truncate the output to 32 bits; and so I just moved
    the register size coercion that used to be at the start of the function to
    the end of the function.
    
    That assumption is true for almost every op, but not for 32-bit right
    shifts, because those can propagate information towards the least
    significant bit. Fix it by always truncating inputs for 32-bit ops to 32
    bits.
    
    Also get rid of the coerce_reg_to_size() after the ALU op, since that has
    no effect.
    
    Fixes: 468f6eafa6c4 ("bpf: fix 32-bit ALU op verification")
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking bf5ee24e87e39548bf30d4e18e479e61a5a98336 ......
	 orig commit -> 0c17d1d2c61936401f4702e1846e2c19b200f958 ......
checking 6e12ea4fb45ca86cdd7425276b6993455fee947a ......
	 orig commit -> 95a762e2c8c942780948091f8f2a4f32fce1ac6f ......
checking 4d54f7df5131d67f653f674003ec5f52c9818b53 ......
	 orig commit -> 4374f256ce8182019353c0c639bb8d0695b4c941 ......
checking 82a9d62f603f0cb5549c4ca554f06e70510b7296 ......
	 orig commit -> 07aee94394547721ac168cbf4e1c09c14a5fe671 ......
checking 8a681dfd8fb253cd3cac03a59e2867f9baad7934 ......
	 orig commit -> 87338c8e2cbb317b5f757e6172f94e2e3799cd20 ......
checking 83ab155d144922cb7421fb975e500901185e7644 ......
	 orig commit -> 6d59b7dbf72ed20d0138e2f9b75ca3d4a9d4faca ......
checking a23244e8845f510ce3ba8b77b32cdd3d3d8ae853 ......
	 orig commit -> 283ca526a9bd75aed7350220d7b1f8027d99c3fd ......
checking 2b3ea8ceb2bb71e9e58527661261dba127137d9b ......
	 orig commit -> c131187db2d3fa2f8bf32fdf4e9a4ef805168467 ......
checking 7d7545295e714751fa236c6284167342b066d825 ......
	 orig commit -> 629a359bdb0e0652a8227b4ff3125431995fec6e ......
checking 0237a0a456563d461814111db15ae26666ce730e ......
	 orig commit -> bff5bf9db1c9453ffd0a78abed3e2d040c092fd9 ......
checking 5431aef93678a1f91e8b3ab41076f2cd1be34353 ......
	 orig commit -> db2b0332608c8e648ea1e44727d36ad37cdb56cb ......
checking 02c17c0f825c2d22de05c18e97982796b634eff3 ......
	 orig commit -> 48880b979cdc9ef5a70af020f42b8ba1e51dbd34 ......
checking cf826c57785384341c3f0cf2cfbfe86c02eb6b9b ......
	 orig commit -> 2cb4de785c40d4a2132cfc13e63828f5a28c3351 ......
checking 7254834c43bd32842e96fd856c9c9793a29e6fe2 ......
	 orig commit -> c176b10b025acee4dc8f2ab1cd64eb73b5ccef53 ......
checking 0da9db57c0423f281db8ae2fb1a67e88d3fecd34 ......
	 orig commit -> b77eb45e0d9c324245d165656ab3b38b6f386436 ......
checking ecffae11228f96c045eb38fa60bdf17dc677b94b ......
	 orig commit -> 4bbdfe25600c1909c26747d0b5c39fd0e409bb87 ......
checking 0d74c05ca7ef083cbc676aacfd147ff60de54c95 ......
	 orig commit -> af2eca53206c59ce9308a4f5f46c4a104a179b6b ......
checking 80879ecb4624d58e10cfe03550056c34483187a5 ......
	 orig commit -> f187851b9b4a76952b1158b86434563dd2031103 ......
checking 051c3df7d6b8d5f1948503637c69fc939db69035 ......
	 orig commit -> 74717b28cb32e1ad3c1042cafd76b264c8c0f68d ......
checking 0aaff15c10132eb36ab16b4785cd207075e5943b ......
	 orig commit -> cf5d74b85ef40c202c76d90959db4d850f301b95 ......
checking 71e51e4d488d56345d72dc3c89e67af015afea22 ......
	 orig commit -> 7f3ed79188f2f094d0ee366fa858857fb7f511ba ......
checking ae35e16e0a57da2a7aa8631c8929dd79bac74bde ......
	 orig commit -> 04820da21050b35eed68aa046115d810163ead0c ......
checking 0fbdd907e4b3836b025b8690823c7271f939a938 ......
	 orig commit -> 5e437b1d7e8d31ff9a4b8e898eb3a6cee309edd9 ......
checking 0006d8c76b0cbfc1dfefe41ac93881f1f8c15432 ......
	 orig commit -> 1f372c7bfb23286d2bf4ce0423ab488e86b74bb2 ......
checking a58a3af86a4e8a2bd1d2d041341efa28818c6e89 ......
	 orig commit -> e876a8a7e9dd89dc88c12ca2e81beb478dbe9897 ......
checking fb383223d00ffa445b266c5fd54ed80fd8c57d17 ......
	 orig commit -> 17a91809942ca32c70026d2d5ba3348a2c4fdf8f ......
checking 2b401d9f1d4543e4e1ad23a46726376adb958831 ......
	 orig commit -> a99897f550de96841aecb811455a67ad7a4e39a7 ......
checking b27bbf1f5b9e62b7b0b8ce9a4f5e474c3119a9a9 ......
	 orig commit -> 523184972b282cd9ca17a76f6ca4742394856818 ......
checking 4297cf42691eb626ab5f72f416cf7d9ea126a410 ......
	 orig commit -> c53d11f669c0e7d0daf46a717b6712ad0b09de99 ......
checking 8da9104839c86b9f80fb45df60ec0beae9f103b1 ......
	 orig commit -> 2299e4323d2bf6e0728fdc6b9e8e9704978d2dd7 ......
checking 6fe8e4f3e4e937ab762fe9114818c64ae215c882 ......
	 orig commit -> e8bcf0ae4c0346fdc78ebefe0eefcaa6a6622d38 ......
checking 096232d99989e34c80bd3a15e343fc3bbdfa42d8 ......
	 orig commit -> 184fc2b9a8bcbda9c14d0a1e7fbecfc028c7702e ......
checking 16ddeff35b7b84eefccddae23133f3eced68a8c0 ......
	 orig commit -> 3e256ac5b1ec307e5dd5a4c99fbdbc651446c738 ......
checking c01b06d9ac357e1d6d95d7b62be60ecd69071c2b ......
	 orig commit -> 46d69e141d479585c105a4d5b2337cd2ce6967e5 ......
checking 5d1b6695edb773d27f100eafc8cc9a34c58cb07f ......
	 orig commit -> 1ae2eaaa229bc350b6f38fbf4ab9c873532aecfb ......
checking fa21a13d76a7eed4b1df1a5223752051dbfde948 ......
	 orig commit -> 80e4d70b06863e0104e5a0dc78aa3710297fbd4b ......
checking 97f41b41c432e5a80c91445d92c2f4b729984d36 ......
	 orig commit -> 064996d62a33ffe10264b5af5dca92d54f60f806 ......
checking f5fec0590cd8732c810c0b6d9ae9e3a42021f2cb ......
	 orig commit -> c70458890ff15d858bd347fa9f563818bcd6e457 ......
checking f9e51fb046db69a2e83d7d7422e33f3402d1800b ......
	 orig commit -> 664611e7e02f76fbc5470ef545b2657ed25c292b ......
checking 16e1626e54f835cb009de675d1f6b5a0ff9183d9 ......
	 orig commit -> a15f7fc20389a8827d5859907568b201234d4b79 ......
checking 45c911bb1814980da78a34423305310d5d327b39 ......
	 orig commit -> 86acc790717fb60fb51ea3095084e331d8711c74 ......
checking cbd6b3694a4adec779cdb9266883a21254d5897c ......
	 orig commit -> be664cbefc50977aaefc868ba6a1109ec9b7449d ......
checking da548d5a6f9eb188b4b0b07dd70f60d0b7ca05d3 ......
	 orig commit -> 227630cccdbb8f8a1b24ac26517b75079c9a69c9 ......
checking 56ea88ec49042b34f6ba10280c1fddf0703b5e57 ......
	 orig commit -> 7841d554809b518a22349e7e39b6b63f8a48d0fb ......
		 7841d554809b518a22349e7e39b6b63f8a48d0fb has problem. Fixes commit -> 05e89fb576f580ac95e7a5d00bdb34830b09671a
commit dcdc01c2edd4baf8096c70837fd583e1cc00d023
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Oct 11 15:47:54 2017 +0200

    Bluetooth: BT_HCIUART now depends on SERIAL_DEV_BUS
    
    commit 05e89fb576f580ac95e7a5d00bdb34830b09671a upstream.
    
    It is no longer possible to build BT_HCIUART into the kernel
    when SERIAL_DEV_BUS is a loadable module, even if none of the
    SERIAL_DEV_BUS based implementations are selected:
    
    drivers/bluetooth/hci_ldisc.o: In function `hci_uart_set_flow_control':
    hci_ldisc.c:(.text+0xb40): undefined reference to `serdev_device_set_flow_control'
    hci_ldisc.c:(.text+0xb5c): undefined reference to `serdev_device_set_tiocm'
    
    This adds a dependency to avoid the broken configuration.
    
    Fixes: 7841d554809b ("Bluetooth: hci_uart_set_flow_control: Fix NULL deref when using serdev")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 44ee83c6d6e0b0913f32f3580270daa9c784cc0d ......
	 orig commit -> 52ca7d0f7bdad832b291ed979146443533ee79c0 ......
checking 9704f8147e88213f2fa580f713b42b08a4f1a7d2 ......
	 orig commit -> a94b9367e044ba672c9f4105eb1516ff6ff4948a ......
checking 2f48fc1742a2da6196482695ec3bcd2438d24a13 ......
	 orig commit -> f192970de860d3ab90aa9e2a22853201a57bde78 ......
checking 6d7bdad132d59c429dc340f8d10a4977e58813b0 ......
	 orig commit -> d1d90147c9680aaec4a5757932c2103c42c9c23b ......
checking 7535afccf97c9dd1559e0b2d7586a522020e5522 ......
	 orig commit -> b5dc5d4d1f4ff9032eb6c21a3c571a1317dc9289 ......
checking afdbec5d3c652e8d731861c460eee96ef9498315 ......
	 orig commit -> 4831ca9e4a8e48cb27e0a792f73250390827a228 ......
		 4831ca9e4a8e48cb27e0a792f73250390827a228 has problem. Fixes commit -> 6b9f8970cd30929cb6b372fa44fa66da9e59c650
commit 18addd960fe854df99727139040535e72addc6ea
Author: Doug Ledford <dledford@redhat.com>
Date:   Mon Oct 9 09:11:32 2017 -0400

    IB/rxe: put the pool on allocation failure
    
    [ Upstream commit 6b9f8970cd30929cb6b372fa44fa66da9e59c650 ]
    
    If the allocation of elem fails, it is not sufficient to simply check
    for NULL and return.  We need to also put our reference on the pool or
    else we will leave the pool with a permanent ref count and we will never
    be able to free it.
    
    Fixes: 4831ca9e4a8e ("IB/rxe: check for allocation failure on elem")
    Suggested-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking afccf6f360df511a432d4c2b99f1eb8d9ac369e6 ......
	 orig commit -> dcfd6b839c998bc9838e2a47f44f37afbdf3099c ......
checking d1f13dcad56bdd655a29f33b5ac84e0fae48a4eb ......
	 orig commit -> e72a060151e5bb673af24993665e270fc4f674a7 ......
checking c817cb56b8d62cf2677988cf5fa70cc515a526e1 ......
	 orig commit -> 784548c40d6f43eff2297220ad7800dc04be03c6 ......
checking 66efe26b0b074ef11575b883fc9a93af51aab597 ......
	 orig commit -> 18eb86362a52f0af933cc0fd5e37027317eb2d1c ......
checking 349384cd7028affdb23634b56d10da015b080cba ......
	 orig commit -> 035ed07208dc501d023873447113f3f178592156 ......
checking 7af9f9cd68c7b6f009c4a0c0d8ea7703aa46a26b ......
	 orig commit -> 27d6162944b9b34c32cd5841acd21786637ee743 ......
checking 6d95d05bafbafc88a13d81e7ad63fcb899de499d ......
	 orig commit -> 2ce9a3645299ba1752873d333d73f67620f4550b ......
checking 3aaaf02c110f36dc716780412add4799b2a89e5b ......
	 orig commit -> 9b3a081fb62158b50bcc90522ca2423017544367 ......
checking bfd66a406fe7e590055c1d6714adc697f18664c8 ......
	 orig commit -> 357027786f3523d26f42391aa4c075b8495e5d28 ......
checking a5171fe705fb31bf3a0d93e8d69285d2b5b691c9 ......
	 orig commit -> fc7556877d1748ac00958822a0a3bba1d4bd9e0d ......
checking f3a68b4b82f3f19b80b84cf11753082e7fb6ec8f ......
	 orig commit -> 46bea48ac241fe0b413805952dda74dd0c09ba8b ......
checking af826fdfb14c51fc4416993d0fcef8f4aa43b54c ......
	 orig commit -> 5b64a2965dfdfca8039e93303c64e2b15c19ff0c ......
checking bd5139895727bcf97a411bf17fc137fb0d57f55c ......
	 orig commit -> 616129cc6e75fb4da6681c16c981fa82dfe5e4c7 ......
checking 714abd2d6996bb36b334dd15c6c52d3ad00766a0 ......
	 orig commit -> 778f81d6cdb7d25360f082ac0384d5103f04eca5 ......
checking 9fe2989cdf3d433ab07d9e5979c5a811e26dd925 ......
	 orig commit -> d51fe3ba9773c8b6fc79f82bbe75d64baf604292 ......
checking a7455b113feff0b99cad533c63bc6b877c1a1960 ......
	 orig commit -> 4cdbc40d64d4b8303a97e29a52862e4d99502beb ......
checking 5d583a7e2d92a723e9833604f760517a64f630cc ......
	 orig commit -> f687e25a7a245952349f1f9f9cc238ac5a3be258 ......
checking b04c22da18b53c7be730478282f7e6f62cef9425 ......
	 orig commit -> 5d0c49acebc9488e37db95f1d4a55644e545ffe7 ......
checking 23b22186b27f6f16cddc69fd12b607c71de6451f ......
	 orig commit -> f044113113dd95ba73916bde10e804d3cdfa2662 ......
checking 8388d287e361a2fd0a39bece30a736d692d5c3d8 ......
	 orig commit -> 6cbd2171e89b13377261d15e64384df60ecb530e ......
checking 1eb2e614fd17ae8de373aaf9919b803b0a6cfc27 ......
	 orig commit -> 79cc74155218316b9a5d28577c7077b2adba8e58 ......
checking 96e63420e281205e98cca0b6dbb5a79af98a5efd ......
	 orig commit -> a035795499ca1c2bd1928808d1a156eda1420383 ......
checking 25e2999e630c744c27c9179d1279c7f9d503385e ......
	 orig commit -> c482feefe1aeb150156248ba0fd3e029bc886605 ......
checking e313437c85da22a26fe1ba01d94abec7698b1987 ......
	 orig commit -> 0f9a48100fba3f189724ae88a450c2261bf91c80 ......
checking b25ca49efac58fe9744b9a3f725c4e4d69b276f8 ......
	 orig commit -> 7fbbd5cbebf118a9e09f5453f686656a167c3d1c ......
checking bb568391775d4a840992e2d2493f39d6e86401e3 ......
	 orig commit -> 40e7f949e0d9a33968ebde5d67f7e3a47c97742a ......
checking c631a16e5b84521ae80ab10d47cd6ccd2afc6817 ......
	 orig commit -> 3386bc8aed825e9f1f65ce38df4b109b2019b71a ......
checking 564cea11777e9d73aa04ce5f6fbe9169d7c116a2 ......
	 orig commit -> 3e3b9293d392c577b62e24e4bc9982320438e749 ......
checking 2bc9fa0beaf10206a778f02e9e5cb62f50345b1a ......
	 orig commit -> 7f2590a110b837af5679d08fc25c6227c5a8c497 ......
		 7f2590a110b837af5679d08fc25c6227c5a8c497 has problem. Fixes commit -> fc24d75a7f91837d7918e40719575951820b2b8f
checking c3dbef1bd0f7eb09daf49409ea533aa1b0eeb82e ......
	 orig commit -> 6d9256f0a89eaff97fca6006100bcaea8d1d8bdb ......
checking d120cd749ef9770ee98b708a83b49547dcf1c0e1 ......
	 orig commit -> 9aaefe7b59ae00605256a7d6bd1c1456432495fc ......
checking 5bb40c6d4c2a453b21e8e7c2b9bae87e77c4d878 ......
	 orig commit -> 72f5e08dbba2d01aa90b592cf76c378ea233b00b ......
checking 969f5706f6f51a4a01a0dfedfa405b33e25fb708 ......
	 orig commit -> 1a935bc3d4ea61556461a9e92a68ca3556232efd ......
		 1a935bc3d4ea61556461a9e92a68ca3556232efd has problem. Fixes commit -> 2fd9c41aea47f4ad071accf94b94f94f2c4d31eb
commit 88dff1ab04d2792492e3f7e166d039f0dc4e1a09
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Wed Jan 3 12:39:52 2018 -0800

    x86/process: Define cpu_tss_rw in same section as declaration
    
    commit 2fd9c41aea47f4ad071accf94b94f94f2c4d31eb upstream.
    
    cpu_tss_rw is declared with DECLARE_PER_CPU_PAGE_ALIGNED
    but then defined with DEFINE_PER_CPU_SHARED_ALIGNED
    leading to section mismatch warnings.
    
    Use DEFINE_PER_CPU_PAGE_ALIGNED consistently. This is necessary because
    it's mapped to the cpu entry area and must be page aligned.
    
    [ tglx: Massaged changelog a bit ]
    
    Fixes: 1a935bc3d4ea ("x86/entry: Move SYSENTER_stack to the beginning of struct tss_struct")
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: thomas.lendacky@amd.com
    Cc: Borislav Petkov <bpetkov@suse.de>
    Cc: tklauser@distanz.ch
    Cc: minipli@googlemail.com
    Cc: me@kylehuey.com
    Cc: namit@vmware.com
    Cc: luto@kernel.org
    Cc: jpoimboe@redhat.com
    Cc: tj@kernel.org
    Cc: cl@linux.com
    Cc: bp@suse.de
    Cc: thgarnie@google.com
    Cc: kirill.shutemov@linux.intel.com
    Link: https://lkml.kernel.org/r/20180103203954.183360-1-ndesaulniers@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 41964ef17cce3f2497c1ec428d22b42fb615da8d ......
	 orig commit -> 6e60e583426c2f8751c22c2dfe5c207083b4483a ......
checking 5be136953f62c551c1f40ddbb83c2f4e8fc9c41f ......
	 orig commit -> 7fb983b4dd569e08564134a850dfd4eb1c63d9b8 ......
checking 487f3ddcd9863d38490ca4f6f2b9e67d4f8a197c ......
	 orig commit -> 21506525fb8ddb0342f2a2370812d47f6a1f3833 ......
checking ece614dcfd964ab04fb37186ea2c4b020dbc3ee9 ......
	 orig commit -> ef8813ab280507972bb57e4b1b502811ad4411e9 ......
checking 5684dd300f675a9f5ad6a43f96f128839c98a7fd ......
	 orig commit -> aaeed3aeb39c1ba69f0a49baec8cb728121d0a91 ......
checking 2329da3fc03d19a8fc3bb212972b97e9f57abb32 ......
	 orig commit -> 33a2f1a6c4d7c0a02d1c006fb0379cc5ca3b96bb ......
checking 9b654aba0360c10baa7cc8d15f976e7ca1af44ac ......
	 orig commit -> 1a79797b58cddfa948420a7553241c79c013e3ca ......
checking e9b7b111e5be68e41e1984bcaa03535cb5e76141 ......
	 orig commit -> 4f3789e792296e21405f708cf3cb409d7c7d5683 ......
checking 996d087af015da99632fde450092923d574d4bbc ......
	 orig commit -> 6669a692605547892a026445e460bf233958bd7f ......
checking 5209e8ac937261925c12db63a28cfaa033fa30ed ......
	 orig commit -> b02fcf9ba1211097754b286043cd87a8b4907e75 ......
		 b02fcf9ba1211097754b286043cd87a8b4907e75 has problem. Fixes commit -> a9cdbe72c4e8bf3b38781c317a79326e2e1a230d
commit a841ba8f4d7e37acc9d46f982f418ee8e876a752
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sun Dec 31 10:18:06 2017 -0600

    x86/dumpstack: Fix partial register dumps
    
    commit a9cdbe72c4e8bf3b38781c317a79326e2e1a230d upstream.
    
    The show_regs_safe() logic is wrong.  When there's an iret stack frame,
    it prints the entire pt_regs -- most of which is random stack data --
    instead of just the five registers at the end.
    
    show_regs_safe() is also poorly named: the on_stack() checks aren't for
    safety.  Rename the function to show_regs_if_on_stack() and add a
    comment to explain why the checks are needed.
    
    These issues were introduced with the "partial register dump" feature of
    the following commit:
    
      b02fcf9ba121 ("x86/unwinder: Handle stack overflows more gracefully")
    
    That patch had gone through a few iterations of development, and the
    above issues were artifacts from a previous iteration of the patch where
    'regs' pointed directly to the iret frame rather than to the (partially
    empty) pt_regs.
    
    Tested-by: Alexander Tsoy <alexander@tsoy.me>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Toralf Förster <toralf.foerster@gmx.de>
    Fixes: b02fcf9ba121 ("x86/unwinder: Handle stack overflows more gracefully")
    Link: http://lkml.kernel.org/r/5b05b8b344f59db2d3d50dbdeba92d60f2304c54.1514736742.git.jpoimboe@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 40ddc692b5a11cf7c3f9677744676af617d54a24 ......
	 orig commit -> d3a09104018cf2ad5973dfa8a9c138ef9f5015a3 ......
checking 21ddc15fa82b7a2a7b6209437c4d137672370c86 ......
	 orig commit -> e17f8234538d1ff708673f287a42457c4dee720d ......
checking d455b71e7393975c5c50c26bd2199f19c6eed80f ......
	 orig commit -> 2aeb07365bcd489620f71390a7d2031cd4dfb83e ......
checking 5383f45db38c0459f8d3d3f90f7f0a132ad104f3 ......
	 orig commit -> 3382290ed2d5e275429cef510ab21889d3ccd164 ......
checking 1aedecaf12a67de999eaf233cdb64839170ca035 ......
	 orig commit -> c2bc66082e1048c7573d72e62f597bdc5ce13fea ......
checking 065060cdd3de1f7a1f08284999081c4c38601ef7 ......
	 orig commit -> ab95477e7cb35557ecfc837687007b646bab9a9f ......
checking 2d8c24ed9310b89921bd0459d8df1258134015d4 ......
	 orig commit -> 2fe1bc1f501d55e5925b4035bcd85781adc76c63 ......
		 2fe1bc1f501d55e5925b4035bcd85781adc76c63 has problem. Fixes commit -> 9d5dcc93a6ddfc78124f006ccd3637ce070ef2fc
commit 55e7e51f750b91adbce9784cd0283f79b6d07af3
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Tue Apr 2 12:44:58 2019 -0700

    perf/x86: Fix incorrect PEBS_REGS
    
    commit 9d5dcc93a6ddfc78124f006ccd3637ce070ef2fc upstream.
    
    PEBS_REGS used as mask for the supported registers for large PEBS.
    However, the mask cannot filter the sample_regs_user/sample_regs_intr
    correctly.
    
    (1ULL << PERF_REG_X86_*) should be used to replace PERF_REG_X86_*, which
    is only the index.
    
    Rename PEBS_REGS to PEBS_GP_REGS, because the mask is only for general
    purpose registers.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: acme@kernel.org
    Cc: jolsa@kernel.org
    Fixes: 2fe1bc1f501d ("perf/x86: Enable free running PEBS for REGS_USER/INTR")
    Link: https://lkml.kernel.org/r/20190402194509.2832-2-kan.liang@linux.intel.com
    [ Renamed it to PEBS_GP_REGS - as 'GPRS' is used elsewhere ;-) ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e918424231eef4f6652c2221ba2f1d6b44e04233 ......
	 orig commit -> f2dbad36c55e5d3a91dccbde6e8cae345fe5632f ......
checking c6e38628af6d6e06d6b6038c00ed140323e3ba97 ......
	 orig commit -> a8b4db562e7283a1520f9e9730297ecaab7622ea ......
checking 330a4f53bbb4add9c998344af15c27afc9b1e825 ......
	 orig commit -> 1784f9144b143a1e8b19fe94083b040aa559182b ......
checking 399bbc9bb611e10dc5fd232b96b0bea18fca3482 ......
	 orig commit -> 03b2a320b19f1424e9ac9c21696be9c60b6d0d93 ......
checking 04d26709b13e72b02d5e435c6a3bebb63167ac71 ......
	 orig commit -> f72e38e8ec8869ac0ba5a75d7d2f897d98a1454e ......
checking 99aee22dca890fb835570fa3a2a72ea43cca93ae ......
	 orig commit -> 4f89fa286f6729312e227e7c2d764e8e7b9d340e ......
checking 4a464a66db6d574dd622b5218ca617da41461149 ......
	 orig commit -> adedf2893c192dd09b1cc2f2dcfdd7cad99ec49d ......
checking 46e6a15b40c99402aedde940f157614e0c927c7e ......
	 orig commit -> d744dcad39094c9187075e274d1cdef79c57c8b5 ......
checking d9eb267780ff856580885df063c5f4a6630e345f ......
	 orig commit -> f3a624e901c633593156f7b00ca743a6204a29bc ......
checking 47af9e68f3f2e85b043e2c67e90d5aa90220a1d4 ......
	 orig commit -> acbc845ffefd9fb70466182cd8555a26189462b2 ......
checking 64766453be2ee380ba7f3620bfeadcee2787145f ......
	 orig commit -> c7da092a1f243bfd1bfb4124f538e69e941882da ......
checking c1ffb6aefbc5aa6472e172d9c24c0e7a414a1e1f ......
	 orig commit -> 1943dc07b45e347c52c1bfdd4a37e04a86e399aa ......
checking 3243ae92926c4ad3a7f9596952542c6803e69050 ......
	 orig commit -> 06dd688ddda5819025e014b79aea9af6ab475fa2 ......
checking b36c2c3ab339f50fb60f095ee508fc3376bdb1d6 ......
	 orig commit -> 1e4c4f610f774df6088d7c065b2dd4d22adba698 ......
checking 35c1d57e63914254d463a2361b6348a2b823c70d ......
	 orig commit -> 3383642c2f9d4f5b4fa37436db4a109a1a10018c ......
checking c6f563cd1393521c3bd74730cb972f4ec373694a ......
	 orig commit -> d375cf1530595e33961a8844192cddab913650e3 ......
checking 266a0b19177e9ad7767aed90e14033dd46a8f000 ......
	 orig commit -> cd493a6deb8b78eca280d05f7fa73fd69403ae29 ......
checking c30eb760e3ecc7aebf37e557baecefb244733caa ......
	 orig commit -> 46f5a10a721ce8dce8cc8fe55279b49e1c6b3288 ......
checking 71d7244efb0c9af0443f7376c844f3785a33497d ......
	 orig commit -> 20bb83443ea79087b5e5f8dab4e9d80bb9bf7acb ......
checking 0917dd6e7a73c39d5bb1036e2e1fc73d5d56cb8c ......
	 orig commit -> f16b3da1dc936c0f8121741d0a1731bf242f2f56 ......
checking f576136bc88175014ef3f57378d0d982a5c4e786 ......
	 orig commit -> 3500130b84a3cdc5b6796eba1daf178944935efe ......
checking e37558449abadb91ac13b85737d963f230118bdf ......
	 orig commit -> da51da189a24bb9b7e2d5a123be096e51a4695a5 ......
checking ebef3548d5777e842acb0ab1bba599643525536c ......
	 orig commit -> bd7dc5a6afac719d8ce4092391eef2c7e83c2a75 ......
checking 6ff096cf2bf86824579bdcce3743143f993fbe5c ......
	 orig commit -> 929bacec21478a72c78e4f29f98fb799bd00105a ......
checking f53f7a3f0156a39eccea5bfd8a746121627c9c27 ......
	 orig commit -> 43e4111086a70c78bedb6ad990bee97f17b27a6e ......
checking 8d50dee92fb29c953a7101af63b0aea667c13296 ......
	 orig commit -> c39858de696f0cc160a544455e8403d663d577e9 ......
checking 2550871499e4521792db6f282964d994d25aa459 ......
	 orig commit -> 471ee4832209e986029b9fabdaad57b1eecb856b ......
checking e7273aae139703223ef2128c88188a6a3182e855 ......
	 orig commit -> a512210643da8082cb44181dba8b18e752bd68f0 ......
checking 673b1522c6585548798b281419f4ef67b8d17045 ......
	 orig commit -> 4fbb39108f972437c44e5ffa781b56635d496826 ......
checking b774233bcdd4753267c7238a4b7754b9cc2b45ed ......
	 orig commit -> e53178328c9b96fbdbc719e78c93b5687ee007c3 ......
checking 37bae8ecdb518a676c5e12520f393d0069e57dfe ......
	 orig commit -> e872045bfd9c465a8555bab4b8567d56a4d2d3bb ......
checking 7d4bb32bc6fded10ff2874ae1d6d655b5511829c ......
	 orig commit -> 8a055d7f411d41755ce30db5bb65b154777c4b78 ......
checking 65236abc42b068506720f4a5168e5e63636138dd ......
	 orig commit -> 26c4ef9c49d8a0341f6d97ce2cfdd55d1236ed29 ......
checking b7ee7fcca8a525c9bc636fab23779f18d3de9e80 ......
	 orig commit -> 9da78ba6b47b46428cfdfc0851511ab29c869798 ......
checking ab3e5dfff36f4af4df09d86384376ebd188d7ae9 ......
	 orig commit -> e27c310af5c05cf876d9cad006928076c27f54d4 ......
checking 985cba48423594b8e8792770a65543d7ee689eba ......
	 orig commit -> b0ce5b8c95c83a7b98c679b117e3d6ae6f97154b ......
checking 4ed772a7dee902953066869264934c36c7689097 ......
	 orig commit -> 1067f030994c69ca1fba8c607437c8895dcf8509 ......
checking 12dc3fa30178a4635e435ed2b4e543f76c10dc93 ......
	 orig commit -> c128dbfa0f879f8ce7b79054037889b0b2240728 ......
checking c60238f5712ba5a7d8391914f8290ae1bf5c08c0 ......
	 orig commit -> 15670bfe19905b1dcbb63137f40d718b59d84479 ......
checking 3df257ddc5f48214e229b26f3e3d5f42e0f45380 ......
	 orig commit -> af8e947079a7dab0480b5d6db6b093fd04b86fc9 ......
checking 20e9bfd7b8a3463c5ecc1d22b60be30a32607dc4 ......
	 orig commit -> 82c62fa0c49aa305104013cee4468772799bb391 ......
checking 09807080a97cedc160bc42efd3e8c3a3b72a29c7 ......
	 orig commit -> c49870e89f4d2c21c76ebe90568246bb0f3572b7 ......
checking af02cd973d86cf3f6bd6eea928ccc9e70a4132d0 ......
	 orig commit -> 773dd2fca581b0a80e5a33332cc8ee67e5a79cba ......
checking 13bda9cfea5116f15a69725c15bc2614a6c803dc ......
	 orig commit -> 4375c29985f155d7eb2346615d84e62d1b673682 ......
checking 873f59b8bd88c897fc1545efdf5742fc63f7a252 ......
	 orig commit -> 12a8cc7fcf54a8575f094be1e99032ec38aa045c ......
checking 4afaf6ea65acb07e151470580d89e6a2c0268610 ......
	 orig commit -> 83e3c48729d9ebb7af5a31a504f3fd6aff0348c4 ......
		 83e3c48729d9ebb7af5a31a504f3fd6aff0348c4 has problem. Fixes commit -> a0b1280368d1e91ab72f849ef095b4f07a39bbf1
9f15b9120f562ae0bf0a836c96f4dafb33ae426a
d09cfbbfa0f761a97687828b5afb27b56cbf2e19
629a359bdb0e0652a8227b4ff3125431995fec6e
commit c86ee796feed73dfa8a895be48c146b018d14393
Author: Baoquan He <bhe@redhat.com>
Date:   Thu Jan 4 16:18:06 2018 -0800

    mm/sparse.c: wrong allocation for mem_section
    
    commit d09cfbbfa0f761a97687828b5afb27b56cbf2e19 upstream.
    
    In commit 83e3c48729d9 ("mm/sparsemem: Allocate mem_section at runtime
    for CONFIG_SPARSEMEM_EXTREME=y") mem_section is allocated at runtime to
    save memory.
    
    It allocates the first dimension of array with sizeof(struct mem_section).
    
    It costs extra memory, should be sizeof(struct mem_section *).
    
    Fix it.
    
    Link: http://lkml.kernel.org/r/1513932498-20350-1-git-send-email-bhe@redhat.com
    Fixes: 83e3c48729 ("mm/sparsemem: Allocate mem_section at runtime for CONFIG_SPARSEMEM_EXTREME=y")
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Tested-by: Dave Young <dyoung@redhat.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Atsushi Kumagai <ats-kumagai@wm.jp.nec.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d7545295e714751fa236c6284167342b066d825
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Tue Nov 7 11:33:37 2017 +0300

    mm/sparsemem: Fix ARM64 boot crash when CONFIG_SPARSEMEM_EXTREME=y
    
    commit 629a359bdb0e0652a8227b4ff3125431995fec6e upstream.
    
    Since commit:
    
      83e3c48729d9 ("mm/sparsemem: Allocate mem_section at runtime for CONFIG_SPARSEMEM_EXTREME=y")
    
    we allocate the mem_section array dynamically in sparse_memory_present_with_active_regions(),
    but some architectures, like arm64, don't call the routine to initialize sparsemem.
    
    Let's move the initialization into memory_present() it should cover all
    architectures.
    
    Reported-and-tested-by: Sudeep Holla <sudeep.holla@arm.com>
    Tested-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mm@kvack.org
    Fixes: 83e3c48729d9 ("mm/sparsemem: Allocate mem_section at runtime for CONFIG_SPARSEMEM_EXTREME=y")
    Link: http://lkml.kernel.org/r/20171107083337.89952-1-kirill.shutemov@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Dan Rue <dan.rue@linaro.org>
    Cc: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit a4ae05b7bfcdd72f135099b848e1777e486efb19
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Fri Jan 12 16:53:14 2018 -0800

    kdump: write correct address of mem_section into vmcoreinfo
    
    commit a0b1280368d1e91ab72f849ef095b4f07a39bbf1 upstream.
    
    Depending on configuration mem_section can now be an array or a pointer
    to an array allocated dynamically.  In most cases, we can continue to
    refer to it as 'mem_section' regardless of what it is.
    
    But there's one exception: '&mem_section' means "address of the array"
    if mem_section is an array, but if mem_section is a pointer, it would
    mean "address of the pointer".
    
    We've stepped onto this in kdump code.  VMCOREINFO_SYMBOL(mem_section)
    writes down address of pointer into vmcoreinfo, not array as we wanted.
    
    Let's introduce VMCOREINFO_SYMBOL_ARRAY() that would handle the
    situation correctly for both cases.
    
    Link: http://lkml.kernel.org/r/20180112162532.35896-1-kirill.shutemov@linux.intel.com
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Fixes: 83e3c48729d9 ("mm/sparsemem: Allocate mem_section at runtime for CONFIG_SPARSEMEM_EXTREME=y")
    Acked-by: Baoquan He <bhe@redhat.com>
    Acked-by: Dave Young <dyoung@redhat.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Vivek Goyal <vgoyal@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c86ee796feed73dfa8a895be48c146b018d14393
Author: Baoquan He <bhe@redhat.com>
Date:   Thu Jan 4 16:18:06 2018 -0800

    mm/sparse.c: wrong allocation for mem_section
    
    commit d09cfbbfa0f761a97687828b5afb27b56cbf2e19 upstream.
    
    In commit 83e3c48729d9 ("mm/sparsemem: Allocate mem_section at runtime
    for CONFIG_SPARSEMEM_EXTREME=y") mem_section is allocated at runtime to
    save memory.
    
    It allocates the first dimension of array with sizeof(struct mem_section).
    
    It costs extra memory, should be sizeof(struct mem_section *).
    
    Fix it.
    
    Link: http://lkml.kernel.org/r/1513932498-20350-1-git-send-email-bhe@redhat.com
    Fixes: 83e3c48729 ("mm/sparsemem: Allocate mem_section at runtime for CONFIG_SPARSEMEM_EXTREME=y")
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Tested-by: Dave Young <dyoung@redhat.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Atsushi Kumagai <ats-kumagai@wm.jp.nec.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d7545295e714751fa236c6284167342b066d825
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Tue Nov 7 11:33:37 2017 +0300

    mm/sparsemem: Fix ARM64 boot crash when CONFIG_SPARSEMEM_EXTREME=y
    
    commit 629a359bdb0e0652a8227b4ff3125431995fec6e upstream.
    
    Since commit:
    
      83e3c48729d9 ("mm/sparsemem: Allocate mem_section at runtime for CONFIG_SPARSEMEM_EXTREME=y")
    
    we allocate the mem_section array dynamically in sparse_memory_present_with_active_regions(),
    but some architectures, like arm64, don't call the routine to initialize sparsemem.
    
    Let's move the initialization into memory_present() it should cover all
    architectures.
    
    Reported-and-tested-by: Sudeep Holla <sudeep.holla@arm.com>
    Tested-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mm@kvack.org
    Fixes: 83e3c48729d9 ("mm/sparsemem: Allocate mem_section at runtime for CONFIG_SPARSEMEM_EXTREME=y")
    Link: http://lkml.kernel.org/r/20171107083337.89952-1-kirill.shutemov@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Dan Rue <dan.rue@linaro.org>
    Cc: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 36295155d8d4c3f9fb425faac9120559c051b861 ......
	 orig commit -> 57b8b1a1856adaa849d02d547411a553a531022b ......
checking 61d1ad3631150386f3c142daff97913c1770e0fa ......
	 orig commit -> 6a93bb7e4a7d6670677d5b0eb980936eb9cc5d2e ......
checking 3b57d66c8e53390b0035c578063db22c73ebce1a ......
	 orig commit -> 376f3bcebdc999cc737d9052109cc33b573b3a8b ......
checking 110ad51cc874a943792e16258e52ff3360cb4f96 ......
	 orig commit -> 73e3a7d2a7c3be29a5a22b85026f6cfa5664267f ......
checking 0e7127aa76e05b51f767dbec74b236a1fa5eab06 ......
	 orig commit -> ccb18db2ab9d923df07e7495123fe5fb02329713 ......
checking f01d7efac7929e3630e25a84e101228ea907bbea ......
	 orig commit -> 0c2a3913d6f50503f7c59d83a6219e39508cc898 ......
checking d602a3465c77190ef75be052c76ccbdb6c72ed6e ......
	 orig commit -> 0b00de857a648dafe7020878c7a27cf776f5edf4 ......
		 0b00de857a648dafe7020878c7a27cf776f5edf4 has problem. Fixes commit -> 06dd688ddda5819025e014b79aea9af6ab475fa2
57b8b1a1856adaa849d02d547411a553a531022b
commit 36295155d8d4c3f9fb425faac9120559c051b861
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Oct 18 19:39:35 2017 +0200

    x86/cpuid: Prevent out of bound access in do_clear_cpu_cap()
    
    commit 57b8b1a1856adaa849d02d547411a553a531022b upstream.
    
    do_clear_cpu_cap() allocates a bitmap to keep track of disabled feature
    dependencies. That bitmap is sized NCAPINTS * BITS_PER_INIT. The possible
    'features' which can be handed in are larger than this, because after the
    capabilities the bug 'feature' bits occupy another 32bit. Not really
    obvious...
    
    So clearing any of the misfeature bits, as 32bit does for the F00F bug,
    accesses that bitmap out of bounds thereby corrupting the stack.
    
    Size the bitmap proper and add a sanity check to catch accidental out of
    bound access.
    
    Fixes: 0b00de857a64 ("x86/cpuid: Add generic table for CPUID dependencies")
    Reported-by: kernel test robot <xiaolong.ye@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: https://lkml.kernel.org/r/20171018022023.GA12058@yexl-desktop
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 3243ae92926c4ad3a7f9596952542c6803e69050
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 2 13:22:35 2017 +0100

    x86/cpuid: Replace set/clear_bit32()
    
    commit 06dd688ddda5819025e014b79aea9af6ab475fa2 upstream.
    
    Peter pointed out that the set/clear_bit32() variants are broken in various
    aspects.
    
    Replace them with open coded set/clear_bit() and type cast
    cpu_info::x86_capability as it's done in all other places throughout x86.
    
    Fixes: 0b00de857a64 ("x86/cpuid: Add generic table for CPUID dependencies")
    Reported-by: Peter Ziljstra <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36295155d8d4c3f9fb425faac9120559c051b861
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Oct 18 19:39:35 2017 +0200

    x86/cpuid: Prevent out of bound access in do_clear_cpu_cap()
    
    commit 57b8b1a1856adaa849d02d547411a553a531022b upstream.
    
    do_clear_cpu_cap() allocates a bitmap to keep track of disabled feature
    dependencies. That bitmap is sized NCAPINTS * BITS_PER_INIT. The possible
    'features' which can be handed in are larger than this, because after the
    capabilities the bug 'feature' bits occupy another 32bit. Not really
    obvious...
    
    So clearing any of the misfeature bits, as 32bit does for the F00F bug,
    accesses that bitmap out of bounds thereby corrupting the stack.
    
    Size the bitmap proper and add a sanity check to catch accidental out of
    bound access.
    
    Fixes: 0b00de857a64 ("x86/cpuid: Add generic table for CPUID dependencies")
    Reported-by: kernel test robot <xiaolong.ye@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: https://lkml.kernel.org/r/20171018022023.GA12058@yexl-desktop
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking eb3addb22727034dd733fcc07a3b4248fe523b72 ......
	 orig commit -> cbe96375025e14fc76f9ed42ee5225120d7210f8 ......
checking b40a923903d0a535676b8d7b22bfe17260c3d35a ......
	 orig commit -> fc72ae40e30327aa24eb88a24b9c7058f938bd36 ......
checking 8af220c9e240a47660686161e6d04043ad09c563 ......
	 orig commit -> 11af847446ed0d131cf24d16a7ef3d5ea7a49554 ......
checking a11adc6a2e0b429adab534c44f68c057d12ecd4d ......
	 orig commit -> 127a1bea40f7f2a36bc7207ea4d51bb6b4e936fa ......
checking ab7fc55ef231511ae40adf4c51cec89035dad4db ......
	 orig commit -> 1e4078f0bba46ad61b69548abe6a6faf63b89380 ......
checking 2cb7165b4dcf80b03d7cc86fedd1a65a455823b3 ......
	 orig commit -> 095f613c6b386a1704b73a549e9ba66c1d5381ae ......
checking 5d5e60c80fd8613b8a76876b3ffd357f7a0bf7e7 ......
	 orig commit -> 2704fbb672d0d9a19414907fda7949283dcef6a1 ......
checking d074a1075f6a123e3f9c5fdbac7eea4c1006e03b ......
	 orig commit -> abbe1cac6214d81d2f4e149aba64a8760703144e ......
checking 2c9863c1687b2e1398d943351ede4ad45ab77cbe ......
	 orig commit -> 2582d3df95c76d3b686453baf90b64d57e87d1e8 ......
checking aad9d83f9dcbc896a034f2676d3d2b661b0ca5cf ......
	 orig commit -> e93db75a0054b23a874a12c63376753544f3fe9e ......
checking 8233afff9b45feca9020b2fc52f7967da5a13907 ......
	 orig commit -> 015a2ea5478680fc5216d56b7ff306f2a74efaf9 ......
checking 98ce8eee6021e32ba8f606ed7de2a9c0f3807dcf ......
	 orig commit -> a8b88e84d124bc92c4808e72b8b8c0e0bb538630 ......
checking 9cf5a88b165e203d8c7d5284640ea6aa61baf78a ......
	 orig commit -> 17270717e80de33a884ad328fea5f407d87f6d6a ......
checking 42314edefac8a80efb3d00a9f83bf1b1871bd473 ......
	 orig commit -> 00d96180dc38ef872ac471c2d3e14b067cbd895d ......
checking c09061aec2e5245f547ea6eecf321e172e42b7fb ......
	 orig commit -> 3c52b5c64326d9dcfee4e10611c53ec1b1b20675 ......

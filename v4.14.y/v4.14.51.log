Check from v4.14.51 to v4.14.52
Commit count: 53
checking a26899e0baa4de07caf97f5e4d7298240e98fd0e ......
checking 1d26c112959f91e28dadee942877e32b91596d76 ......
	 orig commit -> 7810e6781e0fcbca78b91cf65053f895bf59e85f ......
checking 250edf9580f7cba70efdcca4137089bd060f5090 ......
	 orig commit -> 5cc41e099504b77014358b58567c5ea6293dd220 ......
checking 7446344baafba2f23da58ac837b86770ec977b90 ......
	 orig commit -> 670ae9caaca467ea1bfd325cb2a5c98ba87f94ad ......
checking d37c95f529115230421ee91a9553558321cca4e8 ......
	 orig commit -> d471b6b22d37bf9928c6d0202bdaaf76583b8b61 ......
checking ab17de60ceaa10ef48f39afe9753f63f0fc80037 ......
	 orig commit -> ebeaa367548e9e92dd9374b9464ff6e7d157117b ......
checking e3e6bd6a14761942a93ffef884f954764ddca39e ......
	 orig commit -> 7f54910fa8dfe504f2e1563f4f6ddc3294dfbf3a ......
checking f7e4328c37007c43e005af1b3ed268149f8abb32 ......
	 orig commit -> f6a4b4c9d07dda90c7c29dae96d6119ac6425dca ......
checking b8511dbff2639db94baad73ab912bd6f22afea14 ......
	 orig commit -> 9039d985811d5b109b58b202b7594fd24e433fed ......
checking 2d58a9ac892a2c08480a113f1fb0f55dbf85e2bb ......
	 orig commit -> 1d9f3e20a56d33e55748552aeec597f58542f92d ......
checking e6ef46cb8f01b67266a1adc1c323b5b67086b8e8 ......
	 orig commit -> 955bc61328dc0a297fb3baccd84e9d3aee501ed8 ......
checking 0667483adeeefdedd21cc636cd224632d5570980 ......
	 orig commit -> 2cfce3a86b64b53f0a70e92a6a659c720c319b45 ......
checking 27c0f1e5d94d90ef07a3c33fe20996c403fbbf9e ......
	 orig commit -> 18c9a99bce2a57dfd7e881658703b5d7469cc7b9 ......
checking 1404d2e5dd3647d9bec8960c7dc90aea7cbd8b63 ......
	 orig commit -> 7592019634f8473f0b0973ce79297183077bdbc2 ......
checking c3c77b5db39350c8d64c85102138ab9ba6066815 ......
	 orig commit -> c7d1f119c48f64bebf0fa1e326af577c6152fe30 ......
checking 67b46304b92b6bbb165817abe8700a2ec1aa8305 ......
	 orig commit -> f183464684190bacbfb14623bd3e4e51b7575b4c ......
checking ba502bf2be45f37f38581353af8897a91493f33a ......
	 orig commit -> a347c7ad8edf4c5685154f3fdc3c12fc1db800ba ......
checking 00946218ffe376ff3234ff3c81cd4193e3ca95e2 ......
	 orig commit -> 9e2b19675d1338d2a38e99194756f2db44a081df ......
checking a477d00557f59a20de6398a20808998ce97dce08 ......
	 orig commit -> c3f7c9397609705ef848cc98a5fb429b3e90c3c4 ......
checking edee2e826640c1ba54d51914b1699bc24a1f32c9 ......
	 orig commit -> 8364da4751cf22201d74933d5e634176f44ed407 ......
checking ffb179cfbcf66da752524983a702e8adbaf462b7 ......
	 orig commit -> ee25c6dd7b05113783ce1f4fab6b30fc00d29b8d ......
checking 2a8737336dbd3906ec33c391a7b0f57d2f760d55 ......
	 orig commit -> d81243c697ffc71f983736e7da2db31a8be0001f ......
checking ae62f35def75922782c7d2bdc9f7ca2097c3adce ......
	 orig commit -> b2adf22fdfba85a6701c481faccdbbb3a418ccfc ......
	 orig commit -> 166cea4dc3a4f66f020cfb9286225ecd228ab61d ......
checking dcde75924f25c21f6eb6e394782e930ed439dda5 ......
	 orig commit -> cfe89091644c441a1ade6dae6d2e47b715648615 ......
checking e0b510a4170e220d978a6cfbe25e634193fffbfa ......
	 orig commit -> 985c78d3ff8e9c74450fa2bb08eb55e680d999ca ......
checking c5c00990f75daa8cb50d6d26f2c5db8b9f3a50dc ......
	 orig commit -> 7eef32c1ef895a3a96463f9cbd04203007cd5555 ......
checking e6c9fd8cf7d05e8be07cfc741108440477deb5b6 ......
	 orig commit -> 2861751f67b91e1d24e68010ced96614fb3140f4 ......
checking a3eb20df0e23e23c6604fbff4d6c5a6c610f7dbc ......
	 orig commit -> a3aa60d511746bd6c0d0366d4eb90a7998bcde8b ......
checking 03701e42cc19323b9624fb7d12b855a8c5ef440e ......
	 orig commit -> f16041df4c360eccacfe90f96673b37829e4c959 ......
checking ff7eb857eeca10368f43343ac8c5e6f39250adeb ......
	 orig commit -> 986376b68dcc95bb7df60ad30c2353c1f7578fa5 ......
checking b1cf23c2c8db7c73d3ae684fa13d0a28631d1768 ......
	 orig commit -> ac0b4145d662a3b9e34085dea460fb06ede9b69b ......
		 ac0b4145d662a3b9e34085dea460fb06ede9b69b has problem. Fixes commit -> 665d4953cde6d9e75c62a07ec8f4f8fd7d396ade
commit fc9caa36d80e7f3aaf0720df58a7611ae88b9a94
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Jul 11 13:41:21 2018 +0800

    btrfs: scrub: Don't use inode page cache in scrub_handle_errored_block()
    
    [ Upstream commit 665d4953cde6d9e75c62a07ec8f4f8fd7d396ade ]
    
    In commit ac0b4145d662 ("btrfs: scrub: Don't use inode pages for device
    replace") we removed the branch of copy_nocow_pages() to avoid
    corruption for compressed nodatasum extents.
    
    However above commit only solves the problem in scrub_extent(), if
    during scrub_pages() we failed to read some pages,
    sctx->no_io_error_seen will be non-zero and we go to fixup function
    scrub_handle_errored_block().
    
    In scrub_handle_errored_block(), for sctx without csum (no matter if
    we're doing replace or scrub) we go to scrub_fixup_nodatasum() routine,
    which does the similar thing with copy_nocow_pages(), but does it
    without the extra check in copy_nocow_pages() routine.
    
    So for test cases like btrfs/100, where we emulate read errors during
    replace/scrub, we could corrupt compressed extent data again.
    
    This patch will fix it just by avoiding any "optimization" for
    nodatasum, just falls back to the normal fixup routine by try read from
    any good copy.
    
    This also solves WARN_ON() or dead lock caused by lame backref iteration
    in scrub_fixup_nodatasum() routine.
    
    The deadlock or WARN_ON() won't be triggered before commit ac0b4145d662
    ("btrfs: scrub: Don't use inode pages for device replace") since
    copy_nocow_pages() have better locking and extra check for data extent,
    and it's already doing the fixup work by try to read data from any good
    copy, so it won't go scrub_fixup_nodatasum() anyway.
    
    This patch disables the faulty code and will be removed completely in a
    followup patch.
    
    Fixes: ac0b4145d662 ("btrfs: scrub: Don't use inode pages for device replace")
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4cb8942042bde6b58cac0c76d12a24b62ab0c76c ......
	 orig commit -> 090a127afa8f73e9618d4058d6755f7ec7453dd6 ......
checking 5f7e3b5b96f8b787e95bfd91636261fd32d80dc2 ......
	 orig commit -> fd4e994bd1f9dc9628e168a7f619bf69f6984635 ......
checking 55d29ff48222c89a7ca03b8eacb7d4f62fd651be ......
	 orig commit -> b5c40d598f5408bd0ca22dfffa82f03cd9433f23 ......
checking c81a6be9da6d9fd9264cf759f2676b07d0727b41 ......
	 orig commit -> 84d0c27d6233a9ba0578b20f5a09701eb66cee42 ......
checking f3233cb2485ce482cc2285354dcfca90094442ac ......
	 orig commit -> 4f2f76f751433908364ccff82f437a57d0e6e9b7 ......
checking 21542545990c5aba4b919ac0f8c8ae6a408b49d4 ......
	 orig commit -> 8a2b307c21d4b290e3cbe33f768f194286d07c23 ......
checking 02d45ec6e770dcad4a48ad185feff588e3dcedc2 ......
	 orig commit -> eb9b5f01c33adebc31cbc236c02695f605b0e417 ......
checking e81d371dac30019816a1c5a3a2c4c44bb3c68558 ......
	 orig commit -> 117166efb1ee8f13c38f9e96b258f16d4923f888 ......
checking bd713edfc85d20ba6a8ea970c0f542774084a4d2 ......
	 orig commit -> eee597ac931305eff3d3fd1d61d6aae553bc0984 ......
checking f70af46a52b3c354643c92e8a59b34a86472559d ......
	 orig commit -> 2ee3ee06a8fd792765fa3267ddf928997797eec5 ......
checking 84f4d2c6dabef6622f4d22a592cf4d1dca9e7dae ......
	 orig commit -> 3be0f80b5fe9c16eca2d538f799b94ca8aa59433 ......
		 3be0f80b5fe9c16eca2d538f799b94ca8aa59433 has problem. Fixes commit -> 995891006ccbb73c0c9c3923cf9d25c4d07ec16b
commit fb7fecb4d90fd0808b45f50befa7a07917b3ff9e
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sat Jun 9 12:50:50 2018 -0400

    NFSv4: Fix a typo in nfs41_sequence_process
    
    commit 995891006ccbb73c0c9c3923cf9d25c4d07ec16b upstream.
    
    We want to compare the slot_id to the highest slot number advertised by the
    server.
    
    Fixes: 3be0f80b5fe9c ("NFSv4.1: Fix up replays of interrupted requests")
    Cc: stable@vger.kernel.org # 4.15+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5e8a5c30546f731b20591eb8cffc7db299286d05 ......
	 orig commit -> a447da7d00410278c90d3576782a43f8b675d7be ......
checking 244c10f9bfa35b59e4acf61a0fb15a94f6110991 ......
	 orig commit -> 52acf73b6e9a6962045feb2ba5a8921da2201915 ......
checking 5320e035d7bbdade3755f90dc9b55ee542edc4d3 ......
	 orig commit -> fd3a88625844907151737fc3b4201676effa6d27 ......
checking 2e5d3168821d2ae523ebab5dd5df6a38f728b0d7 ......
	 orig commit -> 6c206b20092a3623184cff9470dba75d21507874 ......
checking 91717ffc9057f38a0203a40ef36ae2e482fd7cbe ......
	 orig commit -> 6d8c50dcb029872b298eea68cc6209c866fd3e14 ......
		 6d8c50dcb029872b298eea68cc6209c866fd3e14 has problem. Fixes commit -> 9060cb719e61b685ec0102574e10337fa5f445ea
commit 6e4c01ee785c2192fcc4be234cedde3706309a7e
Author: Mao Wenan <maowenan@huawei.com>
Date:   Mon Feb 18 10:44:44 2019 +0800

    net: crypto set sk to NULL when af_alg_release.
    
    [ Upstream commit 9060cb719e61b685ec0102574e10337fa5f445ea ]
    
    KASAN has found use-after-free in sockfs_setattr.
    The existed commit 6d8c50dcb029 ("socket: close race condition between sock_close()
    and sockfs_setattr()") is to fix this simillar issue, but it seems to ignore
    that crypto module forgets to set the sk to NULL after af_alg_release.
    
    KASAN report details as below:
    BUG: KASAN: use-after-free in sockfs_setattr+0x120/0x150
    Write of size 4 at addr ffff88837b956128 by task syz-executor0/4186
    
    CPU: 2 PID: 4186 Comm: syz-executor0 Not tainted xxx + #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     dump_stack+0xca/0x13e
     print_address_description+0x79/0x330
     ? vprintk_func+0x5e/0xf0
     kasan_report+0x18a/0x2e0
     ? sockfs_setattr+0x120/0x150
     sockfs_setattr+0x120/0x150
     ? sock_register+0x2d0/0x2d0
     notify_change+0x90c/0xd40
     ? chown_common+0x2ef/0x510
     chown_common+0x2ef/0x510
     ? chmod_common+0x3b0/0x3b0
     ? __lock_is_held+0xbc/0x160
     ? __sb_start_write+0x13d/0x2b0
     ? __mnt_want_write+0x19a/0x250
     do_fchownat+0x15c/0x190
     ? __ia32_sys_chmod+0x80/0x80
     ? trace_hardirqs_on_thunk+0x1a/0x1c
     __x64_sys_fchownat+0xbf/0x160
     ? lockdep_hardirqs_on+0x39a/0x5e0
     do_syscall_64+0xc8/0x580
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462589
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89
    f7 48 89 d6 48 89
    ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3
    48 c7 c1 bc ff ff
    ff f7 d8 64 89 01 48
    RSP: 002b:00007fb4b2c83c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000104
    RAX: ffffffffffffffda RBX: 000000000072bfa0 RCX: 0000000000462589
    RDX: 0000000000000000 RSI: 00000000200000c0 RDI: 0000000000000007
    RBP: 0000000000000005 R08: 0000000000001000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fb4b2c846bc
    R13: 00000000004bc733 R14: 00000000006f5138 R15: 00000000ffffffff
    
    Allocated by task 4185:
     kasan_kmalloc+0xa0/0xd0
     __kmalloc+0x14a/0x350
     sk_prot_alloc+0xf6/0x290
     sk_alloc+0x3d/0xc00
     af_alg_accept+0x9e/0x670
     hash_accept+0x4a3/0x650
     __sys_accept4+0x306/0x5c0
     __x64_sys_accept4+0x98/0x100
     do_syscall_64+0xc8/0x580
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 4184:
     __kasan_slab_free+0x12e/0x180
     kfree+0xeb/0x2f0
     __sk_destruct+0x4e6/0x6a0
     sk_destruct+0x48/0x70
     __sk_free+0xa9/0x270
     sk_free+0x2a/0x30
     af_alg_release+0x5c/0x70
     __sock_release+0xd3/0x280
     sock_close+0x1a/0x20
     __fput+0x27f/0x7f0
     task_work_run+0x136/0x1b0
     exit_to_usermode_loop+0x1a7/0x1d0
     do_syscall_64+0x461/0x580
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Syzkaller reproducer:
    r0 = perf_event_open(&(0x7f0000000000)={0x0, 0x70, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, @perf_config_ext}, 0x0, 0x0,
    0xffffffffffffffff, 0x0)
    r1 = socket$alg(0x26, 0x5, 0x0)
    getrusage(0x0, 0x0)
    bind(r1, &(0x7f00000001c0)=@alg={0x26, 'hash\x00', 0x0, 0x0,
    'sha256-ssse3\x00'}, 0x80)
    r2 = accept(r1, 0x0, 0x0)
    r3 = accept4$unix(r2, 0x0, 0x0, 0x0)
    r4 = dup3(r3, r0, 0x0)
    fchownat(r4, &(0x7f00000000c0)='\x00', 0x0, 0x0, 0x1000)
    
    Fixes: 6d8c50dcb029 ("socket: close race condition between sock_close() and sockfs_setattr()")
    Signed-off-by: Mao Wenan <maowenan@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 39f4ae01c1d6c6891b46d6cb1f3f869823bac21a ......
	 orig commit -> 4fd44a98ffe0d048246efef67ed640fdf2098a62 ......
checking 81d159444da5b4dc7fee9182b5f8596b84722789 ......
	 orig commit -> 8d499533e0bc02d44283dbdab03142b599b8ba16 ......
checking 73c0eab8d2158ef08120e979ce96f4fd80bc4488 ......
	 orig commit -> 349b71d6f427ff8211adf50839dbbff3f27c1805 ......
checking 6bcc27abfa62161ef7dae18dfe1bce70865b2aa8 ......
	 orig commit -> 0975764684487bf3f7a47eef009e750ea41bd514 ......
checking 6e48ee025dc9a20cfe3fdc5a268cb0b971d58a4e ......
	 orig commit -> 49c2c3f246e2fc3009039e31a826333dcd0283cd ......
checking 584b975af0d29c461920acb4d512f70b0bbe3661 ......
	 orig commit -> eb55bbf865d9979098c6a7a17cbdb41237ece951 ......

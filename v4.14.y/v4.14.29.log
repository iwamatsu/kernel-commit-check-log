Check from v4.14.29 to v4.14.30
Commit count: 77
checking de8cdc5572311b0742eccf3c0cfd34af1e105904 ......
checking 5019b23699f4de435e6a601db82e5c41e0cbfa68 ......
	 orig commit -> 1f5a6c47aabc4606f91ad2e6ef71a1ff1924101c ......
checking 957435b566c9d14afa3cb957b2ba7b57c6eda787 ......
	 orig commit -> 86a9df597cdd564d2d29c65897bcad42519e3678 ......
checking e82496fbe3a08489ffbbbcdf995be8aec575428d ......
	 orig commit -> 0c81ffc60d5280991773d17e84bda605387148b1 ......
checking ce3e82c0630f9360f22ad283c9c9511090b049f5 ......
	 orig commit -> 7688f2c3bbf55e52388e37ac5d63ca471a7712e1 ......
checking 712b442c68c2406d72ed7ee603f04063b55a82c6 ......
	 orig commit -> 99652a469df19086d594e8e89757d4081a812789 ......
checking 02db484a058353a2513e00604f5b05e42d8d2384 ......
	 orig commit -> 9dea9a2ff61c5efb4d4937ae23b14babd25a5547 ......
checking 8b0c4a2e04f73643b91a99d03234482402f0e955 ......
	 orig commit -> e7f3e99cb1a667d04d60d02957fbed58b50d4e5a ......
checking 00fb52a3828ddc3c576f84260df3a60716bb7343 ......
	 orig commit -> 2c292dbb398ee46fc1343daf6c3cf9715a75688e ......
checking cf1eb16eef13f4693d6b6bf0fbb7d32a58dc5ca5 ......
	 orig commit -> c2b37f76485f073f020e60b5954b6dc4e55f693c ......
		 c2b37f76485f073f020e60b5954b6dc4e55f693c has problem. Fixes commit -> d63c46734c545ad0488761059004a65c46efdde3
commit 26c7588c28caafda58ed88b45912dafc240c495e
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Tue Jul 10 11:56:50 2018 +0300

    RDMA/mlx5: Fix memory leak in mlx5_ib_create_srq() error path
    
    [ Upstream commit d63c46734c545ad0488761059004a65c46efdde3 ]
    
    Fix memory leak in the error path of mlx5_ib_create_srq() by making sure
    to free the allocated srq.
    
    Fixes: c2b37f76485f ("IB/mlx5: Fix integer overflows in mlx5_ib_create_srq")
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Acked-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3748694f1b91b17f6e311fb10f1168f2ae8e4eca ......
	 orig commit -> c666d3be99c000bb889a33353e9be0fa5808d3de ......
checking 9d72b2696e0af9cd7b651fb95bfe0060a4e02ac1 ......
	 orig commit -> 9ff549ffb4fb4cc9a4b24d1de9dc3e68287797c4 ......
checking 0493d72ee4d67ea52faa6f09a4d2e4a49f2fa6f5 ......
	 orig commit -> d087f15786021a9605b20f4c678312510be4cac1 ......
checking e618ff1ac59c8c8c7bf7b71779ca99863a93cfa3 ......
	 orig commit -> 6d6e71feb183aa588c849e20e7baa47cb162928a ......
checking 53555c8fc8a2d4adab78a286b68d1116ce71cfa6 ......
	 orig commit -> cdba9a4fb0b53703959ac861e415816cb61aded4 ......
checking fa97cdb4c71e80f8b484bc6c8c26ee127df4e296 ......
	 orig commit -> 063578dc5f407f67d149133818efabe457daafda ......
checking 9e9d9b1a3dbf98545c890a65e2f389e7e2962b3a ......
	 orig commit -> f8f8f1d04494d3a6546bee3f0618c4dba31d7b72 ......
		 f8f8f1d04494d3a6546bee3f0618c4dba31d7b72 has problem. Fixes commit -> 99652a469df19086d594e8e89757d4081a812789
commit 712b442c68c2406d72ed7ee603f04063b55a82c6
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Feb 14 14:43:36 2018 +0100

    clk: migrate the count of orphaned clocks at init
    
    commit 99652a469df19086d594e8e89757d4081a812789 upstream.
    
    The orphan clocks reparents should migrate any existing count from the
    orphan clock to its new acestor clocks, otherwise we may have
    inconsistent counts in the tree and end-up with gated critical clocks
    
    Assuming we have two clocks, A and B.
    * Clock A has CLK_IS_CRITICAL flag set.
    * Clock B is an ancestor of A which can gate. Clock B gate is left
      enabled by the bootloader.
    
    Step 1: Clock A is registered. Since it is a critical clock, it is
    enabled. The clock being still an orphan, no parent are enabled.
    
    Step 2: Clock B is registered and reparented to clock A (potentially
    through several other clocks). We are now in situation where the enable
    count of clock A is 1 while the enable count of its ancestors is 0, which
    is not good.
    
    Step 3: in lateinit, clk_disable_unused() is called, the enable_count of
    clock B being 0, clock B is gated and and critical clock A actually gets
    disabled.
    
    This situation was found while adding fdiv_clk gates to the meson8b
    platform.  These clocks parent clk81 critical clock, which is the mother
    of all peripheral clocks in this system. Because of the issue described
    here, the system is crashing when clk_disable_unused() is called.
    
    The situation is solved by reverting
    commit f8f8f1d04494 ("clk: Don't touch hardware when reparenting during registration").
    To avoid breaking again the situation described in this commit
    description, enabling critical clock should be done before walking the
    orphan list. This way, a parent critical clock may not be accidentally
    disabled due to the CLK_OPS_PARENT_ENABLE mechanism.
    
    Fixes: f8f8f1d04494 ("clk: Don't touch hardware when reparenting during registration")
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 24c92f975cb212547c473d544cc93ec189238241 ......
	 orig commit -> 960e1c4d93be86d3b118fe22d4edc69e401b28b5 ......
checking 14d920fc45797b6dc5bd0f3b7a0f994603b4d38c ......
	 orig commit -> 66282ec1cf004c09083c29cb5e49019037937bbd ......
checking 1de82078a0c097d2634efd034b17149e0d4f7984 ......
	 orig commit -> e40ed274489a5f516da120186578eb379b452ac6 ......
checking e434a6eaed8c942495bbca4f714b04f5a146cdfc ......
	 orig commit -> 744820869166c8c78be891240cf5f66e8a333694 ......
checking 7b7e076f8cad849b69715738018fcc5745025168 ......
	 orig commit -> e06351a002214d152142906a546006e3446d1ef7 ......
checking 1626beb0b5d8675d6ff57da0fa98f9a988ddd5a6 ......
	 orig commit -> 9de416ac67b54d666327ba927a190f4b7259f4a0 ......
checking 6f4649f3bef8c3c4a8ad8b1048b8a59aaa46f88c ......
	 orig commit -> 8804517e9fc16c10081ff5e42e7d80704973a8e2 ......
checking f1f225794a417a39eba6601a22b920d3bbc8ed20 ......
	 orig commit -> 50670b6ee9bc4ae8f9ce3112b437987adf273245 ......
		 50670b6ee9bc4ae8f9ce3112b437987adf273245 has problem. Fixes commit -> 214bb1c78a4dd94ba748f1707ecc70041abe1fd3
checking 9cd6c84e93779530e6b5ae2b6da0befe41ab3e54 ......
	 orig commit -> dd8d5b8c5b22e31079b259b8bfb686f1fac1080a ......
checking e6cfc525163ea3375113a9dcc234c2cdd8dbf643 ......
	 orig commit -> 53c81e95df1793933f87748d36070a721f6cb287 ......
		 53c81e95df1793933f87748d36070a721f6cb287 has problem. Fixes commit -> b4331a681822b420511b3258f1c3db35001fde48
7a67e69a339a6824be2fc483073782ab2f47fcd2
c6741fbed6dc0f183d26c4b6bca4517672f92e6c
checking f2b32ce1ccef2ba5364361b9705acce180b3c607 ......
	 orig commit -> 72d548113881dd32bf7f0b221d031e6586468437 ......
checking 915bd53d68f675ff046672f54e3a3de3b8131981 ......
	 orig commit -> 5c9d8c4f6b8168738a26bcf288516cc3a0886810 ......
checking 130e535210ba861d46c43441e696aa73f2370a05 ......
	 orig commit -> 981ed1bfbc6c4660b2ddaa8392893e20a6255048 ......
		 981ed1bfbc6c4660b2ddaa8392893e20a6255048 has problem. Fixes commit -> 2560da49de5d0cfec22e9564023aebfffa094732
commit cd2dee1ea6d553a044a03585b5c1ec7c4657b854
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue Feb 27 12:47:11 2018 -0800

    arm64: dts: rockchip: Fix rk3399-gru-* s2r (pinctrl hogs, wifi reset)
    
    [ Upstream commit 2560da49de5d0cfec22e9564023aebfffa094732 ]
    
    Back in the early days when gru devices were still under development
    we found an issue where the WiFi reset line needed to be configured as
    early as possible during the boot process to avoid the WiFi module
    being in a bad state.
    
    We found that the way to get the kernel to do this in the earliest
    possible place was to configure this line in the pinctrl hogs, so
    that's what we did.  For some history here you can see
    <http://crosreview.com/368770>.  After the time that change landed in
    the kernel, we landed a firmware change to configure this line even
    earlier.  See <http://crosreview.com/399919>.  However, even after the
    firmware change landed we kept the kernel change to deal with the fact
    that some people working on devices might take a little while to
    update their firmware.
    
    At this there are definitely zero devices out in the wild that have
    firmware without the fix in it.  Specifically looking in the firmware
    branch several critically important fixes for memory stability landed
    after the patch in coreboot and I know we didn't ship without those.
    Thus, by now, everyone should have the new firmware and it's safe to
    not have the kernel set this up in a pinctrl hog.
    
    Historically, even though it wasn't needed to have this in a pinctrl
    hog, we still kept it since it didn't hurt.  Pinctrl would apply the
    default hog at bootup and then would never touch things again.  That
    all changed with commit 981ed1bfbc6c ("pinctrl: Really force states
    during suspend/resume").  After that commit then we'll re-apply the
    default hog at resume time and that can screw up the reset state of
    WiFi.  ...and on rk3399 if you touch a device on PCIe in the wrong way
    then the whole system can go haywire.  That's what was happening.
    Specifically you'd resume a rk3399-gru-* device and it would mostly
    resume, then would crash with some crazy weird crash.
    
    One could say, perhaps, that the recent pinctrl change was at fault
    (and should be fixed) since it changed behavior.  ...but that's not
    really true.  The device tree for rk3399-gru is really to blame.
    Specifically since the pinctrl is defined in the hog and not in the
    "wlan-pd-n" node then the actual user of this pin doesn't have a
    pinctrl entry for it.  That's bad.
    
    Let's fix our problems by just moving the control of
    "wlan_module_reset_l pinctrl" out of the hog and put them in the
    proper place.
    
    NOTE: in theory, I think it should actually be possible to have a pin
    controlled _both_ by the hog and by an actual device.  Once the device
    claims the pin I think the hog is supposed to let go.  I'm not 100%
    sure that this works and in any case this solution would be more
    complex than is necessary.
    
    Reported-by: Marc Zyngier <marc.zyngier@arm.com>
    Fixes: 48f4d9796d99 ("arm64: dts: rockchip: add Gru/Kevin DTS")
    Fixes: 981ed1bfbc6c ("pinctrl: Really force states during suspend/resume")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Tested-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Tested-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 06299bd0cf733c9ab89ae2f8e1249445955027c9 ......
	 orig commit -> 4f6c11044f512356cb63d3df0f3b38db79dc6736 ......
checking fea718819c6922a0befde4b9f9a760c712c6fabd ......
	 orig commit -> 83c75ddd816e979802bd244ad494139f28152921 ......
checking e1645629785b779ebc56e3a2035ace9b99bd50ab ......
	 orig commit -> 35ad61921f495ee14915d185de79478c1737b4da ......
checking 194b5ce11968127090e6a5fd4f09229a9e52d98c ......
	 orig commit -> a134a457ed985dca8cce7ac4ea66129ea70eba73 ......
checking d67d7bf8f12d1b9dcbd4a6d6b9cd086e9d87059a ......
	 orig commit -> 11595db8e17faaa05fadc25746c870e31276962f ......
		 11595db8e17faaa05fadc25746c870e31276962f has problem. Fixes commit -> ccff2dfaceaca4517432f5c149594215fe9098cc
commit 4334c6e1fcb1daf7be590d22e0569f6b19cd7ffe
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Wed Jul 11 13:40:35 2018 -0600

    coresight: tpiu: Fix disabling timeouts
    
    [ Upstream commit ccff2dfaceaca4517432f5c149594215fe9098cc ]
    
    Probing the TPIU driver under UBSan triggers an out-of-bounds shift
    warning in coresight_timeout():
    
    ...
    [    5.677530] UBSAN: Undefined behaviour in drivers/hwtracing/coresight/coresight.c:929:16
    [    5.685542] shift exponent 64 is too large for 64-bit type 'long unsigned int'
    ...
    
    On closer inspection things are exponentially out of whack because we're
    passing a bitmask where a bit number should be. Amusingly, it seems that
    both calls will find their expected values by sheer luck and appear to
    succeed: 1 << FFCR_FON_MAN ends up at bit 64 which whilst undefined
    evaluates as zero in practice, while 1 << FFSR_FT_STOPPED finds bit 2
    (TCPresent) which apparently is usually tied high.
    
    Following the examples of other drivers, define separate FOO and FOO_BIT
    macros for masks vs. indices, and put things right.
    
    CC: Robert Walker <robert.walker@arm.com>
    CC: Mike Leach <mike.leach@linaro.org>
    CC: Mathieu Poirier <mathieu.poirier@linaro.org>
    Fixes: 11595db8e17f ("coresight: Fix disabling of CoreSight TPIU")
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f16a65befe744c3c32bc76d817b34d9c368a136e ......
	 orig commit -> 2b022ab7542df60021ab57854b3faaaf42552eaf ......
		 2b022ab7542df60021ab57854b3faaaf42552eaf has problem. Fixes commit -> b9ca5f8560af244489b4a1bc1ae88b341f24bc95
checking 728e120d1786f837955a5836980ba03f21157683 ......
	 orig commit -> b7ea6b286c4051e043f691781785e3c4672f014a ......
checking 9967208b4f6c5a68b58a0cb65cb1f145fcf04dda ......
	 orig commit -> 8d876bf472dba73c015cea9feea80dcb80626a7c ......
checking 83a2960ff6d1a8fe7aaeba89d7011b1f7b4e2261 ......
	 orig commit -> c1b9d4c75cd549e08bd0596d7f9dcc20f7f6e8fa ......
checking f7eda23c2990bc2107fdb01ceb2957b36b4bf5e2 ......
	 orig commit -> c82084117f79bcae085e40da526253736a247120 ......
checking 58668d153baf61cc859183dfd13f2ad5bb4c8c97 ......
	 orig commit -> 66f53e6f5400578bae58db0c06d85a8820831f40 ......
checking a3e4b8fe64799d6a19f073b42860f4c3863eab06 ......
	 orig commit -> edf1a84fe37c51290e2c88154ecaf48dadff3d27 ......
checking 251695a39f0536d8b2c70f220b6c24c90f0b63fe ......
	 orig commit -> 7baaa49af3716fb31877c61f59b74d029ce15b75 ......
checking a4ac7cb593adbc29c31ad0b7e7b8d06168de831a ......
	 orig commit -> 439000892ee17a9c92f1e4297818790ef8bb4ced ......
checking 9766562956fd25b76651e86e075a06f39de106e9 ......
	 orig commit -> 994ec64c0a193940be7a6fd074668b9446d3b6c3 ......
checking badf37254bc7906899915b464d0c203e645e48dc ......
	 orig commit -> f45ce9877561044090010e0eb0fad644232ded04 ......
checking 639dab36edbdb186dad9dad40750723a4f820873 ......
	 orig commit -> 20b56ed9f8adfb9a7fb1c878878c54aa4ed645c1 ......
checking 1a6610de8c1bf45b83f0e99ee01e604045c1e10b ......
	 orig commit -> 2794ffc441dde3109804085dc745e8014a4de224 ......
checking 1b485793ce84093d6a1adb060e61d45b7bb61639 ......
	 orig commit -> 9042b46eda33ef5db3cdfc9e12b3c8cabb196141 ......
checking ea60e54b22aa9cba7efcc27dfc2e8319d10326de ......
	 orig commit -> 22ec1a2aea73b9dfe340dff7945bd85af4cc6280 ......
		 22ec1a2aea73b9dfe340dff7945bd85af4cc6280 has problem. Fixes commit -> b5b38200ebe54879a7264cb6f33821f61c586a7e
commit 5f834dd24baec1f9926e8a06609e0906fd607b06
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Mar 27 14:06:14 2018 -0700

    /dev/mem: Avoid overwriting "err" in read_mem()
    
    commit b5b38200ebe54879a7264cb6f33821f61c586a7e upstream.
    
    Successes in probe_kernel_read() would mask failures in copy_to_user()
    during read_mem().
    
    Reported-by: Brad Spengler <spender@grsecurity.net>
    Fixes: 22ec1a2aea73 ("/dev/mem: Add bounce buffer for copy-out")
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 79a49fcc076882ea99ca52edb0a1569f1780a37c ......
	 orig commit -> 0be55579a127916ebe39db2a74d906a2dfceed42 ......
checking 9dd93e524955488300b8604ea3916881cee80977 ......
	 orig commit -> de8dcc3d2c0e08e5068ee1e26fc46415c15e3637 ......
checking c1326c691f4d23bf01ed45ef9814c6f2c71f87c9 ......
	 orig commit -> 4e5ca2d930aa8714400aedf4bf1dc959cb04280f ......
checking e2a6f2967f674e9ff73a0572c0c99229255a7fa0 ......
	 orig commit -> 5ba080aada5e739165e0f38d5cc3b04c82b323c8 ......
checking f4a0f85594baa84dfddfa36ae857fccb8f2606df ......
	 orig commit -> d48b8c58c57f6edbe2965f0a5f62c5cf9593ca96 ......
checking 71233e2541a4f8fcbce05f76679a0a380b3159ad ......
	 orig commit -> 914d65f3f013ba2556c7beec5d3baac7b3292504 ......
checking 08b81090102015fb88572dda91934aab0de88893 ......
	 orig commit -> 4bcd615fad6adddc68b058d498b30a9e0e0db77a ......
checking 008029510ac8c44a8421180d8d71b3e9c95c909f ......
	 orig commit -> 50a0d71a5d20e1d3eff1d974fdc8559ad6d74892 ......
checking 79c3f5cf466df5d04c2aa6d837f23cd91f48a776 ......
	 orig commit -> 8af016aa5a27c6a2505460eb4d83f1e70c38dc43 ......
checking f1be266203732104d6d754b1050d456e60d1046a ......
	 orig commit -> 6a28fd2bbc94bfca105632e5ef8a9dbe63ba0b39 ......
checking 5ff0741646fd4aad0b9454c2eba5b20d8d82fc56 ......
	 orig commit -> 245d21190aec547c0de64f70c0e6de871c185a24 ......
checking a9a14b17f72cab586572ad11e3c4c92988d54360 ......
	 orig commit -> 380a6c86457573aa42d27ae11e025eb25941a0b7 ......
checking 057ee30417e55a9bf9263b32fff70394f1d4260c ......
	 orig commit -> 07ffb4497360ae8789f05555fec8171ee952304d ......
checking 824f8613ea62f296c18026ef6da300ba441228ce ......
	 orig commit -> 45392ff6881dbe56d41ef0b17c2e576065f8ffa1 ......
checking 2159db50a57264f18416b3d20f110044a7f92dac ......
	 orig commit -> e4779162f7377baa9fb9a044555ecaae22c3f125 ......
checking 9f180c6db58e3db418da262dac5c9017afde91fe ......
	 orig commit -> b7573a0a27bfa8270dea9b145448f6884b7cacc1 ......
checking 9854881c225a1c757616f126fad952a3e0910925 ......
	 orig commit -> 7ff0b53c4051145d1cf992d2f60987e6447eed4f ......
		 7ff0b53c4051145d1cf992d2f60987e6447eed4f has problem. Fixes commit -> 0921e11e1e12802ae0a3c19cb02e33354ca51967
commit 56a58a5395aba19f0a4c3e18b46532511994841a
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed May 23 11:02:04 2018 +0200

    spi: sh-msiof: Fix setting SIRMDR1.SYNCAC to match SITMDR1.SYNCAC
    
    [ Upstream commit 0921e11e1e12802ae0a3c19cb02e33354ca51967 ]
    
    According to section 59.2.4 MSIOF Receive Mode Register 1 (SIRMDR1) in
    the R-Car Gen3 datasheet Rev.1.00, the value of the SIRMDR1.SYNCAC bit
    must match the value of the SITMDR1.SYNCAC bit.  However,
    sh_msiof_spi_setup() changes only the latter.
    
    Fix this by updating the SIRMDR1 register like the SITMDR1 register,
    taking into account register bits that exist in SITMDR1 only.
    
    Reported-by: Renesas BSP team via Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Fixes: 7ff0b53c4051145d ("spi: sh-msiof: Avoid writing to registers from spi_master.setup()")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 6467b3e254470a130872d8bb3e938500358795d5 ......
	 orig commit -> 41f61db2cd24d5ad802386719cccde1479aa82a6 ......
checking 8dc11c413557cb9dd834ab655fb9bca6c61a4f4c ......
	 orig commit -> 11b2b653102571ac791885324371d9a1a17b900e ......
checking e53e85d5082cb208157b64b24812211d17801157 ......
	 orig commit -> 302d6424e4a293a5761997e6c9fc3dfb1e4c355f ......
checking 4df82a41e819133194e015c14424ae4e96ca061f ......
	 orig commit -> 62e3a3e342af3c313ab38603811ecdb1fcc79edb ......
		 62e3a3e342af3c313ab38603811ecdb1fcc79edb has problem. Fixes commit -> 03c94d60261c28689465a16086eb290ab3012aa3
3976626ea3d2011f8fd3f3a47070a8b792018253
commit be04f7301d8dc92a0c54392da26bd9b474ed7a2b
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Tue Apr 3 23:38:45 2018 +0100

    drm/msm: Fix possible null dereference on failure of get_pages()
    
    [ Upstream commit 3976626ea3d2011f8fd3f3a47070a8b792018253 ]
    
    Commit 62e3a3e342af changed get_pages() to initialise
    msm_gem_object::pages before trying to initialise msm_gem_object::sgt,
    so that put_pages() would properly clean up pages in the failure
    case.
    
    However, this means that put_pages() now needs to check that
    msm_gem_object::sgt is not null before trying to clean it up, and
    this check was only applied to part of the cleanup code.  Move
    it all into the conditional block.  (Strictly speaking we don't
    need to make the kfree() conditional, but since we can't avoid
    checking for null ourselves we may as well do so.)
    
    Fixes: 62e3a3e342af ("drm/msm: fix leak in failed get_pages")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Reviewed-by: Jordan Crouse <jcrouse@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b3cff08483d06379bc608206374fb249a2199847 ......
	 orig commit -> baed3c4bc4c13de93e0dba0a26d601411ebcb389 ......
checking b453f9d8c55e72e9e84335ce654171b3fd5b2c4d ......
	 orig commit -> 1d0d064307cbfd8546841f6e9d94d02c55e45e1e ......
checking e59e19dc4086ec79e259ac9841055863562baa20 ......
	 orig commit -> 67b8fbead4685b36d290a0ef91c6ddffc4920ec9 ......
checking 5b58533858e3f2d0b6d975d7725d8d04cb32b841 ......
	 orig commit -> ba8f3597900291a93604643017fff66a14546015 ......
checking 23081c335df988f3ddcceae253aa7504c78c3094 ......
	 orig commit -> 740a5759bf222332fbb5eda42f89aa25ba38f9b2 ......
checking 23e73e2ab4d29b481eda0026ea3266b2360b1480 ......
	 orig commit -> 9ff97fa8db94caeab59a3c5401e975df468b4d8e ......

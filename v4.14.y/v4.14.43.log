Check from v4.14.43 to v4.14.44
Commit count: 165
checking 102b97d6241d938ac153193504a5936fc0be27ed ......
checking 6b73dfbd3cfc9af7cb50fc109585b8735e404201 ......
	 orig commit -> 82d632b85eb89f97051530f556cb49ee1c04bde7 ......
checking 6f34e436509ec90703365972cf0aef90d41c009f ......
	 orig commit -> bcdd559268039d8340d38fa58668393596e29fdc ......
checking 78227b671e0db669eac33f2302bef45a7d5ea33a ......
	 orig commit -> 347876ad47b9923ce26e686173bbf46581802ffa ......
checking 459aa4904ab20d0544dc3e237d264e7211fc7aa5 ......
	 orig commit -> 10d0c768cc6d581523d673b9d1b54213f8a5eb24 ......
checking 6266010c38950eec0dd304d04a79540e6115b71b ......
	 orig commit -> 201fac95e799c3d0304ec724d555e1251b9f6e84 ......
checking 6c1c17116484cf376aee8a072fa37553da9ac0bd ......
	 orig commit -> b3a5ac42ab18b7d1a8f2f072ca0ee76a3b754a43 ......
		 b3a5ac42ab18b7d1a8f2f072ca0ee76a3b754a43 has problem. Fixes commit -> 7ce9a992ffde8ce93d5ae5767362a5c7389ae895
commit 677f423c995d27bfafd34a7b86773830db6ac09f
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Mon Nov 5 03:48:25 2018 +0000

    rtc: hctosys: Add missing range error reporting
    
    commit 7ce9a992ffde8ce93d5ae5767362a5c7389ae895 upstream.
    
    Fix an issue with the 32-bit range error path in `rtc_hctosys' where no
    error code is set and consequently the successful preceding call result
    from `rtc_read_time' is propagated to `rtc_hctosys_ret'.  This in turn
    makes any subsequent call to `hctosys_show' incorrectly report in sysfs
    that the system time has been set from this RTC while it has not.
    
    Set the error to ERANGE then if we can't express the result due to an
    overflow.
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    Fixes: b3a5ac42ab18 ("rtc: hctosys: Ensure system time doesn't overflow time_t")
    Cc: stable@vger.kernel.org # 4.17+
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 731d965a587c96ebd319bca7e09448482e01d7b1 ......
	 orig commit -> 1485991c024603b2fb4ae77beb7a0d741128a48e ......
checking 8293e6238e03a91cd74c60d2901bc0a825526b9f ......
	 orig commit -> 0e254963b6ba4d63ac911e79537fea38dd03dc50 ......
checking e10bbc220e1a37ce0292217dbbc98773b330b525 ......
	 orig commit -> 2e9fe539108320820016f78ca7704a7342788380 ......
checking 1c447ea137037fb3dae452efc28f607020df76d0 ......
	 orig commit -> f9f5786987e81d166c60833edcb7d1836aa16944 ......
checking db69a1a58844c2227e93fc023821f67279d60573 ......
	 orig commit -> ffab87fdecc655cc676f8be8dd1a2c5e22bd6d47 ......
checking 24182ff06635a2c5fdbe389e443d7b66416a421f ......
	 orig commit -> 5673444821406dda5fc25e4b52aca419f8065a19 ......
checking 5f53807e751ef0b01e56d46d06d1f1a5828de249 ......
	 orig commit -> dd345a31bfdec350d2593e6de5964e55c7f19c76 ......
checking 491e61fe3c53d1f5cf74da10b1474cca0a6bbaaa ......
	 orig commit -> 49ee23b71877831ac087d6083f6f397dc19c9664 ......
checking eb81dd52b425dc0a653a1c7944188c09c6be0aee ......
	 orig commit -> 090fa4b0dccfa3d04e1c5ab0fe4eba16e6713895 ......
checking d1e7f966521d9f264ae662394210eb44b0b10074 ......
	 orig commit -> e7d75e18d0fc3f7193b65282b651f980c778d935 ......
checking 604e648e8bf02b2995afa3b825a074943a5ec4ed ......
	 orig commit -> 67300abdbe9f1717532aaf4e037222762716d0f6 ......
checking 9b7c44c4394621bec8ff7753089441e0ea9323ca ......
	 orig commit -> 65243386f41d38460bfd4375d231a7c0346d0401 ......
checking 8cfcd5bbb72319fc4cc338cbfb08ae51370ae734 ......
	 orig commit -> d13a0139d7874a0577b5955d6eed895517d23b72 ......
checking 81173a58638f3e54e6af21ec2cc218b6cb733daf ......
	 orig commit -> 9f564184e6cc21a86c26bab920afac1bab7653ff ......
checking 93c72937a26bf899b10b2af6193f89f9c113577c ......
	 orig commit -> 5e3e4cb5e24b92773b194aa90066170b12133bc6 ......
checking d600eadf7d80edf8575462d8a0c117adbbceba52 ......
	 orig commit -> f2a326c928cca1f5e36a3dceaf66e8c6b34e9cb8 ......
checking d62c8d80f84fa4c9dba0f61b27376339afde2f35 ......
	 orig commit -> 94448e21cf08b10f7dc7acdaca387594370396b0 ......
checking 53ba3526baad31528f72bd57bbc1b66378b60c3f ......
	 orig commit -> a398e043637a4819a0e96467bfecaabf3224dd62 ......
checking 5ebcb461274843c4f2d7c6de68ab05caddedd091 ......
	 orig commit -> 5ceade1d97fc6687e050c44c257382c192f56276 ......
checking 24858b9c030ae48d876f9102a142f69c696762e5 ......
	 orig commit -> 779c79d4b833ec646b0aed878da38edb45bbe156 ......
checking 1c94830eeea533f617a0642e98dbac51214329a1 ......
	 orig commit -> 06fe932307d58108a11c3e603517dd2a73a57b80 ......
checking cc4b4af51c13c0aec5c0368986295eb9dcfcdab1 ......
	 orig commit -> 3dd6b560dc5d59e7cb6dbda6e85dc9af7925fcf8 ......
checking 07999bccf2e01312bc299c60aca1b18ba83626be ......
	 orig commit -> a145f64c6107d3aa5a7cec9f8977d04ac2a896c9 ......
checking 7bc147610d1e74ca70ffb8a48d8fc44621bfc760 ......
	 orig commit -> a8321e7887410a2b2e80ab89d1ef7b30562658ea ......
checking 3fabe01cdf75445e432c7f730a6a4d082795c60a ......
	 orig commit -> 2ac051eeabaa411ef89ae7cd5bb8e60cb41ad780 ......
checking 90e14be44331243de96ad040c50abc3111a140d5 ......
	 orig commit -> ab0447845cffc0fd752df2ccd6b4e34006000ce4 ......
checking 256499854098069898ca1a35818961aa15c3cd83 ......
	 orig commit -> cdb68fbd4e7962be742c4f29475220c5bf28d8a5 ......
checking 8f4eef93e1abc3956f67865069df88df85c5c28e ......
	 orig commit -> 7e4db0c2836e892766565965207eee051c8037b9 ......
checking 264530c6ad12fbf04a5cff9461fda7b925d2e67c ......
	 orig commit -> 179db533c08431f509a3823077549773d519358b ......
checking 573dda18a809cce3ae4dc94de614cc6fe74ce176 ......
	 orig commit -> 4bf59902b50012b1dddeeaa23b217d9c4956cdda ......
checking 04adc8209a9a6518ce8ff545e9d97dbf6d3b8adf ......
	 orig commit -> c35b518f9ba06c9de79fb3ff62eed7462d804995 ......
checking 99f29b5c1cc4670b3ea5e2e9013737a6201e49a5 ......
	 orig commit -> df934cbcbff7afbc024bf05f02615917c61f6470 ......
checking 2dc1d1a8715ec6e2459f61be70b1faf43af29bf1 ......
	 orig commit -> 1f9c63e8de3d7b377c9d74e4a17524cfb60e6384 ......
checking a225a3ba32137fb61ecf13f9dbe7aeb25e55d7cb ......
	 orig commit -> 4b0556a441dd37e598887215bc89b49a6ef525b3 ......
checking 9311d0b6b4666fed722f712a285b0a7069409f30 ......
	 orig commit -> 647d04f8e07afc7c3b7a42b3ee01a8b28db29631 ......
		 647d04f8e07afc7c3b7a42b3ee01a8b28db29631 has problem. Fixes commit -> 860b454c2c0cbda6892954f5cdbbb48931b3c8db
checking 27cbb1df79c5079c0cf398f0164d7f5a7c38c268 ......
	 orig commit -> bde8b3887add8368ecf0ca71117baf2fd56a6fc9 ......
checking fbeec965b8d1ca4005f2b63f70fd6ed54a147027 ......
	 orig commit -> 1d22c337dc8f3a25638f7262e7bcb5729a34d140 ......
checking b3bbda7bad73d900fcc49528712305331a1bd491 ......
	 orig commit -> b1d0db067fbe2598d62b248beea5d705a0ea7642 ......
checking 98ffb5cf47e4d0b9c0bf0f53e20cff00d1ba7ee2 ......
	 orig commit -> 5e558f8afaec8957932b1dbe5aeff800f9fc6957 ......
checking 48e835f89769a1fcb1cf15259c734600891d87f5 ......
	 orig commit -> 04673e38f56b30cd39b1fa0f386137d818b17781 ......
checking 8fd4131a9fcc0ad8a60554c0505804b258362552 ......
	 orig commit -> 161df4f09987ae2e9f0f97f0b38eee298b4a39ff ......
checking d5d331cdfcb27e6c5dd5c10ac0452f7442bbc6c5 ......
	 orig commit -> 2289e9598dde9705400559ca2606fb8c145c34f0 ......
checking a9bcbce385ed5c496a14991039bbdfa69992ae12 ......
	 orig commit -> e75fba9c0668b3767f608ea07485f48d33c270cf ......
checking 5e315f31faefefdf3757529642884e3f87294d3d ......
	 orig commit -> 1875ede02ed5e176a18dccbca84abc28d5b3e141 ......
checking 3de235c7753b84b18eb806e3cea76560681eda03 ......
	 orig commit -> 1c6b41fb92936fa5facea464d5d7cbf855966d04 ......
checking 10859964e0e1591860171b49eed5189f5cd465ee ......
	 orig commit -> 89d0c804392bb962553f23dc4c119d11b6bd1675 ......
checking b1a706fdb5a89e1e432f2fc2e3e48a8eb9a9fbb6 ......
	 orig commit -> 20bd1d026aacc5399464f8328f305985c493cde3 ......
checking 2bb6b7decff05262b04c7ef62b6d3b311420bc37 ......
	 orig commit -> 864449eea7c600596e305ffdc4a6a846414b222c ......
checking fbc80171609276ae68c8d7f271355d0fa84bb44c ......
	 orig commit -> 967823d6c3980a30e214b92bfe6a101e7b46d025 ......
checking dc6cb0cb91d51dcc501bf8e62029b86c24d8e7e0 ......
	 orig commit -> 1bc5ad3a6acdcf56f83272f2de1cd2389ea9e9e2 ......
checking b24fd4cd949106826bfe54c79df20d514c5a975c ......
	 orig commit -> 00c20cdc79259c6c5bf978b21af96c2d3edb646d ......
checking 942cb7bd774ae1c66e79d2ae720c1e1eee5ba0be ......
	 orig commit -> 1683ce57f568c7c92d53e9234624a53554a29cd5 ......
checking a9eb1e1031a075570468bc03c1b72fa0c2e22a69 ......
	 orig commit -> cabe92a55e3a12005a4ac4d3954c9a174b0efe2a ......
checking 1ad71103e12e2b8da7f0fbcc8d69f0aa3409b523 ......
	 orig commit -> c02189e12ce3bf3808cb880569d3b10249f50bd9 ......
checking 62d16de3109f8dff76f97b58d66ce502970b2f3f ......
	 orig commit -> a7043e9529f3c367cc4d82997e00be034cbe57ca ......
checking 0bf213d90bb2c25d1f36811d14f239126764b130 ......
	 orig commit -> e6f791d95313c85f3dd4a26141e28e50ae9aa0ae ......
checking a1ac3da8431afd57a3d08e24b8eb460e6255bf99 ......
	 orig commit -> ecf7ff49945f5741fa1da112f994939f942031d3 ......
checking af9930622461584c82aeec6843de97b3495ff40a ......
	 orig commit -> 84af7e8b895088d89f246d6b0f82717fafdebf61 ......
checking b0ef004e86cf7ddc9498a4db4d9624d3fd5b3c07 ......
	 orig commit -> 2ce87cc5b269510de9ca1185ca8a6e10ec78c069 ......
checking 59ad4bb717141ee814db7843835c13e11032ed41 ......
	 orig commit -> 4a8842de8db4953fdda7866626b78b12fb8adb97 ......
checking 2b2a92910c1968d2922f07b2a44a6a51d63ef6d7 ......
	 orig commit -> b7007dbccd92f7b8c00e590020bee542a48c6a2c ......
checking c787fb6bdac2045494fa240ab6687f72b7fa0d4a ......
	 orig commit -> 7c73cf4cc2ac16465f5102437dc0a12d66671bd6 ......
checking d03a0a61dc82f27fcb56561992f564f2ebc1e4b3 ......
	 orig commit -> c1a8fa6e240ed4b99778d48ab790743565cb61c8 ......
checking 6df26587d22d69b3f8310303f11f57199a738872 ......
	 orig commit -> 666a9c70b04fccabde5cea5e680ae1ae92460a62 ......
checking a04b30fd74a1b00f9d8fa010bee5cde37aaa9803 ......
	 orig commit -> 95831ceafc0de7d94a5fe86ebb1c2042317cc2cd ......
checking 41b6f0ffb3ac1d486bcd2545f0b1d25189d78695 ......
	 orig commit -> 79eb382b5e06a6dca5806465d7195d686a463ab0 ......
checking 223ba92a80594ed6c071b39402660ee07937ac8a ......
	 orig commit -> 5d804a5157dbaa64872a675923ae87161165c66b ......
checking 173c55493b8184623f415799aac8c62d0c5574b6 ......
	 orig commit -> 4dc5475ae0375ea4f9283dfd9b2ddc91b20d4c4b ......
checking 43624647a97c113e71ab23775b295ba0cccf0319 ......
	 orig commit -> 17556cdbe6ed70a6a20e597b228628f7f34387f8 ......
checking 281bb7920cc0cd3e3bbe06b48a3d42b2dbeaa3cc ......
	 orig commit -> dc13498ab47fdfae3cda4df712beb2e4244b3fe0 ......
checking d5ae597ed13da51d203adea4deb524728c45da71 ......
	 orig commit -> e1a7418529e33bc4efc346324557251a16a3e79b ......
checking 20b9506df1b40367c782bd98a77497e3021baaa1 ......
	 orig commit -> 75c583ab9709692a60871d4719006391cde8dc1d ......
checking ff8eb22e5bb83ffc8fb3e633711cf3fc785dd60f ......
	 orig commit -> 2fab9faf9b27298c4536c1c1b14072ab18b8f80b ......
checking bf30d26981a857454bf9c71edc61fccc42dd6b83 ......
	 orig commit -> 626118b472d2eb45f83a0276a18d3e6a01c69f6a ......
checking 0fe68f20e09f7b1ce276db20ef580fb8d9f69e0b ......
	 orig commit -> 0ee78c101425aae681c631ba59c6ac7f44b1d83a ......
checking 0249054e4bfd3237d042c9f0bc651e2db50fc9a8 ......
	 orig commit -> fed03fe7e55b7dc16077f672bd9d7bbe92b3a691 ......
checking e4504b80e012f6ca569a738b2dc3b70ae4f4ceb3 ......
	 orig commit -> c7c7e8d7803406daa21e96d00c357de8b77b6764 ......
checking f5f6bff50f36edf9cf503d8ea56a2b2e649236f4 ......
	 orig commit -> 835d66173a38538c072a7c393d02360dcfac8582 ......
checking f3f3442027b5b4f7633fc008ade8b2f5558b16c9 ......
	 orig commit -> 5d6ae4f0da8a64a185074dabb1b2f8c148efa741 ......
checking 9170c1411eca5a2409fe4ec03152ce416ab45f97 ......
	 orig commit -> ac87e560f7c0f91b62012e9a159c0681a373b922 ......
checking b80114337d31e617196b3d10820886038d8128d0 ......
	 orig commit -> 351a8d4837ae0d61744e64262c3a80ab92ff3e42 ......
checking dd5541c7a60d9fe8715a0b7f90dbdac6c2457636 ......
	 orig commit -> 4058ebf33cb0be88ca516f968eda24ab7b6b93e4 ......
checking 7f48c9ddca72a0c488331e775d21fe280c1f71f1 ......
	 orig commit -> 946ef68ad4e45aa048a5fb41ce8823ed29da866a ......
		 946ef68ad4e45aa048a5fb41ce8823ed29da866a has problem. Fixes commit -> e610257e462f6104792d22fbb0927724df3bc401
4d644abf25698362bd33d17c9ddc8f7122c30f17
commit 5421694d8cd76e258a3aa2923794f772f2e6a4de
Author: Jerry Zhang <zhangjerry@google.com>
Date:   Mon Jul 2 12:48:08 2018 -0700

    usb: gadget: f_fs: Only return delayed status when len is 0
    
    commit 4d644abf25698362bd33d17c9ddc8f7122c30f17 upstream.
    
    Commit 1b9ba000 ("Allow function drivers to pause control
    transfers") states that USB_GADGET_DELAYED_STATUS is only
    supported if data phase is 0 bytes.
    
    It seems that when the length is not 0 bytes, there is no
    need to explicitly delay the data stage since the transfer
    is not completed until the user responds. However, when the
    length is 0, there is no data stage and the transfer is
    finished once setup() returns, hence there is a need to
    explicitly delay completion.
    
    This manifests as the following bugs:
    
    Prior to 946ef68ad4e4 ('Let setup() return
    USB_GADGET_DELAYED_STATUS'), when setup is 0 bytes, ffs
    would require user to queue a 0 byte request in order to
    clear setup state. However, that 0 byte request was actually
    not needed and would hang and cause errors in other setup
    requests.
    
    After the above commit, 0 byte setups work since the gadget
    now accepts empty queues to ep0 to clear the delay, but all
    other setups hang.
    
    Fixes: 946ef68ad4e4 ("Let setup() return USB_GADGET_DELAYED_STATUS")
    Signed-off-by: Jerry Zhang <zhangjerry@google.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 5421694d8cd76e258a3aa2923794f772f2e6a4de
Author: Jerry Zhang <zhangjerry@google.com>
Date:   Mon Jul 2 12:48:08 2018 -0700

    usb: gadget: f_fs: Only return delayed status when len is 0
    
    commit 4d644abf25698362bd33d17c9ddc8f7122c30f17 upstream.
    
    Commit 1b9ba000 ("Allow function drivers to pause control
    transfers") states that USB_GADGET_DELAYED_STATUS is only
    supported if data phase is 0 bytes.
    
    It seems that when the length is not 0 bytes, there is no
    need to explicitly delay the data stage since the transfer
    is not completed until the user responds. However, when the
    length is 0, there is no data stage and the transfer is
    finished once setup() returns, hence there is a need to
    explicitly delay completion.
    
    This manifests as the following bugs:
    
    Prior to 946ef68ad4e4 ('Let setup() return
    USB_GADGET_DELAYED_STATUS'), when setup is 0 bytes, ffs
    would require user to queue a 0 byte request in order to
    clear setup state. However, that 0 byte request was actually
    not needed and would hang and cause errors in other setup
    requests.
    
    After the above commit, 0 byte setups work since the gadget
    now accepts empty queues to ep0 to clear the delay, but all
    other setups hang.
    
    Fixes: 946ef68ad4e4 ("Let setup() return USB_GADGET_DELAYED_STATUS")
    Signed-off-by: Jerry Zhang <zhangjerry@google.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 11cb14a196793ce2f9fb3fa9811f2dbaf348141c ......
	 orig commit -> 92a8dd26464e1f21f1d869ec53717bd2c1200d63 ......
checking 51250a9357d8b371fe1b8ab052c9b1ffe5f9a670 ......
	 orig commit -> a82c7abdf8fc3b09c4a0ed2eee6d43ecef2ccdb0 ......
checking db81323e6a5d32a93ad7a1a419f99fe141df952e ......
	 orig commit -> 12814a3f8f9b247531d7863170cc82b3fe4218fd ......
checking 39280c27031b32639c5757da6e3462ba397df58c ......
	 orig commit -> a400efe455f7b61ac9a801ac8d0d01f8c8d82dd5 ......
		 a400efe455f7b61ac9a801ac8d0d01f8c8d82dd5 has problem. Fixes commit -> 44a182b9d17765514fa2b1cc911e4e65134eef93
commit 4798e96b7646d562f839b9a87332d86a5aa5bf10
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Thu May 3 17:30:07 2018 +0300

    xhci: Fix use-after-free in xhci_free_virt_device
    
    commit 44a182b9d17765514fa2b1cc911e4e65134eef93 upstream.
    
    KASAN found a use-after-free in xhci_free_virt_device+0x33b/0x38e
    where xhci_free_virt_device() sets slot id to 0 if udev exists:
    if (dev->udev && dev->udev->slot_id)
            dev->udev->slot_id = 0;
    
    dev->udev will be true even if udev is freed because dev->udev is
    not set to NULL.
    
    set dev->udev pointer to NULL in xhci_free_dev()
    
    The original patch went to stable so this fix needs to be applied
    there as well.
    
    Fixes: a400efe455f7 ("xhci: zero usb device slot_id member when disabling and freeing a xhci slot")
    Cc: <stable@vger.kernel.org>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 55aaef4bd8a08ec978169a4484c77b1d4cd49695 ......
	 orig commit -> de948a74ad6f0eefddf36d765b8f2dd6df82caa0 ......
checking 834329c4ad4cb59a8cd6c3e5354c8b91540841c3 ......
	 orig commit -> 0cab8d26d6e5e053b2bed3356992aaa71dc93628 ......
checking 7fb2d2f1b04d983cb8b92ac12c6a15bd905943b2 ......
	 orig commit -> fab3833338779e1e668bd58d1f76d601657304b8 ......
checking 81ba08e69fe2af23162c4222ddd67622895f5bac ......
	 orig commit -> 71426535f49fe6034d0e0db77608b91a0c1a022d ......
checking d711223606e893e21a92706b269e0c7f1e5b2ce6 ......
	 orig commit -> a41e0796396eeceff673af4a38feaee149c6ff86 ......
checking 89509cdb713f0dd6825fb600b3974a786905fdaf ......
	 orig commit -> d4c4bc11353f3bea6754f7d21e3612c9f32d1d64 ......
checking 58249157c6ad4d3796eb1c00036689fe078eaef7 ......
	 orig commit -> f3d801baf118c9d452ee7c278df16880c892e669 ......
checking ce04fbcdb39af0d3afc96115f10b39e46501e9b5 ......
	 orig commit -> d6c931ea32dc08ac2665bb5f009f9c40ad1bbdb3 ......
checking e5c8a6d499a1010eacacaef0ffc3e8c807282530 ......
	 orig commit -> d56e57ca030c8b4296944a2ae61ac167bf979c07 ......
checking 38ed02d8584024951164d1fd2ec512fd9865de6d ......
	 orig commit -> 970656b3246d30955894951ed16bd658e42d8c24 ......
checking 5788084ba3cd9da81342be9c64ef8cb76a9874fd ......
	 orig commit -> 2695578b896aea472b2c0dcbe9d92daa71738484 ......
checking f7b3f33c79b77c42cb5621d79a2c05b0085d53ed ......
	 orig commit -> b86b8eb6fecb5a4bac1ed0ca925c4082a61ea6e9 ......
checking ee4ed01d4b5cf050fdce241cbf59bea40d079fd9 ......
	 orig commit -> 755d739534f998d92e348fba8ffb0478416576e7 ......
checking a3fcccd4a7efc241de5a0c32d9ea31e0f2297ceb ......
	 orig commit -> 20c63f4089cceab803438c383631963e34c4d8e5 ......
checking 36d66139a351b499dc902dcc474e150d000726e6 ......
	 orig commit -> e74bd4d358e5455233f1dcc3975425905b270b91 ......
checking aefc5ce2342a91235149e6cfeccdb44c31776c1b ......
	 orig commit -> c49f63055e252810e5d6c83a4943b18db16b3cd8 ......
checking e8f101ec20c09be9f8635ac053bd2a5dff22482c ......
	 orig commit -> 00b42170c86f90ac9dea83a7dfcd3f0c38098fe2 ......
checking 0cc948e8ddb5dab378a2648f384dd87350aa7776 ......
	 orig commit -> 8813a59ed892305b5ac1b5b901740b1ad4b5fefa ......
checking 0ff6b2cac941e05ba436ca9468d21e478999e101 ......
	 orig commit -> a466ef76b815b86748d9870ef2a430af7b39c710 ......
checking f119414a8f8d006f2929b9c236e6443b0fcbbae6 ......
	 orig commit -> 66072c29328717072fd84aaff3e070e3f008ba77 ......
checking 9f2c35864ad690ba95e6526a136805fd8a8cdb3b ......
	 orig commit -> a7cfebcb7594a24609268f91299ab85ba064bf82 ......
		 a7cfebcb7594a24609268f91299ab85ba064bf82 has problem. Fixes commit -> 814596495dd2b9d4aab92d8f89cf19060d25d2ea
commit bc342bc0295422962fbbdd5aa1dd17b3bb7345bf
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon May 14 20:09:24 2018 -0700

    cfg80211: further limit wiphy names to 64 bytes
    
    commit 814596495dd2b9d4aab92d8f89cf19060d25d2ea upstream.
    
    wiphy names were recently limited to 128 bytes by commit a7cfebcb7594
    ("cfg80211: limit wiphy names to 128 bytes").  As it turns out though,
    this isn't sufficient because dev_vprintk_emit() needs the syslog header
    string "SUBSYSTEM=ieee80211\0DEVICE=+ieee80211:$devname" to fit into 128
    bytes.  This triggered the "device/subsystem name too long" WARN when
    the device name was >= 90 bytes.  As before, this was reproduced by
    syzbot by sending an HWSIM_CMD_NEW_RADIO command to the MAC80211_HWSIM
    generic netlink family.
    
    Fix it by further limiting wiphy names to 64 bytes.
    
    Reported-by: syzbot+e64565577af34b3768dc@syzkaller.appspotmail.com
    Fixes: a7cfebcb7594 ("cfg80211: limit wiphy names to 128 bytes")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 360964411d57d060d0b3f067c7a708ba9aeb5e07 ......
	 orig commit -> bdac616db9bbadb90b7d6a406144571015e138f7 ......
checking c18270ac9f8457c3d383e9b9a58e6368e046ce8a ......
	 orig commit -> 2d1d4c1e591fd40bd7dafd868a249d7d00e215d5 ......
		 2d1d4c1e591fd40bd7dafd868a249d7d00e215d5 has problem. Fixes commit -> bdac616db9bbadb90b7d6a406144571015e138f7
commit 360964411d57d060d0b3f067c7a708ba9aeb5e07
Author: Omar Sandoval <osandov@fb.com>
Date:   Fri Apr 6 09:57:03 2018 -0700

    loop: fix LOOP_GET_STATUS lock imbalance
    
    commit bdac616db9bbadb90b7d6a406144571015e138f7 upstream.
    
    Commit 2d1d4c1e591f made loop_get_status() drop lo_ctx_mutex before
    returning, but the loop_get_status_old(), loop_get_status64(), and
    loop_get_status_compat() wrappers don't call loop_get_status() if the
    passed argument is NULL. The callers expect that the lock is dropped, so
    make sure we drop it in that case, too.
    
    Reported-by: syzbot+31e8daa8b3fc129e75f2@syzkaller.appspotmail.com
    Fixes: 2d1d4c1e591f ("loop: don't call into filesystem while holding lo_ctl_mutex")
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3c017b9fede935c21f3585b7deafcce6c6a8f4fb ......
	 orig commit -> fa89adba1941e4f3b213399b81732a5c12fd9131 ......
checking d827bea2d18c07ba514f7d48cde49f90da9a1384 ......
	 orig commit -> a45b599ad808c3c982fdcdc12b0b8611c2f92824 ......
checking 58442874542fb41fd53de4ab34be180ad43779c9 ......
	 orig commit -> 318aaf34f1179b39fa9c30fa0f3288b645beee39 ......
checking c1a35f5ddf369ed50bd46bf53d1c54697781317f ......
	 orig commit -> de5cb6eb514ebe241e3edeb290cb41deb380b81d ......
		 de5cb6eb514ebe241e3edeb290cb41deb380b81d has problem. Fixes commit -> 26f843848bae973817b3587780ce6b7b0200d3e4
commit bcd169a2726a789699d487cc35a606cdf94c7d85
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Mon Aug 6 14:26:39 2018 +0200

    s390: fix br_r1_trampoline for machines without exrl
    
    commit 26f843848bae973817b3587780ce6b7b0200d3e4 upstream.
    
    For machines without the exrl instruction the BFP jit generates
    code that uses an "br %r1" instruction located in the lowcore page.
    Unfortunately there is a cut & paste error that puts an additional
    "larl %r1,.+14" instruction in the code that clobbers the branch
    target address in %r1. Remove the larl instruction.
    
    Cc: <stable@vger.kernel.org> # v4.17+
    Fixes: de5cb6eb51 ("s390: use expoline thunks in the BPF JIT")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 457b944b61e6f192c8a6136451cce5ca0aa92027 ......
	 orig commit -> 6deaa3bbca804b2a3627fd685f75de64da7be535 ......
checking a206c82f9bc98a314d8aa98f93d9977147e1b6d0 ......
	 orig commit -> 4253b0e0627ee3461e64c2495c616f1c8f6b127b ......
checking 2a146a9b32400b52ca763df14344f7ab8c161f55 ......
	 orig commit -> c50c84c3ac4d5db683904bdb3257798b6ef980ae ......
checking f1bd3b99607b1e131b07847d3a763295ceacc51e ......
	 orig commit -> 23a4d7fd34856da8218c4cfc23dba7a6ec0a423a ......
checking 0d201ff077a8160f1bba570a767ea98e901f3323 ......
	 orig commit -> 97489e0663fa700d6e7febddc43b58df98d7bcda ......
		 97489e0663fa700d6e7febddc43b58df98d7bcda has problem. Fixes commit -> 5eda25b10297684c1f46a14199ec00210f3c346e
commit 63fd9d43c0181d668e632832e66c123faf66cfd3
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Mon Aug 6 13:49:47 2018 +0200

    s390/lib: use expoline for all bcr instructions
    
    commit 5eda25b10297684c1f46a14199ec00210f3c346e upstream.
    
    The memove, memset, memcpy, __memset16, __memset32 and __memset64
    function have an additional indirect return branch in form of a
    "bzr" instruction. These need to use expolines as well.
    
    Cc: <stable@vger.kernel.org> # v4.17+
    Fixes: 97489e0663 ("s390/lib: use expoline for indirect branches")
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d7aa3f13e146418b7cbf12e64f1e2cb0261681ca ......
	 orig commit -> 467a3bf219cee12259182c5cb4821f88fd518a51 ......
checking e3ad546e6094d1be00d71087c5d0d8656ef5d6c2 ......
	 orig commit -> 6dd85fbb87d1d6b87a3b1f02ca28d7b2abd2e7ba ......
		 6dd85fbb87d1d6b87a3b1f02ca28d7b2abd2e7ba has problem. Fixes commit -> 891f6a726cacbb87e5b06076693ffab53bd378d7
commit 2b6eff5923ce501d69e58807a1f81d910c029c8f
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Thu Jun 21 14:49:38 2018 +0200

    s390: Correct register corruption in critical section cleanup
    
    commit 891f6a726cacbb87e5b06076693ffab53bd378d7 upstream.
    
    In the critical section cleanup we must not mess with r1.  For march=z9
    or older, larl + ex (instead of exrl) are used with r1 as a temporary
    register. This can clobber r1 in several interrupt handlers. Fix this by
    using r11 as a temp register.  r11 is being saved by all callers of
    cleanup_critical.
    
    Fixes: 6dd85fbb87 ("s390: move expoline assembler macros to a header")
    Cc: stable@vger.kernel.org #v4.16
    Reported-by: Oliver Kurz <okurz@suse.com>
    Reported-by: Petr Tesařík <ptesarik@suse.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 9a38169fb6025fdc6d468b1111a43e719c2143a6 ......
	 orig commit -> fba9eb7946251d6e420df3bdf7bc45195be7be9a ......
checking 131ff238b85971c75679670be41df5feb6b6530e ......
	 orig commit -> 5aa1437d2d9a068c0334bd7c9dafa8ec4f97f13b ......
checking ea5ffcd46716fcda3da98313cffcf1ae5dcbb2c2 ......
	 orig commit -> 00ad691ab140b54ab9f5de5e74cb994f552e8124 ......
checking c98b38c5ede478b938944109e71798462c36c88c ......
checking c7da51021c8d3d09cc31396a12af75bb222dcfcf ......
checking c5345b11680f22cfe8c1439fcb65f602876a9d1d ......
checking d8c3e04d39132d2aa72bb62df1b14b95f0af90d8 ......
checking be9c798d0d13ae609a91177323ac816545c39d28 ......
checking 905f85c289d7fafd87fccff3f6d87f3782372e6e ......
checking 9c6439c7b1689f27c0c6957391da22343425ca18 ......
checking 1f3ef8a7a3c667f72bcb20be61ec4b4214f355b2 ......
checking f9aab25e3326842b1986ecbad2af51a75c0dd646 ......
checking 0ac663c5674a8ed1b986e3de82d6b5427536b5ad ......
checking 99e06589bd5d6631bbea0a5128257bf16dabac9b ......
checking 0ed8945b3aa627ef8ec9dda6442b02c91f27bfb4 ......
checking 4857dca4dd65756dfdb90b33946d8f9d5c6447b8 ......
checking 0395570f81feeebbf0f390876c8ca763b6ce773c ......
checking 36a9609cef4a32a1cfd9b8c765671f11caf03a7d ......
checking 4c5fef7789571672459e18170add13ca56f33246 ......
checking 41f24dbef1771a32f3a8e3f9a2f89633c985df0a ......
checking 284a58c02eeb7f235f0a465580cf1cd739cc7d5d ......
checking 6296e73e459d76ee9c6c83917bd4da6b5f8a049c ......
checking ef1c5903cd2a44c161de86f862182afddb4a9677 ......
checking b3a303352e5142da2405d59d70aaf6aad04ef932 ......
checking 5acc4d1e8fe23da9de9f82129c50cf5a3d6cc796 ......
checking 836f8472f1bded05ea4c35b07009f4fd6fcd6bfa ......
checking 099612827aa3e09decce41f8a5cd1d473232eeb9 ......
	 orig commit -> f3002c1374fb2367c9d8dbb28852791ef90d2bac ......
checking 74327eda43d039a47ff8d35e3524ab145f8cdbaf ......
	 orig commit -> 61aeecea40afb2b89933e27cd4adb10fc2e75cfd ......
checking c89d534301a028125432e7d9a39edb08cfd90480 ......
	 orig commit -> 7f582b248d0a86bae5788c548d7bb5bca6f7691a ......
checking edabcd0f12ae3f4c1bfa7cc1bc655a6f722fd120 ......
	 orig commit -> 9709020c86f6bf8439ca3effc58cfca49a5de192 ......
checking 01a658c1b9d4b5393c38d5a92d9112ab1425382a ......
	 orig commit -> b84bbaf7a6c8cca24f8acf25a2c8e46913a947ba ......
		 b84bbaf7a6c8cca24f8acf25a2c8e46913a947ba has problem. Fixes commit -> 993675a3100b16a4c80dfd70cbcde8ea7127b31d
9aad13b087ab0a588cd68259de618f100053360e
commit 75425326b88ccdbcdecc652b1f6f672c0bd286d0
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Jul 11 12:00:45 2018 -0400

    packet: reset network header if packet shorter than ll reserved space
    
    [ Upstream commit 993675a3100b16a4c80dfd70cbcde8ea7127b31d ]
    
    If variable length link layer headers result in a packet shorter
    than dev->hard_header_len, reset the network header offset. Else
    skb->mac_len may exceed skb->len after skb_mac_reset_len.
    
    packet_sendmsg_spkt already has similar logic.
    
    Fixes: b84bbaf7a6c8 ("packet: in packet_snd start writing at link layer allocation")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d751192afdef9f40746f36a47e802c35bc1075a
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu May 24 18:10:30 2018 -0400

    packet: fix reserve calculation
    
    [ Upstream commit 9aad13b087ab0a588cd68259de618f100053360e ]
    
    Commit b84bbaf7a6c8 ("packet: in packet_snd start writing at link
    layer allocation") ensures that packet_snd always starts writing
    the link layer header in reserved headroom allocated for this
    purpose.
    
    This is needed because packets may be shorter than hard_header_len,
    in which case the space up to hard_header_len may be zeroed. But
    that necessary padding is not accounted for in skb->len.
    
    The fix, however, is buggy. It calls skb_push, which grows skb->len
    when moving skb->data back. But in this case packet length should not
    change.
    
    Instead, call skb_reserve, which moves both skb->data and skb->tail
    back, without changing length.
    
    Fixes: b84bbaf7a6c8 ("packet: in packet_snd start writing at link layer allocation")
    Reported-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 75425326b88ccdbcdecc652b1f6f672c0bd286d0
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Jul 11 12:00:45 2018 -0400

    packet: reset network header if packet shorter than ll reserved space
    
    [ Upstream commit 993675a3100b16a4c80dfd70cbcde8ea7127b31d ]
    
    If variable length link layer headers result in a packet shorter
    than dev->hard_header_len, reset the network header offset. Else
    skb->mac_len may exceed skb->len after skb_mac_reset_len.
    
    packet_sendmsg_spkt already has similar logic.
    
    Fixes: b84bbaf7a6c8 ("packet: in packet_snd start writing at link layer allocation")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c02756173e654eb4dade1dc01d9419e338cf0ffa ......
	 orig commit -> 113f99c3358564a0647d444c2ae34e8b1abfd5b9 ......
checking 2cedbdda01fe1926d4c7c3ee117d2855803d55a3 ......
	 orig commit -> d49baa7e12ee70c0a7b821d088a770c94c02e494 ......
checking 8ffa5f9783941fa24f7c8ffc5d8a494bd26c5a47 ......
	 orig commit -> 44a63b137f7b6e4c7bd6c9cc21615941cb36509d ......
checking 53b2dbbee18dc6bd94d73050eedb9ab4fa1120f6 ......
	 orig commit -> 5a4931ae0193f8a4a97e8260fd0df1d705d83299 ......
checking 5ff45c86e90a493f8e332c9218026c183ce724e2 ......
	 orig commit -> 57f6f99fdad9984801cde05c1db68fe39b474a10 ......
checking 047df46d6cef651e4a32637632a84916e24b054b ......
	 orig commit -> 6358d49ac23995fdfe157cc8747ab0f274d3954b ......

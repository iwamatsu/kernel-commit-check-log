Check from v4.14.7 to v4.14.8
Commit count: 178
checking 7b3775017f4e6b87dfd2c7f63d1eaf057948f31d ......
checking bed6119aa21b28f096880342f9e2445f9ad47b25 ......
	 orig commit -> bd3486ded7a0c313a6575343e6c2b21d14476645 ......
checking d094690cbed906ca96752cb94abed50fbf1cfaa3 ......
	 orig commit -> 20665a9076d48e9abd9a2db13d307f58f7ef6647 ......
checking 5c212b59ded7fc9382e1c55c100f82709cf542ca ......
	 orig commit -> 96378bd2c6cda5f04d0f6da2cd35d4670a982c38 ......
		 96378bd2c6cda5f04d0f6da2cd35d4670a982c38 has problem. Fixes commit -> 20665a9076d48e9abd9a2db13d307f58f7ef6647
commit d094690cbed906ca96752cb94abed50fbf1cfaa3
Author: Brian Norris <briannorris@chromium.org>
Date:   Thu Oct 19 11:45:19 2017 -0700

    ath10k: fix build errors with !CONFIG_PM
    
    
    [ Upstream commit 20665a9076d48e9abd9a2db13d307f58f7ef6647 ]
    
    Build errors have been reported with CONFIG_PM=n:
    
    drivers/net/wireless/ath/ath10k/pci.c:3416:8: error: implicit
    declaration of function 'ath10k_pci_suspend'
    [-Werror=implicit-function-declaration]
    
    drivers/net/wireless/ath/ath10k/pci.c:3428:8: error: implicit
    declaration of function 'ath10k_pci_resume'
    [-Werror=implicit-function-declaration]
    
    These are caused by the combination of the following two commits:
    
    6af1de2e4ec4 ("ath10k: mark PM functions as __maybe_unused")
    96378bd2c6cd ("ath10k: fix core PCI suspend when WoWLAN is supported but
    disabled")
    
    Both build fine on their own.
    
    But now that ath10k_pci_pm_{suspend,resume}() is compiled
    unconditionally, we should also compile ath10k_pci_{suspend,resume}()
    unconditionally.
    
    And drop the #ifdef around ath10k_pci_hif_{suspend,resume}() too; they
    are trivial (empty), so we're not saving much space by compiling them
    out. And the alternatives would be to sprinkle more __maybe_unused, or
    spread the #ifdef's further.
    
    Build tested with the following combinations:
    CONFIG_PM=y && CONFIG_PM_SLEEP=y
    CONFIG_PM=y && CONFIG_PM_SLEEP=n
    CONFIG_PM=n
    
    Fixes: 96378bd2c6cd ("ath10k: fix core PCI suspend when WoWLAN is supported but disabled")
    Fixes: 096ad2a15fd8 ("Merge branch 'ath-next'")
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e37eb54a000c767e7f39b806fb048c4be75ed786 ......
	 orig commit -> ee0a47186e2fa9aa1c56cadcea470ca0ba8c8692 ......
checking 99ab42f783da58540c80c91a2af8e8c764c46ca8 ......
	 orig commit -> e57903fd972a398b7140d0bc055714e13a0e58c5 ......
checking 136e415e7a6a7d3d8666560b2147145c7636a455 ......
	 orig commit -> bd432417681a224d9fa4a9d43be7d4edc82135b2 ......
checking 83ef2175ba013ab5ec9b1ec50944ba60a6af888d ......
	 orig commit -> a1121176ff757e3c073490a69608ea0b18a00ec1 ......
checking 8594a9a79c390fc99c8d8af21b3208396c94b231 ......
	 orig commit -> 7d327a9ed6c4dca341ebf99012e0a6b80a3050e6 ......
checking e22f692fbabafe322db0c3821e02a5d6da350bef ......
	 orig commit -> 27b978725d895e704aab44b99242a0514485d798 ......
checking 1b07f7511a773db3a165b0a2eca35df5ba6dd1d3 ......
	 orig commit -> 3e3a5b8ebd5d3b1d68facc58b0674a2564653222 ......
checking e6a9d261e95f5ba5cda38ca9c6b7e580656032c4 ......
	 orig commit -> 258bbb1b0e594ad5f5652cb526b3c63e6a7fad3d ......
checking 023bff1b335860493dce3769c942b0172ea0fb5a ......
	 orig commit -> b4b678b06f6eef18bff44a338c01870234db0bc9 ......
		 b4b678b06f6eef18bff44a338c01870234db0bc9 has problem. Fixes commit -> 1f80bd6a6cc8358b81194e1f5fc16449947396ec
commit 8c954368de6915c4dcbbceca279758ab654bad37
Author: Alex Vesker <valex@mellanox.com>
Date:   Thu Dec 21 17:38:27 2017 +0200

    IB/ipoib: Fix lockdep issue found on ipoib_ib_dev_heavy_flush
    
    [ Upstream commit 1f80bd6a6cc8358b81194e1f5fc16449947396ec ]
    
    The locking order of vlan_rwsem (LOCK A) and then rtnl (LOCK B),
    contradicts other flows such as ipoib_open possibly causing a deadlock.
    To prevent this deadlock heavy flush is called with RTNL locked and
    only then tries to acquire vlan_rwsem.
    This deadlock is possible only when there are child interfaces.
    
    [  140.941758] ======================================================
    [  140.946276] WARNING: possible circular locking dependency detected
    [  140.950950] 4.15.0-rc1+ #9 Tainted: G           O
    [  140.954797] ------------------------------------------------------
    [  140.959424] kworker/u32:1/146 is trying to acquire lock:
    [  140.963450]  (rtnl_mutex){+.+.}, at: [<ffffffffc083516a>] __ipoib_ib_dev_flush+0x2da/0x4e0 [ib_ipoib]
    [  140.970006]
    but task is already holding lock:
    [  140.975141]  (&priv->vlan_rwsem){++++}, at: [<ffffffffc0834ee1>] __ipoib_ib_dev_flush+0x51/0x4e0 [ib_ipoib]
    [  140.982105]
    which lock already depends on the new lock.
    [  140.990023]
    the existing dependency chain (in reverse order) is:
    [  140.998650]
    -> #1 (&priv->vlan_rwsem){++++}:
    [  141.005276]        down_read+0x4d/0xb0
    [  141.009560]        ipoib_open+0xad/0x120 [ib_ipoib]
    [  141.014400]        __dev_open+0xcb/0x140
    [  141.017919]        __dev_change_flags+0x1a4/0x1e0
    [  141.022133]        dev_change_flags+0x23/0x60
    [  141.025695]        devinet_ioctl+0x704/0x7d0
    [  141.029156]        sock_do_ioctl+0x20/0x50
    [  141.032526]        sock_ioctl+0x221/0x300
    [  141.036079]        do_vfs_ioctl+0xa6/0x6d0
    [  141.039656]        SyS_ioctl+0x74/0x80
    [  141.042811]        entry_SYSCALL_64_fastpath+0x1f/0x96
    [  141.046891]
    -> #0 (rtnl_mutex){+.+.}:
    [  141.051701]        lock_acquire+0xd4/0x220
    [  141.055212]        __mutex_lock+0x88/0x970
    [  141.058631]        __ipoib_ib_dev_flush+0x2da/0x4e0 [ib_ipoib]
    [  141.063160]        __ipoib_ib_dev_flush+0x71/0x4e0 [ib_ipoib]
    [  141.067648]        process_one_work+0x1f5/0x610
    [  141.071429]        worker_thread+0x4a/0x3f0
    [  141.074890]        kthread+0x141/0x180
    [  141.078085]        ret_from_fork+0x24/0x30
    [  141.081559]
    
    other info that might help us debug this:
    [  141.088967]  Possible unsafe locking scenario:
    [  141.094280]        CPU0                    CPU1
    [  141.097953]        ----                    ----
    [  141.101640]   lock(&priv->vlan_rwsem);
    [  141.104771]                                lock(rtnl_mutex);
    [  141.109207]                                lock(&priv->vlan_rwsem);
    [  141.114032]   lock(rtnl_mutex);
    [  141.116800]
     *** DEADLOCK ***
    
    Fixes: b4b678b06f6e ("IB/ipoib: Grab rtnl lock on heavy flush when calling ndo_open/stop")
    Signed-off-by: Alex Vesker <valex@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 02ef1dd301c2f1ca0ffe58f75bf2f0f4bd291270 ......
	 orig commit -> c0b64f58e8d49570aa9ee55d880f92c20ff0166b ......
checking 9fc290e529b4948b2b18fa943d8bd5c3a5d5b6e1 ......
	 orig commit -> 1c3aea2bc8f0b2e5b57375ead40457ff75a3a2ec ......
checking f7af60377ec05e2452a73c349b4fa2a4196480c8 ......
	 orig commit -> dd6b9c2c332b40f142740d1b11fb77c653ff98ea ......
checking d9490e7ca55bafac97fa65a3d34244386469eb50 ......
	 orig commit -> abdc0eb06964fe1d2fea6dd1391b734d0590365d ......
checking 42364042b7dd4ba7fed36c1db0a157c7c48282ca ......
	 orig commit -> 8f66b1a529047a972cb9602a919c53a95f3d7a2b ......
checking 46788d19e137fc48d93f0a29eade2e02e05317f6 ......
	 orig commit -> 385f4d7f946b08f36f68b0a28e95a319925b6b62 ......
checking 339aba679813ff1fabde362147919d3f6e536568 ......
	 orig commit -> 07719ff767dcd8cc42050f185d332052f3816546 ......
checking b197f67ccfeb86d180a152796b5e3b7de1f611ef ......
	 orig commit -> 3e351275655d3c84dc28abf170def9786db5176d ......
checking dd2581c675e4311abc68826c25ec2563bccb3337 ......
	 orig commit -> 658e9a6dc1126f21fa417cd213e1cdbff8be0ba2 ......
checking 47b5dbdd983e0319cd5d135bbfe7e564f4bbaabc ......
	 orig commit -> 623401ee33e42cee64d333877892be8db02951eb ......
checking fc8f4ca137d9525b6f7db4b1d3e8f07a087518ec ......
	 orig commit -> 30c516d750396c5f3ec9cb04c9e025c25e91495e ......
checking c97e41076a298dbc4e910c33048e553658388eed ......
	 orig commit -> c0a32fe13cd323ca9420500b16fd69589c9ba91e ......
checking f2d81d0f030afc7a873bb3454eaf59f384543baf ......
	 orig commit -> 08880f8e08cbd814e870e9d3ab9530abc1bce226 ......
checking f898f36664a5d64a55c1257e55dfacaae6a86bb7 ......
	 orig commit -> 2bf9806d4228f7a6195f8e03eda0479d2a93b411 ......
checking f18b2039d904f344dae779451592814e2c646686 ......
	 orig commit -> d0a2f454713a42447ee4007582c0e43c47bcf230 ......
checking 4e2836b43102633dc9bffbc170be43e1d147914c ......
	 orig commit -> 42c8eb3f6e15367981b274cb79ee4657e2c6949d ......
checking b57259ca055f7f2c7237dcc0e5aac446b2fa6da9 ......
	 orig commit -> 99260132fde7bddc6e0132ce53da94d1c9ccabcb ......
checking 9cb27c88b080274e5f94ae7a7c4da7275925ab33 ......
	 orig commit -> 39baf10310e6669564a485b55267fae70a4e44ae ......
checking 84607a2958762c94741fc96e947e6a134cd5f5c3 ......
	 orig commit -> 909cf3e16a5274fe2127cf3cea5c8dba77b2c412 ......
checking 8151940acc356ba61e0992f464fca38118860c31 ......
	 orig commit -> 235b6003fb28f0dd8e7ed8fbdb088bb548291766 ......
checking 57db94d4b72479c6c1e31d18e83a581d5d6d0ee9 ......
	 orig commit -> 1c363531dd814dc4fe10865722bf6b0f72ce4673 ......
checking 4684da79d20edf232e33442775506e600fc4fe6f ......
	 orig commit -> 0a3ff78699d1817e711441715d22665475466036 ......
checking 93fc8284472124140a7946c4e5f555e06808f4a2 ......
	 orig commit -> c79dde629d2027ca80329c62854a7635e623d527 ......
checking b53af57679492180417d584be410b1134de15cd2 ......
	 orig commit -> 575b3a2cb439b03fd603ea77c73c76f3ed237596 ......
checking fdfcb06c5944afb78007cfc25e527ff689b2a344 ......
	 orig commit -> 164a5e7ad531e181334a3d3f03d0d5ad20d6faea ......
checking 48185ffb6dc3eb64846039117d76148d3e3d7022 ......
	 orig commit -> fb2c1934f30577756e55e24e8870b45c78da3bc2 ......
checking 9cd01922985ce5c00cf050f12daef304cc452761 ......
	 orig commit -> 402e172a2ce76210f2fe921cf419d12103851344 ......
checking 8ee1eada4f1a6671517dc51f6bc11174faebea02 ......
	 orig commit -> 05c14c03138532a3cb2aa29c2960445c8753343b ......
checking b59dc14b0b102d42d6bd54ae77848ddc00a4596c ......
	 orig commit -> dee7d0f3b200c67c6ee96bd37c6e8fa52690ab56 ......
checking 669ff2a9aa71edea93a0b74c1273080cad68dfb7 ......
	 orig commit -> b9077428ec5569aacb2952d8a2ffb51c8988d3c2 ......
checking 122e18d27d77031b909a06f110f6da225502d033 ......
	 orig commit -> 564883bb4dc1a4f3cba6344e77743175694b0761 ......
checking 9409e1c775f35b2571be427cde272ce80cdc19e7 ......
	 orig commit -> 66b447301ac710ee237dba8b653244018fbb6168 ......
checking aeb01451f9e2d3e9b2ac2ad30426c68957c307ed ......
	 orig commit -> 362741a21a5c4b9ee31e75ce28d63c6d238a745c ......
checking 8268e93b2b879912ae84952acef17e4c78f3b66d ......
	 orig commit -> dfb2e6f46b3074eb85203d8f0888b71ec1c2e37a ......
checking 7a7797199d9b96989ab5f30eadad077a8dc7c970 ......
	 orig commit -> 55ca38b4255bb336c2d35990bdb2b368e19b435a ......
checking b61aba91eb72efc5117d24d3f4455dcaf67f1e63 ......
	 orig commit -> 6ba0fbc35aa9f3bc8c12be3b4047055c9ce2ac92 ......
checking 96ed7ca7323be977d617d077146b322e844bdcb9 ......
	 orig commit -> 16b6c8bb687cc3bec914de09061fcb8411951fda ......
checking 18c8d94eac0fd6c859033b2eb05941f19c3f7b4a ......
	 orig commit -> 35fb2a88ed4b77356fa679a8525c869a3594e287 ......
checking 9d48d002a2f68e35bea2872a5533436848f30a60 ......
	 orig commit -> 7036d26f328f12a323069eb16d965055b4cb3795 ......
checking 1d9205558e50b7af5fe5b054bf26f93c9255786e ......
	 orig commit -> 3a46f34d20d453f09defb76b11a567647939c0aa ......
checking 0949f8afa8f1b9d6ebce48606e41dfcdafbaca4a ......
	 orig commit -> a17dcf3f0124698d1120da71574bf4c339e5a368 ......
checking 68a6765b70d90debde63bd26599c3422116751ef ......
	 orig commit -> 3c91b0c1de8d013490bbc41ce9ee8810ea5baddd ......
checking 4be2d1ad59d0d9251bd1fc618a6d1266b16e3b75 ......
	 orig commit -> 5e422f5e4fd71d18bc6b851eeb3864477b3d842e ......
checking 61bc71d34a00801657591e142f374794b6dc3548 ......
	 orig commit -> ed438b476b611c67089760037139f93ea8ed41d5 ......
checking 742b570da6e6447e4a98acceb27e8a7d5b436d7c ......
	 orig commit -> 9f2a4505800607e537e9dd9dea4f55c4b0c30c7a ......
checking ff62605e0d79c870f679bcd8571bf9cb5f7e1c93 ......
	 orig commit -> 4dc12ffeaeac939097a3f55c881d3dc3523dff0c ......
checking 4edcbfc5651276a28a1501e03198f6f16974617c ......
	 orig commit -> 2dd4122854f697afc777582d18548dded03ce5dd ......
checking 21cd9fe750941100b7b4643ffd765215b6daff64 ......
	 orig commit -> 163ca80013aafb6dc9cb295de3db7aeab9ab43f8 ......
checking 6bd7a9bc48ac642cb3ded1e40fcfee44c8a0aa1a ......
	 orig commit -> aa28667cfbe4ff6f14454dda210b1f2e485f99b5 ......
checking 06f430379273700696eef22159117789853a38e3 ......
	 orig commit -> 6dfca831c03ef654b1f7bff1b8d487d330e9f76b ......
checking c0f98c0dbced1c1b48fd4427075f8a5295b402fb ......
	 orig commit -> 858ff38af77fc660092e82474ecc6ac135ed29fe ......
checking a54d17dba2ba4a1eaab65fd282f4b4c9bf80418b ......
	 orig commit -> e841ec956e539f4002f5e9fe9f9e904dcca12d5d ......
checking 000a335b2d3828382bb4612ceee176a5cbd05752 ......
	 orig commit -> 05521bd3d117704a1458eb4d0c3ae821858658f2 ......
checking bca4d7e1a19cfdde2a4a340339e46248a691b196 ......
	 orig commit -> e9931f984dd1e80adb3b5e095ef175fe383bc92d ......
checking c97df8e004de63e50384706d00adb590adcef054 ......
	 orig commit -> 9ca2e97fa3c3216200afe35a3b111ec51cc796d2 ......
checking 864a5fb1c6066ade93a640a279bcd191952e4181 ......
	 orig commit -> 3993b112dac968612b0b213ed59cb30f50b0015b ......
checking da76a65a011490a0b0bd9f50d872f26e629d1eed ......
	 orig commit -> 0af2c4bf5a012a40a2f9230458087d7f068339d0 ......
checking 9e87c49d62f4c5b9ae4a56b8f62865c4712c8d4d ......
	 orig commit -> 9417ebc8a676487c6ec8825f92fb28f7dbeb5f4b ......
checking 4bcbfac98d517eae6d12257aed923347be16930c ......
	 orig commit -> 102ed2c5ff932439bbbe74c7bd63e6d5baa9f732 ......
checking 7bd6bf08dd5b30dbe0696a7387dedc65a5f9a3e6 ......
	 orig commit -> fd9dde6abcb9bfe6c6bee48834e157999f113971 ......
checking e508e6026b198b9879e0d1850fdef8ef1d4d0805 ......
	 orig commit -> 0338b1b393ec7910898e8f7b25b3bf31a7282e16 ......
checking 7d1beb462e18b55fa5d0990d0f60fbf4edfda61b ......
	 orig commit -> 00f9203119dd2774564407c7a67b17d81916298b ......
checking d5860344c243308c0d5e9751553d52d957b29e5b ......
	 orig commit -> c157313791a999646901b3e3c6888514ebc36d62 ......
checking c9973b3d35267028edf8b9a4df6310161bd0ef37 ......
	 orig commit -> 330a4db89d39a6b43f36da16824eaa7a7509d34d ......
checking 81309f8b9b69913233733ed61c4c87dab5436902 ......
	 orig commit -> 2394facb17bcace4b3c19b50202177a5d8903b64 ......
checking 7291d99ebc67be887e5c915489706e6fe720992a ......
	 orig commit -> b3168c87c0492661badc3e908f977d79e7738a41 ......
checking 1678bb970113e62469ca510bff20eb95bbdeaec2 ......
	 orig commit -> cc555b09d8c3817aeebda43a14ab67049a5653f7 ......
checking aa902be00448f3bc69fd54b1a0a8f5b4b6a47c5b ......
	 orig commit -> e33d7c56450b0a5c7290cbf9e1581fab5174f552 ......
checking 95e8d653ea987adfe108173bd5969201a363bf19 ......
	 orig commit -> 846df244ebefbc9f7b91e9ae7a5e5a2e69fb4772 ......
checking 85d63b76bdd1b570b9c16e60f83eb3185e22b30d ......
	 orig commit -> 80068c93688f6143100859c4856f895801c1a1d9 ......
checking 5642562d0b4f616cac2b4d7f81de0a58f2247b59 ......
	 orig commit -> 07209fcf33542c1ff1e29df2dbdf8f29cdaacb10 ......
checking 556787a174e6f77c7aec167af846f1297e3860f8 ......
	 orig commit -> 21781e87881f9c420871b1d1f3f29d4cd7bffb10 ......
checking f7ee900a4f2c76902ce368e93d34b7580cc7ff04 ......
	 orig commit -> f02b2320b27c16b644691267ee3b5c110846f49e ......
checking 3d213c4c0a9b0d8fb0958d4a461868525ee6d864 ......
	 orig commit -> 54eff2264d3e9fd7e3987de1d7eba1d3581c631e ......
checking a23c8c70b5ece8d18c49927a0bace4471d8563cb ......
	 orig commit -> 22ef01a203d27fee8b7694020b7e722db7efd2a7 ......
checking 85dcb3c850a79751b2239f434a4b6b36a75a865e ......
	 orig commit -> 5e3d02bbafad38975099b5848f5ebadedcf7bb7e ......
checking 6facfe25e62e702304591bd114bcf7d6067c86e4 ......
	 orig commit -> d2a3671ebe6479483a12f94fcca63c058d95ad64 ......
checking d9e497c9424896581b18f0807652364180401c7b ......
	 orig commit -> 9917fbcfa20ab987d6381fd0365665e5c1402d75 ......
checking de0bbe07a49ce9bf5bc4fc1846bd453151e7a334 ......
	 orig commit -> c68ee58d9ee7b856ac722f18f4f26579c8fbd2b4 ......
checking 27731e18a571b07c4042d83679184c78957bac1a ......
	 orig commit -> edc5a8e754aba9c6eaeddd18cb1e72462f99b16c ......
checking 3c38ce8767c6203bf3d479a570ece2a38502ac6b ......
	 orig commit -> c955bf3998efa3355790a4d8c82874582f1bc727 ......
checking 3c5fed838b473e565e44ada69ff51e07317e2c8a ......
	 orig commit -> 4004a9870bbefdb6644c3d2033f5315920a3b669 ......
checking 7018a57cf7018dca6469d73b485d4a35cea97649 ......
	 orig commit -> ae064e6123f89f90af7e4ea190cc0c612643ca93 ......
checking 62785073959347a14eecb395e810a97e745996f2 ......
	 orig commit -> 2b39cabb2a283cea0c3d96d9370575371726164f ......
checking f58a90e027d8ff3f24e20429500f0923663afbd4 ......
	 orig commit -> 592e254502041f953e84d091eae2c68cba04c10b ......
checking 6479a108b35857674ca2a74e049e3089d12ee444 ......
	 orig commit -> 7aacbfcb331ceff3ac43096d563a1f93ed46e35e ......
checking ade07fa32f5ab083d558199e906d612b5d535553 ......
	 orig commit -> c7f5828bf77dcbd61d51f4736c1d5aa35663fbb4 ......
checking 79f41e0f8ae0e3298bfcfd8c085b5242add83e9b ......
	 orig commit -> 350976ae21873b0d36584ea005076356431b8f79 ......
checking 07a93b48a0f73e0cb74355a7dd80c6ad55bed674 ......
	 orig commit -> b92b4fb5c14257c0e7eae291ecc1f7b1962e1699 ......
checking ddf2588a05c820b305bc6db2fe6e498a3bc6fde9 ......
	 orig commit -> 39b4954c0a1556f8f7f1fdcf59a227117fcd8a0b ......
checking f6a341e87c656f1e2e9959cfdd2d02561724558f ......
	 orig commit -> 594e25e73440863981032d76c9b1e33409ceff6e ......
checking 23d3f106f88ca21fd2911ae2f3a4f8aa7b56fddc ......
	 orig commit -> 24528f089d0a444070aa4f715ace537e8d6bf168 ......
	 orig commit -> d2843c173ee53cf4c12e7dfedc069a5bc76f0ac5 ......
checking e389507ad355226019147985c29a5b4282aa1e4d ......
	 orig commit -> 12d5a43b2dffb6cd28062b4e19024f7982393288 ......
checking 68d702c6689d83000060118f940e0adce88e42aa ......
	 orig commit -> cfe2b621bb18d86e93271febf8c6e37622da2d14 ......
checking 96d275b841efc6decf61afafc1703f0e9b92253d ......
	 orig commit -> 6eaf69e4ec075f5af236c0c89f75639a195db904 ......
checking c90db58f5bb6d5ba203815e28cb5e7eb20b86b27 ......
	 orig commit -> 6cc8cbbc8868033f279b63e98b26b75eaa0006ab ......
checking f8b31d88a698909f0bcc4142e4637e2baee5c320 ......
	 orig commit -> b8f89fea599d91e674497aad572613eb63181f31 ......
checking 0fe5286e49d4e1fe7eba347302b3d3dee217eade ......
	 orig commit -> 6b148a7ce72a7f87c81cbcde48af014abc0516a9 ......
checking 2637cb1e3d8086cd31a96e60c3e7e0aa74c043f4 ......
	 orig commit -> 71e24d7731a2903b1ae2bba2b2971c654d9c2aa6 ......
checking d815f4efbb2a04e57632fc4daa6ebaf5fca52123 ......
	 orig commit -> c5504f724c86ee925e7ffb80aa342cfd57959b13 ......
checking c4e7af283374329a6eca97dfa782d710417f3e19 ......
	 orig commit -> a2e373438f72391493a4425efc1b82030b6b4fd5 ......
checking 837da470dc16168a4ea75989b0f902efe795dda4 ......
	 orig commit -> 395df08d2e1de238a9c8c33fdcd0e2160efd63a9 ......
checking fe1c1819b4340f53ac2da07991c810fceaf06bba ......
	 orig commit -> a20c7f36bd3d20d245616ae223bb9d05dfb6f050 ......
		 a20c7f36bd3d20d245616ae223bb9d05dfb6f050 has problem. Fixes commit -> fc110ebdd014dd1368c98e7685b47789c31fab42
c2deae44616dab0112d965a0dc72d053b5727b4b
commit 91e019af29cd79e300135f8103338f027cfc27af
Author: Koen Vandeputte <koen.vandeputte@ncentric.com>
Date:   Wed Mar 7 10:46:39 2018 -0600

    PCI: dwc: Fix enumeration end when reaching root subordinate
    
    commit fc110ebdd014dd1368c98e7685b47789c31fab42 upstream.
    
    The subordinate value indicates the highest bus number which can be
    reached downstream though a certain device.
    
    Commit a20c7f36bd3d ("PCI: Do not allocate more buses than available in
    parent") ensures that downstream devices cannot assign busnumbers higher
    than the upstream device subordinate number, which was indeed illogical.
    
    By default, dw_pcie_setup_rc() inits the Root Complex subordinate to a
    value of 0x01.
    
    Due to this combined with above commit, enumeration stops digging deeper
    downstream as soon as bus num 0x01 has been assigned, which is always the
    case for a bridge device.
    
    This results in all devices behind a bridge bus remaining undetected, as
    these would be connected to bus 0x02 or higher.
    
    Fix this by initializing the RC to a subordinate value of 0xff, which is
    not altering hardware behaviour in any way, but informs probing function
    pci_scan_bridge() later on which reads this value back from register.
    
    The following nasty errors during boot are also fixed by this:
    
      pci_bus 0000:02: busn_res: can not insert [bus 02-ff] under [bus 01] (conflicts with (null) [bus 01])
      ...
      pci_bus 0000:03: [bus 03] partially hidden behind bridge 0000:01 [bus 01]
      ...
      pci_bus 0000:04: [bus 04] partially hidden behind bridge 0000:01 [bus 01]
      ...
      pci_bus 0000:05: [bus 05] partially hidden behind bridge 0000:01 [bus 01]
      pci_bus 0000:02: busn_res: [bus 02-ff] end is updated to 05
      pci_bus 0000:02: busn_res: can not insert [bus 02-05] under [bus 01] (conflicts with (null) [bus 01])
      pci_bus 0000:02: [bus 02-05] partially hidden behind bridge 0000:01 [bus 01]
    
    Fixes: a20c7f36bd3d ("PCI: Do not allocate more buses than available in
    parent")
    Tested-by: Niklas Cassel <niklas.cassel@axis.com>
    Tested-by: Fabio Estevam <fabio.estevam@nxp.com>
    Tested-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Signed-off-by: Koen Vandeputte <koen.vandeputte@ncentric.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Lucas Stach <l.stach@pengutronix.de>
    Cc: stable@vger.kernel.org      # v4.15+
    Cc: Binghui Wang <wangbinghui@hisilicon.com>
    Cc: Jesper Nilsson <jesper.nilsson@axis.com>
    Cc: Jianguo Sun <sunjianguo1@huawei.com>
    Cc: Jingoo Han <jingoohan1@gmail.com>
    Cc: Kishon Vijay Abraham I <kishon@ti.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: Mika Westerberg <mika.westerberg@linux.intel.com>
    Cc: Minghuan Lian <minghuan.Lian@freescale.com>
    Cc: Mingkai Hu <mingkai.hu@freescale.com>
    Cc: Murali Karicheri <m-karicheri2@ti.com>
    Cc: Pratyush Anand <pratyush.anand@gmail.com>
    Cc: Richard Zhu <hongxing.zhu@nxp.com>
    Cc: Roy Zang <tie-fei.zang@freescale.com>
    Cc: Shawn Guo <shawn.guo@linaro.org>
    Cc: Stanimir Varbanov <svarbanov@mm-sol.com>
    Cc: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Cc: Xiaowei Song <songxiaowei@hisilicon.com>
    Cc: Zhou Wang <wangzhou1@hisilicon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f9565e1e078329da7c92dd6812685bf8a2dd9b8e ......
	 orig commit -> cd77b5ce208c153260ed7882d8910f2395bfaabd ......
		 cd77b5ce208c153260ed7882d8910f2395bfaabd has problem. Fixes commit -> 349524bc0da698ec77f2057cf4a4948eb6349265
commit 92ce74164efa1e2b8b2232a1c7b562126188beb0
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Wed Jan 10 17:10:12 2018 +1100

    powerpc: Don't preempt_disable() in show_cpuinfo()
    
    commit 349524bc0da698ec77f2057cf4a4948eb6349265 upstream.
    
    This causes warnings from cpufreq mutex code. This is also rather
    unnecessary and ineffective. If we really want to prevent concurrent
    unplug, we could take the unplug read lock but I don't see this being
    critical.
    
    Fixes: cd77b5ce208c ("powerpc/powernv/cpufreq: Fix the frequency read by /proc/cpuinfo")
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Acked-by: Michal Suchanek <msuchanek@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 27a12c783e700be095c39abe2749a20c3ab8ea11 ......
	 orig commit -> 3ad3f8ce50914288731a3018b27ee44ab803e170 ......
checking 540236e28f32749f5d1711020fbcab5be3afbf7f ......
	 orig commit -> d86fd113ebbb37726ef7c7cc6fd6d5ce377455d6 ......
checking ac6864737c0240499f1cd0689cd61b2bad6e04c8 ......
	 orig commit -> 288e7560e4d3e259aa28f8f58a8dfe63627a1bf6 ......
checking b1d0ddc83e3cb2b9e5641ee52f235fcf463fd1d8 ......
	 orig commit -> f8e066521192c7debe59127d90abbe2773577e25 ......
checking 32f733a8f470bf37b77da08d60868aace87f78f7 ......
	 orig commit -> 95b982b45122c57da2ee0b46cce70775e1d987af ......
checking c4760b9c8d06f541d37784afb3bbeaf895346b9b ......
	 orig commit -> dce1e131dd4dc68099ff1b70aa03cd2d0acf8639 ......
checking 73e31f2af17843c640fd7e0c8d73f13773dd1777 ......
	 orig commit -> 820f188659122602ab217dd80cfa32b3ac0c55c0 ......
		 820f188659122602ab217dd80cfa32b3ac0c55c0 has problem. Fixes commit -> d18539754d97876503275efc7d00a1901bb0cfad
commit c750773f3942863a37e7415934a646a0da7b1040
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Nov 28 14:25:25 2017 +0100

    scsi: aacraid: address UBSAN warning regression
    
    [ Upstream commit d18539754d97876503275efc7d00a1901bb0cfad ]
    
    As reported by Meelis Roos, my previous patch causes an incorrect
    calculation of the timeout, through an undefined signed integer
    overflow:
    
    [   12.228155] UBSAN: Undefined behaviour in drivers/scsi/aacraid/commsup.c:2514:49
    [   12.228229] signed integer overflow:
    [   12.228283] 964297611 * 250 cannot be represented in type 'long int'
    
    The problem is that doing a multiplication with HZ first and then
    dividing by USEC_PER_SEC worked correctly for 32-bit microseconds,
    but not for 32-bit nanoseconds, which would require up to 41 bits.
    
    This reworks the calculation to first convert the nanoseconds into
    jiffies, which should give us the same result as before and not overflow.
    
    Unfortunately I did not understand the exact intention of the algorithm,
    in particular the part where we add half a second, so it's possible that
    there is still a preexisting problem in this function. I added a comment
    that this would be handled more nicely using usleep_range(), which
    generally works better for waking up at a particular time than the
    current schedule_timeout() based implementation. I did not feel
    comfortable trying to implement that without being sure what the
    intent is here though.
    
    Fixes: 820f18865912 ("scsi: aacraid: use timespec64 instead of timeval")
    Tested-by: Meelis Roos <mroos@linux.ee>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 28461320cc952e8a971ec415743ae97120937fbd ......
	 orig commit -> a3350f9c57ffad569c40f7320b89da1f3061c5bb ......
checking d6f59ef5b840c5815430d63bb08e8dcbd9e2a132 ......
	 orig commit -> 8cae353e6b01ac3f18097f631cdbceb5ff28c7f3 ......
checking df235d2ee36e70a43b122c0eb34064794ef4464c ......
	 orig commit -> 451f130602619a17c8883dd0b71b11624faffd51 ......
checking 456279d0e3ad7cb3b6b90aeb07c189c7f8590ab0 ......
	 orig commit -> c98769475575c8a585f5b3952f4b5f90266f699b ......
checking f9a40df232448539f6586f9a0c72ca89fd694fbe ......
	 orig commit -> ac831a379d34109451b3c41a44a20ee10ecb615f ......
checking 71307dd192e7ac012894dfebd9c47cb5afc0611b ......
	 orig commit -> cbad52e92ad7f01f0be4ca58bde59462dc1afe3a ......
checking dba1ca0e9a6fc57703eaa3c8d7293b8efc72c2af ......
	 orig commit -> 7da85fbf1c87d4f73621e0e7666a3387497075a9 ......
checking b3e3728ed55b9ddd7b1600ebad11f16aa665dfcb ......
	 orig commit -> 108809a0571cd1e1b317c5c083a371e163e1f8f9 ......
checking 38620054ea18edb165451bf24367f212960ff344 ......
	 orig commit -> 9d5afec6b8bd46d6ed821aa1579634437f58ef1f ......
checking 0228af23dd6962c16682d85fdf1bab6bbf77a007 ......
	 orig commit -> 996fc4477a0ea28226b30d175f053fb6f9a4fa36 ......
checking 4ff7da066d64e5083ef886203ba3a0623343c632 ......
	 orig commit -> c894aa97577e47d3066b27b32499ecf899bfa8b0 ......
checking ae0bba6b38110e8b57b92aa820df8f78d3965fe6 ......
	 orig commit -> fc82228a5e3860502dbf3bfa4a9570cb7093cf7f ......
checking 2dea756b487547788c1f28439fbc3df270e6bf30 ......
	 orig commit -> 779f4e1c6c7c661db40dfebd6dd6bda7b5f88aa3 ......
checking 0aa5d007ba673bc35378422b0c2b2b797da69424 ......
	 orig commit -> 6f6a23a213be51728502b88741ba6a10cda2441d ......
		 6f6a23a213be51728502b88741ba6a10cda2441d has problem. Fixes commit -> 66b3bd2356e0a1531c71a3dcf96944621e25c17c
commit 69373cdc4ae4eacac2eb19da03eb0ad2bb0eda7f
Author: Yang Shunyong <shunyong.yang@hxt-semitech.com>
Date:   Mon Jan 29 14:40:11 2018 +0800

    dmaengine: dmatest: fix container_of member in dmatest_callback
    
    commit 66b3bd2356e0a1531c71a3dcf96944621e25c17c upstream.
    
    The type of arg passed to dmatest_callback is struct dmatest_done.
    It refers to test_done in struct dmatest_thread, not done_wait.
    
    Fixes: 6f6a23a213be ("dmaengine: dmatest: move callback wait ...")
    Signed-off-by: Yang Shunyong <shunyong.yang@hxt-semitech.com>
    Acked-by: Adam Wallis <awallis@codeaurora.org>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3df23f7ce7255d1ef2a616071cac359a245fb6de ......
	 orig commit -> cef31d9af908243421258f1df35a4a644604efbe ......
checking 6e46e964e2978f64f30b89be2423093b43e77466 ......
	 orig commit -> 7f6d2ecd3d7acaf205ea7b3e96f9ffc55b92298b ......
checking e48a17d115f84048294ae366ff6e9dd7c8c6cca4 ......
	 orig commit -> 6d7e0ba2d2be9e50cccba213baf07e0e183c1b24 ......
checking 1bd2b3061273f1bd7d691e3ea5c15e1f57f8ab6d ......
	 orig commit -> 08529078d8d9adf689bf39cc38d53979a0869970 ......
checking 2d8262155ab3d20219ca5815f65573592d717c3a ......
	 orig commit -> c058ecf6e455fac7346d46197a02398ead90851f ......
checking 7dd1362247ebfe06ab1f58d7fee739c5f773a0ac ......
	 orig commit -> 90d91b0cd371193d9dbfa9beacab8ab9a4cb75e0 ......
checking fbce429b410cc443ec3fa3293a0e4e5804ae4f2d ......
	 orig commit -> 7e6358d244e4706fe612a77b9c36519a33600ac0 ......
		 7e6358d244e4706fe612a77b9c36519a33600ac0 has problem. Fixes commit -> c7cd55504a5b0fc826a2cd9540845979d24ae542
commit 6c8faa19e9cc5fc0010737a2de38ad6b477bea30
Author: Shenghui Wang <shhuiw@foxmail.com>
Date:   Sun Oct 7 14:45:41 2018 +0800

    dm cache: destroy migration_cache if cache target registration failed
    
    commit c7cd55504a5b0fc826a2cd9540845979d24ae542 upstream.
    
    Commit 7e6358d244e47 ("dm: fix various targets to dm_register_target
    after module __init resources created") inadvertently introduced this
    bug when it moved dm_register_target() after the call to KMEM_CACHE().
    
    Fixes: 7e6358d244e47 ("dm: fix various targets to dm_register_target after module __init resources created")
    Cc: stable@vger.kernel.org
    Signed-off-by: Shenghui Wang <shhuiw@foxmail.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 282e4b259d4f9429f7813efc8076dd601ed59f45 ......
	 orig commit -> f73c52a5bcd1710994e53fbccc378c42b97a06b6 ......
checking c2f79ce3fe441486b3ab3dfce0f7bf49bd07dc3c ......
	 orig commit -> 621f6401fdeefe96dfe9eab4b167c7c39f552bb0 ......
checking 39c4330c9779d0acc213a0ace72b88a7b7a06012 ......
	 orig commit -> 14e3062fb18532175af4d1c4073597999f7a2248 ......
checking 9854611cf5e604773fecfa75bfafc03621df508c ......
	 orig commit -> 1d08a044cf12aee37dfd54837558e3295287b343 ......
checking cdcfd13a66eb53fd96dc480de79c423aa0de9d39 ......
	 orig commit -> f24e5834a2c3f6c5f814a417f858226f0a010ade ......
checking db9d4784eb5ba8c69ea6b1a7b7c7c7af0b6bdf4d ......
	 orig commit -> 8781bcbc5e69d7da69e84c7044ca0284848d5d01 ......
checking 268b2cc325061c60fa2dccfa4d61495e9306c4fa ......
	 orig commit -> dc4fd9ab01ab379ae5af522b3efd4187a7c30a31 ......
		 dc4fd9ab01ab379ae5af522b3efd4187a7c30a31 has problem. Fixes commit -> c4f24df942a181699c5bab01b8e5e82b925f77f3
commit 7b7574e9b2095b191713dabe28d7b9291cdf6257
Author: Trond Myklebust <trond.myklebust@primarydata.com>
Date:   Wed Mar 7 15:22:31 2018 -0500

    NFS: Fix unstable write completion
    
    commit c4f24df942a181699c5bab01b8e5e82b925f77f3 upstream.
    
    We do want to respect the FLUSH_SYNC argument to nfs_commit_inode() to
    ensure that all outstanding COMMIT requests to the inode in question are
    complete. Currently we may exit early from both nfs_commit_inode() and
    nfs_write_inode() even if there are COMMIT requests in flight, or unstable
    writes on the commit list.
    
    In order to get the right semantics w.r.t. sync_inode(), we don't need
    to have nfs_commit_inode() reset the inode dirty flags when called from
    nfs_wb_page() and/or nfs_wb_all(). We just need to ensure that
    nfs_write_inode() leaves them in the right state if there are outstanding
    commits, or stable pages.
    
    Reported-by: Scott Mayhew <smayhew@redhat.com>
    Fixes: dc4fd9ab01ab ("nfs: don't wait on commit in nfs_commit_inode()...")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 74b6274f8c5e81d7243ca2dea4f80c8585b3d0e0 ......
	 orig commit -> 0fbe8f575b15585eec3326e43708fbbc024e8486 ......
checking 4995bfa99096410af00aa0b1b374005494c709f3 ......
	 orig commit -> 4cae8ff136782d77b108cb3a5ba53e60597ba3a6 ......
checking 2b3ff282dff3a42a081bef0f8249a99f64d7669f ......
	 orig commit -> 5d9b70f7d52eb14bb37861c663bae44de9521c35 ......
checking 912fe79116f2456a00cf4a9b2ad3ef207ba3e162 ......
	 orig commit -> 72b663a99c074a8d073e7ecdae446cfb024ef551 ......
checking eae219a2fc5554d86b9ac4d31bef73c273e926c0 ......
	 orig commit -> 040d786032bf59002d374b86d75b04d97624005c ......
checking 318cea7d8d801cfa70f5b3a3a991425cd502b574 ......
	 orig commit -> 91516a2a4734614d62ee3ed921f8f88acc67c000 ......
checking d78a5506cf0ea112124c1ffa5c0aae09b579d96d ......
	 orig commit -> be6123df1ea8f01ee2f896a16c2b7be3e4557a5a ......
checking b6a2ad646c13bb9d1231bce5599cb3176ff33ca4 ......
	 orig commit -> 2f2d0088eb93db5c649d2a5e34a3800a8a935fc5 ......
checking 1621db059603e781f61a9bf33cba639b42faf0bc ......
	 orig commit -> c6688ef9f29762e65bce325ef4acd6c675806366 ......
		 c6688ef9f29762e65bce325ef4acd6c675806366 has problem. Fixes commit -> c409ca3be3c6ff3a1eeb303b191184e80d412862
commit e390de579b0b75125a8a5fdf02b396a0ba71e898
Author: Malte Leip <malte@leip.net>
Date:   Sun Apr 14 12:00:12 2019 +0200

    usb: usbip: fix isoc packet num validation in get_pipe
    
    commit c409ca3be3c6ff3a1eeb303b191184e80d412862 upstream.
    
    Change the validation of number_of_packets in get_pipe to compare the
    number of packets to a fixed maximum number of packets allowed, set to
    be 1024. This number was chosen due to it being used by other drivers as
    well, for example drivers/usb/host/uhci-q.c
    
    Background/reason:
    The get_pipe function in stub_rx.c validates the number of packets in
    isochronous mode and aborts with an error if that number is too large,
    in order to prevent malicious input from possibly triggering large
    memory allocations. This was previously done by checking whether
    pdu->u.cmd_submit.number_of_packets is bigger than the number of packets
    that would be needed for pdu->u.cmd_submit.transfer_buffer_length bytes
    if all except possibly the last packet had maximum length, given by
    usb_endpoint_maxp(epd) *  usb_endpoint_maxp_mult(epd). This leads to an
    error if URBs with packets shorter than the maximum possible length are
    submitted, which is allowed according to
    Documentation/driver-api/usb/URB.rst and occurs for example with the
    snd-usb-audio driver.
    
    Fixes: c6688ef9f297 ("usbip: fix stub_rx: harden CMD_SUBMIT path to handle malicious input")
    Signed-off-by: Malte Leip <malte@leip.net>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 7120d742ad8d0f1fe37e4b73827e166fc1e01eea ......
	 orig commit -> 635f545a7e8be7596b9b2b6a43cab6bbd5a88e43 ......
checking cb6ee0f3c19980328529d5ed7a1650e41164ca49 ......
	 orig commit -> b02a16e6413a2f782e542ef60bad9ff6bf212f8a ......
checking 066f40dc495d5ab2ec9a871cb8703d9591d636c5 ......
	 orig commit -> 08d8f8a5b094b66b29936e8751b4a818b8db1207 ......
checking 4c5ae6a301a5415d1334f6c655bebf91d475bd89 ......
	 orig commit -> 48a4ff1c7bb5a32d2e396b03132d20d552c0eca7 ......
checking 6391294874d505a5e8681c41439a74e7019b267f ......
	 orig commit -> 62354454625741f0569c2cbe45b2d192f8fd258e ......
checking b8582c0f792fc1603a8998de60a156359f15dfd4 ......
	 orig commit -> 90e406f96f630c07d631a021fd4af10aac913e77 ......
checking 55fe4698d80ecb553d015b5df96ccf9584cbc06b ......
	 orig commit -> 4837fe37adff1d159904f0c013471b1ecbcb455e ......
checking c5d9b78d530a45f0c226317764a7865f7911ab46 ......
	 orig commit -> bdcf0a423ea1c40bbb40e7ee483b50fc8aa3d758 ......
		 bdcf0a423ea1c40bbb40e7ee483b50fc8aa3d758 has problem. Fixes commit -> 1995266727fa8143897e89b55f5d3c79aa828420
commit 54e67ba7d20a5921cfe712cfe4bd773e75df10e0
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Mon Jan 22 20:11:06 2018 +0000

    nfsd: auth: Fix gid sorting when rootsquash enabled
    
    commit 1995266727fa8143897e89b55f5d3c79aa828420 upstream.
    
    Commit bdcf0a423ea1 ("kernel: make groups_sort calling a responsibility
    group_info allocators") appears to break nfsd rootsquash in a pretty
    major way.
    
    It adds a call to groups_sort() inside the loop that copies/squashes
    gids, which means the valid gids are sorted along with the following
    garbage.  The net result is that the highest numbered valid gids are
    replaced with any lower-valued garbage gids, possibly including 0.
    
    We should sort only once, after filling in all the gids.
    
    Fixes: bdcf0a423ea1 ("kernel: make groups_sort calling a responsibility ...")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Acked-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Wolfgang Walter <linux@stwm.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d3d2f01a6eaf6022167c94afba34b6d6722392c9 ......
	 orig commit -> 302ec300ef8a545a7fc7f667e5fd743b091c2eeb ......
checking c8def7a4185b8b1ec2b843af346977f00259414e ......
	 orig commit -> 146734b091430c80d80bb96b1139a96fb4bc830e ......
checking 6f3fc5f95975e101b198ecf223ad6f9f8994b191 ......
	 orig commit -> a821df3f1af72aa6a0d573eea94a7dd2613e9f4e ......
checking cf1048e46d4f301261d946e73add464fb95fd5a4 ......
	 orig commit -> 887207ed9e5812ed9239b6d07185a2d35dda91db ......
checking c68b31521d5fb7216cb1113130399afe65437c6c ......
	 orig commit -> ecaaab5649781c5a0effdaf298a925063020500e ......
checking 902ae89f841de0c8d2857919296923f6332e174f ......
	 orig commit -> af3ff8045bbf3e32f1a448542e73abb4c8ceb6f1 ......
checking 80dbdc5ae74d6167edf081f8865df06fb6615578 ......
	 orig commit -> d2890c3778b164fde587bc16583f3a1c87233ec5 ......
checking 96c2dfaebe1a8eba95d43732a1413c777469128c ......
	 orig commit -> b32a7dc8aef1882fbf983eb354837488cc9d54dc ......
checking 3d27b022022a88e189c0e9d63c4ac01af354735f ......
	 orig commit -> 18f77393796848e68909e65d692c1d1436f06e06 ......

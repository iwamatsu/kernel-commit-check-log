Check from v4.14.62 to v4.14.63
Commit count: 110
checking 9d5cd9f2a4d7eb445963cafd9872186a9a262077 ......
checking dc589e579782c75237018d60ab0ea05d420dffad ......
	 orig commit -> f8b64d08dde2714c62751d18ba77f4aeceb161d3 ......
checking b37de2cf27a7bc9ad51a72670d902ce71fc9da1e ......
	 orig commit -> 6c26fcd2abfe0a56bbd95271fce02df2896cfd24 ......
checking 7cefa38bfc5829dfdcc4ebf92f5db9e7e783f97b ......
	 orig commit -> 792adb90fa724ce07c0171cbc96b9215af4b1045 ......
checking 7bdbaba8e99782ace50e585549a54af3d079f80d ......
	 orig commit -> 269777aa530f3438ec1781586cdac0b5fe47b061 ......
checking 9428a6a0ea7bd965fd61b81e83811214654b78e2 ......
	 orig commit -> d0055f351e647f33f3b0329bff022213bf8aa085 ......
checking e456004eb77734e274e520c83ad9be76736e622c ......
	 orig commit -> 07d981ad4cf1e78361c6db1c28ee5ba105f96cc1 ......
checking 36f50a5cd27601ae304830f1dec250b4988002ce ......
	 orig commit -> e24f14b0ff985f3e09e573ba1134bfdf42987e05 ......
checking 06f412c63545b1dec8451f6eda007a2d40c08e58 ......
	 orig commit -> 1063711b57393c1999248cccb57bebfaf16739e7 ......
checking ce1eed46b7b7b8e2c8dc515dbb07968241a0208e ......
	 orig commit -> 958f79b9ee55dfaf00c8106ed1c22a2919e0028b ......
checking d4c1ad0615ff7fd078870791446745442f969798 ......
	 orig commit -> 0768f91530ff46683e0b372df14fd79fe8d156e5 ......
checking a5f284feeb2071f4a381fccf1c8c9b3e05b7a465 ......
	 orig commit -> f22cc87f6c1f771b57c407555cfefd811cdd9507 ......
		 f22cc87f6c1f771b57c407555cfefd811cdd9507 has problem. Fixes commit -> f19f5c49bbc3ffcc9126cc245fc1b24cc29f4a37
commit 3f2e4f5dd83478b41ee273a500477cbf20266d23
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Aug 17 10:27:36 2018 -0700

    x86/speculation/l1tf: Exempt zeroed PTEs from inversion
    
    commit f19f5c49bbc3ffcc9126cc245fc1b24cc29f4a37 upstream.
    
    It turns out that we should *not* invert all not-present mappings,
    because the all zeroes case is obviously special.
    
    clear_page() does not undergo the XOR logic to invert the address bits,
    i.e. PTE, PMD and PUD entries that have not been individually written
    will have val=0 and so will trigger __pte_needs_invert(). As a result,
    {pte,pmd,pud}_pfn() will return the wrong PFN value, i.e. all ones
    (adjusted by the max PFN mask) instead of zero. A zeroed entry is ok
    because the page at physical address 0 is reserved early in boot
    specifically to mitigate L1TF, so explicitly exempt them from the
    inversion when reading the PFN.
    
    Manifested as an unexpected mprotect(..., PROT_NONE) failure when called
    on a VMA that has VM_PFNMAP and was mmap'd to as something other than
    PROT_NONE but never used. mprotect() sends the PROT_NONE request down
    prot_none_walk(), which walks the PTEs to check the PFNs.
    prot_none_pte_entry() gets the bogus PFN from pte_pfn() and returns
    -EACCES because it thinks mprotect() is trying to adjust a high MMIO
    address.
    
    [ This is a very modified version of Sean's original patch, but all
      credit goes to Sean for doing this and also pointing out that
      sometimes the __pte_needs_invert() function only gets the protection
      bits, not the full eventual pte.  But zero remains special even in
      just protection bits, so that's ok.   - Linus ]
    
    Fixes: f22cc87f6c1f ("x86/speculation/l1tf: Invert all not present mappings")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 9eb0a3cce0089d93ad031c85ce6f2aee09fd4015 ......
	 orig commit -> bc2d8d262cba5736332cbc866acb11b1c5748aa9 ......
checking 1110cb2a343f506287d46e0c614512afaa7c7906 ......
	 orig commit -> 5b76a3cff011df2dcb6186c965a2e4d809a05ad4 ......
		 5b76a3cff011df2dcb6186c965a2e4d809a05ad4 has problem. Fixes commit -> 60ca05c3b44566b70d64fbb8e87a6e0c67725468
1eb46908b35dfbac0ec1848d4b1e39667e0187e9
commit 5f7a645432d6a8ad4164a97337af323f0b345fe3
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Aug 15 08:38:33 2018 -0700

    x86/l1tf: Fix build error seen if CONFIG_KVM_INTEL is disabled
    
    commit 1eb46908b35dfbac0ec1848d4b1e39667e0187e9 upstream.
    
    allmodconfig+CONFIG_INTEL_KVM=n results in the following build error.
    
      ERROR: "l1tf_vmx_mitigation" [arch/x86/kvm/kvm.ko] undefined!
    
    Fixes: 5b76a3cff011 ("KVM: VMX: Tell the nested hypervisor to skip L1D flush on vmentry")
    Reported-by: Meelis Roos <mroos@linux.ee>
    Cc: Meelis Roos <mroos@linux.ee>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 5f7a645432d6a8ad4164a97337af323f0b345fe3
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Aug 15 08:38:33 2018 -0700

    x86/l1tf: Fix build error seen if CONFIG_KVM_INTEL is disabled
    
    commit 1eb46908b35dfbac0ec1848d4b1e39667e0187e9 upstream.
    
    allmodconfig+CONFIG_INTEL_KVM=n results in the following build error.
    
      ERROR: "l1tf_vmx_mitigation" [arch/x86/kvm/kvm.ko] undefined!
    
    Fixes: 5b76a3cff011 ("KVM: VMX: Tell the nested hypervisor to skip L1D flush on vmentry")
    Reported-by: Meelis Roos <mroos@linux.ee>
    Cc: Meelis Roos <mroos@linux.ee>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c15396d3f74f6cd7c084bdcc1004714a40cb268a ......
	 orig commit -> 8e0b2b916662e09dd4d09e5271cdf214c6b80e62 ......
checking 6a0bea042dcacc087587e6b44fb3e74ce0c26e5c ......
	 orig commit -> ea156d192f5257a5bf393d33910d3b481bf8a401 ......
checking ab12e37d683a9ede978df8f0e0bf414e925597ed ......
	 orig commit -> cd28325249a1ca0d771557ce823e0308ad629f98 ......
checking 8c9900543e2698ce2f374af712b8fbd2007fddbf ......
	 orig commit -> 518e7b94817abed94becfe6a44f1ece0d4745afe ......
checking 6181db2838d6d54708e79496b63df9c447691439 ......
	 orig commit -> 66421c1ec340096b291af763ed5721314cdd9c5c ......
checking 52613b7abbd8b123130d84cbe28830b843036388 ......
	 orig commit -> d1d93fa90f1afa926cb060b7f78ab01a65705b4d ......
checking f0660d587efed81cfe3d734d77e3fb03fce0b15b ......
	 orig commit -> 801e459a6f3a63af9d447e6249088c76ae16efc4 ......
checking dc6c443e175bebad177c3d81d9c16bf7002cb4ba ......
	 orig commit -> 58331136136935c631c2b5f06daf4c3006416e91 ......
checking f9625775c30945439e412413de813404046e6f97 ......
	 orig commit -> 18b57ce2eb8c8b9a24174a89250cf5f57c76ecdc ......
checking aef13e1e96b7449f8346392ad1e38db86e6e75a2 ......
	 orig commit -> ffcba43ff66c7dab34ec700debd491d2a4d319b4 ......
checking 18f891ef7a631cac76e25d09a37f582690d852dd ......
	 orig commit -> 447ae316670230d7d29430e2cbf1f5db4f49d14c ......
		 447ae316670230d7d29430e2cbf1f5db4f49d14c has problem. Fixes commit -> 704ae091b061082b37a9968621af4c290c641d50
340fd4cff43f18bace9358d4decdc9b6ed0715be
0a957467c5fd46142bc9c52758ffc552d4c5e2f7
commit f95c5cde34e8d5f6a632b084889092dc8a2bdec8
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Aug 15 09:12:07 2018 -0700

    platform/x86: intel_punit_ipc: fix build errors
    
    [ Upstream commit 340fd4cff43f18bace9358d4decdc9b6ed0715be ]
    
    Fix build errors by #including <linux/io.h>.
    
    ../drivers/platform/x86/intel_punit_ipc.c: In function 'ipc_read_status':
    ../drivers/platform/x86/intel_punit_ipc.c:55:2: error: implicit declaration of function 'readl' [-Werror=implicit-function-declaration]
      return readl(ipcdev->base[type][BASE_IFACE]);
    ../drivers/platform/x86/intel_punit_ipc.c: In function 'ipc_write_cmd':
    ../drivers/platform/x86/intel_punit_ipc.c:60:2: error: implicit declaration of function 'writel' [-Werror=implicit-function-declaration]
      writel(cmd, ipcdev->base[type][BASE_IFACE]);
    
    Fixes: 447ae3166702 ("x86: Don't include linux/irq.h from asm/hardirq.h")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Zha Qipeng <qipeng.zha@intel.com>
    Cc: platform-driver-x86@vger.kernel.org
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5ef973b137fcef7d9fea58ad11b7e1c20c913e6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Aug 17 12:01:36 2018 +0200

    x86/mce: Add notifier_block forward declaration
    
    [ Upstream commit 704ae091b061082b37a9968621af4c290c641d50 ]
    
    Without linux/irq.h, there is no declaration of notifier_block, leading to
    a build warning:
    
    In file included from arch/x86/kernel/cpu/mcheck/threshold.c:10:
    arch/x86/include/asm/mce.h:151:46: error: 'struct notifier_block' declared inside parameter list will not be visible outside of this definition or declaration [-Werror]
    
    It's sufficient to declare the struct tag here, which avoids pulling in
    more header files.
    
    Fixes: 447ae3166702 ("x86: Don't include linux/irq.h from asm/hardirq.h")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Nicolai Stange <nstange@suse.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20180817100156.3009043-1-arnd@arndb.de
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7985292f97b4fb572d03353ca151fca683796d5d
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Aug 15 13:22:27 2018 -0700

    x86: i8259: Add missing include file
    
    commit 0a957467c5fd46142bc9c52758ffc552d4c5e2f7 upstream.
    
    i8259.h uses inb/outb and thus needs to include asm/io.h to avoid the
    following build error, as seen with x86_64:defconfig and CONFIG_SMP=n.
    
      In file included from drivers/rtc/rtc-cmos.c:45:0:
      arch/x86/include/asm/i8259.h: In function 'inb_pic':
      arch/x86/include/asm/i8259.h:32:24: error:
            implicit declaration of function 'inb'
    
      arch/x86/include/asm/i8259.h: In function 'outb_pic':
      arch/x86/include/asm/i8259.h:45:2: error:
            implicit declaration of function 'outb'
    
    Reported-by: Sebastian Gottschall <s.gottschall@dd-wrt.com>
    Suggested-by: Sebastian Gottschall <s.gottschall@dd-wrt.com>
    Fixes: 447ae3166702 ("x86: Don't include linux/irq.h from asm/hardirq.h")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit f95c5cde34e8d5f6a632b084889092dc8a2bdec8
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Aug 15 09:12:07 2018 -0700

    platform/x86: intel_punit_ipc: fix build errors
    
    [ Upstream commit 340fd4cff43f18bace9358d4decdc9b6ed0715be ]
    
    Fix build errors by #including <linux/io.h>.
    
    ../drivers/platform/x86/intel_punit_ipc.c: In function 'ipc_read_status':
    ../drivers/platform/x86/intel_punit_ipc.c:55:2: error: implicit declaration of function 'readl' [-Werror=implicit-function-declaration]
      return readl(ipcdev->base[type][BASE_IFACE]);
    ../drivers/platform/x86/intel_punit_ipc.c: In function 'ipc_write_cmd':
    ../drivers/platform/x86/intel_punit_ipc.c:60:2: error: implicit declaration of function 'writel' [-Werror=implicit-function-declaration]
      writel(cmd, ipcdev->base[type][BASE_IFACE]);
    
    Fixes: 447ae3166702 ("x86: Don't include linux/irq.h from asm/hardirq.h")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Zha Qipeng <qipeng.zha@intel.com>
    Cc: platform-driver-x86@vger.kernel.org
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5ef973b137fcef7d9fea58ad11b7e1c20c913e6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Aug 17 12:01:36 2018 +0200

    x86/mce: Add notifier_block forward declaration
    
    [ Upstream commit 704ae091b061082b37a9968621af4c290c641d50 ]
    
    Without linux/irq.h, there is no declaration of notifier_block, leading to
    a build warning:
    
    In file included from arch/x86/kernel/cpu/mcheck/threshold.c:10:
    arch/x86/include/asm/mce.h:151:46: error: 'struct notifier_block' declared inside parameter list will not be visible outside of this definition or declaration [-Werror]
    
    It's sufficient to declare the struct tag here, which avoids pulling in
    more header files.
    
    Fixes: 447ae3166702 ("x86: Don't include linux/irq.h from asm/hardirq.h")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Nicolai Stange <nstange@suse.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20180817100156.3009043-1-arnd@arndb.de
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7985292f97b4fb572d03353ca151fca683796d5d
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Aug 15 13:22:27 2018 -0700

    x86: i8259: Add missing include file
    
    commit 0a957467c5fd46142bc9c52758ffc552d4c5e2f7 upstream.
    
    i8259.h uses inb/outb and thus needs to include asm/io.h to avoid the
    following build error, as seen with x86_64:defconfig and CONFIG_SMP=n.
    
      In file included from drivers/rtc/rtc-cmos.c:45:0:
      arch/x86/include/asm/i8259.h: In function 'inb_pic':
      arch/x86/include/asm/i8259.h:32:24: error:
            implicit declaration of function 'inb'
    
      arch/x86/include/asm/i8259.h: In function 'outb_pic':
      arch/x86/include/asm/i8259.h:45:2: error:
            implicit declaration of function 'outb'
    
    Reported-by: Sebastian Gottschall <s.gottschall@dd-wrt.com>
    Suggested-by: Sebastian Gottschall <s.gottschall@dd-wrt.com>
    Fixes: 447ae3166702 ("x86: Don't include linux/irq.h from asm/hardirq.h")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 06fd9ef44f7c642710dbe482d342c22ee2e1cd13 ......
	 orig commit -> 45b575c00d8e72d69d75dd8c112f044b7b01b069 ......
checking 88f8090b9cbec23fac99eb4d7b4ea785c3beac51 ......
	 orig commit -> 9aee5f8a7e30330d0a8f4c626dc924ca5590aba5 ......
checking 0d6b3085975fafd909d26d37310c641f8e5e1be9 ......
	 orig commit -> 5b6ccc6c3b1a477fbac9ec97a0b4c1c48e765209 ......
checking 9baeea57aff241b5b454db99373479dae157a30f ......
	 orig commit -> 427362a142441f08051369db6fbe7f61c73b3dca ......
checking c6a43c04233bdf63104b3c7ef6984cdaa3aa9ecd ......
	 orig commit -> 379fd0c7e6a391e5565336a646f19f218fb98c6c ......
checking c6613521abbc2685ef334af32e455589d14f1d8d ......
	 orig commit -> 73d5e2b472640b1fcdb61ae8be389912ef211bda ......
		 73d5e2b472640b1fcdb61ae8be389912ef211bda has problem. Fixes commit -> b284909abad48b07d3071a9fc9b5692b3e64914b
bc2d8d262cba5736332cbc866acb11b1c5748aa9
commit 9eb0a3cce0089d93ad031c85ce6f2aee09fd4015
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Aug 7 08:19:57 2018 +0200

    cpu/hotplug: Fix SMT supported evaluation
    
    commit bc2d8d262cba5736332cbc866acb11b1c5748aa9 upstream
    
    Josh reported that the late SMT evaluation in cpu_smt_state_init() sets
    cpu_smt_control to CPU_SMT_NOT_SUPPORTED in case that 'nosmt' was supplied
    on the kernel command line as it cannot differentiate between SMT disabled
    by BIOS and SMT soft disable via 'nosmt'. That wreckages the state and
    makes the sysfs interface unusable.
    
    Rework this so that during bringup of the non boot CPUs the availability of
    SMT is determined in cpu_smt_allowed(). If a newly booted CPU is not a
    'primary' thread then set the local cpu_smt_available marker and evaluate
    this explicitely right after the initial SMP bringup has finished.
    
    SMT evaulation on x86 is a trainwreck as the firmware has all the
    information _before_ booting the kernel, but there is no interface to query
    it.
    
    Fixes: 73d5e2b47264 ("cpu/hotplug: detect SMT disabled by BIOS")
    Reported-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 5e1f1c1f5d00ffba3600ba1ffb3a1fc7dae0a375
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Jan 30 07:13:58 2019 -0600

    cpu/hotplug: Fix "SMT disabled by BIOS" detection for KVM
    
    commit b284909abad48b07d3071a9fc9b5692b3e64914b upstream.
    
    With the following commit:
    
      73d5e2b47264 ("cpu/hotplug: detect SMT disabled by BIOS")
    
    ... the hotplug code attempted to detect when SMT was disabled by BIOS,
    in which case it reported SMT as permanently disabled.  However, that
    code broke a virt hotplug scenario, where the guest is booted with only
    primary CPU threads, and a sibling is brought online later.
    
    The problem is that there doesn't seem to be a way to reliably
    distinguish between the HW "SMT disabled by BIOS" case and the virt
    "sibling not yet brought online" case.  So the above-mentioned commit
    was a bit misguided, as it permanently disabled SMT for both cases,
    preventing future virt sibling hotplugs.
    
    Going back and reviewing the original problems which were attempted to
    be solved by that commit, when SMT was disabled in BIOS:
    
      1) /sys/devices/system/cpu/smt/control showed "on" instead of
         "notsupported"; and
    
      2) vmx_vm_init() was incorrectly showing the L1TF_MSG_SMT warning.
    
    I'd propose that we instead consider #1 above to not actually be a
    problem.  Because, at least in the virt case, it's possible that SMT
    wasn't disabled by BIOS and a sibling thread could be brought online
    later.  So it makes sense to just always default the smt control to "on"
    to allow for that possibility (assuming cpuid indicates that the CPU
    supports SMT).
    
    The real problem is #2, which has a simple fix: change vmx_vm_init() to
    query the actual current SMT state -- i.e., whether any siblings are
    currently online -- instead of looking at the SMT "control" sysfs value.
    
    So fix it by:
    
      a) reverting the original "fix" and its followup fix:
    
         73d5e2b47264 ("cpu/hotplug: detect SMT disabled by BIOS")
         bc2d8d262cba ("cpu/hotplug: Fix SMT supported evaluation")
    
         and
    
      b) changing vmx_vm_init() to query the actual current SMT state --
         instead of the sysfs control value -- to determine whether the L1TF
         warning is needed.  This also requires the 'sched_smt_present'
         variable to exported, instead of 'cpu_smt_control'.
    
    Fixes: 73d5e2b47264 ("cpu/hotplug: detect SMT disabled by BIOS")
    Reported-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Joe Mario <jmario@redhat.com>
    Cc: Jiri Kosina <jikos@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: kvm@vger.kernel.org
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/e3a85d585da28cc333ecbc1e78ee9216e6da9396.1548794349.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9eb0a3cce0089d93ad031c85ce6f2aee09fd4015
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Aug 7 08:19:57 2018 +0200

    cpu/hotplug: Fix SMT supported evaluation
    
    commit bc2d8d262cba5736332cbc866acb11b1c5748aa9 upstream
    
    Josh reported that the late SMT evaluation in cpu_smt_state_init() sets
    cpu_smt_control to CPU_SMT_NOT_SUPPORTED in case that 'nosmt' was supplied
    on the kernel command line as it cannot differentiate between SMT disabled
    by BIOS and SMT soft disable via 'nosmt'. That wreckages the state and
    makes the sysfs interface unusable.
    
    Rework this so that during bringup of the non boot CPUs the availability of
    SMT is determined in cpu_smt_allowed(). If a newly booted CPU is not a
    'primary' thread then set the local cpu_smt_available marker and evaluate
    this explicitely right after the initial SMP bringup has finished.
    
    SMT evaulation on x86 is a trainwreck as the firmware has all the
    information _before_ booting the kernel, but there is no interface to query
    it.
    
    Fixes: 73d5e2b47264 ("cpu/hotplug: detect SMT disabled by BIOS")
    Reported-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 40b696da70cfcd1d38be557c3bc7d87cfa25dae6 ......
	 orig commit -> 1949f9f49792d65dba2090edddbe36a5f02e3ba3 ......
checking ae217320c17df01283add6f8a549c3fc70580423 ......
	 orig commit -> 288d152c23dcf3c09da46c5c481903ca10ebfef7 ......
checking a20c88c2a346dd90ce244f73647cd6bd8e1cacb3 ......
	 orig commit -> 3ec8ce5d866ec6a08a9cfab82b62acf4a830b35f ......
checking fc083988b6aa43fe3210792011647c1c1124ab5e ......
	 orig commit -> d90a7a0ec83fb86622cd7dae23255d3c50a99ec8 ......
checking 476d29ab70e710b7610148f9c38896bb004f08c2 ......
	 orig commit -> fee0aede6f4739c87179eca76136f83210953b86 ......
checking 8e41ddda308f9ac29fb9dd85d6e6bde7d3a29910 ......
	 orig commit -> 8e1b706b6e819bed215c0db16345568864660393 ......
checking e25726b1d30247589f36101c7e1e0a9b378fe407 ......
	 orig commit -> 895ae47f9918833c3a880fbccd41e0692b37e7d9 ......
checking 15e55ee33d89b9cf1745daf18260ee351058571c ......
	 orig commit -> dd4bfa739a72508b75760b393d129ed7b431daab ......
checking 8e523a1da19e9cfcb4e801bcba2fd1e2d6f5aace ......
	 orig commit -> 4c6523ec59fe895ea352a650218a6be0653910b1 ......
checking d0e1ca1045849f6aa71491b7ca9566cbdd94a32c ......
	 orig commit -> 7db92e165ac814487264632ab2624e832f20ae38 ......
		 7db92e165ac814487264632ab2624e832f20ae38 has problem. Fixes commit -> 94d7a86c21a3d6046bf4616272313cb7d525075a
commit c49505f6efb191287c3b3d8fa6e8eb43ec4b20df
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Tue Aug 14 12:32:19 2018 -0500

    x86/kvm/vmx: Remove duplicate l1d flush definitions
    
    commit 94d7a86c21a3d6046bf4616272313cb7d525075a upstream.
    
    These are already defined higher up in the file.
    
    Fixes: 7db92e165ac8 ("x86/kvm: Move l1tf setup function")
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/d7ca03ae210d07173452aeed85ffe344301219a5.1534253536.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking de88416d6141b745c4e22e1a9345d142642e036d ......
	 orig commit -> a7b9020b06ec6d7c3f3b0d4ef1a9eba12654f4f7 ......
		 a7b9020b06ec6d7c3f3b0d4ef1a9eba12654f4f7 has problem. Fixes commit -> 0027ff2a75f9dcf0537ac0a65c5840b0e21a4950
commit 58936d4d7b14bdeb26515b03dc9a3dbf255a709b
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Aug 22 16:43:39 2018 +0200

    KVM: VMX: fixes for vmentry_l1d_flush module parameter
    
    commit 0027ff2a75f9dcf0537ac0a65c5840b0e21a4950 upstream.
    
    Two bug fixes:
    
    1) missing entries in the l1d_param array; this can cause a host crash
    if an access attempts to reach the missing entry. Future-proof the get
    function against any overflows as well.  However, the two entries
    VMENTER_L1D_FLUSH_EPT_DISABLED and VMENTER_L1D_FLUSH_NOT_REQUIRED must
    not be accepted by the parse function, so disable them there.
    
    2) invalid values must be rejected even if the CPU does not have the
    bug, so test for them before checking boot_cpu_has(X86_BUG_L1TF)
    
    ... and a small refactoring, since the .cmd field is redundant with
    the index in the array.
    
    Reported-by: Bandan Das <bsd@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: a7b9020b06ec6d7c3f3b0d4ef1a9eba12654f4f7
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking de6749ddf3db5b9da14721973390159addc0ec1c ......
	 orig commit -> 2f055947ae5e2741fb2dc5bba1033c417ccf4faa ......
checking e7a979648a66fcd8968848069c0b48219af156b4 ......
	 orig commit -> 72c6d2db64fa18c996ece8f06e499509e6c9a37e ......
checking ac10995a749844c1e98c2a5ba650eddf26d0eba6 ......
	 orig commit -> 215af5499d9e2b55f111d2431ea20218115f29b3 ......
checking 1c67bf4ca05328323bac6cfb79c91c69228c2090 ......
	 orig commit -> 390d975e0c4e60ce70d4157e0dd91ede37824603 ......
checking 7b0cdac526410afd2b5c3e0069366799087db790 ......
	 orig commit -> 989e3992d2eca32c3f1404f2bc91acda3aa122d8 ......
checking 0299ca42458cbdee213c47c1c2ebad4432fbb358 ......
	 orig commit -> 3190709335dd31fe1aeeebfe4ffb6c7624ef971f ......
checking 916f4623d213b9801ade314b1bf678a113d67af3 ......
	 orig commit -> ca83b4a7f2d068da79a029d323024aa45decb250 ......
		 ca83b4a7f2d068da79a029d323024aa45decb250 has problem. Fixes commit -> 98ae70cc476e833332a2c6bb72f941a25f0de226
commit 45d51c117ff36cea60b1ab827f77b6af1afe525d
Author: Xiaoyao Li <xiaoyao.li@linux.intel.com>
Date:   Thu Feb 14 12:08:58 2019 +0800

    kvm: vmx: Fix entry number check for add_atomic_switch_msr()
    
    commit 98ae70cc476e833332a2c6bb72f941a25f0de226 upstream.
    
    Commit ca83b4a7f2d068da79a0 ("x86/KVM/VMX: Add find_msr() helper function")
    introduces the helper function find_msr(), which returns -ENOENT when
    not find the msr in vmx->msr_autoload.guest/host. Correct checking contion
    of no more available entry in vmx->msr_autoload.
    
    Fixes: ca83b4a7f2d0 ("x86/KVM/VMX: Add find_msr() helper function")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xiaoyao Li <xiaoyao.li@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 10309cbf1e3802cec871cf940b8693ae8421f46e ......
	 orig commit -> 33966dd6b2d2c352fae55412db2ea8cfff5df13a ......
checking 84f5b2512f6f6902e732adb84e9646a4ee18c51c ......
	 orig commit -> c595ceee45707f00f64f61c54fb64ef0cc0b4e85 ......
checking e993d9c0376a143f0407ec025c44569cb0a6032c ......
	 orig commit -> 3fa045be4c720146b18a19cea7a767dc6ad5df94 ......
checking a662a3d89f1618a33540ab345945bbcd812f9057 ......
	 orig commit -> a47dd5f06714c844b33f3b5f517b6f3e81ce57b5 ......
		 a47dd5f06714c844b33f3b5f517b6f3e81ce57b5 has problem. Fixes commit -> 288d152c23dcf3c09da46c5c481903ca10ebfef7
commit ae217320c17df01283add6f8a549c3fc70580423
Author: Nicolai Stange <nstange@suse.de>
Date:   Wed Jul 18 19:07:38 2018 +0200

    x86/KVM/VMX: Initialize the vmx_l1d_flush_pages' content
    
    commit 288d152c23dcf3c09da46c5c481903ca10ebfef7 upstream
    
    The slow path in vmx_l1d_flush() reads from vmx_l1d_flush_pages in order
    to evict the L1d cache.
    
    However, these pages are never cleared and, in theory, their data could be
    leaked.
    
    More importantly, KSM could merge a nested hypervisor's vmx_l1d_flush_pages
    to fewer than 1 << L1D_CACHE_ORDER host physical pages and this would break
    the L1d flushing algorithm: L1D on x86_64 is tagged by physical addresses.
    
    Fix this by initializing the individual vmx_l1d_flush_pages with a
    different pattern each.
    
    Rename the "empty_zp" asm constraint identifier in vmx_l1d_flush() to
    "flush_pages" to reflect this change.
    
    Fixes: a47dd5f06714 ("x86/KVM/VMX: Add L1D flush algorithm")
    Signed-off-by: Nicolai Stange <nstange@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 77c8220e0d01d8c1c85343fa9472fd957c4878a0 ......
	 orig commit -> a399477e52c17e148746d3ce9a483f681c2aa9a0 ......
checking c2fdbbb47ca834b9b19fbbf0a9b740146a508b84 ......
	 orig commit -> 26acfb666a473d960f0fd971fe68f3e3ad16c70b ......
checking 7f2229c92b9ea4d4b1b50671b9fe5afadbf0b4f4 ......
	 orig commit -> 0cc3cd21657be04cb0559fe8063f2130493f92cf ......
		 0cc3cd21657be04cb0559fe8063f2130493f92cf has problem. Fixes commit -> 269777aa530f3438ec1781586cdac0b5fe47b061
commit 7bdbaba8e99782ace50e585549a54af3d079f80d
Author: Abel Vesa <abelvesa@linux.com>
Date:   Wed Aug 15 00:26:00 2018 +0300

    cpu/hotplug: Non-SMP machines do not make use of booted_once
    
    commit 269777aa530f3438ec1781586cdac0b5fe47b061 upstream.
    
    Commit 0cc3cd21657b ("cpu/hotplug: Boot HT siblings at least once")
    breaks non-SMP builds.
    
    [ I suspect the 'bool' fields should just be made to be bitfields and be
      exposed regardless of configuration, but that's a separate cleanup
      that I'll leave to the owners of this file for later.   - Linus ]
    
    Fixes: 0cc3cd21657b ("cpu/hotplug: Boot HT siblings at least once")
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Abel Vesa <abelvesa@linux.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f3e68ab4e778e575ab9fba10894387d177af510a ......
	 orig commit -> 506a66f374891ff08e064a058c446b336c5ac760 ......
checking 49221fc7e775656e87978aa56519fab12bb2560b ......
	 orig commit -> e14d7dfb41f5807a0c1c26a13f2b8ef16af24935 ......
checking b9cdf143eb9c24536750823097635da6bb7e362f ......
	 orig commit -> 0d0f6249058834ffe1ceaad0bb31464af66f6e7a ......
checking 2a82e5e51fc0153024c52d64ae00dcf006311c80 ......
	 orig commit -> 7ce2f0393ea2396142b7faf6ee9b1f3676d08a5f ......
checking 62f43866636d08efca34b87cd2bf8b0f49edb27c ......
	 orig commit -> 11e34e64e4103955fc4568750914c75d65ea87ee ......
checking c6374a6259fd10e5fe450bd10cf75a8e04d1b309 ......
	 orig commit -> 1a7ed1ba4bba6c075d5ad61bb75e3fbc870840d6 ......
checking f02f2ad9e711881bcb62f0fc64084c32af3600e4 ......
	 orig commit -> 2207def700f902f169fc237b717252c326f9e464 ......
checking 63f2c9b0d42f7afcdd698025885dd48bc73a8a5b ......
	 orig commit -> 1e1d7e25fd759eddf96d8ab39d0a90a1979b2d8c ......
checking 35c67d5baad3e2ab745393cbfeb6c6cc9ac6a334 ......
	 orig commit -> 119bff8a9c9bb00116a844ec68be7bc4b1c768f5 ......
checking d20d8f7f6a92ce1211b27af925bdd6e2beebfab8 ......
	 orig commit -> 1910ad5624968f93be48e8e265513c54d66b897c ......
checking 9552b7df0eb1a8846890c05d375fb3b89f9c2fe6 ......
	 orig commit -> 95f3d39ccf7aaea79d1ffdac1c887c2e100ec1b6 ......
checking bfa4f8aeb0f38c68b3060b9c27ee533c89404ad1 ......
	 orig commit -> 545401f4448a807b963ff17b575e0a393e68b523 ......
checking 33c8be23981353f141937b37e0659eb5c1857c02 ......
	 orig commit -> 44ca36de56d1bf196dca2eb67cd753a46961ffe6 ......
checking 728ac48249f620182eb7ad065a0d7064b6f17e2b ......
	 orig commit -> 55e6d279abd92cfd7576bba031e7589be8475edb ......
checking c5ac43ee8c77b1a38d5223bb8a688b2116f1f958 ......
	 orig commit -> 05736e4ac13c08a4a9b1ef2de26dd31a32cbee57 ......
checking 6beba29c66bcab61457173c7c36638fa3f5824b5 ......
	 orig commit -> cc1fe215e1efa406b03aa4389e6269b61342dec5 ......
checking 26a6dcc7134b7f45e0058cd735148afd2715f67a ......
	 orig commit -> c4de65696d865c225fda3b9913b31284ea65ea96 ......
checking 8eb2860590ba188c8d9fbd5497ac4bfd9848201b ......
	 orig commit -> f048c399e0f7490ab7296bc2c255d37eb14a9675 ......
		 f048c399e0f7490ab7296bc2c255d37eb14a9675 has problem. Fixes commit -> 73d5e2b472640b1fcdb61ae8be389912ef211bda
commit c6613521abbc2685ef334af32e455589d14f1d8d
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Jul 25 10:36:45 2018 +0200

    cpu/hotplug: detect SMT disabled by BIOS
    
    commit 73d5e2b472640b1fcdb61ae8be389912ef211bda upstream
    
    If SMT is disabled in BIOS, the CPU code doesn't properly detect it.
    The /sys/devices/system/cpu/smt/control file shows 'on', and the 'l1tf'
    vulnerabilities file shows SMT as vulnerable.
    
    Fix it by forcing 'cpu_smt_control' to CPU_SMT_NOT_SUPPORTED in such a
    case.  Unfortunately the detection can only be done after bringing all
    the CPUs online, so we have to overwrite any previous writes to the
    variable.
    
    Reported-by: Joe Mario <jmario@redhat.com>
    Tested-by: Jiri Kosina <jkosina@suse.cz>
    Fixes: f048c399e0f7 ("x86/topology: Provide topology_smt_supported()")
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b84b9184651dd2a003459293ec7caa58e5423562 ......
	 orig commit -> 6a4d2657e048f096c7ffcad254010bd94891c8c0 ......
		 6a4d2657e048f096c7ffcad254010bd94891c8c0 has problem. Fixes commit -> d0055f351e647f33f3b0329bff022213bf8aa085
commit 9428a6a0ea7bd965fd61b81e83811214654b78e2
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Tue Aug 14 23:38:57 2018 +0200

    x86/smp: fix non-SMP broken build due to redefinition of apic_id_is_primary_thread
    
    commit d0055f351e647f33f3b0329bff022213bf8aa085 upstream.
    
    The function has an inline "return false;" definition with CONFIG_SMP=n
    but the "real" definition is also visible leading to "redefinition of
    ‘apic_id_is_primary_thread’" compiler error.
    
    Guard it with #ifdef CONFIG_SMP
    
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Fixes: 6a4d2657e048 ("x86/smp: Provide topology_is_primary_thread()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking fc890e9b571fb273e714bae5de682226eaed9cb2 ......
	 orig commit -> ba2591a5993eabcc8e874e30f361d8ffbb10d6d4 ......
checking 202f9056085f9380ff82fff5218e343c3f244956 ......
	 orig commit -> 56563f53d3066afa9e63d6c997bf67e76a8b05c0 ......
checking 4bb1a8d8f832084df867351e2b8240e957cac2ec ......
	 orig commit -> 377eeaa8e11fe815b1d07c81c4a0e2843a8c15eb ......
		 377eeaa8e11fe815b1d07c81c4a0e2843a8c15eb has problem. Fixes commit -> 5b5e4d623ec8a34689df98e42d038a3b594d2ff9
9df9516940a61d29aedf4d91b483ca6597e7d480
792adb90fa724ce07c0171cbc96b9215af4b1045
1a7ed1ba4bba6c075d5ad61bb75e3fbc870840d6
commit 7418d70862178363f4ad39ee645e3530c8ff9a8b
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Mon Aug 20 11:58:35 2018 +0200

    x86/speculation/l1tf: Fix overflow in l1tf_pfn_limit() on 32bit
    
    commit 9df9516940a61d29aedf4d91b483ca6597e7d480 upstream.
    
    On 32bit PAE kernels on 64bit hardware with enough physical bits,
    l1tf_pfn_limit() will overflow unsigned long. This in turn affects
    max_swapfile_size() and can lead to swapon returning -EINVAL. This has been
    observed in a 32bit guest with 42 bits physical address size, where
    max_swapfile_size() overflows exactly to 1 << 32, thus zero, and produces
    the following warning to dmesg:
    
    [    6.396845] Truncating oversized swap area, only using 0k out of 2047996k
    
    Fix this by using unsigned long long instead.
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Reported-by: Dominique Leuenberger <dimstar@suse.de>
    Reported-by: Adrian Schroeter <adrian@suse.de>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180820095835.5298-1-vbabka@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cefa38bfc5829dfdcc4ebf92f5db9e7e783f97b
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Tue Aug 14 20:50:47 2018 +0200

    x86/init: fix build with CONFIG_SWAP=n
    
    commit 792adb90fa724ce07c0171cbc96b9215af4b1045 upstream.
    
    The introduction of generic_max_swapfile_size and arch-specific versions has
    broken linking on x86 with CONFIG_SWAP=n due to undefined reference to
    'generic_max_swapfile_size'. Fix it by compiling the x86-specific
    max_swapfile_size() only with CONFIG_SWAP=y.
    
    Reported-by: Tomas Pruzina <pruzinat@gmail.com>
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6374a6259fd10e5fe450bd10cf75a8e04d1b309
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Jun 21 12:36:29 2018 +0200

    x86/speculation/l1tf: Extend 64bit swap file size limit
    
    commit 1a7ed1ba4bba6c075d5ad61bb75e3fbc870840d6 upstream
    
    The previous patch has limited swap file size so that large offsets cannot
    clear bits above MAX_PA/2 in the pte and interfere with L1TF mitigation.
    
    It assumed that offsets are encoded starting with bit 12, same as pfn. But
    on x86_64, offsets are encoded starting with bit 9.
    
    Thus the limit can be raised by 3 bits. That means 16TB with 42bit MAX_PA
    and 256TB with 46bit MAX_PA.
    
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 8c34b07190ad0ce2e8b792b922b940bef1aef1e1
Author: Michal Hocko <mhocko@suse.com>
Date:   Tue Nov 13 19:49:10 2018 +0100

    x86/speculation/l1tf: Drop the swap storage limit restriction when l1tf=off
    
    commit 5b5e4d623ec8a34689df98e42d038a3b594d2ff9 upstream.
    
    Swap storage is restricted to max_swapfile_size (~16TB on x86_64) whenever
    the system is deemed affected by L1TF vulnerability. Even though the limit
    is quite high for most deployments it seems to be too restrictive for
    deployments which are willing to live with the mitigation disabled.
    
    We have a customer to deploy 8x 6,4TB PCIe/NVMe SSD swap devices which is
    clearly out of the limit.
    
    Drop the swap restriction when l1tf=off is specified. It also doesn't make
    much sense to warn about too much memory for the l1tf mitigation when it is
    forcefully disabled by the administrator.
    
    [ tglx: Folded the documentation delta change ]
    
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: <linux-mm@kvack.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20181113184910.26697-1-mhocko@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7418d70862178363f4ad39ee645e3530c8ff9a8b
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Mon Aug 20 11:58:35 2018 +0200

    x86/speculation/l1tf: Fix overflow in l1tf_pfn_limit() on 32bit
    
    commit 9df9516940a61d29aedf4d91b483ca6597e7d480 upstream.
    
    On 32bit PAE kernels on 64bit hardware with enough physical bits,
    l1tf_pfn_limit() will overflow unsigned long. This in turn affects
    max_swapfile_size() and can lead to swapon returning -EINVAL. This has been
    observed in a 32bit guest with 42 bits physical address size, where
    max_swapfile_size() overflows exactly to 1 << 32, thus zero, and produces
    the following warning to dmesg:
    
    [    6.396845] Truncating oversized swap area, only using 0k out of 2047996k
    
    Fix this by using unsigned long long instead.
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Reported-by: Dominique Leuenberger <dimstar@suse.de>
    Reported-by: Adrian Schroeter <adrian@suse.de>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180820095835.5298-1-vbabka@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cefa38bfc5829dfdcc4ebf92f5db9e7e783f97b
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Tue Aug 14 20:50:47 2018 +0200

    x86/init: fix build with CONFIG_SWAP=n
    
    commit 792adb90fa724ce07c0171cbc96b9215af4b1045 upstream.
    
    The introduction of generic_max_swapfile_size and arch-specific versions has
    broken linking on x86 with CONFIG_SWAP=n due to undefined reference to
    'generic_max_swapfile_size'. Fix it by compiling the x86-specific
    max_swapfile_size() only with CONFIG_SWAP=y.
    
    Reported-by: Tomas Pruzina <pruzinat@gmail.com>
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6374a6259fd10e5fe450bd10cf75a8e04d1b309
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Jun 21 12:36:29 2018 +0200

    x86/speculation/l1tf: Extend 64bit swap file size limit
    
    commit 1a7ed1ba4bba6c075d5ad61bb75e3fbc870840d6 upstream
    
    The previous patch has limited swap file size so that large offsets cannot
    clear bits above MAX_PA/2 in the pte and interfere with L1TF mitigation.
    
    It assumed that offsets are encoded starting with bit 12, same as pfn. But
    on x86_64, offsets are encoded starting with bit 9.
    
    Thus the limit can be raised by 3 bits. That means 16TB with 42bit MAX_PA
    and 256TB with 46bit MAX_PA.
    
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking a4116334be3921b0309a9bfa6f808c4663e45f3c ......
	 orig commit -> 42e4089c7890725fcd329999252dc489b72f2921 ......
		 42e4089c7890725fcd329999252dc489b72f2921 has problem. Fixes commit -> 6c26fcd2abfe0a56bbd95271fce02df2896cfd24
commit b37de2cf27a7bc9ad51a72670d902ce71fc9da1e
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Sat Jul 14 21:56:13 2018 +0200

    x86/speculation/l1tf: Unbreak !__HAVE_ARCH_PFN_MODIFY_ALLOWED architectures
    
    commit 6c26fcd2abfe0a56bbd95271fce02df2896cfd24 upstream.
    
    pfn_modify_allowed() and arch_has_pfn_modify_check() are outside of the
    !__ASSEMBLY__ section in include/asm-generic/pgtable.h, which confuses
    assembler on archs that don't have __HAVE_ARCH_PFN_MODIFY_ALLOWED (e.g.
    ia64) and breaks build:
    
        include/asm-generic/pgtable.h: Assembler messages:
        include/asm-generic/pgtable.h:538: Error: Unknown opcode `static inline bool pfn_modify_allowed(unsigned long pfn,pgprot_t prot)'
        include/asm-generic/pgtable.h:540: Error: Unknown opcode `return true'
        include/asm-generic/pgtable.h:543: Error: Unknown opcode `static inline bool arch_has_pfn_modify_check(void)'
        include/asm-generic/pgtable.h:545: Error: Unknown opcode `return false'
        arch/ia64/kernel/entry.S:69: Error: `mov' does not fit into bundle
    
    Move those two static inlines into the !__ASSEMBLY__ section so that they
    don't confuse the asm build pass.
    
    Fixes: 42e4089c7890 ("x86/speculation/l1tf: Disallow non privileged high MMIO PROT_NONE mappings")
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3d98de691c013ea4e60360db93b885fe9db15c37 ......
	 orig commit -> 17dbca119312b4e8173d4e25ff64262119fcef38 ......
		 17dbca119312b4e8173d4e25ff64262119fcef38 has problem. Fixes commit -> cc51e5428ea54f575d49cfcede1d4cb3a72b4ec4
b0a182f875689647b014bc01d36b340217792852
9df9516940a61d29aedf4d91b483ca6597e7d480
56563f53d3066afa9e63d6c997bf67e76a8b05c0
commit 59463ec29cacd63844e27fbefd34847fbfead956
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Aug 23 15:44:18 2018 +0200

    x86/speculation/l1tf: Fix off-by-one error when warning that system has too much RAM
    
    commit b0a182f875689647b014bc01d36b340217792852 upstream.
    
    Two users have reported [1] that they have an "extremely unlikely" system
    with more than MAX_PA/2 memory and L1TF mitigation is not effective. In
    fact it's a CPU with 36bits phys limit (64GB) and 32GB memory, but due to
    holes in the e820 map, the main region is almost 500MB over the 32GB limit:
    
    [    0.000000] BIOS-e820: [mem 0x0000000100000000-0x000000081effffff] usable
    
    Suggestions to use 'mem=32G' to enable the L1TF mitigation while losing the
    500MB revealed, that there's an off-by-one error in the check in
    l1tf_select_mitigation().
    
    l1tf_pfn_limit() returns the last usable pfn (inclusive) and the range
    check in the mitigation path does not take this into account.
    
    Instead of amending the range check, make l1tf_pfn_limit() return the first
    PFN which is over the limit which is less error prone. Adjust the other
    users accordingly.
    
    [1] https://bugzilla.suse.com/show_bug.cgi?id=1105536
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Reported-by: George Anchev <studio@anchev.net>
    Reported-by: Christopher Snowhill <kode54@gmail.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180823134418.17008-1-vbabka@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7418d70862178363f4ad39ee645e3530c8ff9a8b
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Mon Aug 20 11:58:35 2018 +0200

    x86/speculation/l1tf: Fix overflow in l1tf_pfn_limit() on 32bit
    
    commit 9df9516940a61d29aedf4d91b483ca6597e7d480 upstream.
    
    On 32bit PAE kernels on 64bit hardware with enough physical bits,
    l1tf_pfn_limit() will overflow unsigned long. This in turn affects
    max_swapfile_size() and can lead to swapon returning -EINVAL. This has been
    observed in a 32bit guest with 42 bits physical address size, where
    max_swapfile_size() overflows exactly to 1 << 32, thus zero, and produces
    the following warning to dmesg:
    
    [    6.396845] Truncating oversized swap area, only using 0k out of 2047996k
    
    Fix this by using unsigned long long instead.
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Reported-by: Dominique Leuenberger <dimstar@suse.de>
    Reported-by: Adrian Schroeter <adrian@suse.de>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180820095835.5298-1-vbabka@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 202f9056085f9380ff82fff5218e343c3f244956
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Wed Jun 20 16:42:57 2018 -0400

    x86/bugs: Move the l1tf function and define pr_fmt properly
    
    commit 56563f53d3066afa9e63d6c997bf67e76a8b05c0 upstream
    
    The pr_warn in l1tf_select_mitigation would have used the prior pr_fmt
    which was defined as "Spectre V2 : ".
    
    Move the function to be past SSBD and also define the pr_fmt.
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit ec4034835eaf9aba4399e3c6770c3e6d6cc09504
Author: Andi Kleen <ak@linux.intel.com>
Date:   Fri Aug 24 10:03:50 2018 -0700

    x86/speculation/l1tf: Increase l1tf memory limit for Nehalem+
    
    commit cc51e5428ea54f575d49cfcede1d4cb3a72b4ec4 upstream.
    
    On Nehalem and newer core CPUs the CPU cache internally uses 44 bits
    physical address space. The L1TF workaround is limited by this internal
    cache address width, and needs to have one bit free there for the
    mitigation to work.
    
    Older client systems report only 36bit physical address space so the range
    check decides that L1TF is not mitigated for a 36bit phys/32GB system with
    some memory holes.
    
    But since these actually have the larger internal cache width this warning
    is bogus because it would only really be needed if the system had more than
    43bits of memory.
    
    Add a new internal x86_cache_bits field. Normally it is the same as the
    physical bits field reported by CPUID, but for Nehalem and newerforce it to
    be at least 44bits.
    
    Change the L1TF memory size warning to use the new cache_bits field to
    avoid bogus warnings and remove the bogus comment about memory size.
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Reported-by: George Anchev <studio@anchev.net>
    Reported-by: Christopher Snowhill <kode54@gmail.com>
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86@kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Michael Hocko <mhocko@suse.com>
    Cc: vbabka@suse.cz
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180824170351.34874-1-andi@firstfloor.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59463ec29cacd63844e27fbefd34847fbfead956
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Aug 23 15:44:18 2018 +0200

    x86/speculation/l1tf: Fix off-by-one error when warning that system has too much RAM
    
    commit b0a182f875689647b014bc01d36b340217792852 upstream.
    
    Two users have reported [1] that they have an "extremely unlikely" system
    with more than MAX_PA/2 memory and L1TF mitigation is not effective. In
    fact it's a CPU with 36bits phys limit (64GB) and 32GB memory, but due to
    holes in the e820 map, the main region is almost 500MB over the 32GB limit:
    
    [    0.000000] BIOS-e820: [mem 0x0000000100000000-0x000000081effffff] usable
    
    Suggestions to use 'mem=32G' to enable the L1TF mitigation while losing the
    500MB revealed, that there's an off-by-one error in the check in
    l1tf_select_mitigation().
    
    l1tf_pfn_limit() returns the last usable pfn (inclusive) and the range
    check in the mitigation path does not take this into account.
    
    Instead of amending the range check, make l1tf_pfn_limit() return the first
    PFN which is over the limit which is less error prone. Adjust the other
    users accordingly.
    
    [1] https://bugzilla.suse.com/show_bug.cgi?id=1105536
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Reported-by: George Anchev <studio@anchev.net>
    Reported-by: Christopher Snowhill <kode54@gmail.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180823134418.17008-1-vbabka@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7418d70862178363f4ad39ee645e3530c8ff9a8b
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Mon Aug 20 11:58:35 2018 +0200

    x86/speculation/l1tf: Fix overflow in l1tf_pfn_limit() on 32bit
    
    commit 9df9516940a61d29aedf4d91b483ca6597e7d480 upstream.
    
    On 32bit PAE kernels on 64bit hardware with enough physical bits,
    l1tf_pfn_limit() will overflow unsigned long. This in turn affects
    max_swapfile_size() and can lead to swapon returning -EINVAL. This has been
    observed in a 32bit guest with 42 bits physical address size, where
    max_swapfile_size() overflows exactly to 1 << 32, thus zero, and produces
    the following warning to dmesg:
    
    [    6.396845] Truncating oversized swap area, only using 0k out of 2047996k
    
    Fix this by using unsigned long long instead.
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
    Reported-by: Dominique Leuenberger <dimstar@suse.de>
    Reported-by: Adrian Schroeter <adrian@suse.de>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180820095835.5298-1-vbabka@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 202f9056085f9380ff82fff5218e343c3f244956
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Wed Jun 20 16:42:57 2018 -0400

    x86/bugs: Move the l1tf function and define pr_fmt properly
    
    commit 56563f53d3066afa9e63d6c997bf67e76a8b05c0 upstream
    
    The pr_warn in l1tf_select_mitigation would have used the prior pr_fmt
    which was defined as "Spectre V2 : ".
    
    Move the function to be past SSBD and also define the pr_fmt.
    
    Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking aff6fe17f52815e6ebdbf82b69f3edf669808eb6 ......
	 orig commit -> 10a70416e1f067f6c4efda6ffd8ea96002ac4223 ......
checking 8c35b2fcbe6a86be93aa7cb9c4842e3c70b77620 ......
	 orig commit -> 6b28baca9b1f0d4a42b865da7a05b1c81424bd5c ......
		 6b28baca9b1f0d4a42b865da7a05b1c81424bd5c has problem. Fixes commit -> e14d7dfb41f5807a0c1c26a13f2b8ef16af24935
commit 49221fc7e775656e87978aa56519fab12bb2560b
Author: Michal Hocko <mhocko@suse.cz>
Date:   Wed Jun 27 17:46:50 2018 +0200

    x86/speculation/l1tf: Fix up pte->pfn conversion for PAE
    
    commit e14d7dfb41f5807a0c1c26a13f2b8ef16af24935 upstream
    
    Jan has noticed that pte_pfn and co. resp. pfn_pte are incorrect for
    CONFIG_PAE because phys_addr_t is wider than unsigned long and so the
    pte_val reps. shift left would get truncated. Fix this up by using proper
    types.
    
    Fixes: 6b28baca9b1f ("x86/speculation/l1tf: Protect PROT_NONE PTEs against speculation")
    Reported-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 83ef7e8c0cb72510588ee8b96f5cf30c1ecd9270 ......
	 orig commit -> 2f22b4cd45b67b3496f4aa4c7180a1271c6452f6 ......
checking 39991a7aa8d527164a87f90bb18b07b2699ed7d0 ......
	 orig commit -> bcd11afa7adad8d720e7ba5ef58bdcd9775cf45f ......
checking aefe1861bc156102ac5d5be18cf781a76537c119 ......
	 orig commit -> 50896e180c6aa3a9c61a26ced99e15d602666a4c ......
checking 688e5a2087c3decacb2245af8b0b053c81e1a99e ......
	 orig commit -> 208cbb32558907f68b3b2a081ca2337ac3744794 ......
		 208cbb32558907f68b3b2a081ca2337ac3744794 has problem. Fixes commit -> 1f59a4581b5ecfe9b4f049a7a2cf904d8352842d
commit f822ceb826080784fa3db2e63a28655befddf6fc
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Mon Aug 27 14:40:09 2018 -0700

    x86/irqflags: Mark native_restore_fl extern inline
    
    commit 1f59a4581b5ecfe9b4f049a7a2cf904d8352842d upstream.
    
    This should have been marked extern inline in order to pick up the out
    of line definition in arch/x86/kernel/irqflags.S.
    
    Fixes: 208cbb325589 ("x86/irqflags: Provide a declaration for native_save_fl")
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180827214011.55428-1-ndesaulniers@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking bf6ac84a1bd1d250833159c3e3e97fd75e03acaf ......
	 orig commit -> 0ea063306eecf300fcf06d2f5917474b580f666f ......
checking f374b5593e44c01265156b4c4070b618097f401b ......
	 orig commit -> fdf82a7856b32d905c39afc85e34364491e46346 ......
checking f7a0871d8141c3ac60123fbc4923e5e3c121b094 ......
	 orig commit -> 5800dc5c19f34e6e03b5adab1282535cb102fafd ......
		 5800dc5c19f34e6e03b5adab1282535cb102fafd has problem. Fixes commit -> 571d0563c8881595f4ab027aef9ed1c55e3e7b7c
commit 726f05951941cc88e91b25b98921182cfc8d45f7
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 19 13:35:53 2018 +0300

    x86/paravirt: Fix some warning messages
    
    [ Upstream commit 571d0563c8881595f4ab027aef9ed1c55e3e7b7c ]
    
    The first argument to WARN_ONCE() is a condition.
    
    Fixes: 5800dc5c19f3 ("x86/paravirt: Fix spectre-v2 mitigations for paravirt guests")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Alok Kataria <akataria@vmware.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: virtualization@lists.linux-foundation.org
    Cc: kernel-janitors@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180919103553.GD9238@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 93bf5456d85a1e86c11516a97317a15785c9a0db ......
	 orig commit -> 1bcfe0564044be578841744faea1c2f46adc8178 ......
checking 4a53c4e84ace1bc75157a7281af3fe8f5b19d08c ......
	 orig commit -> d73e172816652772114827abaa2dbc053eecbbd7 ......
checking f6ec33f6bd3723a8146768106434ef6ab3d9d990 ......
	 orig commit -> 67d2f8781b9f00d1089aafcfa3dc09fcd0f343e2 ......
checking 4290940dcb07f8876b294099005e803aab576e8d ......
	 orig commit -> 00c0092c5f62147b7d85f0c6f1cf245a0a1ff3b6 ......
checking 2424869e4cd1d2d08b0c23b709b116d48d1a42aa ......
	 orig commit -> 069f05346d01e7298939f16533953cdf52370be3 ......
checking e5751c84402f62c8d5b30af96b04180c5c0ad48d ......
	 orig commit -> 119e1ef80ecfe0d1deb6378d4ab41f5b71519de1 ......
checking d9d46a226dd84073d2b109f8a587f40ccfcc616c ......
	 orig commit -> 9ea0a46ca2c318fcc449c1e6b62a7230a17888f1 ......
checking d5426a384144e8e28730a22ccc7bcb71d22304a7 ......
	 orig commit -> 4c0d7cd5c8416b1ef41534d19163cb07ffaa03ab ......
checking abfc0ec698fc8e4407069e0c2ef79c4f20680ee4 ......
	 orig commit -> 90bad5e05bcdb0308cfa3d3a60f5c0b9c8e2efb3 ......
checking b7722f4ac3533d48dc5996a4f7e5d847934179b0 ......
	 orig commit -> b5b1404d0815894de0690de8a1ab58269e56eae6 ......
checking fa085d77929bf3267876f79816a67b82d515826b ......
	 orig commit -> 5e53be8e476a3397ed5383c23376f299555a2b43 ......
checking 71b7ca5795008efe082742473bd606b85bc65fd6 ......
	 orig commit -> 1214fd7b497400d200e3f4e64e2338b303a20949 ......
checking 6e32aa7149c1f3ae04fbfa6ec7ea01940a479ce5 ......
	 orig commit -> d472b3a6cf63cd31cae1ed61930f07e6cd6671b5 ......
checking b6f194b64b11e897ba084778d626ce6f57a0563a ......
	 orig commit -> 2610e88946632afb78aa58e61f11368ac4c0af7b ......
checking 3eb86ff32eb54c4345b723ae8dd03bd7487d35bd ......
	 orig commit -> 3c53776e29f81719efcf8f7a6e30cdf753bee94d ......
checking d8b880fcd5a3b75e3d14b7f3fa021a5708f38dec ......
	 orig commit -> 12c8f25a016dff69ee284aa3338bebfd2cfcba33 ......
checking 70b522f163bbb32e120b9fff6977f507abb44f9a ......
	 orig commit -> b5b6e8c8d3b4cbeb447a0f10c7d5de3caa573299 ......
checking 3ad2e6f4f6bf91d75a63ee1f3ff83fcca6a47f64 ......
	 orig commit -> 2f31115e940c4afd49b99c33123534e2ac924ffb ......
checking 1edd825c11f8ed2c409d6fb6b3d90a042cbf738d ......
	 orig commit -> 8b834bff1b73dce46f4e9f5e84af6f73fed8b0ef ......
checking 2e56b37b1dd29de3312919c75f824fecada41634 ......
	 orig commit -> fedb8da96355f5f64353625bf96dc69423ad1826 ......
checking 9ffedb10183cb8f285356749205d584e7b2d57bb ......
	 orig commit -> 66509a276c8c1d19ee3f661a41b418d101c57d29 ......

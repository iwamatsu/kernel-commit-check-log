Check from v4.9.107 to v4.9.108
Commit count: 32
checking 4f42dc62be92afe9863bf2598e6b0d637430f74f ......
checking cd4f9f23853516102fdc5abf0c8851c646ce6471 ......
checking 23873aedff967436b59e478d75ca3317e4f0dfc5 ......
	 orig commit -> 867ac9d737094e46a6c33213f16dd1ec9e8bd5d5 ......
checking e1fba17e26f08a142b4cdf5c74a2113e7f895daa ......
	 orig commit -> 590347e4000356f55eb10b03ced2686bd74dab40 ......
checking 02136f325f84b5dbd5cab556daae15b25948c774 ......
checking 5300a1c7ecc2d676473b6ead6c5d8cbd5922dfa1 ......
	 orig commit -> 5b5e7a0de2bbf2a1afcd9f49e940010e9fb80d53 ......
checking 0e0a027873cf3c9abdbb5dcbdbcbcacccdba69d7 ......
	 orig commit -> 79fb218d97980d4fee9a64f4c8ff05289364ba25 ......
checking c591536e366109c473911d3d61582121220f5676 ......
	 orig commit -> 644c7eebbfd59e72982d11ec6cc7d39af12450ae ......
checking 1f19dd9d09c4fd1e9008c95852065789b9691a2a ......
	 orig commit -> d546b67cda015fb92bfee93d5dc0ceadb91deaee ......
checking 869584ef0984bd88c25a0acd4757b80df7050a47 ......
	 orig commit -> 2f17becfbea5e9a0529b51da7345783e96e69516 ......
checking f833209e15bd6cf066e731463308f0058736a74b ......
	 orig commit -> 1b15ad683ab42a203f98b67045b40720e99d0e9a ......
checking 3ff7364bb06ea807d8ea73206b1b5ec3b0e8a4a9 ......
	 orig commit -> 25ea66544bfd1d9df1b7e1502f8717e85fa1e6e6 ......
checking 2ed49aa1a49a3494de84041f087bcbce57a929f8 ......
	 orig commit -> 1d88ba1ebb2763aa86172cd7ca05dedbeccc0d35 ......
checking 46ad4d8ba44848bda813f114fe8551d7cd8c9bc5 ......
	 orig commit -> fdd13dd350dda1826579eb5c333d76b14513b812 ......
checking 1118c60b599beddce6662aa15e557b1925f1cad9 ......
	 orig commit -> 9aad13b087ab0a588cd68259de618f100053360e ......
checking c1d50432f2be5eab456ffd19da7b78ae475a5e39 ......
	 orig commit -> 9f7c728332e8966084242fcd951aa46583bc308c ......
checking ba2ce02e0584e130c8c61c65e3c1a17fde012193 ......
	 orig commit -> eb73190f4fbeedf762394e92d6a4ec9ace684c88 ......
		 eb73190f4fbeedf762394e92d6a4ec9ace684c88 has problem. Fixes commit -> 4576cd469d980317c4edd9173f8b694aa71ea3a3
commit 59629848737a9b3a1ff461e3ece1ec3d3bf87ced
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Aug 6 10:38:34 2018 -0400

    packet: refine ring v3 block size test to hold one frame
    
    commit 4576cd469d980317c4edd9173f8b694aa71ea3a3 upstream.
    
    TPACKET_V3 stores variable length frames in fixed length blocks.
    Blocks must be able to store a block header, optional private space
    and at least one minimum sized frame.
    
    Frames, even for a zero snaplen packet, store metadata headers and
    optional reserved space.
    
    In the block size bounds check, ensure that the frame of the
    chosen configuration fits. This includes sockaddr_ll and optional
    tp_reserve.
    
    Syzbot was able to construct a ring with insuffient room for the
    sockaddr_ll in the header of a zero-length frame, triggering an
    out-of-bounds write in dev_parse_header.
    
    Convert the comparison to less than, as zero is a valid snap len.
    This matches the test for minimum tp_frame_size immediately below.
    
    Fixes: f6fb8f100b80 ("af-packet: TPACKET_V3 flexible buffer implementation.")
    Fixes: eb73190f4fbe ("net/packet: refine check for priv area size")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 064257ca9397eac2fcd343866e2afc9abd0b61e0 ......
	 orig commit -> 75d4e704fa8d2cf33ff295e5b441317603d7f9fd ......
checking 0ae3ff2e4317be219575f48fd4b118b5b39b7a5e ......
	 orig commit -> eb7f54b90bd8f469834c5e86dcf72ebf9a629811 ......
checking f698b28afc3402c4020e6574e735f7d3857048ce ......
	 orig commit -> 6009d1fe6ba3bb2dab55921da60465329cc1cd89 ......
checking d33ecd26010f1ff4d44a4c27d4c4a73cdf87dd7f ......
	 orig commit -> 730c54d59403658a62af6517338fa8d4922c1b28 ......
checking ffa13b359cd1f3ef60ca5adc59ad5ea229f4cd7d ......
	 orig commit -> 848235edb5c93ed086700584c8ff64f6d7fc778d ......
checking fc7c872ff95799fdb5cd59a4eb879ef87fef4883 ......
	 orig commit -> 322eaa06d55ebc1402a4a8d140945cff536638b4 ......
checking 3e146567d2bf55acaab38414b04cdf6506f8abc2 ......
	 orig commit -> 2677d20677314101293e6da0094ede7b5526d2b1 ......
checking 5dcfc06ba2b547441b096846027f5d30dbd749dd ......
	 orig commit -> dd612f18a49b63af8b3a5f572d999bdb197385bc ......
checking 8655f2847fd5d52fc22ed2d1ce00e801ab6a77c2 ......
	 orig commit -> 76ef6b28ea4f81c3d511866a9b31392caa833126 ......
checking 1ec1dfba0835308ef3119fdc8be01c610da0b035 ......
	 orig commit -> 2ae89c7a82ea9d81a19b4fc2df23bef4b112f24e ......
checking 8d99eb45732d331616e39740028afeb9afaf0b77 ......
	 orig commit -> e2731e55884f2138a252b0a3d7b24d57e49c3c59 ......
checking 4be6529b71dc98696cd760984a98d1397fd90ae3 ......
	 orig commit -> 423913ad4ae5b3e8fb8983f70969fb522261ba26 ......
checking 7a40374c34e8c25062b0d7e2d2152ff8b7af1274 ......
	 orig commit -> be83bbf806822b1b89e0a0f23cd87cddc409e429 ......
		 be83bbf806822b1b89e0a0f23cd87cddc409e429 has problem. Fixes commit -> 423913ad4ae5b3e8fb8983f70969fb522261ba26
76ef6b28ea4f81c3d511866a9b31392caa833126
commit 8655f2847fd5d52fc22ed2d1ce00e801ab6a77c2
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue May 15 13:38:15 2018 +1000

    drm: set FMODE_UNSIGNED_OFFSET for drm files
    
    commit 76ef6b28ea4f81c3d511866a9b31392caa833126 upstream.
    
    Since we have the ttm and gem vma managers using a subset
    of the file address space for objects, and these start at
    0x100000000 they will overflow the new mmap checks.
    
    I've checked all the mmap routines I could see for any
    bad behaviour but overall most people use GEM/TTM VMA
    managers even the legacy drivers have a hashtable.
    
    Reported-and-Tested-by: Arthur Marsh (amarsh04 on #radeon)
    Fixes: be83bbf8068 (mmap: introduce sane default mmap limits)
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 8655f2847fd5d52fc22ed2d1ce00e801ab6a77c2
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue May 15 13:38:15 2018 +1000

    drm: set FMODE_UNSIGNED_OFFSET for drm files
    
    commit 76ef6b28ea4f81c3d511866a9b31392caa833126 upstream.
    
    Since we have the ttm and gem vma managers using a subset
    of the file address space for objects, and these start at
    0x100000000 they will overflow the new mmap checks.
    
    I've checked all the mmap routines I could see for any
    bad behaviour but overall most people use GEM/TTM VMA
    managers even the legacy drivers have a hashtable.
    
    Reported-and-Tested-by: Arthur Marsh (amarsh04 on #radeon)
    Fixes: be83bbf8068 (mmap: introduce sane default mmap limits)
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4be6529b71dc98696cd760984a98d1397fd90ae3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 19 09:29:11 2018 -0700

    mmap: relax file size limit for regular files
    
    commit 423913ad4ae5b3e8fb8983f70969fb522261ba26 upstream.
    
    Commit be83bbf80682 ("mmap: introduce sane default mmap limits") was
    introduced to catch problems in various ad-hoc character device drivers
    doing mmap and getting the size limits wrong.  In the process, it used
    "known good" limits for the normal cases of mapping regular files and
    block device drivers.
    
    It turns out that the "s_maxbytes" limit was less "known good" than I
    thought.  In particular, /proc doesn't set it, but exposes one regular
    file to mmap: /proc/vmcore.  As a result, that file got limited to the
    default MAX_INT s_maxbytes value.
    
    This went unnoticed for a while, because apparently the only thing that
    needs it is the s390 kernel zfcpdump, but there might be other tools
    that use this too.
    
    Vasily suggested just changing s_maxbytes for all of /proc, which isn't
    wrong, but makes me nervous at this stage.  So instead, just make the
    new mmap limit always be MAX_LFS_FILESIZE for regular files, which won't
    affect anything else.  It wasn't the regular file case I was worried
    about.
    
    I'd really prefer for maxsize to have been per-inode, but that is not
    how things are today.
    
    Fixes: be83bbf80682 ("mmap: introduce sane default mmap limits")
    Reported-by: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e876bfa526ce5ef8b385f1272e348d60834a0652 ......
	 orig commit -> 0803d7befa15cab5717d667a97a66214d2a4c083 ......
checking d6313fe3ab2dbe04b7fff2c3aee55d20b1b2bdb0 ......
	 orig commit -> b5d0ebc99bf5d0801a5ecbe958caa3d68b8eaee8 ......

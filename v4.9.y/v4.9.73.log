Check from v4.9.73 to v4.9.74
Commit count: 77
checking 07bcb2489b96b2bd8b030822b4495e4a18c7b5da ......
checking 181a832c2e26ac7ff1e3b3c8bd6b7e9b8d70f870 ......
	 orig commit -> 5dd0b16cdaff9b94da06074d5888b03235c0bf17 ......
		 5dd0b16cdaff9b94da06074d5888b03235c0bf17 has problem. Fixes commit -> 58bc4c34d249bf1bc50730a9a209139347cfacfe
commit e308fb9f145abcdb7f3fbd58f425dc4f00eba869
Author: Jann Horn <jannh@google.com>
Date:   Fri Oct 5 15:52:07 2018 -0700

    mm/vmstat.c: skip NR_TLB_REMOTE_FLUSH* properly
    
    commit 58bc4c34d249bf1bc50730a9a209139347cfacfe upstream.
    
    5dd0b16cdaff ("mm/vmstat: Make NR_TLB_REMOTE_FLUSH_RECEIVED available even
    on UP") made the availability of the NR_TLB_REMOTE_FLUSH* counters inside
    the kernel unconditional to reduce #ifdef soup, but (either to avoid
    showing dummy zero counters to userspace, or because that code was missed)
    didn't update the vmstat_array, meaning that all following counters would
    be shown with incorrect values.
    
    This only affects kernel builds with
    CONFIG_VM_EVENT_COUNTERS=y && CONFIG_DEBUG_TLBFLUSH=y && CONFIG_SMP=n.
    
    Link: http://lkml.kernel.org/r/20181001143138.95119-2-jannh@google.com
    Fixes: 5dd0b16cdaff ("mm/vmstat: Make NR_TLB_REMOTE_FLUSH_RECEIVED available even on UP")
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Christoph Lameter <clameter@sgi.com>
    Cc: Kemi Wang <kemi.wang@intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d76dabb5af066e8da87924825f725f585a41daa0 ......
	 orig commit -> e7e51dcf3b8a5f65c5653a054ad57eb2492a90d0 ......
checking 00fc57ae06c3519a5e32e39882549e4e1f6328fb ......
	 orig commit -> 966031f340185eddd05affcf72b740549f056348 ......
checking 404ae546c7d1927b877d24bf447a462a5c5a5ad7 ......
	 orig commit -> 322f8b8b340c824aef891342b0f5795d15e11562 ......
checking e8119ac05d7160cce59ce1ff04c210c22e147a6c ......
	 orig commit -> 5d62c183f9e9df1deeea0906d099a94e8a43047a ......
		 5d62c183f9e9df1deeea0906d099a94e8a43047a has problem. Fixes commit -> 80d20d35af1edd632a5e7a3b9c0ab7ceff92769e
commit f4a9db57e7dbf929f5262a01c4f5fa240ff79688
Author: Anna-Maria Gleixner <anna-maria@linutronix.de>
Date:   Tue Jul 31 18:13:58 2018 +0200

    nohz: Fix local_timer_softirq_pending()
    
    commit 80d20d35af1edd632a5e7a3b9c0ab7ceff92769e upstream.
    
    local_timer_softirq_pending() checks whether the timer softirq is
    pending with: local_softirq_pending() & TIMER_SOFTIRQ.
    
    This is wrong because TIMER_SOFTIRQ is the softirq number and not a
    bitmask. So the test checks for the wrong bit.
    
    Use BIT(TIMER_SOFTIRQ) instead.
    
    Fixes: 5d62c183f9e9 ("nohz: Prevent a timer interrupt storm in tick_nohz_stop_sched_tick()")
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Reviewed-by: Daniel Bristot de Oliveira <bristot@redhat.com>
    Acked-by: Frederic Weisbecker <frederic@kernel.org>
    Cc: bigeasy@linutronix.de
    Cc: peterz@infradead.org
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180731161358.29472-1-anna-maria@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 249d4a9b3246f4ec92433ba8ea3bae5ceb4dc1ed ......
	 orig commit -> 26456f87aca7157c057de65c9414b37f1ab881d1 ......
checking 574e543ff970ea208d6d97524e0373d3741a6a34 ......
	 orig commit -> fd45bb77ad682be728d1002431d77b8c73342836 ......
checking d840687aa8a3ca7b8219b1a207a1c55e47c90225 ......
	 orig commit -> ced6d5c11d3e7b342f1a80f908e6756ebd4b8ddd ......
		 ced6d5c11d3e7b342f1a80f908e6756ebd4b8ddd has problem. Fixes commit -> ed4bbf7910b28ce3c691aef28d245585eaabda06
commit 676109b28cadbb9c6e6fedee733f3b2111923f17
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Jan 14 23:19:49 2018 +0100

    timers: Unconditionally check deferrable base
    
    commit ed4bbf7910b28ce3c691aef28d245585eaabda06 upstream.
    
    When the timer base is checked for expired timers then the deferrable base
    must be checked as well. This was missed when making the deferrable base
    independent of base::nohz_active.
    
    Fixes: ced6d5c11d3e ("timers: Use deferrable base independent of base::nohz_active")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sebastian Siewior <bigeasy@linutronix.de>
    Cc: Paul McKenney <paulmck@linux.vnet.ibm.com>
    Cc: rt@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 09d3e69305b32a43de75d36430f9856df8055022 ......
	 orig commit -> da99706689481717998d1d48edd389f339eea979 ......
checking ab1fbfecd3300325c69b6dd2434329fadec26257 ......
	 orig commit -> 07b9f12864d16c3a861aef4817eb1efccbc5d0e6 ......
checking 425d2f15338d9a65ea3bd57b481c8a55a1deebbd ......
	 orig commit -> b9096d9f15c142574ebebe8fbb137012bb9d99c2 ......
checking 0f2e9cbc231c0de2dfd5785e7b83b10145ace76b ......
	 orig commit -> 7f038d256c723dd390d2fca942919573995f4cfd ......
checking d98f4d4d028393aac5113c943c289ef3ad1c36f3 ......
	 orig commit -> 3920bb713038810f25770e7545b79f204685c8f2 ......
checking 192cdf5ecaf841d172e2c3a6bb6b5aaed530b68b ......
	 orig commit -> 08933099e6404f588f81c2050bfec7313e06eeaf ......
checking 6ab3d87ad702941243b53be7e1c45393dc5df4c6 ......
	 orig commit -> 92a18a657fb2e2ffbfa0659af32cc18fd2346516 ......
checking 0af1aebb6a8b0d9816777b4fea304c4272e067fe ......
	 orig commit -> c6a36ad383559a60a249aa6016cebf3cb8b6c485 ......
checking 03dce0573d38a17ca5ffc798611a9026f9792477 ......
	 orig commit -> 8272d099d05f7ab2776cf56a2ab9f9443be18907 ......
checking 9e9f4255c0d3465c11fe6262e008ccf832db5f26 ......
	 orig commit -> 248a22044366f588d46754c54dfe29ffe4f8b4df ......
checking 1ef5c433b3b9deaa81095d7065df04877567b778 ......
	 orig commit -> 90120d15f4c397272aaf41077960a157fc4212bf ......
		 90120d15f4c397272aaf41077960a157fc4212bf has problem. Fixes commit -> 55448d85ae2f7f2b6c43d66946146ec89b4eb088
checking 3c579d0b4f0f07ab5c57dd3329ca07d70168879b ......
	 orig commit -> 544c4605acc5ae4afe7dd5914147947db182f2fb ......
checking 67b539cab43cf3e46896a747004c923abf33ae17 ......
	 orig commit -> 02f510f326501470348a5df341e8232c3497bbbb ......
checking 476d7d6932953a3ca8d7cde01e75284268f4f52e ......
	 orig commit -> 8a03a3692b100d84785ee7a834e9215e304c9e00 ......
checking 475018c79742ecd5806a9fde88582f13b2d5a5c7 ......
	 orig commit -> b22d73d6689fd902a66c08ebe71ab2f3b351e22f ......
checking 6ed7c48e93bb800077b1bd7a24b5b86e675f3764 ......
	 orig commit -> 7fbd9493f0eeae8cef58300505a9ef5c8fce6313 ......
checking 7493d98ea84c1fb92feef5b2e863d696a1634448 ......
	 orig commit -> dbff26e44dc3ec4de6578733b054a0114652a764 ......
checking c844a458948711c36105bf0b4e8771b104e1906b ......
	 orig commit -> 0c1cc8b2215f5122ca614b5adca60346018758c3 ......
checking 604225824f063bb6a737af564cd5261fba7d8221 ......
	 orig commit -> 23f4cc2cd9ed92570647220aca60d0197d8c1fa9 ......
checking d1614fd9cd1039f26aaf63cbb261d5ccc3bdf133 ......
	 orig commit -> 6323514116404cc651df1b7fffa1311ddf8ce647 ......
checking 9424a79ec11d5aac7fcb73583afc448be1ca6848 ......
	 orig commit -> 2989ad1ec03021ee6d2193c35414f1d970a243de ......
checking 138723912343f74b23170a2f86728f70e65e4d6b ......
	 orig commit -> 37e92a9d4fe38dc3e7308913575983a6a088c8d4 ......
checking e74fe7268e7eadb2880d3842fe167131220d5616 ......
	 orig commit -> d4761754b4fb2ef8d9a1e9d121c4bec84e1fe292 ......
checking 58f6ebbd3424ef855cf28887f20965bfbef13b90 ......
	 orig commit -> 35b99dffc3f710cafceee6c8c6ac6a98eb2cb4bf ......
checking a746fadd5e3187b814a66769355adcc9524839e6 ......
	 orig commit -> c1a8d0a3accf64a014d605e6806ce05d1c17adf1 ......
checking 03c93293a83a603fc5b87fc15321f392d3cf0043 ......
	 orig commit -> 21b5944350052d2583e82dd59b19a9ba94a007f0 ......
checking 8c38f3190fd69ec1700f83078785b83e173f1499 ......
	 orig commit -> fbbeefdd21049fcf9437c809da3828b210577f36 ......
checking 243adaa4eaea5088aa5a8813b82bb6098ba6fb92 ......
	 orig commit -> 84aeb437ab98a2bce3d4b2111c79723aedfceb33 ......
checking e4f6698027751bdca656e90f568b9cc8f5e7f401 ......
	 orig commit -> b4681c2829e24943aadd1a7bb3a30d41d0a20050 ......
checking e51abae8458a36b24b18162873578ef788412191 ......
	 orig commit -> 74c4b656c3d92ec4c824ea1a4afd726b7b6568c8 ......
checking ae67e5486b972610648cd8ad1abff4049e7e8b0c ......
	 orig commit -> 8cb38a602478e9f806571f6920b0a3298aabf042 ......
checking 99cf2daf0da31b0b1853d1ccec9fbabc9d5856ae ......
	 orig commit -> 589bf32f09852041fbd3b7ce1a9e703f95c230ba ......
checking f75f910ffa90af17eeca18714847eaa0f16cb4ad ......
	 orig commit -> 8f659a03a0ba9289b9aeb9b4470e6fb263d6f483 ......
		 8f659a03a0ba9289b9aeb9b4470e6fb263d6f483 has problem. Fixes commit -> 20b50d79974ea3192e8c3ab7faf4e536e5f14d8f
checking 484369ff9715ed4f7a2d7b3da27249674a25a523 ......
	 orig commit -> 748a240c589824e9121befb1cba5341c319885bc ......
checking 7887a700ce613bcf200edda53ca824d691c6ee8f ......
	 orig commit -> 30791ac41927ebd3e75486f9504b6d2280463bf0 ......
checking a4bf8efd2bcb233c422adc663552515dc4ee0da8 ......
	 orig commit -> c589e69b508d29ed8e644dfecda453f71c02ec27 ......
checking 53288d82188ba3f69731283c78430121c246e737 ......
	 orig commit -> 14e138a86f6347c6199f610576d2e11c03bec5f0 ......
checking 8b032bde28998122bd38cd9e7ee1e52cd15f4773 ......
	 orig commit -> a8ceb5dbfde1092b466936bca0ff3be127ecf38e ......
checking b3b56038bab017847ac9e1c5610fc00567b51d00 ......
	 orig commit -> 513674b5a2c9c7a67501506419da5c3c77ac6f08 ......
		 513674b5a2c9c7a67501506419da5c3c77ac6f08 has problem. Fixes commit -> e9191ffb65d8e159680ce0ad2224e1acbde6985c
commit 8b0d3e81cdecb92b12c9d7924749a6f62f855790
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Mon Jan 22 20:06:42 2018 +0000

    ipv6: Fix getsockopt() for sockets with default IPV6_AUTOFLOWLABEL
    
    
    [ Upstream commit e9191ffb65d8e159680ce0ad2224e1acbde6985c ]
    
    Commit 513674b5a2c9 ("net: reevalulate autoflowlabel setting after
    sysctl setting") removed the initialisation of
    ipv6_pinfo::autoflowlabel and added a second flag to indicate
    whether this field or the net namespace default should be used.
    
    The getsockopt() handling for this case was not updated, so it
    currently returns 0 for all sockets for which IPV6_AUTOFLOWLABEL is
    not explicitly enabled.  Fix it to return the effective value, whether
    that has been set at the socket or net namespace level.
    
    Fixes: 513674b5a2c9 ("net: reevalulate autoflowlabel setting after sysctl ...")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8baa58c5d536462977907773d351d656b8b6dd1e ......
	 orig commit -> aceef61ee56898cfa7b6960fb60b9326c3860441 ......
checking 0b18782288a2f1c2a25e85d2553c15ea83bb5802 ......
	 orig commit -> 93c647643b48f0131f02e45da3bd367d80443291 ......
checking 2c1a0b2e2bac6a35121d9ea9547b4b66d6f1380b ......
	 orig commit -> a46182b00290839fa3fa159d54fd3237bd8669f0 ......
		 a46182b00290839fa3fa159d54fd3237bd8669f0 has problem. Fixes commit -> e7aadb27a5415e8125834b84a74477bfbee4eff5
ad23b750933ea7bf962678972a286c78a8fa36aa
commit ce43c07fcef8cf5cdbc7a45db7a6b4a1a7473905
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Feb 1 10:26:57 2018 -0800

    net: igmp: add a missing rcu locking section
    
    
    [ Upstream commit e7aadb27a5415e8125834b84a74477bfbee4eff5 ]
    
    Newly added igmpv3_get_srcaddr() needs to be called under rcu lock.
    
    Timer callbacks do not ensure this locking.
    
    =============================
    WARNING: suspicious RCU usage
    4.15.0+ #200 Not tainted
    -----------------------------
    ./include/linux/inetdevice.h:216 suspicious rcu_dereference_check() usage!
    
    other info that might help us debug this:
    
    rcu_scheduler_active = 2, debug_locks = 1
    3 locks held by syzkaller616973/4074:
     #0:  (&mm->mmap_sem){++++}, at: [<00000000bfce669e>] __do_page_fault+0x32d/0xc90 arch/x86/mm/fault.c:1355
     #1:  ((&im->timer)){+.-.}, at: [<00000000619d2f71>] lockdep_copy_map include/linux/lockdep.h:178 [inline]
     #1:  ((&im->timer)){+.-.}, at: [<00000000619d2f71>] call_timer_fn+0x1c6/0x820 kernel/time/timer.c:1316
     #2:  (&(&im->lock)->rlock){+.-.}, at: [<000000005f833c5c>] spin_lock_bh include/linux/spinlock.h:315 [inline]
     #2:  (&(&im->lock)->rlock){+.-.}, at: [<000000005f833c5c>] igmpv3_send_report+0x98/0x5b0 net/ipv4/igmp.c:600
    
    stack backtrace:
    CPU: 0 PID: 4074 Comm: syzkaller616973 Not tainted 4.15.0+ #200
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:53
     lockdep_rcu_suspicious+0x123/0x170 kernel/locking/lockdep.c:4592
     __in_dev_get_rcu include/linux/inetdevice.h:216 [inline]
     igmpv3_get_srcaddr net/ipv4/igmp.c:329 [inline]
     igmpv3_newpack+0xeef/0x12e0 net/ipv4/igmp.c:389
     add_grhead.isra.27+0x235/0x300 net/ipv4/igmp.c:432
     add_grec+0xbd3/0x1170 net/ipv4/igmp.c:565
     igmpv3_send_report+0xd5/0x5b0 net/ipv4/igmp.c:605
     igmp_send_report+0xc43/0x1050 net/ipv4/igmp.c:722
     igmp_timer_expire+0x322/0x5c0 net/ipv4/igmp.c:831
     call_timer_fn+0x228/0x820 kernel/time/timer.c:1326
     expire_timers kernel/time/timer.c:1363 [inline]
     __run_timers+0x7ee/0xb70 kernel/time/timer.c:1666
     run_timer_softirq+0x4c/0x70 kernel/time/timer.c:1692
     __do_softirq+0x2d7/0xb85 kernel/softirq.c:285
     invoke_softirq kernel/softirq.c:365 [inline]
     irq_exit+0x1cc/0x200 kernel/softirq.c:405
     exiting_irq arch/x86/include/asm/apic.h:541 [inline]
     smp_apic_timer_interrupt+0x16b/0x700 arch/x86/kernel/apic/apic.c:1052
     apic_timer_interrupt+0xa9/0xb0 arch/x86/entry/entry_64.S:938
    
    Fixes: a46182b00290 ("net: igmp: Use correct source address on IGMPv3 reports")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ae16964f2154266f411b639ef101869ac3ae0b5
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Jan 19 11:50:46 2018 +0100

    net: igmp: fix source address check for IGMPv3 reports
    
    
    [ Upstream commit ad23b750933ea7bf962678972a286c78a8fa36aa ]
    
    Commit "net: igmp: Use correct source address on IGMPv3 reports"
    introduced a check to validate the source address of locally generated
    IGMPv3 packets.
    Instead of checking the local interface address directly, it uses
    inet_ifa_match(fl4->saddr, ifa), which checks if the address is on the
    local subnet (or equal to the point-to-point address if used).
    
    This breaks for point-to-point interfaces, so check against
    ifa->ifa_local directly.
    
    Cc: Kevin Cernekee <cernekee@chromium.org>
    Fixes: a46182b00290 ("net: igmp: Use correct source address on IGMPv3 reports")
    Reported-by: Sebastian Gottschall <s.gottschall@dd-wrt.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit ce43c07fcef8cf5cdbc7a45db7a6b4a1a7473905
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Feb 1 10:26:57 2018 -0800

    net: igmp: add a missing rcu locking section
    
    
    [ Upstream commit e7aadb27a5415e8125834b84a74477bfbee4eff5 ]
    
    Newly added igmpv3_get_srcaddr() needs to be called under rcu lock.
    
    Timer callbacks do not ensure this locking.
    
    =============================
    WARNING: suspicious RCU usage
    4.15.0+ #200 Not tainted
    -----------------------------
    ./include/linux/inetdevice.h:216 suspicious rcu_dereference_check() usage!
    
    other info that might help us debug this:
    
    rcu_scheduler_active = 2, debug_locks = 1
    3 locks held by syzkaller616973/4074:
     #0:  (&mm->mmap_sem){++++}, at: [<00000000bfce669e>] __do_page_fault+0x32d/0xc90 arch/x86/mm/fault.c:1355
     #1:  ((&im->timer)){+.-.}, at: [<00000000619d2f71>] lockdep_copy_map include/linux/lockdep.h:178 [inline]
     #1:  ((&im->timer)){+.-.}, at: [<00000000619d2f71>] call_timer_fn+0x1c6/0x820 kernel/time/timer.c:1316
     #2:  (&(&im->lock)->rlock){+.-.}, at: [<000000005f833c5c>] spin_lock_bh include/linux/spinlock.h:315 [inline]
     #2:  (&(&im->lock)->rlock){+.-.}, at: [<000000005f833c5c>] igmpv3_send_report+0x98/0x5b0 net/ipv4/igmp.c:600
    
    stack backtrace:
    CPU: 0 PID: 4074 Comm: syzkaller616973 Not tainted 4.15.0+ #200
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:53
     lockdep_rcu_suspicious+0x123/0x170 kernel/locking/lockdep.c:4592
     __in_dev_get_rcu include/linux/inetdevice.h:216 [inline]
     igmpv3_get_srcaddr net/ipv4/igmp.c:329 [inline]
     igmpv3_newpack+0xeef/0x12e0 net/ipv4/igmp.c:389
     add_grhead.isra.27+0x235/0x300 net/ipv4/igmp.c:432
     add_grec+0xbd3/0x1170 net/ipv4/igmp.c:565
     igmpv3_send_report+0xd5/0x5b0 net/ipv4/igmp.c:605
     igmp_send_report+0xc43/0x1050 net/ipv4/igmp.c:722
     igmp_timer_expire+0x322/0x5c0 net/ipv4/igmp.c:831
     call_timer_fn+0x228/0x820 kernel/time/timer.c:1326
     expire_timers kernel/time/timer.c:1363 [inline]
     __run_timers+0x7ee/0xb70 kernel/time/timer.c:1666
     run_timer_softirq+0x4c/0x70 kernel/time/timer.c:1692
     __do_softirq+0x2d7/0xb85 kernel/softirq.c:285
     invoke_softirq kernel/softirq.c:365 [inline]
     irq_exit+0x1cc/0x200 kernel/softirq.c:405
     exiting_irq arch/x86/include/asm/apic.h:541 [inline]
     smp_apic_timer_interrupt+0x16b/0x700 arch/x86/kernel/apic/apic.c:1052
     apic_timer_interrupt+0xa9/0xb0 arch/x86/entry/entry_64.S:938
    
    Fixes: a46182b00290 ("net: igmp: Use correct source address on IGMPv3 reports")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 930882f8b83105eb6e4827bf87b38ecaa47c404a ......
	 orig commit -> 178e5f57a8d8f8fc5799a624b96fc31ef9a29ffa ......
checking f6d7cdbb028506040b951768565892a4eff0a330 ......
	 orig commit -> b9b312a7a451e9c098921856e7cfbc201120e1a7 ......
checking c2f78bf8ca3aa18e51f1de41093db5adae2c5f34 ......
	 orig commit -> b5476022bbada3764609368f03329ca287528dc8 ......
checking b929ccccbc8c22736d1fd722da181e275465f5a6 ......
	 orig commit -> 3ce120b16cc548472f80cf8644f90eda958cf1b6 ......
checking 04bdf71d9f7412364e9bae93f321e6bf776cd1d4 ......
	 orig commit -> 924c6b900cfdf376b07bccfd80e62b21914f8a5a ......
checking b52f937eccd4c68000ba80cd03609bcf1f97c141 ......
	 orig commit -> 660da7c9228f685b2ebe664f9fd69aaddcc420b5 ......
		 660da7c9228f685b2ebe664f9fd69aaddcc420b5 has problem. Fixes commit -> 924c6b900cfdf376b07bccfd80e62b21914f8a5a
c7ad5ad297e644601747d6dbee978bf85e14f7bc
f34902c5c6c08024371202a680ce69f2d488776d
commit 04bdf71d9f7412364e9bae93f321e6bf776cd1d4
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Oct 8 21:53:05 2017 -0700

    x86/mm/64: Fix reboot interaction with CR4.PCIDE
    
    commit 924c6b900cfdf376b07bccfd80e62b21914f8a5a upstream.
    
    Trying to reboot via real mode fails with PCID on: long mode cannot
    be exited while CR4.PCIDE is set.  (No, I have no idea why, but the
    SDM and actual CPUs are in agreement here.)  The result is a GPF and
    a hang instead of a reboot.
    
    I didn't catch this in testing because neither my computer nor my VM
    reboots this way.  I can trigger it with reboot=bios, though.
    
    Fixes: 660da7c9228f ("x86/mm: Enable CR4.PCIDE on supported systems")
    Reported-and-tested-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: https://lkml.kernel.org/r/f1e7d965998018450a7a70c2823873686a8b21c0.1507524746.git.luto@kernel.org
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e6a29320de005792c06f2deec2c77b19c42d1e6a ......
	 orig commit -> 0790c9aad84901ca1bdc14746175549c8b5da215 ......
checking 1e7f3d8875ee92983bd754982af7f4f044dd057d ......
	 orig commit -> cba4671af7550e008f7a7835f06df0763825bf3e ......
		 cba4671af7550e008f7a7835f06df0763825bf3e has problem. Fixes commit -> b8b7abaed7a49b350f8ba659ddc264b04931d581
commit 00bcb5ada638d884818aad7d46f90501bac761e9
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Sep 17 09:03:50 2017 -0700

    x86/mm/32: Move setup_clear_cpu_cap(X86_FEATURE_PCID) earlier
    
    commit b8b7abaed7a49b350f8ba659ddc264b04931d581 upstream.
    
    Otherwise we might have the PCID feature bit set during cpu_init().
    
    This is just for robustness.  I haven't seen any actual bugs here.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bpetkov@suse.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: cba4671af755 ("x86/mm: Disable PCID on 32-bit kernels")
    Link: http://lkml.kernel.org/r/b16dae9d6b0db5d9801ddbebbfd83384097c61f3.1505663533.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3e5daacf65173987436bad6ab9039a05f9545cdd ......
	 orig commit -> ce4a4e565f5264909a18c733b864c3f74467f69e ......
		 ce4a4e565f5264909a18c733b864c3f74467f69e has problem. Fixes commit -> 5dd0b16cdaff9b94da06074d5888b03235c0bf17
commit 181a832c2e26ac7ff1e3b3c8bd6b7e9b8d70f870
Author: Andy Lutomirski <luto@kernel.org>
Date:   Mon Jun 5 07:40:25 2017 -0700

    mm/vmstat: Make NR_TLB_REMOTE_FLUSH_RECEIVED available even on UP
    
    commit 5dd0b16cdaff9b94da06074d5888b03235c0bf17 upstream.
    
    This fixes CONFIG_SMP=n, CONFIG_DEBUG_TLBFLUSH=y without introducing
    further #ifdef soup.  Caught by a Kbuild bot randconfig build.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: ce4a4e565f52 ("x86/mm: Remove the UP asm/tlbflush.h code, always use the (formerly) SMP code")
    Link: http://lkml.kernel.org/r/76da9a3cc4415996f2ad2c905b93414add322021.1496673616.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking a94af050080f3301eecb4e7f7bbe59899568446d ......
	 orig commit -> ca6c99c0794875c6d1db6e22f246699691ab7e6b ......
checking 113980c002eb092a1f947389c933740193ada766 ......
	 orig commit -> ce27374fabf553153c3f53efcaa9bfab9216bd8c ......
checking 219acedb061c56a46e5cf562cb072cd2815a1263 ......
	 orig commit -> 29961b59a51f8c6838a26a45e871a7ed6771809b ......
checking 72b812d5b874893070f81afa2d4b4ccc7f0efa5f ......
	 orig commit -> 9ccee2373f0658f234727700e619df097ba57023 ......
checking 65ca46e5fe123ebd5128f0af1eaaef35251d4bc4 ......
	 orig commit -> 285d5ddcffafa5d5e68c586f4c9eaa8b24a2897d ......
checking a1dbcd823a302fa90766ca4eb80374031d4dea72 ......
	 orig commit -> a36c2638380c0a4676647a1f553b70b20d3ebce1 ......
checking d30d1761bc433d5ab5b620129b0efa3d4a7c6e52 ......
	 orig commit -> 737e0b7b67bdfe24090fab2852044bb283282fc5 ......
checking b04640a450d3306eb350ef758336ce7385471646 ......
	 orig commit -> 15f8c5f2415bfac73f33a14bcd83422bcbfb5298 ......
checking 00add00ed2c0d59aceaf83981afc00228f357387 ......
	 orig commit -> 695b78b548d8a26288f041e907ff17758df9e1d5 ......
checking 35f87d45cba354936430f93feba7b46edaf35e5c ......
	 orig commit -> bc6476d6c1edcb9b97621b5131bd169aa81f27db ......
checking 125e81b5afcb50dc48c7c2058631e8fd2b10a1ba ......
	 orig commit -> 50dd2ea8ef67a1617e0c0658bcbec4b9fb03b936 ......
checking 72d5e020c0ef77ba86f2a5ff37620b65ba7d5daf ......
	 orig commit -> f55688c45442bc863f40ad678c638785b26cdce6 ......
checking 2e0d458c315ab2bee425212725aae841e0f6dd6a ......
	 orig commit -> 45d8b80c2ac5d21cd1e2954431fb676bc2b1e099 ......
checking 81e155e7b023dd8967ddead36edf8a6a0e2ba72b ......
	 orig commit -> 24f2aaf952ee0b59f31c3a18b8b36c9e3d3c2cf5 ......
checking 5dc4cd2688e39b0286e9a4b815c9bf5e71b5a685 ......
	 orig commit -> 4397f04575c44e1440ec2e49b6302785c95fd2f8 ......
checking 6edea15d120c6e18b6383969e35d6a9683b31d2c ......
	 orig commit -> 6b7e633fe9c24682df550e5311f47fb524701586 ......
checking 3d16a1315add12386894e7dc7bc86454e4f4b79d ......
	 orig commit -> 2816c0455cea088f07a210f8a00701a82a78aa9c ......
	 orig commit -> 12a78d43de767eaf8fb272facb7a7b6f2dc6a9df ......

Check from v4.9.102 to v4.9.103
Commit count: 97
checking aa4b4ace9ce02cf164e0982739e9565d6214cfa9 ......
checking 0c60045656488690b047aa535bc3c3328a544062 ......
	 orig commit -> 347876ad47b9923ce26e686173bbf46581802ffa ......
checking dd6b3e0a66592a72914be1d38ba29f93804e3161 ......
	 orig commit -> b3a5ac42ab18b7d1a8f2f072ca0ee76a3b754a43 ......
		 b3a5ac42ab18b7d1a8f2f072ca0ee76a3b754a43 has problem. Fixes commit -> 7ce9a992ffde8ce93d5ae5767362a5c7389ae895
commit c616a9326b235e6531a129f1bd68f7767607302e
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Mon Nov 5 03:48:25 2018 +0000

    rtc: hctosys: Add missing range error reporting
    
    commit 7ce9a992ffde8ce93d5ae5767362a5c7389ae895 upstream.
    
    Fix an issue with the 32-bit range error path in `rtc_hctosys' where no
    error code is set and consequently the successful preceding call result
    from `rtc_read_time' is propagated to `rtc_hctosys_ret'.  This in turn
    makes any subsequent call to `hctosys_show' incorrectly report in sysfs
    that the system time has been set from this RTC while it has not.
    
    Set the error to ERANGE then if we can't express the result due to an
    overflow.
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    Fixes: b3a5ac42ab18 ("rtc: hctosys: Ensure system time doesn't overflow time_t")
    Cc: stable@vger.kernel.org # 4.17+
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 36ce931c4286f77c5f37b487514a59103a2308c4 ......
	 orig commit -> 1485991c024603b2fb4ae77beb7a0d741128a48e ......
checking 3ac3103cd0dd2d67c2331377844dffd8b13c3ba6 ......
	 orig commit -> 2e9fe539108320820016f78ca7704a7342788380 ......
checking 561a4f4d9d4d0f71333ab53bc29a96b74edaedb2 ......
	 orig commit -> f9f5786987e81d166c60833edcb7d1836aa16944 ......
checking cd777719e331432c74ecc75acbe653beb1d9180c ......
	 orig commit -> ffab87fdecc655cc676f8be8dd1a2c5e22bd6d47 ......
checking a301f13f34b8359f4844b2961789afbfc10bd21d ......
	 orig commit -> 5673444821406dda5fc25e4b52aca419f8065a19 ......
checking 2e876eae48736674bf2c5caa9c49566dffabb991 ......
	 orig commit -> dd345a31bfdec350d2593e6de5964e55c7f19c76 ......
checking 2803df3004f05ed6649e01cbf16224be0c845494 ......
	 orig commit -> 49ee23b71877831ac087d6083f6f397dc19c9664 ......
checking 4cb84bd8720ebe445d0ef8976307b78894b93262 ......
	 orig commit -> e7d75e18d0fc3f7193b65282b651f980c778d935 ......
checking 7c36063750f3fcc7b22a0b301a8f78cde5fa5365 ......
	 orig commit -> 67300abdbe9f1717532aaf4e037222762716d0f6 ......
checking 9639854bd3b82d8590e1888f80b6ca4bacc3465b ......
	 orig commit -> 65243386f41d38460bfd4375d231a7c0346d0401 ......
checking 28ea156b65622edc8384d0688db8aeb206f2e48b ......
	 orig commit -> d13a0139d7874a0577b5955d6eed895517d23b72 ......
checking 07c41c408f32fceabcc4541d9d550333c427f7fc ......
	 orig commit -> a398e043637a4819a0e96467bfecaabf3224dd62 ......
checking 9a2347ab98806576b7159740220021d4fbe80fdb ......
	 orig commit -> 779c79d4b833ec646b0aed878da38edb45bbe156 ......
checking 40a8962a531db9823db2c091303357debed16c5b ......
	 orig commit -> a145f64c6107d3aa5a7cec9f8977d04ac2a896c9 ......
checking 515702e0a90097344b9ec851501bb87074be47f5 ......
	 orig commit -> a8321e7887410a2b2e80ab89d1ef7b30562658ea ......
checking a5637e4c95106da860472bbe528dff4c7c8b8d65 ......
	 orig commit -> 2ac051eeabaa411ef89ae7cd5bb8e60cb41ad780 ......
checking 8c762043010c19ebe3bc59ba7119234531929bb4 ......
	 orig commit -> ab0447845cffc0fd752df2ccd6b4e34006000ce4 ......
checking 1b287c3a10d8a993af3728664ce84f1ade62c3f2 ......
	 orig commit -> cdb68fbd4e7962be742c4f29475220c5bf28d8a5 ......
checking 2434a0623bccd3c4bc68df79697fcb5e8ed1165a ......
	 orig commit -> 7e4db0c2836e892766565965207eee051c8037b9 ......
checking c2cc0c41a7ab54ac20cf04589a9f84aae0d28f30 ......
	 orig commit -> 179db533c08431f509a3823077549773d519358b ......
checking 1325a6c91a880e3aacb7a0acc3dfba3840361653 ......
	 orig commit -> 4bf59902b50012b1dddeeaa23b217d9c4956cdda ......
checking e651dc5a400262cf0f9f52edaf381df2f8dfd634 ......
	 orig commit -> 5ceade1d97fc6687e050c44c257382c192f56276 ......
checking eaab238dbb53206d2864074d0365a263a51054e2 ......
	 orig commit -> c35b518f9ba06c9de79fb3ff62eed7462d804995 ......
checking 2c440ef456c297c44c2fa5bc061f995ab7692344 ......
	 orig commit -> 1f9c63e8de3d7b377c9d74e4a17524cfb60e6384 ......
checking f19681dfbb927df582e856a6d26c685ee201892c ......
	 orig commit -> 4b0556a441dd37e598887215bc89b49a6ef525b3 ......
checking 608ae38610e62c719ad5fff57b7d47c82f68cd84 ......
	 orig commit -> 647d04f8e07afc7c3b7a42b3ee01a8b28db29631 ......
		 647d04f8e07afc7c3b7a42b3ee01a8b28db29631 has problem. Fixes commit -> 860b454c2c0cbda6892954f5cdbbb48931b3c8db
checking a74ae617a73b520f0ed719388d3c502d54b164da ......
	 orig commit -> bde8b3887add8368ecf0ca71117baf2fd56a6fc9 ......
checking bdaea52d57a2b80c4f7770be894f6b83415510a0 ......
	 orig commit -> 123af9043e93cb6f235207d260d50f832cdb5439 ......
checking e0d35e31c5257438ab6824ab27dd9ac06277a58f ......
	 orig commit -> 04673e38f56b30cd39b1fa0f386137d818b17781 ......
checking 24678510078c388e89a14545790f28c62c010914 ......
	 orig commit -> 161df4f09987ae2e9f0f97f0b38eee298b4a39ff ......
checking a3adc584abfb4ca44715a5c38d9fe88d9f16f1e5 ......
	 orig commit -> 2289e9598dde9705400559ca2606fb8c145c34f0 ......
checking f652149cf3cb0faffe186d6243ee2a55346835b9 ......
	 orig commit -> e75fba9c0668b3767f608ea07485f48d33c270cf ......
checking 2272b67140651aade50a65579a68bdf51bffe2c5 ......
	 orig commit -> 1c6b41fb92936fa5facea464d5d7cbf855966d04 ......
checking 466a2b7ac9fb99ddc0ff1771c31194d9855997d2 ......
	 orig commit -> 20bd1d026aacc5399464f8328f305985c493cde3 ......
checking 4a8907dc9fa9d54c4a4a09a386ec453d3c1128db ......
	 orig commit -> 864449eea7c600596e305ffdc4a6a846414b222c ......
checking e3685f99492c323061d1c33ff1cfadc2d7406a9f ......
	 orig commit -> 1bc5ad3a6acdcf56f83272f2de1cd2389ea9e9e2 ......
checking 3e0421562e04c341e996baa89370339d0282469b ......
	 orig commit -> 00c20cdc79259c6c5bf978b21af96c2d3edb646d ......
checking cd8acc46808b3e7f209c8168094d85d988a2229e ......
	 orig commit -> cabe92a55e3a12005a4ac4d3954c9a174b0efe2a ......
checking 4646c1af466c3999afa6fe36965206a7ca4449de ......
	 orig commit -> c02189e12ce3bf3808cb880569d3b10249f50bd9 ......
checking 95bcf5b14e31a232bdeb606219c5eaa5b96e285c ......
	 orig commit -> a7043e9529f3c367cc4d82997e00be034cbe57ca ......
checking 13a3e883ce6f2c740b4e75c1f907792fab493470 ......
	 orig commit -> e6f791d95313c85f3dd4a26141e28e50ae9aa0ae ......
checking ac6572952cbbac58381636a7e28cb57fffe90adb ......
	 orig commit -> ecf7ff49945f5741fa1da112f994939f942031d3 ......
checking 9760af4d2eca3e836b43de41f4108b582ff7c02b ......
	 orig commit -> 84af7e8b895088d89f246d6b0f82717fafdebf61 ......
checking 2c0fd4ba0587fa3e78c9b42cf50db0556b7e1c0b ......
	 orig commit -> 96d5eaa9bb74d299508d811d865c2c41b38b0301 ......
checking e422d89fb59d05fd28a2e9bd9cfb496e3f50be81 ......
	 orig commit -> 7c73cf4cc2ac16465f5102437dc0a12d66671bd6 ......
checking 86a3f2d3b758e0ba5c02d56500fc273657ff941d ......
	 orig commit -> 17556cdbe6ed70a6a20e597b228628f7f34387f8 ......
checking 1c0344c493086357926ef9fe71312d414c238bee ......
	 orig commit -> e1a7418529e33bc4efc346324557251a16a3e79b ......
checking 602263054df7733f2ceeda7d1c61dd8d72145613 ......
	 orig commit -> 2fab9faf9b27298c4536c1c1b14072ab18b8f80b ......
checking d6f521863130a0328cd46f08264dbab6c65787e6 ......
	 orig commit -> fed03fe7e55b7dc16077f672bd9d7bbe92b3a691 ......
checking 5104f3671139006e323afcdffaec50a2205c856b ......
	 orig commit -> c7c7e8d7803406daa21e96d00c357de8b77b6764 ......
checking bf54f31e1fbe656cd8fea7a54404296e6077f9e9 ......
	 orig commit -> 5d6ae4f0da8a64a185074dabb1b2f8c148efa741 ......
checking 2e94f8cde34742ccfe9642ac42d31bbe76d1e77d ......
	 orig commit -> ac87e560f7c0f91b62012e9a159c0681a373b922 ......
checking 5209c778346ac9e34a4100b55a7dd23503821fe1 ......
	 orig commit -> 4058ebf33cb0be88ca516f968eda24ab7b6b93e4 ......
checking 10be2659c629f815edbb12a9ec9e4f73f31b73fe ......
	 orig commit -> 946ef68ad4e45aa048a5fb41ce8823ed29da866a ......
		 946ef68ad4e45aa048a5fb41ce8823ed29da866a has problem. Fixes commit -> e610257e462f6104792d22fbb0927724df3bc401
4d644abf25698362bd33d17c9ddc8f7122c30f17
commit 9e10043b6bdcc1a991a029de8a0bc745950345c6
Author: Jerry Zhang <zhangjerry@google.com>
Date:   Mon Jul 2 12:48:08 2018 -0700

    usb: gadget: f_fs: Only return delayed status when len is 0
    
    commit 4d644abf25698362bd33d17c9ddc8f7122c30f17 upstream.
    
    Commit 1b9ba000 ("Allow function drivers to pause control
    transfers") states that USB_GADGET_DELAYED_STATUS is only
    supported if data phase is 0 bytes.
    
    It seems that when the length is not 0 bytes, there is no
    need to explicitly delay the data stage since the transfer
    is not completed until the user responds. However, when the
    length is 0, there is no data stage and the transfer is
    finished once setup() returns, hence there is a need to
    explicitly delay completion.
    
    This manifests as the following bugs:
    
    Prior to 946ef68ad4e4 ('Let setup() return
    USB_GADGET_DELAYED_STATUS'), when setup is 0 bytes, ffs
    would require user to queue a 0 byte request in order to
    clear setup state. However, that 0 byte request was actually
    not needed and would hang and cause errors in other setup
    requests.
    
    After the above commit, 0 byte setups work since the gadget
    now accepts empty queues to ep0 to clear the delay, but all
    other setups hang.
    
    Fixes: 946ef68ad4e4 ("Let setup() return USB_GADGET_DELAYED_STATUS")
    Signed-off-by: Jerry Zhang <zhangjerry@google.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 9e10043b6bdcc1a991a029de8a0bc745950345c6
Author: Jerry Zhang <zhangjerry@google.com>
Date:   Mon Jul 2 12:48:08 2018 -0700

    usb: gadget: f_fs: Only return delayed status when len is 0
    
    commit 4d644abf25698362bd33d17c9ddc8f7122c30f17 upstream.
    
    Commit 1b9ba000 ("Allow function drivers to pause control
    transfers") states that USB_GADGET_DELAYED_STATUS is only
    supported if data phase is 0 bytes.
    
    It seems that when the length is not 0 bytes, there is no
    need to explicitly delay the data stage since the transfer
    is not completed until the user responds. However, when the
    length is 0, there is no data stage and the transfer is
    finished once setup() returns, hence there is a need to
    explicitly delay completion.
    
    This manifests as the following bugs:
    
    Prior to 946ef68ad4e4 ('Let setup() return
    USB_GADGET_DELAYED_STATUS'), when setup is 0 bytes, ffs
    would require user to queue a 0 byte request in order to
    clear setup state. However, that 0 byte request was actually
    not needed and would hang and cause errors in other setup
    requests.
    
    After the above commit, 0 byte setups work since the gadget
    now accepts empty queues to ep0 to clear the delay, but all
    other setups hang.
    
    Fixes: 946ef68ad4e4 ("Let setup() return USB_GADGET_DELAYED_STATUS")
    Signed-off-by: Jerry Zhang <zhangjerry@google.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 26f4a6d638d52351f3e2583b61ef3f79e26d0a7d ......
	 orig commit -> 92a8dd26464e1f21f1d869ec53717bd2c1200d63 ......
checking fba46ae2cd7a5117299c435d71adcaf30acd8b01 ......
	 orig commit -> 12814a3f8f9b247531d7863170cc82b3fe4218fd ......
checking 48701a8f4adbaa04a046edb68871b76f809fd57b ......
	 orig commit -> a400efe455f7b61ac9a801ac8d0d01f8c8d82dd5 ......
		 a400efe455f7b61ac9a801ac8d0d01f8c8d82dd5 has problem. Fixes commit -> 44a182b9d17765514fa2b1cc911e4e65134eef93
commit 2679c2231bc3fb260f74e1faf7d6810427b1fc6e
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Thu May 3 17:30:07 2018 +0300

    xhci: Fix use-after-free in xhci_free_virt_device
    
    commit 44a182b9d17765514fa2b1cc911e4e65134eef93 upstream.
    
    KASAN found a use-after-free in xhci_free_virt_device+0x33b/0x38e
    where xhci_free_virt_device() sets slot id to 0 if udev exists:
    if (dev->udev && dev->udev->slot_id)
            dev->udev->slot_id = 0;
    
    dev->udev will be true even if udev is freed because dev->udev is
    not set to NULL.
    
    set dev->udev pointer to NULL in xhci_free_dev()
    
    The original patch went to stable so this fix needs to be applied
    there as well.
    
    Fixes: a400efe455f7 ("xhci: zero usb device slot_id member when disabling and freeing a xhci slot")
    Cc: <stable@vger.kernel.org>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4f46a9164454acb84db8e814866f6a506c18037b ......
	 orig commit -> 0cab8d26d6e5e053b2bed3356992aaa71dc93628 ......
checking 0acea84f20dbc938200a796fa15d682511bb07e1 ......
	 orig commit -> fab3833338779e1e668bd58d1f76d601657304b8 ......
checking 70d79bf9fbb997cb3de6f7af08a1f430d576636c ......
	 orig commit -> 71426535f49fe6034d0e0db77608b91a0c1a022d ......
checking e6e57a8592a931ded050662a9ec37986e1fc83de ......
	 orig commit -> a41e0796396eeceff673af4a38feaee149c6ff86 ......
checking c9dc2614bbebd18277319de0f35e89bf2956f669 ......
	 orig commit -> d4c4bc11353f3bea6754f7d21e3612c9f32d1d64 ......
checking a76b68bf31c54afc585730cd0b4bcac800aaff00 ......
	 orig commit -> f3d801baf118c9d452ee7c278df16880c892e669 ......
checking cb30834f103a46bca83334ab1efbefe6c75f372e ......
	 orig commit -> d6c931ea32dc08ac2665bb5f009f9c40ad1bbdb3 ......
checking 8f271cf4114fe3871679da7b819f55b02c4894a5 ......
	 orig commit -> b86b8eb6fecb5a4bac1ed0ca925c4082a61ea6e9 ......
checking 0e025f5b63713f850bdd7bea7a2bedf8fb23f75d ......
	 orig commit -> 755d739534f998d92e348fba8ffb0478416576e7 ......
checking 20eeffc5ba328afbf73550ae8aa9e43be3a8dd6e ......
	 orig commit -> 20c63f4089cceab803438c383631963e34c4d8e5 ......
checking 36d64865d33462851aaf35c1f8e021889beec15a ......
	 orig commit -> e74bd4d358e5455233f1dcc3975425905b270b91 ......
checking 7a1edc325506d2671429e27753a29fc829847858 ......
	 orig commit -> c49f63055e252810e5d6c83a4943b18db16b3cd8 ......
checking c6a43f20ff3e1e7fdfba7e12d17ba1898e5421bf ......
	 orig commit -> 00b42170c86f90ac9dea83a7dfcd3f0c38098fe2 ......
checking d9a19ff1fa9a627f4cae3e7608532ac807f66963 ......
	 orig commit -> 8813a59ed892305b5ac1b5b901740b1ad4b5fefa ......
checking a81f401585737316b29bef95fe6cfb3a4f0bbe5d ......
	 orig commit -> a466ef76b815b86748d9870ef2a430af7b39c710 ......
checking 2595f213a4ad5071d419e2f5e15d3ca81679c231 ......
	 orig commit -> 66072c29328717072fd84aaff3e070e3f008ba77 ......
checking 7d73a8c07d8486c3d1fd7d22bacc7dd7c19007cb ......
	 orig commit -> a7cfebcb7594a24609268f91299ab85ba064bf82 ......
		 a7cfebcb7594a24609268f91299ab85ba064bf82 has problem. Fixes commit -> 814596495dd2b9d4aab92d8f89cf19060d25d2ea
commit fa4724c51a898f64263ed06b4f76976b48debedf
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon May 14 20:09:24 2018 -0700

    cfg80211: further limit wiphy names to 64 bytes
    
    commit 814596495dd2b9d4aab92d8f89cf19060d25d2ea upstream.
    
    wiphy names were recently limited to 128 bytes by commit a7cfebcb7594
    ("cfg80211: limit wiphy names to 128 bytes").  As it turns out though,
    this isn't sufficient because dev_vprintk_emit() needs the syslog header
    string "SUBSYSTEM=ieee80211\0DEVICE=+ieee80211:$devname" to fit into 128
    bytes.  This triggered the "device/subsystem name too long" WARN when
    the device name was >= 90 bytes.  As before, this was reproduced by
    syzbot by sending an HWSIM_CMD_NEW_RADIO command to the MAC80211_HWSIM
    generic netlink family.
    
    Fix it by further limiting wiphy names to 64 bytes.
    
    Reported-by: syzbot+e64565577af34b3768dc@syzkaller.appspotmail.com
    Fixes: a7cfebcb7594 ("cfg80211: limit wiphy names to 128 bytes")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 6c65719153f983dc3ac6afd321fd463cba22ee13 ......
	 orig commit -> fa89adba1941e4f3b213399b81732a5c12fd9131 ......
checking ad2518320bc440ed3db072e2444a1bb226a9cf7a ......
	 orig commit -> a45b599ad808c3c982fdcdc12b0b8611c2f92824 ......
checking e420d98384760f55ffac9951b9b5cccbf2edd752 ......
	 orig commit -> 318aaf34f1179b39fa9c30fa0f3288b645beee39 ......
checking 6089a72d44deb251f347a5d4e4e5f1e99245c0cc ......
	 orig commit -> de5cb6eb514ebe241e3edeb290cb41deb380b81d ......
		 de5cb6eb514ebe241e3edeb290cb41deb380b81d has problem. Fixes commit -> 26f843848bae973817b3587780ce6b7b0200d3e4
commit 33a9081eaa2c608001ed6dfe6a2e58c2cdd731c6
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Mon Aug 6 14:26:39 2018 +0200

    s390: fix br_r1_trampoline for machines without exrl
    
    commit 26f843848bae973817b3587780ce6b7b0200d3e4 upstream.
    
    For machines without the exrl instruction the BFP jit generates
    code that uses an "br %r1" instruction located in the lowcore page.
    Unfortunately there is a cut & paste error that puts an additional
    "larl %r1,.+14" instruction in the code that clobbers the branch
    target address in %r1. Remove the larl instruction.
    
    Cc: <stable@vger.kernel.org> # v4.17+
    Fixes: de5cb6eb51 ("s390: use expoline thunks in the BPF JIT")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 1ace5fcb2263afab21852dd4ac95db70e2bb03cf ......
	 orig commit -> 6deaa3bbca804b2a3627fd685f75de64da7be535 ......
checking b004790d7ec587024443c3194411f6a89a93a3d1 ......
	 orig commit -> 4253b0e0627ee3461e64c2495c616f1c8f6b127b ......
checking b35421ab5735f08b58a7e0cee03228f91465ed99 ......
	 orig commit -> c50c84c3ac4d5db683904bdb3257798b6ef980ae ......
checking caa47e1f7fb8c35137f1d683cd2f9d43775be009 ......
	 orig commit -> 23a4d7fd34856da8218c4cfc23dba7a6ec0a423a ......
checking cba0d6c2d6301f32b0b5d86ad70f3fdd8574d43b ......
	 orig commit -> 97489e0663fa700d6e7febddc43b58df98d7bcda ......
		 97489e0663fa700d6e7febddc43b58df98d7bcda has problem. Fixes commit -> 5eda25b10297684c1f46a14199ec00210f3c346e
commit 9e9792d3ffc813a6aef88a06891fbc13c96b979a
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Mon Aug 6 13:49:47 2018 +0200

    s390/lib: use expoline for all bcr instructions
    
    commit 5eda25b10297684c1f46a14199ec00210f3c346e upstream.
    
    The memove, memset, memcpy, __memset16, __memset32 and __memset64
    function have an additional indirect return branch in form of a
    "bzr" instruction. These need to use expolines as well.
    
    Cc: <stable@vger.kernel.org> # v4.17+
    Fixes: 97489e0663 ("s390/lib: use expoline for indirect branches")
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f37bfc0d20a0031f82ec46c1107501c40c1626b2 ......
	 orig commit -> 467a3bf219cee12259182c5cb4821f88fd518a51 ......
checking 4a5c26ddfb8657402073f8b43393ede53ad82e6a ......
	 orig commit -> 6dd85fbb87d1d6b87a3b1f02ca28d7b2abd2e7ba ......
		 6dd85fbb87d1d6b87a3b1f02ca28d7b2abd2e7ba has problem. Fixes commit -> 891f6a726cacbb87e5b06076693ffab53bd378d7
commit 0cab67a1ed6bbae481dae0ea7047f880a43fd017
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Thu Jun 21 14:49:38 2018 +0200

    s390: Correct register corruption in critical section cleanup
    
    commit 891f6a726cacbb87e5b06076693ffab53bd378d7 upstream.
    
    In the critical section cleanup we must not mess with r1.  For march=z9
    or older, larl + ex (instead of exrl) are used with r1 as a temporary
    register. This can clobber r1 in several interrupt handlers. Fix this by
    using r11 as a temp register.  r11 is being saved by all callers of
    cleanup_critical.
    
    Fixes: 6dd85fbb87 ("s390: move expoline assembler macros to a header")
    Cc: stable@vger.kernel.org #v4.16
    Reported-by: Oliver Kurz <okurz@suse.com>
    Reported-by: Petr Tesařík <ptesarik@suse.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 63257f26cec0ef8461d1f1d8a8f81384dcfff93f ......
	 orig commit -> fba9eb7946251d6e420df3bdf7bc45195be7be9a ......
checking 808449d2bc56bf0de49e03b6784e0986da526ea7 ......
	 orig commit -> 5aa1437d2d9a068c0334bd7c9dafa8ec4f97f13b ......
checking aab32922616365dc84d26972ade407f6ceb7bdff ......
	 orig commit -> f3002c1374fb2367c9d8dbb28852791ef90d2bac ......
checking 779fd38b60d86511f1ff17c29c2fc9ee2adb0697 ......
	 orig commit -> 61aeecea40afb2b89933e27cd4adb10fc2e75cfd ......
checking 74a4c09d4b05c67ed6bd6aed088a5552f4f64aaa ......
	 orig commit -> 7f582b248d0a86bae5788c548d7bb5bca6f7691a ......
checking a5e907c347211d94727da350d8b784a68ac18a24 ......
	 orig commit -> 9709020c86f6bf8439ca3effc58cfca49a5de192 ......
checking 6190cce26e40bf71c4d375b21eea74bb07b6a0f3 ......
	 orig commit -> b84bbaf7a6c8cca24f8acf25a2c8e46913a947ba ......
		 b84bbaf7a6c8cca24f8acf25a2c8e46913a947ba has problem. Fixes commit -> 993675a3100b16a4c80dfd70cbcde8ea7127b31d
9aad13b087ab0a588cd68259de618f100053360e
commit 4770fdc633650794717f5f1c2011a8c570e09cce
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Jul 11 12:00:45 2018 -0400

    packet: reset network header if packet shorter than ll reserved space
    
    [ Upstream commit 993675a3100b16a4c80dfd70cbcde8ea7127b31d ]
    
    If variable length link layer headers result in a packet shorter
    than dev->hard_header_len, reset the network header offset. Else
    skb->mac_len may exceed skb->len after skb_mac_reset_len.
    
    packet_sendmsg_spkt already has similar logic.
    
    Fixes: b84bbaf7a6c8 ("packet: in packet_snd start writing at link layer allocation")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1118c60b599beddce6662aa15e557b1925f1cad9
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu May 24 18:10:30 2018 -0400

    packet: fix reserve calculation
    
    [ Upstream commit 9aad13b087ab0a588cd68259de618f100053360e ]
    
    Commit b84bbaf7a6c8 ("packet: in packet_snd start writing at link
    layer allocation") ensures that packet_snd always starts writing
    the link layer header in reserved headroom allocated for this
    purpose.
    
    This is needed because packets may be shorter than hard_header_len,
    in which case the space up to hard_header_len may be zeroed. But
    that necessary padding is not accounted for in skb->len.
    
    The fix, however, is buggy. It calls skb_push, which grows skb->len
    when moving skb->data back. But in this case packet length should not
    change.
    
    Instead, call skb_reserve, which moves both skb->data and skb->tail
    back, without changing length.
    
    Fixes: b84bbaf7a6c8 ("packet: in packet_snd start writing at link layer allocation")
    Reported-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 4770fdc633650794717f5f1c2011a8c570e09cce
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Jul 11 12:00:45 2018 -0400

    packet: reset network header if packet shorter than ll reserved space
    
    [ Upstream commit 993675a3100b16a4c80dfd70cbcde8ea7127b31d ]
    
    If variable length link layer headers result in a packet shorter
    than dev->hard_header_len, reset the network header offset. Else
    skb->mac_len may exceed skb->len after skb_mac_reset_len.
    
    packet_sendmsg_spkt already has similar logic.
    
    Fixes: b84bbaf7a6c8 ("packet: in packet_snd start writing at link layer allocation")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2ef22bd08dcff6a8d761829647e5eb321576a83a ......
	 orig commit -> 113f99c3358564a0647d444c2ae34e8b1abfd5b9 ......
checking 97b7270c3dc8bee6bf43df84595fd898014e3e0c ......
	 orig commit -> 57f6f99fdad9984801cde05c1db68fe39b474a10 ......

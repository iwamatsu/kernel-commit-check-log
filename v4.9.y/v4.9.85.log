Check from v4.9.85 to v4.9.86
Commit count: 57
checking 6a83eb2354543e3263b880eb822c4b0993a2236b ......
checking b5075ee58c788c14697993e21af9ef87a524e0e7 ......
	 orig commit -> ebabcf17bcd7ce968b1631ebe08236275698f39b ......
		 ebabcf17bcd7ce968b1631ebe08236275698f39b has problem. Fixes commit -> 690d9163bf4b8563a2682e619f938e6a0443947f
commit a6b728be40aef5cd66e7cbbd19c4c05db1cd0d22
Author: Paul Burton <paul.burton@mips.com>
Date:   Tue Aug 21 12:12:59 2018 -0700

    MIPS: lib: Provide MIPS64r6 __multi3() for GCC < 7
    
    commit 690d9163bf4b8563a2682e619f938e6a0443947f upstream.
    
    Some versions of GCC suboptimally generate calls to the __multi3()
    intrinsic for MIPS64r6 builds, resulting in link failures due to the
    missing function:
    
        LD      vmlinux.o
        MODPOST vmlinux.o
      kernel/bpf/verifier.o: In function `kmalloc_array':
      include/linux/slab.h:631: undefined reference to `__multi3'
      fs/select.o: In function `kmalloc_array':
      include/linux/slab.h:631: undefined reference to `__multi3'
      ...
    
    We already have a workaround for this in which we provide the
    instrinsic, but we do so selectively for GCC 7 only. Unfortunately the
    issue occurs with older GCC versions too - it has been observed with
    both GCC 5.4.0 & GCC 6.4.0.
    
    MIPSr6 support was introduced in GCC 5, so all major GCC versions prior
    to GCC 8 are affected and we extend our workaround accordingly to all
    MIPS64r6 builds using GCC versions older than GCC 8.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reported-by: Vladimir Kondratiev <vladimir.kondratiev@intel.com>
    Fixes: ebabcf17bcd7 ("MIPS: Implement __multi3 for GCC7 MIPS64r6 builds")
    Patchwork: https://patchwork.linux-mips.org/patch/20297/
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # 4.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 25039c139fdefd660b3a8ecfd001919fc3ced92d ......
checking 3eb222174ee8b6280e552f71ed68f890bbbdc437 ......
	 orig commit -> 11d827a993a969c3c6ec56758ff63a44ba19b466 ......
checking b923c86a7c6b63c0bdb410c667038e906a6c3e24 ......
	 orig commit -> c76f97c99ae6d26d14c7f0e50e074382bfbc9f98 ......
checking c65c0dfb27914e141be8193d509fcd4e6387d13c ......
	 orig commit -> cf2acf66ad43abb39735568f55e1f85f9844e990 ......
checking beaa7d1cea2debe0882c51639d463d3eb987804a ......
	 orig commit -> 951a010233625b77cde3430b4b8785a9a22968d1 ......
checking 1bb81106a113b202e843ffb7d572033eb36cfe01 ......
	 orig commit -> 195e2addbce09e5afbc766efc1e6567c9ce840d3 ......
checking 7086ec8f0e63792ed25398d165a9f603b64e9853 ......
	 orig commit -> 56c0290202ab94a2f2780c449395d4ae8495fab4 ......
checking cded2e6f1660449e34c8bd6740614ee35e6ebf23 ......
	 orig commit -> b707fda2df4070785d0fa8a278aa13944c5f51f8 ......
checking 0fd874142d3091d3116f5015753ca4fe4c078a06 ......
	 orig commit -> 78f300049335ae81a5cc6b4b232481dc5e1f9d41 ......
checking 9137deb6cf4829194c9a01b272a17ff3fd1ddfe8 ......
	 orig commit -> 13454c14550065fcc1705d6bd4ee6d40e057099f ......
checking 58c4ee842b30b7d6feac4c098949a11f42706579 ......
	 orig commit -> 736a80bbfda709fb3631f5f62056f250a38e5804 ......
checking 4ec2b1ca93d8cd1b1ea7cc6fd4eb5c5a362e127e ......
	 orig commit -> 3ea15452ee85754f70f3b9fa1f23165ef2e77ba7 ......
checking cd80cb0be131daee2f9fd7862de52fa430f01370 ......
	 orig commit -> 248de22e638f10bd5bfc7624a357f940f66ba137 ......
checking 26f6873540606daf83536130714471155bcede38 ......
	 orig commit -> c0bace798436bca0fdc221ff61143f1376a9c3de ......
checking 3a26db8cf2e952016dd470d02cbf2fa7f886ff29 ......
	 orig commit -> 19d859a7205bc59ffc38303eb25ae394f61d21dc ......
checking b4b73c1224de87d677dd5dc6fae8bc9e5b4849b3 ......
	 orig commit -> bd30ffc414e55194ed6149fad69a145550cb7c18 ......
checking 125ca9316b2bdc4c6a1b07751211e1b56683ad89 ......
	 orig commit -> 0b76aae741abb9d16d2c0e67f8b1e766576f897d ......
checking 88f72bd9f99fc2315acfde7a15a1a8eecb154bcb ......
	 orig commit -> d02fd6e7d2933ede6478a15f9e4ce8a93845824e ......
		 d02fd6e7d2933ede6478a15f9e4ce8a93845824e has problem. Fixes commit -> 4e14bf4236490306004782813b8b4494b18f5e60
commit f19a40b0d7a5c76d390325aa35b532a900fed8d1
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Thu Feb 22 18:20:30 2018 +0300

    macvlan: fix use-after-free in macvlan_common_newlink()
    
    [ Upstream commit 4e14bf4236490306004782813b8b4494b18f5e60 ]
    
    The following use-after-free was reported by KASan when running
    LTP macvtap01 test on 4.16-rc2:
    
    [10642.528443] BUG: KASAN: use-after-free in
                   macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10642.626607] Read of size 8 at addr ffff880ba49f2100 by task ip/18450
    ...
    [10642.963873] Call Trace:
    [10642.994352]  dump_stack+0x5c/0x7c
    [10643.035325]  print_address_description+0x75/0x290
    [10643.092938]  kasan_report+0x28d/0x390
    [10643.137971]  ? macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10643.207963]  macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10643.275978]  macvtap_newlink+0x171/0x260 [macvtap]
    [10643.334532]  rtnl_newlink+0xd4f/0x1300
    ...
    [10646.256176] Allocated by task 18450:
    [10646.299964]  kasan_kmalloc+0xa6/0xd0
    [10646.343746]  kmem_cache_alloc_trace+0xf1/0x210
    [10646.397826]  macvlan_common_newlink+0x6de/0x14a0 [macvlan]
    [10646.464386]  macvtap_newlink+0x171/0x260 [macvtap]
    [10646.522728]  rtnl_newlink+0xd4f/0x1300
    ...
    [10647.022028] Freed by task 18450:
    [10647.061549]  __kasan_slab_free+0x138/0x180
    [10647.111468]  kfree+0x9e/0x1c0
    [10647.147869]  macvlan_port_destroy+0x3db/0x650 [macvlan]
    [10647.211411]  rollback_registered_many+0x5b9/0xb10
    [10647.268715]  rollback_registered+0xd9/0x190
    [10647.319675]  register_netdevice+0x8eb/0xc70
    [10647.370635]  macvlan_common_newlink+0xe58/0x14a0 [macvlan]
    [10647.437195]  macvtap_newlink+0x171/0x260 [macvtap]
    
    Commit d02fd6e7d293 ("macvlan: Fix one possible double free") handles
    the case when register_netdevice() invokes ndo_uninit() on error and
    as a result free the port. But 'macvlan_port_get_rtnl(dev))' check
    (returns dev->rx_handler_data), which was added by this commit in order
    to prevent double free, is not quite correct:
    
    * for macvlan it always returns NULL because 'lowerdev' is the one that
      was used to register rx handler (port) in macvlan_port_create() as
      well as to unregister it in macvlan_port_destroy().
    * for macvtap it always returns a valid pointer because macvtap registers
      its own rx handler before macvlan_common_newlink().
    
    Fixes: d02fd6e7d293 ("macvlan: Fix one possible double free")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c33d49420c5cdab3420a9516a04b988cb65ee9ad ......
	 orig commit -> 3a3882ff26fbdbaf5f7e13f6a0bccfbf7121041d ......
checking 799948750c137513c2976f62a7345f424245234b ......
	 orig commit -> 2196881566225f3c3428d1a5f847a992944daa5b ......
checking ab43aaa00d52d644957a8e1e9b89d94ee304a6c8 ......
	 orig commit -> 16ba3defb8bd01a9464ba4820a487f5b196b455b ......
checking fb426a4888216e9fadc75f7fc7f5a560c885aa0d ......
	 orig commit -> 5a371cf87e145b86efd32007e46146e78c1eff6d ......
checking 336c28a1228f11a6a4a3c6cc267cc45d7ce94daa ......
	 orig commit -> 8a9bd4f8ebc6800bfc0596e28631ff6809a2f615 ......
checking ff5544ddfdaa3ab3cf737e2829d876ff4c537378 ......
	 orig commit -> 11bca0a83f83f6093d816295668e74ef24595944 ......
checking 64fb18c837c79d6c98985e57ae2b6a8420a616b2 ......
	 orig commit -> 45e6ae7ef21b907dacb18da62d5787d74a31d860 ......
checking 86b9fa2190907f4f550d9d6bf490c5f89ca33836 ......
	 orig commit -> 2b83ff96f51d0b039c4561b9f95c824d7bddb85c ......
checking af60c3822a721f9c2bf511ed1234e59ee4135010 ......
	 orig commit -> f7084059a9cb9e56a186e1677b1dcffd76c2cd24 ......
checking 78cc448e0882abffdc0c50309127d39bc2523146 ......
	 orig commit -> e60ee41aaf898584205a6af5c996860d0fe6a836 ......
checking 3d6becbc8063bda30a84527039fac9cf449a1e56 ......
	 orig commit -> 4419bb1cedcda0272e1dc410345c5a1d1da0e367 ......
checking edaf4ff0a2552da4d811fa82ec4cfc7fd4480871 ......
	 orig commit -> 642a8439ddd8423b92f2e71960afe21ee1f66bb6 ......
checking f60f577f18c23db299072682ead2f357b282d01c ......
	 orig commit -> 19142551b2be4a9e13838099fde1351386e5e007 ......
checking d9868db6588f587266d9c112ea14a6c2f89f0f67 ......
	 orig commit -> bbc25bee37d2b32cf3a1fab9195b6da3a185614a ......
checking 0a1b1ee6a73bead5f3da08f60f92fdacbedfd008 ......
	 orig commit -> 506e8a912661c97b41adc8a286b875d01323ec45 ......
checking 6358cb4c5b273cd8ddcd7c850084fae721566523 ......
	 orig commit -> d1b8b2391c24751e44f618fcf86fb55d9a9247fd ......
checking 9d0858e71219ca4657ebeff7eea92067fbaf9b77 ......
	 orig commit -> 200922c93f008e03ddc804c6dacdf26ca1ba86d7 ......
checking 1148fee2173c03718b1f3ce47d67eb09c165368f ......
	 orig commit -> c9fefa08190fc879fb2e681035d7774e0a8c5170 ......
		 c9fefa08190fc879fb2e681035d7774e0a8c5170 has problem. Fixes commit -> 82a40777de12728dedf4075453b694f0d1baee80
commit 87e7e8d40512331d01b7ab9d1f2e652443d9aff2
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Aug 5 22:46:07 2018 +0800

    ip6_tunnel: use the right value for ipv4 min mtu check in ip6_tnl_xmit
    
    [ Upstream commit 82a40777de12728dedf4075453b694f0d1baee80 ]
    
    According to RFC791, 68 bytes is the minimum size of IPv4 datagram every
    device must be able to forward without further fragmentation while 576
    bytes is the minimum size of IPv4 datagram every device has to be able
    to receive, so in ip6_tnl_xmit(), 68(IPV4_MIN_MTU) should be the right
    value for the ipv4 min mtu check in ip6_tnl_xmit.
    
    While at it, change to use max() instead of if statement.
    
    Fixes: c9fefa08190f ("ip6_tunnel: get the min mtu properly in ip6_tnl_xmit")
    Reported-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 95e094a709eabaede6c53272b2d90925c55c02e0 ......
	 orig commit -> e688822d035b494071ecbadcccbd6f3325fb0f59 ......
checking 757677d0da516f9f60b7a855ecbf10b73263e006 ......
	 orig commit -> 7352e252b5bf40d59342494a70354a2d436fd0cd ......
checking 1ec97b2a4475e6157ec84b2a5d14530861badd0c ......
	 orig commit -> d070f7c703ef26e3db613f24206823f916272fc6 ......
checking 90f7d14cef9bd30214dd7e56fc3c7a468cef6228 ......
	 orig commit -> 66e900a3d225575c8b48b59ae1fe74bb6e5a65cc ......
checking ad176934842636d8b1d23298fb90d10a97e4c6f7 ......
	 orig commit -> 162bd5e5fd921785077b5862d8f2ffabe2fe11e5 ......
checking 5330add6da101da85ef4d1dcf31bf2e1b3252fc8 ......
	 orig commit -> a121027d2747168df0aac0c3da35509eea39f61c ......
checking 396927052bad2f8228c98d3eab34c097823fd089 ......
	 orig commit -> ab14436065c8066c265540312742390d6d07ddd2 ......
checking fd7cbb5ad8e8b222eff3401089e3244a7a8cb32e ......
	 orig commit -> 9ee332d99e4d5a97548943b81c54668450ce641b ......
checking 9a5bd36c0bb036def9ce7d2300f350a0db36a622 ......
	 orig commit -> ca26cffa4e4aaeb09bb9e308f95c7835cb149248 ......
checking db1e8814be999976ea901e9cf7d2e0134e938b31 ......
	 orig commit -> 36b0cb84ee858f02c256d26f0cb4229c78e3399e ......
checking 3cf31f5b38ed1d78d39e9fb1d460c4684690ec1e ......
	 orig commit -> 588753f1eb18978512b1c9b85fddb457d46f9033 ......
checking e88872ef990c8c0692963d916c9585b9b65254c6 ......
	 orig commit -> e44b9a9c135727f3410e029910275f40681dc8bc ......
checking dd1e39f4b3a81706571f03807381a21949655898 ......
	 orig commit -> fdf2e821052958a114618a95ab18a300d0b080cb ......
checking 83c5a93514c7404c94d1de94a4c8aa5d5684fc95 ......
	 orig commit -> c647c0d62c82eb3ddf78a0d8b3d58819d9f552aa ......
checking d4ea6118d3e36ea87b02607aea8f173b4c69f808 ......
	 orig commit -> 249159c5f15812140fa216f9997d799ac0023a1f ......
checking 051337a8993a5481046209ec167eb6e821b6d922 ......
	 orig commit -> 2610acf46b9ed528ec2cacd717bc9d354e452b73 ......
checking 4a97b2d09d332c43612f489c99b97d691002b6d4 ......
	 orig commit -> dad48e73127ba10279ea33e6dbc8d3905c4d31c0 ......
checking b4e0649eeb65c556d01de986a589da2ffd5c2029 ......
	 orig commit -> fba4adbbf670577e605f9ad306629db6031cd48b ......
		 fba4adbbf670577e605f9ad306629db6031cd48b has problem. Fixes commit -> 06cb616b1bca7080824acfedb3d4c898e7a64836
commit 895c53e10b91432d0e9a9662448f0c7fc40f79e1
Author: Alexander Monakov <amonakov@ispras.ru>
Date:   Sat Apr 28 16:56:06 2018 +0300

    i2c: designware: fix poll-after-enable regression
    
    commit 06cb616b1bca7080824acfedb3d4c898e7a64836 upstream.
    
    Not all revisions of DW I2C controller implement the enable status register.
    On platforms where that's the case (e.g. BG2CD and SPEAr ARM SoCs), waiting
    for enable will time out as reading the unimplemented register yields zero.
    
    It was observed that reading the IC_ENABLE_STATUS register once suffices to
    avoid getting it stuck on Bay Trail hardware, so replace polling with one
    dummy read of the register.
    
    Fixes: fba4adbbf670 ("i2c: designware: must wait for enable")
    Signed-off-by: Alexander Monakov <amonakov@ispras.ru>
    Tested-by: Ben Gardner <gardner.ben@gmail.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5a9f69b2c11bee48b1884165e4e1473f7672dc28 ......
	 orig commit -> 48d0c9becc7f3c66874c100c126459a9da0fdced ......

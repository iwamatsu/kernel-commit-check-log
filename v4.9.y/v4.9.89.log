Check from v4.9.89 to v4.9.90
Commit count: 177
checking 24f70aa804cd7f8fee4353cf4990997d1c8375ae ......
checking 8dd5c0c47332c67a04830e3842d4d6282f1824fd ......
	 orig commit -> 749494b6bdbbaf0899aa1c62a1ad74cd747bce47 ......
		 749494b6bdbbaf0899aa1c62a1ad74cd747bce47 has problem. Fixes commit -> 072684e8c58d17e853f8e8b9f6d9ce2e58d2b036
commit 6c751894b864eaf85e4d2cc431691653be2713c5
Author: Radoslav Gerganov <rgerganov@vmware.com>
Date:   Tue Mar 5 10:10:34 2019 +0000

    USB: gadget: f_hid: fix deadlock in f_hidg_write()
    
    commit 072684e8c58d17e853f8e8b9f6d9ce2e58d2b036 upstream.
    
    In f_hidg_write() the write_spinlock is acquired before calling
    usb_ep_queue() which causes a deadlock when dummy_hcd is being used.
    This is because dummy_queue() callbacks into f_hidg_req_complete() which
    tries to acquire the same spinlock. This is (part of) the backtrace when
    the deadlock occurs:
    
      0xffffffffc06b1410 in f_hidg_req_complete
      0xffffffffc06a590a in usb_gadget_giveback_request
      0xffffffffc06cfff2 in dummy_queue
      0xffffffffc06a4b96 in usb_ep_queue
      0xffffffffc06b1eb6 in f_hidg_write
      0xffffffff8127730b in __vfs_write
      0xffffffff812774d1 in vfs_write
      0xffffffff81277725 in SYSC_write
    
    Fix this by releasing the write_spinlock before calling usb_ep_queue()
    
    Reviewed-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Tested-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Cc: stable@vger.kernel.org # 4.11+
    Fixes: 749494b6bdbb ("usb: gadget: f_hid: fix: Move IN request allocation to set_alt()")
    Signed-off-by: Radoslav Gerganov <rgerganov@vmware.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 805cbd500ee258f8c8e5c0c709389fffd70994eb ......
	 orig commit -> 0c81ffc60d5280991773d17e84bda605387148b1 ......
checking e3fb6525c99c2ac9940953f421e4e7d1e354b0e6 ......
	 orig commit -> 7688f2c3bbf55e52388e37ac5d63ca471a7712e1 ......
checking bbdfb44745abd2daa8af06e553d7628570daf250 ......
	 orig commit -> 99652a469df19086d594e8e89757d4081a812789 ......
checking 971e09c7be1c051272663cd552c4a815d6f7a151 ......
	 orig commit -> 2c292dbb398ee46fc1343daf6c3cf9715a75688e ......
checking e2ee1a1843e5cf0e4040d006d6895262e47332d4 ......
	 orig commit -> c2b37f76485f073f020e60b5954b6dc4e55f693c ......
		 c2b37f76485f073f020e60b5954b6dc4e55f693c has problem. Fixes commit -> d63c46734c545ad0488761059004a65c46efdde3
commit 199b59a524af7f615087d40ff20bd159b1da26d5
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Tue Jul 10 11:56:50 2018 +0300

    RDMA/mlx5: Fix memory leak in mlx5_ib_create_srq() error path
    
    [ Upstream commit d63c46734c545ad0488761059004a65c46efdde3 ]
    
    Fix memory leak in the error path of mlx5_ib_create_srq() by making sure
    to free the allocated srq.
    
    Fixes: c2b37f76485f ("IB/mlx5: Fix integer overflows in mlx5_ib_create_srq")
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Acked-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 559205f2899596550b0ea19f733b59b557cc6c1e ......
	 orig commit -> d087f15786021a9605b20f4c678312510be4cac1 ......
checking bc0e7313d869e2f67b83e099d540c295a4493281 ......
	 orig commit -> cdba9a4fb0b53703959ac861e415816cb61aded4 ......
checking c53ae7d94e9a79eb6e589d02d4b1fc40fbfa5b45 ......
	 orig commit -> 063578dc5f407f67d149133818efabe457daafda ......
checking 9fd65f85db4565a3c8ad5728dad3e894cf4ffd11 ......
	 orig commit -> f8f8f1d04494d3a6546bee3f0618c4dba31d7b72 ......
		 f8f8f1d04494d3a6546bee3f0618c4dba31d7b72 has problem. Fixes commit -> 99652a469df19086d594e8e89757d4081a812789
commit bbdfb44745abd2daa8af06e553d7628570daf250
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Feb 14 14:43:36 2018 +0100

    clk: migrate the count of orphaned clocks at init
    
    commit 99652a469df19086d594e8e89757d4081a812789 upstream.
    
    The orphan clocks reparents should migrate any existing count from the
    orphan clock to its new acestor clocks, otherwise we may have
    inconsistent counts in the tree and end-up with gated critical clocks
    
    Assuming we have two clocks, A and B.
    * Clock A has CLK_IS_CRITICAL flag set.
    * Clock B is an ancestor of A which can gate. Clock B gate is left
      enabled by the bootloader.
    
    Step 1: Clock A is registered. Since it is a critical clock, it is
    enabled. The clock being still an orphan, no parent are enabled.
    
    Step 2: Clock B is registered and reparented to clock A (potentially
    through several other clocks). We are now in situation where the enable
    count of clock A is 1 while the enable count of its ancestors is 0, which
    is not good.
    
    Step 3: in lateinit, clk_disable_unused() is called, the enable_count of
    clock B being 0, clock B is gated and and critical clock A actually gets
    disabled.
    
    This situation was found while adding fdiv_clk gates to the meson8b
    platform.  These clocks parent clk81 critical clock, which is the mother
    of all peripheral clocks in this system. Because of the issue described
    here, the system is crashing when clk_disable_unused() is called.
    
    The situation is solved by reverting
    commit f8f8f1d04494 ("clk: Don't touch hardware when reparenting during registration").
    To avoid breaking again the situation described in this commit
    description, enabling critical clock should be done before walking the
    orphan list. This way, a parent critical clock may not be accidentally
    disabled due to the CLK_OPS_PARENT_ENABLE mechanism.
    
    Fixes: f8f8f1d04494 ("clk: Don't touch hardware when reparenting during registration")
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking eeed4cf828189504c053c584ae70333c426a5bc2 ......
	 orig commit -> 66282ec1cf004c09083c29cb5e49019037937bbd ......
checking 64d5c600648eab27c8b76189e0eb263f346448b3 ......
	 orig commit -> e40ed274489a5f516da120186578eb379b452ac6 ......
checking dc445b384679db0c811d789958963962f963767f ......
	 orig commit -> 744820869166c8c78be891240cf5f66e8a333694 ......
checking 1139d77d8a7f9aa6b6ae0a1c902f94775dad2f52 ......
	 orig commit -> 53c81e95df1793933f87748d36070a721f6cb287 ......
		 53c81e95df1793933f87748d36070a721f6cb287 has problem. Fixes commit -> b4331a681822b420511b3258f1c3db35001fde48
7a67e69a339a6824be2fc483073782ab2f47fcd2
c6741fbed6dc0f183d26c4b6bca4517672f92e6c
checking 62088f53b14ff275c32e5c9efb95dbab9e8423c8 ......
	 orig commit -> 72d548113881dd32bf7f0b221d031e6586468437 ......
checking f03b94ef0e8792e06a0212912b1117f26cdc6dda ......
	 orig commit -> 5c9d8c4f6b8168738a26bcf288516cc3a0886810 ......
checking bd6552cfc5f7fce149a9bda2a5438a486db14831 ......
	 orig commit -> 981ed1bfbc6c4660b2ddaa8392893e20a6255048 ......
		 981ed1bfbc6c4660b2ddaa8392893e20a6255048 has problem. Fixes commit -> 2560da49de5d0cfec22e9564023aebfffa094732
checking ba936f25f95378142e854cc70e35375a452815a9 ......
	 orig commit -> 11595db8e17faaa05fadc25746c870e31276962f ......
		 11595db8e17faaa05fadc25746c870e31276962f has problem. Fixes commit -> ccff2dfaceaca4517432f5c149594215fe9098cc
commit eb543ccfb0bf456f1507725b56960e51890beaa1
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Wed Jul 11 13:40:35 2018 -0600

    coresight: tpiu: Fix disabling timeouts
    
    [ Upstream commit ccff2dfaceaca4517432f5c149594215fe9098cc ]
    
    Probing the TPIU driver under UBSan triggers an out-of-bounds shift
    warning in coresight_timeout():
    
    ...
    [    5.677530] UBSAN: Undefined behaviour in drivers/hwtracing/coresight/coresight.c:929:16
    [    5.685542] shift exponent 64 is too large for 64-bit type 'long unsigned int'
    ...
    
    On closer inspection things are exponentially out of whack because we're
    passing a bitmask where a bit number should be. Amusingly, it seems that
    both calls will find their expected values by sheer luck and appear to
    succeed: 1 << FFCR_FON_MAN ends up at bit 64 which whilst undefined
    evaluates as zero in practice, while 1 << FFSR_FT_STOPPED finds bit 2
    (TCPresent) which apparently is usually tied high.
    
    Following the examples of other drivers, define separate FOO and FOO_BIT
    macros for masks vs. indices, and put things right.
    
    CC: Robert Walker <robert.walker@arm.com>
    CC: Mike Leach <mike.leach@linaro.org>
    CC: Mathieu Poirier <mathieu.poirier@linaro.org>
    Fixes: 11595db8e17f ("coresight: Fix disabling of CoreSight TPIU")
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d69cf8561fb995be0e72da6c92e206f342707d67 ......
	 orig commit -> 2b022ab7542df60021ab57854b3faaaf42552eaf ......
		 2b022ab7542df60021ab57854b3faaaf42552eaf has problem. Fixes commit -> b9ca5f8560af244489b4a1bc1ae88b341f24bc95
checking abb3ee3ac5926b271af968737026674f24a90743 ......
	 orig commit -> b7ea6b286c4051e043f691781785e3c4672f014a ......
checking 4ae338d139874259807f686738b02cb25a863535 ......
	 orig commit -> c1b9d4c75cd549e08bd0596d7f9dcc20f7f6e8fa ......
checking 87408eb1eae7c59e81e6e3efeadde168d3b3f130 ......
	 orig commit -> c82084117f79bcae085e40da526253736a247120 ......
checking eba1940e654b8218c08ac575edb24865c1dc32c0 ......
	 orig commit -> 66f53e6f5400578bae58db0c06d85a8820831f40 ......
checking 37c704e0ec7f33599866d41921379ffa8d8a7a9e ......
	 orig commit -> edf1a84fe37c51290e2c88154ecaf48dadff3d27 ......
checking 211a1e9f5efc7eafbe24ddb5601c71e5325db435 ......
	 orig commit -> 7baaa49af3716fb31877c61f59b74d029ce15b75 ......
checking 15e113da626f0c91cb003c597c1be57eac5fd576 ......
	 orig commit -> 439000892ee17a9c92f1e4297818790ef8bb4ced ......
checking 963f3129a189213876200d46e5698638d44c5e11 ......
	 orig commit -> de8dcc3d2c0e08e5068ee1e26fc46415c15e3637 ......
checking e7425b35a374cc25c18654c76ff7a88835e11380 ......
	 orig commit -> 4e5ca2d930aa8714400aedf4bf1dc959cb04280f ......
checking 2d443c9ee9f71fb37f5dac530b868b1ea27d202e ......
	 orig commit -> 5ba080aada5e739165e0f38d5cc3b04c82b323c8 ......
checking 236738a6df2c87a8e3d5553ba93b7465cd9a0f4c ......
	 orig commit -> d48b8c58c57f6edbe2965f0a5f62c5cf9593ca96 ......
checking 6ad31f858328e0c4257c3b0367271d7e99d16af2 ......
	 orig commit -> 4bcd615fad6adddc68b058d498b30a9e0e0db77a ......
checking 32dc29cf72e866fafca3a12ea821954632a0edca ......
	 orig commit -> 50a0d71a5d20e1d3eff1d974fdc8559ad6d74892 ......
checking a50521b04da98f22d1223b8396144d48427ff2fb ......
	 orig commit -> 8af016aa5a27c6a2505460eb4d83f1e70c38dc43 ......
checking 8ee96dfd01bcab79e50a596c9d5142e0bf05c787 ......
	 orig commit -> 245d21190aec547c0de64f70c0e6de871c185a24 ......
checking 034371788a56304c2836eb58706b9e2f04387359 ......
	 orig commit -> 380a6c86457573aa42d27ae11e025eb25941a0b7 ......
checking bb32772bc409f3cb0a40c318a5dda37f177107c3 ......
	 orig commit -> 07ffb4497360ae8789f05555fec8171ee952304d ......
checking a20f36c59b459881d6ecf30eb6b34c461e81d5b5 ......
	 orig commit -> 45392ff6881dbe56d41ef0b17c2e576065f8ffa1 ......
checking 1f13ef920ad0ceccf22ba1d309f84d55608ef4eb ......
	 orig commit -> b7573a0a27bfa8270dea9b145448f6884b7cacc1 ......
checking 7c06c3dd3af35953963cb54b4cbecc327fc81b2e ......
	 orig commit -> 302d6424e4a293a5761997e6c9fc3dfb1e4c355f ......
checking af302f2d047a4dccb501bfd7c74b7537e35ea4bf ......
	 orig commit -> 62e3a3e342af3c313ab38603811ecdb1fcc79edb ......
		 62e3a3e342af3c313ab38603811ecdb1fcc79edb has problem. Fixes commit -> 03c94d60261c28689465a16086eb290ab3012aa3
3976626ea3d2011f8fd3f3a47070a8b792018253
commit c87dd592a7660b510f633384f184fe7d711964e9
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Tue Apr 3 23:38:45 2018 +0100

    drm/msm: Fix possible null dereference on failure of get_pages()
    
    [ Upstream commit 3976626ea3d2011f8fd3f3a47070a8b792018253 ]
    
    Commit 62e3a3e342af changed get_pages() to initialise
    msm_gem_object::pages before trying to initialise msm_gem_object::sgt,
    so that put_pages() would properly clean up pages in the failure
    case.
    
    However, this means that put_pages() now needs to check that
    msm_gem_object::sgt is not null before trying to clean it up, and
    this check was only applied to part of the cleanup code.  Move
    it all into the conditional block.  (Strictly speaking we don't
    need to make the kfree() conditional, but since we can't avoid
    checking for null ourselves we may as well do so.)
    
    Fixes: 62e3a3e342af ("drm/msm: fix leak in failed get_pages")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Reviewed-by: Jordan Crouse <jcrouse@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking bac8b847be924575031d0486b2c53ccad7c910b8 ......
	 orig commit -> baed3c4bc4c13de93e0dba0a26d601411ebcb389 ......
checking dadb6c1a8d889b5cab5ff6ed44db9cdb445467e7 ......
	 orig commit -> 67b8fbead4685b36d290a0ef91c6ddffc4920ec9 ......
checking f37dc00bace9e9deb2c3db35fc7bf815dbf0c913 ......
	 orig commit -> ba8f3597900291a93604643017fff66a14546015 ......
checking 18dd7b964c01ac44497471f4ea3f4c0c663eab55 ......
	 orig commit -> eabe06595d62cfa9278e2cd012df614bc68a7042 ......
checking 85e598bc1514ba0d161cc0960017ca3b7b1c1640 ......
	 orig commit -> 805b151a1afd24414706a7f6ae275fbb9649be74 ......
checking 975760baa6e74d57502909b5dd0f01507187c6ff ......
	 orig commit -> a16703aaeaedec7a8bee5be5522c7c3e75478951 ......
checking 0e37c9f8d3f5a77cfebca019a25478ce7e2f7874 ......
	 orig commit -> 538c08f4c89580fc644e2bc64e0a4b86c925da4e ......
checking a06dfdb14333c5b7e8069339fb5561debe5068e4 ......
	 orig commit -> 453d0744f6c6ca3f9749b8c57c2e85b5b9f52514 ......
checking 0b42ce075d8ed11259b36cdbed99bbab8f1f69f1 ......
	 orig commit -> 286c469a988fbaf68e3a97ddf1e6c245c1446968 ......
checking 82d938a9ed8e8d880dfd7e4def4adc1578e2710e ......
	 orig commit -> 7dfb8bf3b9caef4049bee51d2c22e1c3a311d483 ......
checking 7eb0b7339722ec570a47503f0d7b14d9c14b8d86 ......
	 orig commit -> d450abd81b081d45adb12f303a07dd44b15eb1bc ......
checking 31da33dd8ed44ec5c5d72630644c06905c2be7c5 ......
	 orig commit -> 564277eceeca01e02b1ef3e141cfb939184601b4 ......
checking b2a863dba3defce5f37af95007999ce9f48f8af6 ......
	 orig commit -> 412b65d15a7f8a93794653968308fc100f2aa87c ......
checking 1b9c9549b2c9814d35b22fa817466226d9fbb8e5 ......
	 orig commit -> 61f454e30c18a28924e96be12592c0d5e24bcc81 ......
checking e22a6754abda4ab563fce3f3241e71a8c917c979 ......
	 orig commit -> dc85e9a87420613b3129d5cc5ecd79c58351c546 ......
checking e5ea3b04080c790a1d8a1ec2e8526bebb66f497b ......
	 orig commit -> 45f580c42e5c125d55dbd8099750a1998de3d917 ......
checking 51174d2553d33d574c159098c94a10050762ee4c ......
	 orig commit -> a2d1078a35f9a38ae888aa6147e4ca32666154a1 ......
checking f29bc9dc0bef0cb6f3ca069d96fbd535439d1680 ......
	 orig commit -> f11b55d13563e9428c88c873f4f03a6bef11ec0a ......
checking 9935f862199bf7ddc2d26fad089b756fab0ad816 ......
	 orig commit -> a25fb8508c1b80dce742dbeaa4d75a1e9f2c5617 ......
checking a9b90d80db0e53ce4fe06a1ffe12ac683f7b06c9 ......
	 orig commit -> 8ece1d83346bcc431090d59a2184276192189cdd ......
checking 2710fb8f0c828656a147870dccc5164c0f0c48ea ......
	 orig commit -> b506335e5d2b4ec687dde392a3bdbf7601778f1d ......
checking 9002e49554da9e3a4d70b2c18e7603d6fcefdbfe ......
	 orig commit -> d52418502e288b5c7e9e2e6cf1de5f1d3d79d2e1 ......
checking edc0bfd6e2276e3d53dc3ebb7f454d1b940e4967 ......
	 orig commit -> 3071e9dd6cd3f2290d770117330f2c8b2e9a97e4 ......
checking 5b65f7d823f3ce0e6e46eb08b2d35972e6092699 ......
	 orig commit -> 633e8799ddc09431be2744c4a1efdbda13af2b0b ......
checking 9822cb80738a31f4e4821e385920547ddb95828e ......
	 orig commit -> 8b20839988f1ed5e534b270f3776709b640dc7e0 ......
checking 5ac685af62fb165a8bec3ca26c0c180e4de04929 ......
	 orig commit -> 6cf62a3b97e78ba41d31390e59a1ddc98a9e3622 ......
checking 909dbba2106f370d93bb4b6dc7520a8ef7791f08 ......
	 orig commit -> 9b70de6d0266888b3743f03802502e43131043c8 ......
checking 498d02453e734133baff5ae24d54bf2b72abb179 ......
	 orig commit -> 66117a9d9a8ca948680d6554769ef9e88f936954 ......
checking 9c8cd2a87247a9561536345715ef63143551f0c9 ......
	 orig commit -> d074bf9600443403aa24fbc12c1f18eadc90f5aa ......
checking b5d95e85b20634f58c2d57f4041222a9adefd282 ......
	 orig commit -> 2d6f1da168e1d62c47f7d50135ac4cbd8411dcb1 ......
checking bbb952d00c8b254890e1cef7f7b7d23874c3aaa9 ......
	 orig commit -> 048e1bd3a27fbeb84ccdff52e165370c1339a193 ......
checking 949b9dc1818a100941ed63c5147059a5f64c7987 ......
	 orig commit -> 2ccf80b7566cc035d903dd0ac5d7ebd25c2c1060 ......
checking b0d0441f2a6ae3dc20ee4a6871d48178c17911a7 ......
	 orig commit -> 8b8642af15ed14b9a7a34d3401afbcc274533e13 ......
checking b1b6f948b41cb69fe4ac81f49eb218df9399507c ......
	 orig commit -> f87fc44770f54ff1b54d44ae9cec11f10efeca02 ......
checking 81ca30d9654a6035f0bef174bd7df541b3e94217 ......
	 orig commit -> c52c47e4b4fbe4284602fc2ccbfc4a4d8dc05b49 ......
checking 7be76fbbd25c4cd838125f8ea843d1fb1c657db0 ......
	 orig commit -> 60b95d709525e3ce1c51e1fc93175dcd1755d345 ......
checking 8112fa3c00c68f4407c970aeaa73a8e64c1e717b ......
	 orig commit -> 51687759be93fbc553f2727e86be25c38126ba93 ......
checking ec4b63f5c0a47d01b92af90cd645f47e03f36a98 ......
	 orig commit -> 2bde7c32b1db162692f05c6be066b5bcd3d9fdbe ......
checking e9e5ad6b0ef2f00ba23f550c1347bbfb44b66e20 ......
	 orig commit -> 2c1175c2e8e5487233cabde358a19577562ac83e ......
checking 7c1c184bb571e696ffcd57ed43c65f8c91a6d03e ......
	 orig commit -> e9b615186805e2c18a0ac76aca62c1543ecfdbb8 ......
checking b38508b8e016e5017c3920000bd9233e0c4d3666 ......
	 orig commit -> 22546b741af8355cd2e16739b6af4a8f17081839 ......
checking 566edbdefb71f4b4852aa3d8c55b79ebf3fc1f09 ......
	 orig commit -> f0bb2d44ca26b7090dc7bade8877b77005f07dfc ......
checking b642685751f3b998721ea318792004d474fca5b0 ......
	 orig commit -> 2c949ce38f4e81d7487f165fa3b8f77d74a2a6c4 ......
checking c70c7be280448ad7dce9d74fb66c858de534383a ......
	 orig commit -> 7dde07e9c53617549d67dd3e1d791496d0d3868e ......
checking ff3d5600e2e6240869dd73e4c205108d672db7d7 ......
	 orig commit -> a627f025eb0534052ff451427c16750b3530634c ......
checking 92db807f6c2e2a05f00689ca7f23351400abf541 ......
	 orig commit -> 21a8e9dd52b64f0170bad208293ef8c30c3c1403 ......
checking dfe9c1de141667e360bb28e1e23904316a285607 ......
	 orig commit -> 1442f6f7c1b77de1c508318164a527e240c24a4d ......
checking 419707a9fbe14ec1877159707ecf4111197c38e8 ......
	 orig commit -> 9e96652756ad647b7bcc03cb99ffc9756d7b5f93 ......
checking 6806bc0a63ef0797f429b0284f85f1c277d709be ......
	 orig commit -> 3c2bf0bd08123f3497bd3e84bd9088c937b0cb40 ......
checking ccda7d225dc55e8518a8aad974885ea3f0456a65 ......
	 orig commit -> 881ebd229f4a5ea88f269c1225245e50db9ba303 ......
checking 5b0425c6b654028da99bab00b7c9a6eba87cd01b ......
	 orig commit -> da63b6b20077469bd6bd96e07991ce145fc4fbc4 ......
checking db54facd56a40e7766bf7f7cda1ae138e72a691c ......
	 orig commit -> a4e84aae8139aca9fbfbced1f45c51ca81b57488 ......
		 a4e84aae8139aca9fbfbced1f45c51ca81b57488 has problem. Fixes commit -> 8a05aa4ce3bf767b7bd72851da89c23d084d1ecb
checking 6ed083b35d291e06b1792fd4ff3fb45b5ab6e5c5 ......
	 orig commit -> 85fdaf8eb9bbec1f0f8a52fd5d85659d60738816 ......
checking 3ba6aff7f6539d6923646eed031fcd032dc624f9 ......
	 orig commit -> 8461cf20d17e0090e9236b73d25b31be4f7fadc5 ......
checking 3a0c4d9778df57772d07ea241a2cc1f734dee986 ......
	 orig commit -> c894acc7bf400d039bf740420b22f0b71b7fb504 ......
checking 0fff422f157f4e0b64591d4802d0ebe5b0b1579b ......
	 orig commit -> bb1e23e66e6237ff7a1824b37366540a89149c33 ......
	 orig commit -> 637b88de24a78c20478728d9d66632b06fcaa5bf ......
checking e864196707d102f13a3ab6152c7f647628ffaefa ......
	 orig commit -> cf147085fdda044622973a12e4e06f1c753ab677 ......
checking 688b8451ee72f1ce5cc2e70297960597cfcf19ae ......
	 orig commit -> b5a9d61eebdd0016ccb383b25a5c3d04977a6549 ......
checking dfe9db1d7d40d277e79746bbcfc3046f64d57ba0 ......
	 orig commit -> be2d253cc98244765323a7c94cc1ac5cd5a17072 ......
checking 7016b20cab9b6e7e6d898355ea43eb07ecae14ad ......
	 orig commit -> e1cbfd7bf6dabdac561c75d08357571f44040a45 ......
		 e1cbfd7bf6dabdac561c75d08357571f44040a45 has problem. Fixes commit -> 24e52b11e0ca788513b945a87b57cc0522a92933
commit 97d65c1b6e73e1e8ade19713a981bc55003bd798
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Jul 6 15:31:46 2017 +0100

    Btrfs: incremental send, fix invalid memory access
    
    [ Upstream commit 24e52b11e0ca788513b945a87b57cc0522a92933 ]
    
    When doing an incremental send, while processing an extent that changed
    between the parent and send snapshots and that extent was an inline extent
    in the parent snapshot, it's possible to access a memory region beyond
    the end of leaf if the inline extent is very small and it is the first
    item in a leaf.
    
    An example scenario is described below.
    
    The send snapshot has the following leaf:
    
     leaf 33865728 items 33 free space 773 generation 46 owner 5
     fs uuid ab7090d8-dafd-4fb9-9246-723b6d2e2fb7
     chunk uuid 2d16478c-c704-4ab9-b574-68bff2281b1f
            (...)
            item 14 key (335 EXTENT_DATA 0) itemoff 3052 itemsize 53
                    generation 36 type 1 (regular)
                    extent data disk byte 12791808 nr 4096
                    extent data offset 0 nr 4096 ram 4096
                    extent compression 0 (none)
            item 15 key (335 EXTENT_DATA 8192) itemoff 2999 itemsize 53
                    generation 36 type 1 (regular)
                    extent data disk byte 138170368 nr 225280
                    extent data offset 0 nr 225280 ram 225280
                    extent compression 0 (none)
            (...)
    
    And the parent snapshot has the following leaf:
    
     leaf 31272960 items 17 free space 17 generation 31 owner 5
     fs uuid ab7090d8-dafd-4fb9-9246-723b6d2e2fb7
     chunk uuid 2d16478c-c704-4ab9-b574-68bff2281b1f
            item 0 key (335 EXTENT_DATA 0) itemoff 3951 itemsize 44
                    generation 31 type 0 (inline)
                    inline extent data size 23 ram_bytes 613 compression 1 (zlib)
            (...)
    
    When computing the send stream, it is detected that the extent of inode
    335, at file offset 0, and at fs/btrfs/send.c:is_extent_unchanged() we
    grab the leaf from the parent snapshot and access the inline extent item.
    However, before jumping to the 'out' label, we access the 'offset' and
    'disk_bytenr' fields of the extent item, which should not be done for
    inline extents since the inlined data starts at the offset of the
    'disk_bytenr' field and can be very small. For example accessing the
    'offset' field of the file extent item results in the following trace:
    
    [  599.705368] general protection fault: 0000 [#1] PREEMPT SMP
    [  599.706296] Modules linked in: btrfs psmouse i2c_piix4 ppdev acpi_cpufreq serio_raw parport_pc i2c_core evdev tpm_tis tpm_tis_core sg pcspkr parport tpm button su$
    [  599.709340] CPU: 7 PID: 5283 Comm: btrfs Not tainted 4.10.0-rc8-btrfs-next-46+ #1
    [  599.709340] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.1-0-gb3ef39f-prebuilt.qemu-project.org 04/01/2014
    [  599.709340] task: ffff88023eedd040 task.stack: ffffc90006658000
    [  599.709340] RIP: 0010:read_extent_buffer+0xdb/0xf4 [btrfs]
    [  599.709340] RSP: 0018:ffffc9000665ba00 EFLAGS: 00010286
    [  599.709340] RAX: db73880000000000 RBX: 0000000000000000 RCX: 0000000000000001
    [  599.709340] RDX: ffffc9000665ba60 RSI: db73880000000000 RDI: ffffc9000665ba5f
    [  599.709340] RBP: ffffc9000665ba30 R08: 0000000000000001 R09: ffff88020dc5e098
    [  599.709340] R10: 0000000000001000 R11: 0000160000000000 R12: 6db6db6db6db6db7
    [  599.709340] R13: ffff880000000000 R14: 0000000000000000 R15: ffff88020dc5e088
    [  599.709340] FS:  00007f519555a8c0(0000) GS:ffff88023f3c0000(0000) knlGS:0000000000000000
    [  599.709340] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  599.709340] CR2: 00007f1411afd000 CR3: 0000000235f8e000 CR4: 00000000000006e0
    [  599.709340] Call Trace:
    [  599.709340]  btrfs_get_token_64+0x93/0xce [btrfs]
    [  599.709340]  ? printk+0x48/0x50
    [  599.709340]  btrfs_get_64+0xb/0xd [btrfs]
    [  599.709340]  process_extent+0x3a1/0x1106 [btrfs]
    [  599.709340]  ? btree_read_extent_buffer_pages+0x5/0xef [btrfs]
    [  599.709340]  changed_cb+0xb03/0xb3d [btrfs]
    [  599.709340]  ? btrfs_get_token_32+0x7a/0xcc [btrfs]
    [  599.709340]  btrfs_compare_trees+0x432/0x53d [btrfs]
    [  599.709340]  ? process_extent+0x1106/0x1106 [btrfs]
    [  599.709340]  btrfs_ioctl_send+0x960/0xe26 [btrfs]
    [  599.709340]  btrfs_ioctl+0x181b/0x1fed [btrfs]
    [  599.709340]  ? trace_hardirqs_on_caller+0x150/0x1ac
    [  599.709340]  vfs_ioctl+0x21/0x38
    [  599.709340]  ? vfs_ioctl+0x21/0x38
    [  599.709340]  do_vfs_ioctl+0x611/0x645
    [  599.709340]  ? rcu_read_unlock+0x5b/0x5d
    [  599.709340]  ? __fget+0x6d/0x79
    [  599.709340]  SyS_ioctl+0x57/0x7b
    [  599.709340]  entry_SYSCALL_64_fastpath+0x18/0xad
    [  599.709340] RIP: 0033:0x7f51945eec47
    [  599.709340] RSP: 002b:00007ffc21c13e98 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
    [  599.709340] RAX: ffffffffffffffda RBX: ffffffff81096459 RCX: 00007f51945eec47
    [  599.709340] RDX: 00007ffc21c13f20 RSI: 0000000040489426 RDI: 0000000000000004
    [  599.709340] RBP: ffffc9000665bf98 R08: 00007f519450d700 R09: 00007f519450d700
    [  599.709340] R10: 00007f519450d9d0 R11: 0000000000000202 R12: 0000000000000046
    [  599.709340] R13: ffffc9000665bf78 R14: 0000000000000000 R15: 00007f5195574040
    [  599.709340]  ? trace_hardirqs_off_caller+0x43/0xb1
    [  599.709340] Code: 29 f0 49 39 d8 4c 0f 47 c3 49 03 81 58 01 00 00 44 89 c1 4c 01 c2 4c 29 c3 48 c1 f8 03 49 0f af c4 48 c1 e0 0c 4c 01 e8 48 01 c6 <f3> a4 31 f6 4$
    [  599.709340] RIP: read_extent_buffer+0xdb/0xf4 [btrfs] RSP: ffffc9000665ba00
    [  599.762057] ---[ end trace fe00d7af61b9f49e ]---
    
    This is because the 'offset' field starts at an offset of 37 bytes
    (offsetof(struct btrfs_file_extent_item, offset)), has a length of 8
    bytes and therefore attemping to read it causes a 1 byte access beyond
    the end of the leaf, as the first item's content in a leaf is located
    at the tail of the leaf, the item size is 44 bytes and the offset of
    that field plus its length (37 + 8 = 45) goes beyond the item's size
    by 1 byte.
    
    So fix this by accessing the 'offset' and 'disk_bytenr' fields after
    jumping to the 'out' label if we are processing an inline extent. We
    move the reading operation of the 'disk_bytenr' field too because we
    have the same problem as for the 'offset' field explained above when
    the inline data is less then 8 bytes. The access to the 'generation'
    field is also moved but just for the sake of grouping access to all
    the fields.
    
    Fixes: e1cbfd7bf6da ("Btrfs: send, fix file hole not being preserved due to inline extent")
    Cc: <stable@vger.kernel.org>  # v4.12+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking fd35ded5b59bf4d0c7e154b3bd5b72c5c06591e9 ......
	 orig commit -> 1c81ba237bcecad9bc885a1ddcf02d725ea38482 ......
checking c3161cdbccf1ea0d516ad029ef6f1b3be0b65708 ......
	 orig commit -> 9dc7efd3978aa67ae598129d2a3f240b390ce508 ......
checking 0397b294e87940c35af30e0a5bd6cfc110d132cb ......
	 orig commit -> dc3f89c38a8406554ffeffa370aad086a9c5e9de ......
checking 9d79cd54ba0e3b712d734eb24210432680900154 ......
	 orig commit -> 5fb01e91daf84ad1e50edfcf63116ecbe31e7ba7 ......
checking 19b0f2fad8ceb65480e8faf5cb8f7de015b94655 ......
	 orig commit -> 7383d44b84c94aaca4bf695a6bd8a69f2295ef1a ......
		 7383d44b84c94aaca4bf695a6bd8a69f2295ef1a has problem. Fixes commit -> 8b438686a001db64c21782d04ef68111e53c45d9
commit 055c49dcf10fe7db6087037abb87728e7dc84192
Author: Michael Nosthoff <committed@heine.so>
Date:   Fri Mar 9 10:02:45 2018 +0100

    iio: st_pressure: st_accel: pass correct platform data to init
    
    commit 8b438686a001db64c21782d04ef68111e53c45d9 upstream.
    
    Commit 7383d44b added a pointer pdata which get set to the default
    platform_data when non was defined in the device. But it did not
    pass this pointer to the st_sensors_init_sensor call but still
    used the maybe uninitialized platform_data from dev.
    
    This breaks initialization when no platform_data is given and
    the optional st,drdy-int-pin devicetree option is not set.
    
    This commit fixes this.
    
    Cc: stable@vger.kernel.org
    Fixes: 7383d44b ("iio: st_pressure: st_accel: Initialise sensor platform data properly")
    Signed-off-by: Michael Nosthoff <committed@heine.so>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b5684e7a731d04dee1a2e9b76e5aba228647d5f9 ......
	 orig commit -> 99bbf6ecc694dfe0b026e15359c5aa2a60b97a93 ......
checking abdb88128d3642ae378cf9239da4cb8228049476 ......
	 orig commit -> 9378b274e1eb6925db315e345f48850d2d5d9789 ......
checking b5e7b5ce7fa21d02b12d4383b003da22e79f91e1 ......
	 orig commit -> 6aeafd05eca9bc8ab6b03d7e56d09ffd18190f44 ......
checking 81fa3239900f7fb378764318d200b5bb9c477cd6 ......
	 orig commit -> 4f7f4dcfff2c19debbcdbcc861c325610a15e0c5 ......
checking 8a15303518c005ae63ce1e22053822ea43db6dd1 ......
	 orig commit -> 4da2b1eb230ba4ad19b58984dc52e05b1073df5f ......
checking 9338ee7eea66913d821e1db1ae7b308c1f99adbb ......
	 orig commit -> 8d9e29972836b75eb74f533594999500a4c7cc19 ......
checking 7ad1c43e6dc47c5ab1843180a3764a3dd982205a ......
	 orig commit -> 277a292835c196894ef895d5e1fd6170bb916f55 ......
checking bf4b579b67141d6d62ea3a243ce8397fb693d52c ......
	 orig commit -> 91ec701a553cb3de470fd471c6fefe3ad1125455 ......
checking eff9431cafa95b343fc6035833a0ed342e6120d0 ......
	 orig commit -> 2a39e7aa8a98f777f0732ca7125b6c9668791760 ......
checking 185c88b1ef47f9b0a35b92e7a66d51b4acce2136 ......
	 orig commit -> 78302fd405769c9a9379e9adda119d533dce2eed ......
checking abff7f51914942f1d1a80d674cb21aa48a534ba0 ......
	 orig commit -> ec5ab8933772c87f24ad62a4a602fe8949f423c2 ......
checking 3a0427103f90ced70dc77fd3f098ac30697303dc ......
	 orig commit -> 66e5a6b18bd09d0431e97cd3c162e76c5c2aebba ......
checking d2e269c09fc74a5da3701d58954422612dae4a47 ......
	 orig commit -> cf5d70918877c6a6655dc1e92e2ebb661ce904fd ......
checking 87cfd7f65fc22368291d54221510af3dd31b4a3b ......
	 orig commit -> 470acf55a021713869b9bcc967268ac90c8a0fac ......
checking 9907f1f6d86d10aecdc14427f7224cf95d32dd73 ......
	 orig commit -> 7c2d176fe3f8dce632b948f79c7e89916ffe2c70 ......
checking c5406a7557444708a5742a08acb83c6d339d0bb9 ......
	 orig commit -> 7e04e21afa82ef024416f5413b5bdb66e0505bcd ......
checking 730ff617b9ed6f35a98b6a8d7a5f8d5baa042556 ......
	 orig commit -> 3f247de750b8dd8f50a2c1390e2a1238790a9dff ......
checking 72bded3b6c5201d15050ec639e9ec8d9aeceda10 ......
	 orig commit -> 73e64fa4f417b22d8d5521999a631ced8e2d442e ......
checking 5a049986d6a6759ae23685cb2fd93ce56163bb34 ......
	 orig commit -> dd9c20fa07ba5cfb5a0ab3181d68530506610605 ......
checking b281844747fbbfbab6a0427f8a58bd4af580de38 ......
	 orig commit -> e6a33532affd14c12688c0e9b2e773e8b2550f3b ......
checking 4b829c03c902b4b79f3078402b130a61e5cce286 ......
	 orig commit -> 12f8fedef2ec94c783f929126b20440a01512c14 ......
checking c404dff4874d44e89783d2a4534d3b29ca7b68f0 ......
	 orig commit -> 1377661298d2820d675553d186c31b6f46c140d0 ......
checking 9238066e2838e2981c908e66bfc599442fd6917b ......
	 orig commit -> ecc7d83be3243835c9396a1a2fb8ce95f205207b ......
checking df7aedb171e262c4f2c692f323bc9b1c8c13ef59 ......
	 orig commit -> ca37a664a8e4e9988b220988ceb4d79e3316f195 ......
checking 0021b4613a8acf33937c7492817fe484e19e4381 ......
	 orig commit -> 22c3653d04bd0c67b75e99d85e0c0bdf83947df5 ......
checking 2b09da0e7718bc7bd203b9ea62c21d7a088dbe98 ......
	 orig commit -> 3026050179a3a9a6f5c892c414b5e36ecf092081 ......
checking 089f13786bdc483d0ff54367d9dbe0dd19746481 ......
	 orig commit -> 9a9b8112699d78e7f317019b37f377e90023f3ed ......
		 9a9b8112699d78e7f317019b37f377e90023f3ed has problem. Fixes commit -> 612601d0013f03de9dc134809f242ba6da9ca252
commit 9629cf8ef9ad67f685d5367ede20a3573c4a15de
Author: Alex Estrin <alex.estrin@intel.com>
Date:   Tue Sep 26 06:06:22 2017 -0700

    Revert "IB/ipoib: Update broadcast object if PKey value was changed in index 0"
    
    [ Upstream commit 612601d0013f03de9dc134809f242ba6da9ca252 ]
    
    commit 9a9b8112699d will cause core to fail UD QP from being destroyed
    on ipoib unload, therefore cause resources leakage.
    On pkey change event above patch modifies mgid before calling underlying
    driver to detach it from QP. Drivers' detach_mcast() will fail to find
    modified mgid it was never given to attach in a first place.
    Core qp->usecnt will never go down, so ib_destroy_qp() will fail.
    
    IPoIB driver actually does take care of new broadcast mgid based on new
    pkey by destroying an old mcast object in ipoib_mcast_dev_flush())
    ....
            if (priv->broadcast) {
                    rb_erase(&priv->broadcast->rb_node, &priv->multicast_tree);
                    list_add_tail(&priv->broadcast->list, &remove_list);
                    priv->broadcast = NULL;
            }
    ...
    
    then in restarted ipoib_macst_join_task() creating a new broadcast mcast
    object, sending join request and on completion tells the driver to attach
    to reinitialized QP:
    ...
    if (!priv->broadcast) {
    ...
            broadcast = ipoib_mcast_alloc(dev, 0);
    ...
            memcpy(broadcast->mcmember.mgid.raw, priv->dev->broadcast + 4,
                   sizeof (union ib_gid));
            priv->broadcast = broadcast;
    ...
    
    Fixes: 9a9b8112699d ("IB/ipoib: Update broadcast object if PKey value was changed in index 0")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Alex Estrin <alex.estrin@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Feras Daoud <ferasda@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 7bd191b0a0946f877f4d355e44aa944e6849fd63 ......
	 orig commit -> 3e31a490e01a6e67cbe9f6e1df2f3ff0fbf48972 ......
checking 67dc18ea69f42802f0087870f886aed397dcf21d ......
	 orig commit -> fc7438b1eb12b6c93d7b7a62423779eb5dfc673c ......
checking 91dbad3979787d6b4e6f7194191698b0f35040b9 ......
	 orig commit -> 5313eeccd2d7f486be4e5c7560e3e2be239ec8f7 ......
checking 5f63431093a2be7ac048f6ce072e3606eb70c87c ......
	 orig commit -> 0f9fa831aecfc297b7b45d4f046759bcefcf87f0 ......
checking 76441e151c0a4950cdbf014c2377895f48fba2c6 ......
	 orig commit -> 43b7d964ed30dbca5c83c90cb010985b429ec4f9 ......
checking 8a09ef5ba1592302c2f2d6ee7f3301191b2a5296 ......
	 orig commit -> cf25ae78fc50010f66b9be945017796da34c434d ......
checking a3a9a972e230b6198aea87c66fec0104c2b55ad1 ......
	 orig commit -> abaa7e5b054aae567861628b74dbc7fbf8ed79e8 ......
checking 994f316d50e2a3ee7ec83745824398a169a030e2 ......
	 orig commit -> f8dcd9e81797ae24acc44c84f0eb3b9e6cee9791 ......
checking 84c9248a240ec9c5cd98ecbe6f241d7b2cb7eeca ......
	 orig commit -> 6f05d0761af612e04572ba4d65b4c0274a88444f ......
checking b7de32ed33d8ce036f7b33d902318523b73d1b74 ......
	 orig commit -> fba4f472b33aa81ca1836f57d005455261e9126f ......
checking c1c0f99f4fab4ccc194a846693288b820404e833 ......
	 orig commit -> fb9e67bee3ab7111513130c516ffe378d885c0d0 ......
checking 90089934fce3a476d508c08bfb271f5ba19d6204 ......
	 orig commit -> bd9166ffe624000140fc6b606b256df01fc0d060 ......
checking 489e563cd3e1086ef30ac0b3a4a76ef25b8e3ff2 ......
	 orig commit -> 25d1d50e23275e141e3a3fe06c25a99f4c4bf4e0 ......
		 25d1d50e23275e141e3a3fe06c25a99f4c4bf4e0 has problem. Fixes commit -> a680f1d463aeaeb00d22af257a56e111967c2f18
commit cfde23842ab214e3de39beb7e68970c502e849e8
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jul 5 10:30:56 2017 +0200

    scsi: virtio_scsi: always read VPD pages for multiqueue too
    
    commit a680f1d463aeaeb00d22af257a56e111967c2f18 upstream.
    
    Multi-queue virtio-scsi uses a different scsi_host_template struct.  Add
    the .device_alloc field there, too.
    
    Fixes: 25d1d50e23275e141e3a3fe06c25a99f4c4bf4e0
    Cc: stable@vger.kernel.org
    Cc: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Fam Zheng <famz@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0bb43a3a7542c907d2c32e811d75faed6d55eda1 ......
	 orig commit -> f4d1047914ea05e0f8393944da18f6ee5dad24c4 ......
checking e2b737ef004896714a3f73c9bab0444da8dfc7b7 ......
	 orig commit -> 2220fb2960b72915e7fd9da640a4695dceff238c ......
checking cfa8803d3876f8842152df5034b4434930efd1f5 ......
	 orig commit -> 8973aa4aecac223548366ca81818309a0f0efa6d ......
checking 723052b2540bf8bea0df3b73547c75c50bdd86ae ......
	 orig commit -> c0c345d4cacc6a1f39d4856f37dcf6e34f51a5e4 ......
checking 3095a0dc94b82910627ec18ddae50a8b0fc718b6 ......
	 orig commit -> ca80d5d0a8175c9be04cfbce24180b8f5e0a744b ......
checking f5df9a59c68ea8272960cb88d31434ccb69b3510 ......
	 orig commit -> 400c18e3dc86e04ef5afec9b86a8586ca629b9e9 ......
checking 61ea482ba847c373e2dd7c5de9132d9ca47cf90a ......
	 orig commit -> 8b06b884cd98f7ec8b5028680b99fabfb7b3e192 ......
checking 92bfedfa933ef9aa5fded7de9415d09c1dcd3200 ......
	 orig commit -> beb5989a8c6c6867b4e873cca2a66d31f977368f ......
checking 4bd1761b69f3e627dfb5fc6c2ac38e451e9e67c8 ......
	 orig commit -> 14506127979a5a3d0c5d9b4cc76ce9d4ec23b717 ......
		 14506127979a5a3d0c5d9b4cc76ce9d4ec23b717 has problem. Fixes commit -> 5a8067c0d17feb7579db0476191417b441a8996e
checking 355edc25c3f9b5171abaea2a160c569a1e52f4d2 ......
	 orig commit -> e7080d4471d805d921a9ea21b32f911a91e248cb ......
checking 2bea4875294f1715e2b52dd66d8b666d733f1308 ......
	 orig commit -> 4a6e3c5def13c91adf2acc613837001f09af3baa ......
		 4a6e3c5def13c91adf2acc613837001f09af3baa has problem. Fixes commit -> c76fe2d98c726224a975a0d0198c3fb50406d325
checking 8cda29d440c39e267ab67217171ed708ac27a0b4 ......
	 orig commit -> e058e7a4bc89104540a8a303682248614b5df6f1 ......
checking f2596a9808acfd02ce1ee389f0e1c37e64aec5f6 ......
	 orig commit -> 382bd4de61827dbaaf5fb4fb7b1f4be4a86505e7 ......
		 382bd4de61827dbaaf5fb4fb7b1f4be4a86505e7 has problem. Fixes commit -> 4f8413a3a799c958f7a10a6310a451e6b8aef5ad
checking ade9f4ba0d7af1ee2a310f1dda96c9174e35202b ......
	 orig commit -> 205dcc1ecbc566cbc20acf246e68de3b080b3ecf ......
checking b7e5f1a204e1209c6abeda71956b58f0f6ee21fe ......
	 orig commit -> 8153f9ac43897f9f4786b30badc134fcc1a4fb11 ......
checking 723dde3922983e1eb5bbc336d826fe6eac57fc9a ......
	 orig commit -> a5cbdf693a60d5b86d4d21dfedd90f17754eb273 ......
checking 58e7fd9cae5f0b8deabfae1f1f87526b5a874e08 ......
	 orig commit -> d340266e19ddb70dbd608f9deedcfb35fdb9d419 ......
checking 4dbe5cc3885b98f3a8e45065e42d90901c1f33c2 ......
	 orig commit -> 95123fc43560d6f4a60e74f72836e63cd8848f76 ......
checking f114850808ea4aadc9d033f895ff024b7faf8dee ......
	 orig commit -> a1e23a42f1bdc00e32fc4869caef12e4e6272f26 ......
checking cd1ff13ae462558879061456667ca105e3c2f051 ......
	 orig commit -> 7ee06cb2f840a96be46233181ed4557901a74385 ......
checking f15ea8e12821a5709b2eec406cbefa1dba27ff5b ......
	 orig commit -> d63d07c6fc25182af6d3ab5b3b8737b0c1025ebd ......
checking 8623759933ff15a3864d33225ad26ae87566655d ......
	 orig commit -> 9bf944548169f6153c3d3778cf983cb5db251a0e ......
checking 86138a4972c4c347413f8461cd06f6a947947dfc ......
	 orig commit -> fb9eb899a6dc663e4a2deed9af2ac28f507d0ffb ......
		 fb9eb899a6dc663e4a2deed9af2ac28f507d0ffb has problem. Fixes commit -> 055db6957e4735b16cd2fa94a5bbfb754c9b8023
checking 09604c91cb04979eff200d05e44df845cd0fb7cf ......
	 orig commit -> f35823619db8bbaa2afea8705f239c3cecb9d22f ......
checking d1ef7ed6e586ef69b366719bc37f1009e1d7d5d4 ......
checking 2d07d7d7032c340564d84cedfba60a4d53355e95 ......
	 orig commit -> 86b9fa2190907f4f550d9d6bf490c5f89ca33836 ......
	 orig commit -> 2b83ff96f51d0b039c4561b9f95c824d7bddb85c ......
checking d3c79a38843b7d44734dacc17694a72a0b269b74 ......
	 orig commit -> 740a5759bf222332fbb5eda42f89aa25ba38f9b2 ......
checking df09b6f7b54adba78693997096d0bcb1bd80537c ......
	 orig commit -> cabfb3680f78981d26c078a26e5c748531257ebb ......
checking fca16f9a02d9c44d8231ee52f84de3d57422bc3d ......
	 orig commit -> 4587eee04e2ac7ac3ac9fa2bc164fb6e548f99cd ......
checking 548af581f939bbad7fa21fa8dace32e5eef075e5 ......
	 orig commit -> 374503c6109e60f48fa9b11341b14466f07bd3f4 ......
checking 890962b83636836b044022773995d5ae558499ea ......
	 orig commit -> 3be23274755ee85771270a23af7691dc9b3a95db ......

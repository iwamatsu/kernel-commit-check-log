Check from v4.9.146 to v4.9.147
Commit count: 62
checking bbfc30f29cb328111fec12975ded8223ecc8e1a5 ......
checking 1228a3336d90e2e3572ebaf1d959e3f51a10ea46 ......
	 orig commit -> cd7f3a249dbed2858e6c2f30e5be7f1f7a709ee2 ......
checking 54dbda74475e4e6fa8fd353c2cc599bda51fc5cc ......
	 orig commit -> 7bb633b1a9812a6b9f3e49d0cf17f60a633914e5 ......
checking 36764b4a4363ef6dc5a6335acd3157c9dc94ebe4 ......
	 orig commit -> d7dcdf9d4e15189ecfda24cc87339a3425448d5c ......
checking 89efcfc544ee1d9d4e68ec44d3932db3f3feb3b8 ......
	 orig commit -> 0544ee4b1ad574aec3b6379af5f5cdee42840971 ......
checking ebf838c7a160484e99b9e43203359815cde45809 ......
	 orig commit -> 6c7f25cae54b840302e4f1b371dbf318fbf09ab2 ......
checking 06ec6679fe12cacafce68ab7b509586482a2ae1b ......
	 orig commit -> c38f57da428b033f2721b611d84b1f40bde674a8 ......
checking 4cd376638c893cf5bf1072eeaac884f62b7ac71e ......
	 orig commit -> 6e785302dad32228819d8066e5376acd15d0e6ba ......
checking ba89274f0ec3656e11d0ffd0890480e2fcc3ca3b ......
	 orig commit -> e594a5e349ddbfdaca1951bb3f8d72f3f1660d73 ......
checking 2198eb1229c245ee3eb2ae11877dc06c3777c279 ......
	 orig commit -> ecb239d96d369c23c33d41708646df646de669f4 ......
checking 493a06d37a28137b82e9d1cc380fe7ed0cae5030 ......
	 orig commit -> 3d0358d0ba048c5afb1385787aaec8fa5ad78fcc ......
checking c711ec9a0f721b3d3a09bf1d3cc1fa23fa0cda04 ......
	 orig commit -> a1208f6a822ac29933e772ef1f637c5d67838da9 ......
checking ae30c98dcffd62635a86b967d75eabb07b53fed4 ......
	 orig commit -> c3494801cd1785e2c25f1a5735fa19ddcf9665da ......
		 c3494801cd1785e2c25f1a5735fa19ddcf9665da has problem. Fixes commit -> 86edaed379632e216a97e6bcef9f498b64522d50
checking 2b8b723ccf94371347346a7c247b708d0c8c9613 ......
	 orig commit -> 1b603f9e4313348608f256b564ed6e3d9e67f377 ......
checking 24ed8c5302581cd70fe62533fb2969b7665e9ff1 ......
	 orig commit -> a74515604a7b171f2702bdcbd1e231225fb456d0 ......
checking 6705f748b0a2efe6352460e551398e13b8e68bef ......
	 orig commit -> fd6f32f78645db32b6b95a42e45da2ddd6de0e67 ......
checking 6ceb38129394c1a577dc02c4bc99993fa06d7ed2 ......
	 orig commit -> 6c3516fed7b61a3527459ccfa67fab130d910610 ......
checking 4ff9a2f211eade1f706a522285646ec5cfdd217e ......
	 orig commit -> 2e85c57493e391b93445c1e0d530b36b95becc64 ......
checking 38391d6b11449ee86e3f6af003e4218ab95d3bec ......
	 orig commit -> d9f5b7f5dd0fa74a89de5a7ac1e26366f211ccee ......
checking 6ecd4ae6760c043afb9b1920c45fca2906e7ffb0 ......
	 orig commit -> a51921c0db3fd26c4ed83dc0ec5d32988fa02aa5 ......
checking f969b24ec770d40270ae43dfc0ac68c96db56f55 ......
	 orig commit -> dac097c4546e4c5b16dd303a1e97c1d319c8ab3e ......
checking 076bb557eeacb0366dd079bbab72acc0a6de2175 ......
	 orig commit -> 6bd520ab7cf69486ea81fd3cdfd2d5a390ad1100 ......
checking 38d3f5fb60cecc34e8b7906d73dde635b14ed6de ......
	 orig commit -> 87d81a23e24f24ebe014891e8bdf3ff8785031e8 ......
checking 5ba8d8b5a27c3d50f6544d1ce8c6732c8b36aedc ......
	 orig commit -> 0a9a4304f3614e25d9de9b63502ca633c01c0d70 ......
checking de42cd219802457caa61c001776281fe42deae9d ......
	 orig commit -> ad3cba223ac02dc769c3bbe88efe277bbb457566 ......
checking 2eb7e6fd37fb99c2476f2c6299efaaecbc19f2c5 ......
	 orig commit -> 3b5b3a3331d141e8f2a7aaae3a94dfa1e61ecbe4 ......
checking beab9a76d4916e7477dc5f288ffb4149813c56be ......
	 orig commit -> 10d443431dc2bb733cf7add99b453e3fb9047a2e ......
checking 945d5195c61222c4cfb222c076309f04464df81c ......
	 orig commit -> 3b712e43e3876b42b38321ecf790a1f5fe59c834 ......
checking 01edb9812380b6f9f321523fbb4e09377a2af208 ......
	 orig commit -> 79c2206d369b87b19ac29cb47601059b6bf5c291 ......
checking 7f928ef277bbafdf3d970502799cad70c3d870f5 ......
	 orig commit -> 02f425f811cefcc4d325d7a72272651e622dc97e ......
checking 2ee718b1c537c597be502fcd85810b99ff7f4ff9 ......
	 orig commit -> 5db6dd14b31397e8cccaaddab2ff44ebec1acf25 ......
checking 3e5d4c14a7427dc2a24737c8dcc61688870d737a ......
	 orig commit -> 05cc09de4c017663a217630682041066f2f9a5cd ......
checking c6bcf40f769294a80c64213f9175ccd408d64532 ......
	 orig commit -> 6cc65be4f6f2a7186af8f3e09900787c7912dad2 ......
checking 88ce30fb88a192d8bf3b789122030a85e6c3ce5a ......
	 orig commit -> 7aa54be2976550f17c11a1c3e3630002dea39303 ......
		 7aa54be2976550f17c11a1c3e3630002dea39303 has problem. Fixes commit -> b987ffc18fb3b3b76b059aa9e372dbee26f7c4f2
checking 8ae5642df23de3d2fce8f176943c0739abbeb9da ......
	 orig commit -> b247be3fe89b6aba928bf80f4453d1c4ba8d2063 ......
checking f650bdcabf560f530b74a2266a17549fdf084161 ......
	 orig commit -> 53bf57fab7321fb42b703056a4c80fc9d986d170 ......
checking 0952e8f0e62456d7b6eb0abb3f71213b7630cf0f ......
	 orig commit -> c61da58d8a9ba9238250a548f00826eaf44af0f7 ......
checking 0f28d5f4ce393354e50de2da743dc04e7bcd8667 ......
	 orig commit -> 3bea9adc96842b8a7345c7fb202c16ae9c8d5b25 ......
checking 9b5884372c792b0dade0cf22390a9516c870b7d7 ......
	 orig commit -> 59fb586b4a07b4e1a0ee577140ab4842ba451acd ......
		 59fb586b4a07b4e1a0ee577140ab4842ba451acd has problem. Fixes commit -> 7aa54be2976550f17c11a1c3e3630002dea39303
commit 88ce30fb88a192d8bf3b789122030a85e6c3ce5a
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Dec 18 23:10:49 2018 +0100

    locking/qspinlock, x86: Provide liveness guarantee
    
    commit 7aa54be2976550f17c11a1c3e3630002dea39303 upstream.
    
    On x86 we cannot do fetch_or() with a single instruction and thus end up
    using a cmpxchg loop, this reduces determinism. Replace the fetch_or()
    with a composite operation: tas-pending + load.
    
    Using two instructions of course opens a window we previously did not
    have. Consider the scenario:
    
            CPU0            CPU1            CPU2
    
     1)     lock
              trylock -> (0,0,1)
    
     2)                     lock
                              trylock /* fail */
    
     3)     unlock -> (0,0,0)
    
     4)                                     lock
                                              trylock -> (0,0,1)
    
     5)                       tas-pending -> (0,1,1)
                              load-val <- (0,1,0) from 3
    
     6)                       clear-pending-set-locked -> (0,0,1)
    
                              FAIL: _2_ owners
    
    where 5) is our new composite operation. When we consider each part of
    the qspinlock state as a separate variable (as we can when
    _Q_PENDING_BITS == 8) then the above is entirely possible, because
    tas-pending will only RmW the pending byte, so the later load is able
    to observe prior tail and lock state (but not earlier than its own
    trylock, which operates on the whole word, due to coherence).
    
    To avoid this we need 2 things:
    
     - the load must come after the tas-pending (obviously, otherwise it
       can trivially observe prior state).
    
     - the tas-pending must be a full word RmW instruction, it cannot be an XCHGB for
       example, such that we cannot observe other state prior to setting
       pending.
    
    On x86 we can realize this by using "LOCK BTS m32, r32" for
    tas-pending followed by a regular load.
    
    Note that observing later state is not a problem:
    
     - if we fail to observe a later unlock, we'll simply spin-wait for
       that store to become visible.
    
     - if we observe a later xchg_tail(), there is no difference from that
       xchg_tail() having taken place before the tas-pending.
    
    Suggested-by: Will Deacon <will.deacon@arm.com>
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Will Deacon <will.deacon@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: andrea.parri@amarulasolutions.com
    Cc: longman@redhat.com
    Fixes: 59fb586b4a07 ("locking/qspinlock: Remove unbounded cmpxchg() loop from locking slowpath")
    Link: https://lkml.kernel.org/r/20181003130957.183726335@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    [bigeasy: GEN_BINARY_RMWcc macro redo]
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 60668f3cddf1b25a954b198cade0ce726a6853ab ......
	 orig commit -> 625e88be1f41b53cec55827c984e4a89ea8ee9f9 ......
		 625e88be1f41b53cec55827c984e4a89ea8ee9f9 has problem. Fixes commit -> 6cc65be4f6f2a7186af8f3e09900787c7912dad2
commit c6bcf40f769294a80c64213f9175ccd408d64532
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Jun 21 20:35:26 2018 -0400

    locking/qspinlock: Fix build for anonymous union in older GCC compilers
    
    [ Upstream commit 6cc65be4f6f2a7186af8f3e09900787c7912dad2 ]
    
    One of my tests compiles the kernel with gcc 4.5.3, and I hit the
    following build error:
    
      include/linux/semaphore.h: In function 'sema_init':
      include/linux/semaphore.h:35:17: error: unknown field 'val' specified in initializer
      include/linux/semaphore.h:35:17: warning: missing braces around initializer
      include/linux/semaphore.h:35:17: warning: (near initialization for '(anonymous).raw_lock.<anonymous>.val')
    
    I bisected it down to:
    
     625e88be1f41 ("locking/qspinlock: Merge 'struct __qspinlock' into 'struct qspinlock'")
    
    ... which makes qspinlock have an anonymous union, which makes initializing it special
    for older compilers. By adding strategic brackets, it makes the build
    happy again.
    
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Fixes: 625e88be1f41 ("locking/qspinlock: Merge 'struct __qspinlock' into 'struct qspinlock'")
    Link: http://lkml.kernel.org/r/20180621203526.172ab5c4@vmware.local.home
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 8e5b3bcc5291092aaac4cadc0b5fb46182172ed3 ......
	 orig commit -> 6512276d97b160d90b53285bd06f7f201459a7e3 ......
checking 48c42d4dfec408760d15acc334d91208a6b2262e ......
	 orig commit -> 95bcade33a8af38755c9b0636e36a36ad3789fe6 ......
checking c3b6e79fbf295c9cda4dd1828a8f0593cad53d48 ......
	 orig commit -> 548095dea63ffc016d39c35b32c628d033638aca ......
checking d395117fac7943da6966ccbac3b95651f5581f15 ......
	 orig commit -> 28a9a9e83ceae2cee25b9af9ad20d53aaa9ab951 ......
checking 0715895a55b42f6218f194ce174efa72e34484d6 ......
	 orig commit -> 911a26484c33e10de6237228ca1d7293548e9f49 ......
checking 7a4b56ae85f67f749df6c8d7a8f92d2cab880904 ......
	 orig commit -> c470bdc1aaf36669e04ba65faf1092b2d1c6cabe ......
		 c470bdc1aaf36669e04ba65faf1092b2d1c6cabe has problem. Fixes commit -> 911a26484c33e10de6237228ca1d7293548e9f49
commit 0715895a55b42f6218f194ce174efa72e34484d6
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Tue Apr 3 11:35:22 2018 +0300

    mac80211: Fix condition validating WMM IE
    
    [ Upstream commit 911a26484c33e10de6237228ca1d7293548e9f49 ]
    
    Commit c470bdc1aaf3 ("mac80211: don't WARN on bad WMM parameters from
    buggy APs") handled cases where an AP reports a zeroed WMM
    IE. However, the condition that checks the validity accessed the wrong
    index in the ieee80211_tx_queue_params array, thus wrongly deducing
    that the parameters are invalid. Fix it.
    
    Fixes: c470bdc1aaf3 ("mac80211: don't WARN on bad WMM parameters from buggy APs")
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 02366eccf81feeeaf329bbfda3dcce86468566fd ......
	 orig commit -> cf66b8a0ba142fbd1bf10ac8f3ae92d1b0cb7b8f ......
checking af20483dbd7c2a01f7874191524fc0397b9d3bec ......
	 orig commit -> 63238173b2faf3d6b85a416f1c69af6c7be2413f ......
		 63238173b2faf3d6b85a416f1c69af6c7be2413f has problem. Fixes commit -> b8f9d7f37b6af829c34c49d1a4f73ce6ed58e403
checking b0daf4e6324f5164f91d8b9fcb4530e2928faf00 ......
	 orig commit -> 78e7b15e17ac175e7eed9e21c6f92d03d3b0a6fa ......
checking 326c9e17c1202e820f221946e07d13cbf8c9f964 ......
	 orig commit -> 2840f84f74035e5a535959d5f17269c69fa6edc5 ......
checking 5e8e777a42e8ec993afc8cfd3464dee6a1fb1ced ......
	 orig commit -> 3cec638b3d793b7cacdec5b8072364b41caeb0e1 ......
checking 6c4fbbd96b3daa4fb9d3eef0cf8b22336c8739f9 ......
	 orig commit -> 76f4e2c3b6a560cdd7a75b87df543e04d05a9e5f ......
checking 5c2590dc3e2520157ebb6e84a372578bc80118f7 ......
	 orig commit -> e8cde625bfe8a714a856e1366bcbb259d7346095 ......
checking 3a7bac902691cd92cb69f95d98dc675dea8b3228 ......
	 orig commit -> a538e3ff9dabcdf6c3f477a373c629213d1c3066 ......
checking 4cf3b84a10eae6d6d9b6bd369b6906ae7532abd1 ......
	 orig commit -> 478b6767ad26ab86d9ecc341027dd09a87b1f997 ......
checking 1098aad93c4a05a0165fd008e13be99201a9e621 ......
	 orig commit -> 8e7df2b5b7f245c9bd11064712db5cb69044a362 ......
checking 36c9eca096a72ba02df39d653ae7005825dce65a ......
	 orig commit -> a8ec14d4f6aa8e245efacc992c8ee6ea0464ce2a ......
checking c07f4060708d136071aeac63b8dd898233694812 ......
	 orig commit -> 0b548e33e6cb2bff240fdaf1783783be15c29080 ......
checking b7d8b9cb820e74fe466ff0108893c08f28f3ebc1 ......
	 orig commit -> 223f8911eace60c787f8767c25148b80ece9732a ......
checking 5e03c490303c03a4f35e72f2209a79a19d954454 ......
	 orig commit -> c46ecce431ebe6b1a9551d1f530eb432dae5c39b ......
checking c114bdd5842b05f1d1079927074645b79edb6fc1 ......
	 orig commit -> a54dae0338b7f01eb0f9c7571fb9b74f791d1c6b ......
checking 1e7066a4540b39d475782122db60cf93633dca48 ......
	 orig commit -> 22839869f21ab3850fbbac9b425ccc4c0023926f ......

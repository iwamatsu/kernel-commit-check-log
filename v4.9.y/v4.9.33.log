Check from v4.9.33 to v4.9.34
Commit count: 63
checking 493ecd5cd73ed41e319fe39816c6d3638ef080ff ......
checking ce7fe8595902c3f03ef528c2dc1928b3f4b67fcf ......
	 orig commit -> f4cb767d76cf7ee72f97dd76f6cfa6c76a5edc89 ......
checking 5d10ad6297260e9b85e7645ee544a6115bb229e4 ......
	 orig commit -> bd726c90b6b8ce87602208701b208a208e6d5600 ......
		 bd726c90b6b8ce87602208701b208a208e6d5600 has problem. Fixes commit -> 37511fb5c91db93d8bd6e3f52f86e5a7ff7cfcdf
commit 38dfd2e3a67367c701db106a1b600212efc4f93a
Author: Helge Deller <deller@gmx.de>
Date:   Fri Jul 14 14:49:38 2017 -0700

    mm: fix overflow check in expand_upwards()
    
    commit 37511fb5c91db93d8bd6e3f52f86e5a7ff7cfcdf upstream.
    
    JÃ¶rn Engel noticed that the expand_upwards() function might not return
    -ENOMEM in case the requested address is (unsigned long)-PAGE_SIZE and
    if the architecture didn't defined TASK_SIZE as multiple of PAGE_SIZE.
    
    Affected architectures are arm, frv, m68k, blackfin, h8300 and xtensa
    which all define TASK_SIZE as 0xffffffff, but since none of those have
    an upwards-growing stack we currently have no actual issue.
    
    Nevertheless let's fix this just in case any of the architectures with
    an upward-growing stack (currently parisc, metag and partly ia64) define
    TASK_SIZE similar.
    
    Link: http://lkml.kernel.org/r/20170702192452.GA11868@p100.box
    Fixes: bd726c90b6b8 ("Allow stack to grow up to address space limit")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reported-by: Jörn Engel <joern@purestorage.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking cfc0eb403816c5c4f9667d959de5e22789b5421e ......
	 orig commit -> 1be7107fbe18eed3e319a6c3e83c78254b693acb ......
		 1be7107fbe18eed3e319a6c3e83c78254b693acb has problem. Fixes commit -> 561b5e0709e4a248c67d024d4d94b6e31e3edf2f
f4cb767d76cf7ee72f97dd76f6cfa6c76a5edc89
commit ce7fe8595902c3f03ef528c2dc1928b3f4b67fcf
Author: Hugh Dickins <hughd@google.com>
Date:   Tue Jun 20 02:10:44 2017 -0700

    mm: fix new crash in unmapped_area_topdown()
    
    commit f4cb767d76cf7ee72f97dd76f6cfa6c76a5edc89 upstream.
    
    Trinity gets kernel BUG at mm/mmap.c:1963! in about 3 minutes of
    mmap testing.  That's the VM_BUG_ON(gap_end < gap_start) at the
    end of unmapped_area_topdown().  Linus points out how MAP_FIXED
    (which does not have to respect our stack guard gap intentions)
    could result in gap_end below gap_start there.  Fix that, and
    the similar case in its alternative, unmapped_area().
    
    Fixes: 1be7107fbe18 ("mm: larger stack guard gap, between vmas")
    Reported-by: Dave Jones <davej@codemonkey.org.uk>
    Debugged-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit c57664bd12997742da5e12556e328e1ec0b5b654
Author: Michal Hocko <mhocko@suse.com>
Date:   Mon Jul 10 15:49:51 2017 -0700

    mm/mmap.c: do not blow on PROT_NONE MAP_FIXED holes in the stack
    
    commit 561b5e0709e4a248c67d024d4d94b6e31e3edf2f upstream.
    
    Commit 1be7107fbe18 ("mm: larger stack guard gap, between vmas") has
    introduced a regression in some rust and Java environments which are
    trying to implement their own stack guard page.  They are punching a new
    MAP_FIXED mapping inside the existing stack Vma.
    
    This will confuse expand_{downwards,upwards} into thinking that the
    stack expansion would in fact get us too close to an existing non-stack
    vma which is a correct behavior wrt safety.  It is a real regression on
    the other hand.
    
    Let's work around the problem by considering PROT_NONE mapping as a part
    of the stack.  This is a gros hack but overflowing to such a mapping
    would trap anyway an we only can hope that usespace knows what it is
    doing and handle it propely.
    
    Fixes: 1be7107fbe18 ("mm: larger stack guard gap, between vmas")
    Link: http://lkml.kernel.org/r/20170705182849.GA18027@dhcp22.suse.cz
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Debugged-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce7fe8595902c3f03ef528c2dc1928b3f4b67fcf
Author: Hugh Dickins <hughd@google.com>
Date:   Tue Jun 20 02:10:44 2017 -0700

    mm: fix new crash in unmapped_area_topdown()
    
    commit f4cb767d76cf7ee72f97dd76f6cfa6c76a5edc89 upstream.
    
    Trinity gets kernel BUG at mm/mmap.c:1963! in about 3 minutes of
    mmap testing.  That's the VM_BUG_ON(gap_end < gap_start) at the
    end of unmapped_area_topdown().  Linus points out how MAP_FIXED
    (which does not have to respect our stack guard gap intentions)
    could result in gap_end below gap_start there.  Fix that, and
    the similar case in its alternative, unmapped_area().
    
    Fixes: 1be7107fbe18 ("mm: larger stack guard gap, between vmas")
    Reported-by: Dave Jones <davej@codemonkey.org.uk>
    Debugged-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 04651048c79a789827239d335225a6bd785ac16a ......
	 orig commit -> ff86bf0c65f14346bf2440534f9ba5ac232c39a0 ......
checking b355b899c74a11c06e1edd4812d4c8809ec36c5e ......
	 orig commit -> d41519a69b35b10af7fda867fb9100df24fdf403 ......
checking 7dfe7ca9ec12b7dbd4fdefa7f3cc60e0ec08ba3b ......
	 orig commit -> 31574d321c70f6d3b40fe98f9b2eafd9a903fef9 ......
checking ecae47331a431b0295905add457a06e766310f71 ......
	 orig commit -> bcd7c45e0d5a82be9a64b90050f0e09d41a50758 ......
checking 6b706cbb16e9e794a2a37e57ae4951b8232270b4 ......
	 orig commit -> 1a73d9310e093fc3adffba4d0a67b9fab2ee3f63 ......
checking 22921a9e232a1187873c0127d408767b6bdc558e ......
	 orig commit -> 8ae584d1951f241efd45499f8774fd7066f22823 ......
checking f0ee203c864faca0b8b36698a0ffacb246b1412a ......
	 orig commit -> 990758c53eafe5a220a780ed12e7b4d51b3df032 ......
checking 8ee7f06f4dcaad729ecd7562b10b9a816f99ae70 ......
	 orig commit -> f4781e76f90df7aec400635d73ea4c35ee1d4765 ......
checking 766283254b672293fa39b5cecd6a5f86efd75127 ......
	 orig commit -> fa07ab72cbb0d843429e61bf179308aed6cbe0dd ......
checking 8a48b7eace4d9a12363de9583e70e279e5fce536 ......
	 orig commit -> 252d2a4117bc181b287eeddf848863788da733ae ......
checking cf6ac3abb3233b6178279bc2ecaa8c14890f0d77 ......
	 orig commit -> 948588e25b8af5e66962ed3f53e1cae1656fa5af ......
checking f7ae7d2229d2f7c372a00b80c22b6eb5a9ac1949 ......
	 orig commit -> ef70762948dde012146926720b70e79736336764 ......
checking 1419b8752153d50f21cb34131cc613ee09662d8a ......
	 orig commit -> 7258ae5c5a2ce2f5969e8b18b881be40ab55433d ......
checking 0c0d3d8730db10baf92ad82fd29aca53a1936483 ......
	 orig commit -> f16443a034c7aa359ddf6f0f9bc40d01ca31faea ......
		 f16443a034c7aa359ddf6f0f9bc40d01ca31faea has problem. Fixes commit -> dec3c23c9aa1815f07d98ae0375b4cbc10971e13
7dbd8f4cabd96db5a50513de9d83a8105a5ffc81
commit e39b17143a5b5aac81f066d455e5d3a9877eb3ae
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 26 15:15:49 2017 -0400

    USB: dummy-hcd: Fix erroneous synchronization change
    
    commit 7dbd8f4cabd96db5a50513de9d83a8105a5ffc81 upstream.
    
    A recent change to the synchronization in dummy-hcd was incorrect.
    The issue was that dummy_udc_stop() contained no locking and therefore
    could race with various gadget driver callbacks, and the fix was to
    add locking and issue the callbacks with the private spinlock held.
    
    UDC drivers aren't supposed to do this.  Gadget driver callback
    routines are allowed to invoke functions in the UDC driver, and these
    functions will generally try to acquire the private spinlock.  This
    would deadlock the driver.
    
    The correct solution is to drop the spinlock before issuing callbacks,
    and avoid races by emulating the synchronize_irq() call that all real
    UDC drivers must perform in their ->udc_stop() routines after
    disabling interrupts.  This involves adding a flag to dummy-hcd's
    private structure to keep track of whether interrupts are supposed to
    be enabled, and adding a counter to keep track of ongoing callbacks so
    that dummy_udc_stop() can wait for them all to finish.
    
    A real UDC driver won't receive disconnect, reset, suspend, resume, or
    setup events once it has disabled interrupts.  dummy-hcd will receive
    them but won't try to issue any gadget driver callbacks, which should
    be just as good.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: f16443a034c7 ("USB: gadgetfs, dummy-hcd, net2280: fix locking for callbacks")
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 4236e40a9d4facd4b3e6c67ccc1e486d6254cf50
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Aug 8 11:20:39 2018 -0400

    USB: net2280: Fix erroneous synchronization change
    
    commit dec3c23c9aa1815f07d98ae0375b4cbc10971e13 upstream.
    
    Commit f16443a034c7 ("USB: gadgetfs, dummy-hcd, net2280: fix locking
    for callbacks") was based on a serious misunderstanding.  It
    introduced regressions into both the dummy-hcd and net2280 drivers.
    
    The problem in dummy-hcd was fixed by commit 7dbd8f4cabd9 ("USB:
    dummy-hcd: Fix erroneous synchronization change"), but the problem in
    net2280 remains.  Namely: the ->disconnect(), ->suspend(), ->resume(),
    and ->reset() callbacks must be invoked without the private lock held;
    otherwise a deadlock will occur when the callback routine tries to
    interact with the UDC driver.
    
    This patch largely is a reversion of the relevant parts of
    f16443a034c7.  It also drops the private lock around the calls to
    ->suspend() and ->resume() (something the earlier patch forgot to do).
    This is safe from races with device interrupts because it occurs
    within the interrupt handler.
    
    Finally, the patch changes where the ->disconnect() callback is
    invoked when net2280_pullup() turns the pullup off.  Rather than
    making the callback from within stop_activity() at a time when dropping
    the private lock could be unsafe, the callback is moved to a point
    after the lock has already been dropped.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: f16443a034c7 ("USB: gadgetfs, dummy-hcd, net2280: fix locking for callbacks")
    Reported-by: D. Ziesche <dziesche@zes.com>
    Tested-by: D. Ziesche <dziesche@zes.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e39b17143a5b5aac81f066d455e5d3a9877eb3ae
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 26 15:15:49 2017 -0400

    USB: dummy-hcd: Fix erroneous synchronization change
    
    commit 7dbd8f4cabd96db5a50513de9d83a8105a5ffc81 upstream.
    
    A recent change to the synchronization in dummy-hcd was incorrect.
    The issue was that dummy_udc_stop() contained no locking and therefore
    could race with various gadget driver callbacks, and the fix was to
    add locking and issue the callbacks with the private spinlock held.
    
    UDC drivers aren't supposed to do this.  Gadget driver callback
    routines are allowed to invoke functions in the UDC driver, and these
    functions will generally try to acquire the private spinlock.  This
    would deadlock the driver.
    
    The correct solution is to drop the spinlock before issuing callbacks,
    and avoid races by emulating the synchronize_irq() call that all real
    UDC drivers must perform in their ->udc_stop() routines after
    disabling interrupts.  This involves adding a flag to dummy-hcd's
    private structure to keep track of whether interrupts are supposed to
    be enabled, and adding a counter to keep track of ongoing callbacks so
    that dummy_udc_stop() can wait for them all to finish.
    
    A real UDC driver won't receive disconnect, reset, suspend, resume, or
    setup events once it has disabled interrupts.  dummy-hcd will receive
    them but won't try to issue any gadget driver callbacks, which should
    be just as good.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: f16443a034c7 ("USB: gadgetfs, dummy-hcd, net2280: fix locking for callbacks")
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3ff5f4f6a8a7c4a4f06e0b5f492ecd9a36460fb7 ......
	 orig commit -> f50b878fed33e360d01dcdc31a8eeb1815d033d5 ......
checking 06178662474ca54f92664f72e2e3c48d716317f0 ......
	 orig commit -> d2f48f05cd2a2a0a708fbfa45f1a00a87660d937 ......
checking 4581d7dd44f336d82cac7d5e5ae5ce429b52c98a ......
	 orig commit -> b72eb8435b25be3a1880264cf32ac91e626ba5ba ......
checking 2abac4084fb91021371a97fc42963f3e01228a3b ......
	 orig commit -> 8128a31eaadbcdfa37774bbd28f3f00bac69996a ......
checking f28ba80c6a3e8bf7ec96e06667dd82e98ae1c672 ......
	 orig commit -> 816c9311f1144a03da1fdc4feb2f6b0d3299fca0 ......
checking 02d009e865a830a16d932c4ea2fce158642c0bbe ......
	 orig commit -> 1427228d5869f5804b03d47acfa4a88122572a78 ......
checking 07612c1227e8532e840f457f5b95596f7487e0f6 ......
	 orig commit -> dd14a3e9b92ac6f0918054f9e3477438760a4fa6 ......
checking f75f4d196ab58f21746a0cf624bd00f2153273c7 ......
	 orig commit -> 1f873d857b6c2fefb4dada952674aa01bcfb92bd ......
checking c8091f0e85493b9c8a3edfc60fa434e70a0949a4 ......
	 orig commit -> d81182ce30dbd497a1e7047d7fda2af040347790 ......
checking 374aceef5912f3438a1cc582a2007551f0fbdb15 ......
	 orig commit -> 6830733d53a4517588e56227b9c8538633f0c496 ......
checking 9ae5dac225e28ce165464d8880ecbc147708e12b ......
	 orig commit -> ec963b412a54aac8e527708ecad06a6988a86fb4 ......
checking 7b5bce3a5128108ec14dc22e8a9e46cd1a3b6c54 ......
	 orig commit -> 1a744d2eb76aaafb997fda004ae3ae62a1538f85 ......
checking 12bfbe157d066696a8b34406cb0e3353346f6fc6 ......
	 orig commit -> 93491ced3c87c94b12220dbac0527e1356702179 ......
checking cb53a4e03b2f2341f1b24d8c6785d4ff57928f41 ......
	 orig commit -> 940f538a100c84c6e72813e4ac88bd1753a86945 ......
checking dd65c0958b77d97a9419f1ccfab3fa8c30f61338 ......
	 orig commit -> 067d6fdc558d2c43f0bfdc7af99630dd5eb08dc5 ......
checking 723bd3b9f83fe4ba903351cdaa1e6dfbec8faac0 ......
	 orig commit -> cdc876877ebc3f0677b267756d4564e2a429e730 ......
checking b51e4b0ac6618814bb1b294086b84aa9a51aaf48 ......
	 orig commit -> de8d6e02efbdb259c67832ccf027d7ace9b91d5d ......
checking dca02651cee78260ad9b6f1dce8f40b28367b7e2 ......
	 orig commit -> 5ba5b437efaa7a502eec393c045d3bf90c92c4e9 ......
checking cf308c15103e9b5e13a7719decec86b20d538863 ......
	 orig commit -> 6272c0de13abf1480f701d38288f28a11b4301c4 ......
checking 56251d138570b4c789ee8e55c4f58f8b658e8ea0 ......
	 orig commit -> 1b211d48abaa0e12e6e6177c0316ff55d11fdfce ......
checking a1d51f7abf710729822bafeb82c664f6657a4db6 ......
	 orig commit -> cf6c77323a96fc40309cc8a4921ef206cccdd961 ......
checking 773fdcdc0957527577b2f1de994448894f1e3305 ......
	 orig commit -> 784047eb2d3405a35087af70cba46170c5576b25 ......
checking ed13a9c6464b49b654baeba96c833b1129dc4ce4 ......
	 orig commit -> 8b8a84c54aff4256d592dc18346c65ecf6811b45 ......
checking caa6f1c7bcbe15e8cc009c689a10b1c67de48833 ......
	 orig commit -> 861ce4a3244c21b0af64f880d5bfe5e6e2fb9e4a ......
checking ad3faea03fdfeed4cb1f8fc1b3b28eb8282bd231 ......
	 orig commit -> 5f76895e4c712b1b5af450cf344389b8c53ac2c2 ......
checking a50aacf5de522a5af2a9cd61ba38b0bd8b50cad6 ......
	 orig commit -> be40597a1bc173bf9dadccdf5388b956f620ae8f ......
checking 879d61f218a94afdc53a050e97c59209b64687c4 ......
	 orig commit -> ca39b449f6d03e8235969f12f5dd25b8eb4304d6 ......
checking 5899b635ecc7a8c4ae5007f2e74250ec4297feba ......
	 orig commit -> 014580ffab654bb83256783a2b185cf6c06dffaa ......
checking 5b754c994f3893f64973aecb467c38cd9bfc25e5 ......
	 orig commit -> b3dd8279659f14f3624bb32559782d699fa6f7d1 ......
checking 3e8c503d0a1626cb54c01c04f6485683d8d76f28 ......
	 orig commit -> e165bc02a02c70e40d5c811c705ba269aeca0497 ......
checking 6568f8f70152b787ded9fe9f7d88aaeac379b6d3 ......
	 orig commit -> 5667c86acf021e6dcf02584408b4484a273ac68f ......
checking c8143269c9c48172c832f25b5ae38163147244d2 ......
	 orig commit -> f1f3e9e2a50a70de908f9dfe0d870e9cdc67e042 ......
checking 841e4e775bb1229dce3404a459b8353c08c70f49 ......
	 orig commit -> 0328edc77d4f35014b35f32b46be0a7e16aae74f ......
checking f79d740f3289d747b5563da98b778c0021a8fc32 ......
	 orig commit -> f181d6a3bcc35633facf5f3925699021c13492c5 ......
checking bd3f89002e526bb954d8b8a5620bd6810423f040 ......
	 orig commit -> b3addcf0d1f04f53fcc302577d5a5e964c18531a ......
checking a317afc0c1ce9f49573ae8182d2a0f38d0171962 ......
	 orig commit -> c380f681245d7ae57f17d9ebbbe8f8f1557ee1fb ......
checking 7f7bb1173db826a292727ee6d7a499cef4e6e0bc ......
	 orig commit -> bea10413934dcf98cb9b2dfcdc56e1d28f192897 ......
checking f6e99a2efc03eea6444f59f158e1b0ce7c51ef36 ......
	 orig commit -> 98c67d187db7808b1f3c95f2110dd4392d034182 ......
checking 2ec5b68bf62ef47daf526967f0fd069caf581e31 ......
	 orig commit -> 769dc04db3ed8484798aceb015b94deacc2ba557 ......
checking 63d34ea7042af3ffe25cb19094cb5e766e7b67ca ......
	 orig commit -> 5ebb6dd36c9f5fb37b1077b393c254d70a14cb46 ......
checking 5d5605cc5833d6b83db393e2d178e10ef307bb40 ......
	 orig commit -> b8e11f7d2791bd9320be1c6e772a60b2aa093e45 ......
checking 47537bceb7b7de66a2cf8d0f3c1b15da7be7ef4d ......
	 orig commit -> 0db47e3d323411beeb6ea97f2c4d19395c91fd8b ......
checking 95f47cd7d7d8f40a1cc744a4a3116b44a43e6514 ......
	 orig commit -> 5cda3ee5138e91ac369ed9d0b55eab0dab077686 ......
checking a6d6282040b7196a58fba47f89b05b560fadde2b ......
	 orig commit -> ba80aa909c99802c428682c352b0ee0baac0acd3 ......
checking 222aa34e5d791217aaba7096eae78d5bba42b30b ......
	 orig commit -> 20223f0f39ea9d31ece08f04ac79f8c4e8d98246 ......

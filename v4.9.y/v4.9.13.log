Check from v4.9.13 to v4.9.14
Commit count: 154
checking d379ab2707cfa16e774e2698ff5e32a1f7b243b8 ......
checking 371d0342a39710e45e6f7c316ca7786b3e34d90f ......
	 orig commit -> e5072053b09642b8ff417d47da05b84720aea3ee ......
checking 5f7ff59d067e1888fec91fccefdd84f3987b605e ......
	 orig commit -> 524b698db06b9b6da7192e749f637904e2f62d7b ......
checking dc8470f3c831c93ffcda17612e8e58a73210b88b ......
	 orig commit -> d641df819db8b80198fd85d9de91137e8a823b07 ......
checking 27ab5414b980b19ba127cb518546d628f40bd3dc ......
	 orig commit -> 8ea73db486cda442f0671f4bc9c03a76be398a28 ......
checking aae02d1aafe7c1989a3f10ff1f6ca5eed855426e ......
	 orig commit -> ae2f5e5ed04a17c1aa1f0a3714c725e12c21d2a9 ......
checking 8a2307c7c0189a63810c23260be1f76346ad949a ......
	 orig commit -> f9f1c8db1c37253805eaa32265e1e1af3ae7d0a4 ......
checking 075be78c83989ba4e51ab05121bcb8f8b9c6ef6e ......
	 orig commit -> fda2d27db6eae5c2468f9e4657539b72bbc238bb ......
checking 3552f917154a3472d3095988f98289ebdda5a8d3 ......
	 orig commit -> a5ecdad4847897007399d7a14c9109b65ce4c9b7 ......
checking fccb22e7d5df9b899228eb651747265202e5a321 ......
	 orig commit -> c21a493a2b44650707d06741601894329486f2ad ......
checking 86840a6305149ce9b466f3a841cffdb3c0fd2608 ......
	 orig commit -> 16f906d66cd76fb9895cbc628f447532a7ac1faa ......
		 16f906d66cd76fb9895cbc628f447532a7ac1faa has problem. Fixes commit -> 1179e2c27efe21167ec9d882b14becefba2ee990
eed50879d64ab1b9f76445dbab822e43a098b309
commit 87144ec25091a516c1674494bd95f8966a480eec
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Sat Mar 11 15:52:47 2017 -0500

    xprtrdma: Squelch kbuild sparse complaint
    
    commit eed50879d64ab1b9f76445dbab822e43a098b309 upstream.
    
    New complaint from kbuild for 4.9.y:
    
    net/sunrpc/xprtrdma/verbs.c:489:19: sparse: incompatible types in
        comparison expression (different type sizes)
    
    verbs.c:
    489     max_sge = min(ia->ri_device->attrs.max_sge, RPCRDMA_MAX_SEND_SGES);
    
    I can't reproduce this running sparse here. Likewise, "make W=1
    net/sunrpc/xprtrdma/verbs.o" never indicated any issue.
    
    A little poking suggests that because the range of its values is
    small, gcc can make the actual width of RPCRDMA_MAX_SEND_SGES
    smaller than the width of an unsigned integer.
    
    Fixes: 16f906d66cd7 ("xprtrdma: Reduce required number of send SGEs")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 87144ec25091a516c1674494bd95f8966a480eec
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Sat Mar 11 15:52:47 2017 -0500

    xprtrdma: Squelch kbuild sparse complaint
    
    commit eed50879d64ab1b9f76445dbab822e43a098b309 upstream.
    
    New complaint from kbuild for 4.9.y:
    
    net/sunrpc/xprtrdma/verbs.c:489:19: sparse: incompatible types in
        comparison expression (different type sizes)
    
    verbs.c:
    489     max_sge = min(ia->ri_device->attrs.max_sge, RPCRDMA_MAX_SEND_SGES);
    
    I can't reproduce this running sparse here. Likewise, "make W=1
    net/sunrpc/xprtrdma/verbs.o" never indicated any issue.
    
    A little poking suggests that because the range of its values is
    small, gcc can make the actual width of RPCRDMA_MAX_SEND_SGES
    smaller than the width of an unsigned integer.
    
    Fixes: 16f906d66cd7 ("xprtrdma: Reduce required number of send SGEs")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 73eea1c4000fd73c138dbf8826bc6e1fa901ae9b ......
	 orig commit -> c95a3c6b88658bcb8f77f85f31a0b9d9036e8016 ......
checking fab6c2caa48f892c4f3446aea9e253ca8a6187a6 ......
	 orig commit -> b5f0afbea4f2ea52c613ac2b06cb6de2ea18cb6d ......
checking ec3bc2c5ed576c27e4c89a4fc1654755a0fe71bb ......
	 orig commit -> 24abdf1be15c478e2821d6fc903a4a4440beff02 ......
checking 788d81d4e5d43ffc2dbcd4513dfec2808f5ff616 ......
	 orig commit -> adee40b265d7568296e218f079f478197ffa15bf ......
checking 9d82393e658cf7010b90a79d7c065e1766e5480c ......
	 orig commit -> 656441478ed55d960df5f3ccdf5a0f8c61dfd0b3 ......
		 656441478ed55d960df5f3ccdf5a0f8c61dfd0b3 has problem. Fixes commit -> 6b00c35138b404be98b85f4a703be594cbed501c
commit 4d9ed68855f0844af153d70424e9e6160fe6f61c
Author: Jagdish Gediya <jagdish.gediya@nxp.com>
Date:   Thu Mar 22 01:08:10 2018 +0530

    mtd: nand: fsl_ifc: Read ECCSTAT0 and ECCSTAT1 registers for IFC 2.0
    
    commit 6b00c35138b404be98b85f4a703be594cbed501c upstream.
    
    Due to missing information in Hardware manual, current
    implementation doesn't read ECCSTAT0 and ECCSTAT1 registers
    for IFC 2.0.
    
    Add support to read ECCSTAT0 and ECCSTAT1 registers during
    ecccheck for IFC 2.0.
    
    Fixes: 656441478ed5 ("mtd: nand: ifc: Fix location of eccstat registers for IFC V1.0")
    Cc: stable@vger.kernel.org # v3.18+
    Signed-off-by: Jagdish Gediya <jagdish.gediya@nxp.com>
    Reviewed-by: Prabhakar Kushwaha <prabhakar.kushwaha@nxp.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 178d07a0b8c4dc1f6e8a924f04231a5cf9cf86d1 ......
	 orig commit -> a971df0b9d04674e325346c17de9a895425ca5e1 ......
checking 6f9c02ab9d0d5aefa15953ad3d55912e3a7abb57 ......
	 orig commit -> 03a9e24ef2aaa5f1f9837356aed79c860521407a ......
checking de2aa5b3ee76e97dc3cea33cbd3d1bd443fda7a0 ......
	 orig commit -> fb61bb82cb46a932ef2fc62e1c731c8e7e6640d5 ......
checking 6aae7ffa33072e6d3a208039ac015c1a0fb51e37 ......
	 orig commit -> a9422a19ce270a22fc520f2278fb7e80c58be508 ......
checking 616f5ef61338a53e997eebbe2c13b21c40df9b86 ......
	 orig commit -> 3753941475ae6501dcd1e41832bd0e6c35247d6a ......
checking 8c53efc399565ef4be8945c9bf45c94153699221 ......
	 orig commit -> 8b107f5b97772c7c0c218302e9a4d15b4edf50b4 ......
checking 4992ba2840bd40a85887a1a0e5d69f688f58f9dd ......
	 orig commit -> e93b9865251a0503d83fd570e7d5a7c8bc351715 ......
checking d00d1b71d98468ad6fbee590705c27fc1241f96e ......
	 orig commit -> 88c5c13a5027b36d914536fdba23f069d7067204 ......
		 88c5c13a5027b36d914536fdba23f069d7067204 has problem. Fixes commit -> d3bb910c15d75ee3340311c64a1c05985bb663a3
commit adb298bcf45ec26a20e7302fb2b7c646bcf85cea
Author: Sheng Yong <shengyong1@huawei.com>
Date:   Sat Apr 22 10:39:20 2017 +0800

    f2fs: fix multiple f2fs_add_link() having same name for inline dentry
    
    [ Upstream commit d3bb910c15d75ee3340311c64a1c05985bb663a3 ]
    
    Commit 88c5c13a5027 (f2fs: fix multiple f2fs_add_link() calls having
    same name) does not cover the scenario where inline dentry is enabled.
    In that case, F2FS_I(dir)->task will be NULL, and __f2fs_add_link will
    lookup dentries one more time.
    
    This patch fixes it by moving the assigment of current task to a upper
    level to cover both normal and inline dentry.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 88c5c13a5027 (f2fs: fix multiple f2fs_add_link() calls having same name)
    Signed-off-by: Sheng Yong <shengyong1@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking ec160ad2acaad4a7de6eab7338ef5e3b2b19f907 ......
	 orig commit -> 7855eba4d6102f811b6dd142d6c749f53b591fa3 ......
checking d78f93384da1e21825144fdfac5dc0bc18db21bd ......
	 orig commit -> ed92d8c137b7794c2c2aa14479298b9885967607 ......
checking 3f22cc6f5ca335de95a49e9a217efaf1034e26ae ......
	 orig commit -> 6682c14bbe505a8b912c57faf544f866777ee48d ......
checking c65db336d6c6f82e30e0bdb771517297db8e880e ......
	 orig commit -> df3ab232e462bce20710596d697ade6b72497694 ......
checking 77bbc0c7712a43442e2637247eaa4f01f73f0eb8 ......
	 orig commit -> 9d8cacbf5636657d2cd0dda17438a56d806d3224 ......
checking 0465339eb54953f0be1f03e980b07eeb01e16fca ......
	 orig commit -> a974deee477af89411e0f80456bfb344ac433c98 ......
		 a974deee477af89411e0f80456bfb344ac433c98 has problem. Fixes commit -> 366a1569bff3fe14abfdf9285e31e05e091745f5
commit 955f270b6f5d7d830188de1f05f055180a8712dc
Author: Kinglong Mee <kinglongmee@gmail.com>
Date:   Mon Mar 6 22:29:14 2017 +0800

    NFSv4: fix a reference leak caused WARNING messages
    
    commit 366a1569bff3fe14abfdf9285e31e05e091745f5 upstream.
    
    Because nfs4_opendata_access() has close the state when access is denied,
    so the state isn't leak.
    Rather than revert the commit a974deee47, I'd like clean the strange state close.
    
    [ 1615.094218] ------------[ cut here ]------------
    [ 1615.094607] WARNING: CPU: 0 PID: 23702 at lib/list_debug.c:31 __list_add_valid+0x8e/0xa0
    [ 1615.094913] list_add double add: new=ffff9d7901d9f608, prev=ffff9d7901d9f608, next=ffff9d7901ee8dd0.
    [ 1615.095458] Modules linked in: nfsv4(E) nfs(E) nfsd(E) tun bridge stp llc fuse ip_set nfnetlink vmw_vsock_vmci_transport vsock f2fs snd_seq_midi snd_seq_midi_event fscrypto coretemp ppdev crct10dif_pclmul crc32_pclmul ghash_clmulni_intel intel_rapl_perf vmw_balloon snd_ens1371 joydev gameport snd_ac97_codec ac97_bus snd_seq snd_pcm snd_rawmidi snd_timer snd_seq_device snd soundcore nfit parport_pc parport acpi_cpufreq tpm_tis tpm_tis_core tpm i2c_piix4 vmw_vmci shpchp auth_rpcgss nfs_acl lockd(E) grace sunrpc(E) xfs libcrc32c vmwgfx drm_kms_helper ttm drm crc32c_intel mptspi e1000 serio_raw scsi_transport_spi mptscsih mptbase ata_generic pata_acpi fjes [last unloaded: nfs]
    [ 1615.097663] CPU: 0 PID: 23702 Comm: fstest Tainted: G        W   E   4.11.0-rc1+ #517
    [ 1615.098015] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/02/2015
    [ 1615.098807] Call Trace:
    [ 1615.099183]  dump_stack+0x63/0x86
    [ 1615.099578]  __warn+0xcb/0xf0
    [ 1615.099967]  warn_slowpath_fmt+0x5f/0x80
    [ 1615.100370]  __list_add_valid+0x8e/0xa0
    [ 1615.100760]  nfs4_put_state_owner+0x75/0xc0 [nfsv4]
    [ 1615.101136]  __nfs4_close+0x109/0x140 [nfsv4]
    [ 1615.101524]  nfs4_close_state+0x15/0x20 [nfsv4]
    [ 1615.101949]  nfs4_close_context+0x21/0x30 [nfsv4]
    [ 1615.102691]  __put_nfs_open_context+0xb8/0x110 [nfs]
    [ 1615.103155]  put_nfs_open_context+0x10/0x20 [nfs]
    [ 1615.103586]  nfs4_file_open+0x13b/0x260 [nfsv4]
    [ 1615.103978]  do_dentry_open+0x20a/0x2f0
    [ 1615.104369]  ? nfs4_copy_file_range+0x30/0x30 [nfsv4]
    [ 1615.104739]  vfs_open+0x4c/0x70
    [ 1615.105106]  ? may_open+0x5a/0x100
    [ 1615.105469]  path_openat+0x623/0x1420
    [ 1615.105823]  do_filp_open+0x91/0x100
    [ 1615.106174]  ? __alloc_fd+0x3f/0x170
    [ 1615.106568]  do_sys_open+0x130/0x220
    [ 1615.106920]  ? __put_cred+0x3d/0x50
    [ 1615.107256]  SyS_open+0x1e/0x20
    [ 1615.107588]  entry_SYSCALL_64_fastpath+0x1a/0xa9
    [ 1615.107922] RIP: 0033:0x7fab599069b0
    [ 1615.108247] RSP: 002b:00007ffcf0600d78 EFLAGS: 00000246 ORIG_RAX: 0000000000000002
    [ 1615.108575] RAX: ffffffffffffffda RBX: 00007fab59bcfae0 RCX: 00007fab599069b0
    [ 1615.108896] RDX: 0000000000000200 RSI: 0000000000000200 RDI: 00007ffcf060255e
    [ 1615.109211] RBP: 0000000000040010 R08: 0000000000000000 R09: 0000000000000016
    [ 1615.109515] R10: 00000000000006a1 R11: 0000000000000246 R12: 0000000000041000
    [ 1615.109806] R13: 0000000000040010 R14: 0000000000001000 R15: 0000000000002710
    [ 1615.110152] ---[ end trace 96ed63b1306bf2f3 ]---
    
    Fixes: a974deee47 ("NFSv4: Fix memory and state leak in...")
    Signed-off-by: Kinglong Mee <kinglongmee@gmail.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Cc: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking a3c6cbc4eac4473ed5461d5faae2794d3e5c0e44 ......
	 orig commit -> 783112f7401ff449d979530209b3f6c2594fdb4e ......
checking 9bdd39c146fc4f7da1ceb91ac1ebe80e7f1a8d41 ......
	 orig commit -> 758e99fefe1d9230111296956335cd35995c0eaf ......
checking 5af94e637fd8b2b89ea49bfd112b37137fbecb0e ......
	 orig commit -> 9797484ba83d68f18fe1cbd964b7cd830f78f0f7 ......
checking 5ea52fac0d827452cd2887722580ab58fdbd2d7d ......
	 orig commit -> 6773386f977ce5af339f9678fa2918909a946c6b ......
checking d56dd01bc291962f5fb4b53f6ed6de852af0a0e3 ......
	 orig commit -> 40b368af4b750863b2cb66a3a9513241db2f0793 ......
		 40b368af4b750863b2cb66a3a9513241db2f0793 has problem. Fixes commit -> b8b8b16352cd90c6083033fd4487f04fae935c18
commit 5a6fb4920381b13ad3349c1c0288d19426fc2850
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Wed Sep 20 16:15:05 2017 -0500

    rtlwifi: rtl8821ae: Fix connection lost problem
    
    commit b8b8b16352cd90c6083033fd4487f04fae935c18 upstream.
    
    In commit 40b368af4b75 ("rtlwifi: Fix alignment issues"), the read
    of REG_DBI_READ was changed from 16 to 8 bits. For unknown reasonsi
    this change results in reduced stability for the wireless connection.
    This regression was located using bisection.
    
    Fixes: 40b368af4b75 ("rtlwifi: Fix alignment issues")
    Reported-and-tested-by: James Cameron <quozl@laptop.org>
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Cc: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 24d77f99a7b74b4b68682d54ee79992b8aed7421 ......
	 orig commit -> 3e8b571a9a0881ba3381ca0915995696da145ab8 ......
checking 4cf918c804c657c3a8b9cd4bb46171315bdfad62 ......
	 orig commit -> f38e5fb95a1f8feda88531eedc98f69b24748712 ......
checking c8cdd9234caced510db1a03491af475938f9855a ......
	 orig commit -> f2625f7db4dd0bbd16a9c7d2950e7621f9aa57ad ......
checking 50fc62d5eeb3392f11161637b5ed4e0d340fed74 ......
	 orig commit -> 55efcfcd7776165b294f8b5cd6e05ca00ec89b7c ......
checking fbff994b8a464cd5de50fbb2e0b8341becb70336 ......
	 orig commit -> d77044d142e960f7b5f814a91ecb8bcf86aa552c ......
		 d77044d142e960f7b5f814a91ecb8bcf86aa552c has problem. Fixes commit -> e9c18ae6eb2b312f16c63e34b43ea23926daa398
commit a524bb57dd367c299b6c61ff39df6328ae49ed08
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Sat Mar 4 18:13:59 2017 -0700

    Drivers: hv: util: move waiting for release to hv_utils_transport itself
    
    
    [ Upstream commit e9c18ae6eb2b312f16c63e34b43ea23926daa398 ]
    
    Waiting for release_event in all three drivers introduced issues on release
    as on_reset() hook is not always called. E.g. if the device was never
    opened we will never get the completion.
    
    Move the waiting code to hvutil_transport_destroy() and make sure it is
    only called when the device is open. hvt->lock serialization should
    guarantee the absence of races.
    
    Fixes: 5a66fecbf6aa ("Drivers: hv: util: kvp: Fix a rescind processing issue")
    Fixes: 20951c7535b5 ("Drivers: hv: util: Fcopy: Fix a rescind processing issue")
    Fixes: d77044d142e9 ("Drivers: hv: util: Backup: Fix a rescind processing issue")
    
    Reported-by: Dexuan Cui <decui@microsoft.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4db47d9bf99d8bc3acaa9fd4b6437ea856a2f037 ......
	 orig commit -> 20951c7535b5e6af46bc37b7142105f716df739c ......
		 20951c7535b5e6af46bc37b7142105f716df739c has problem. Fixes commit -> e9c18ae6eb2b312f16c63e34b43ea23926daa398
commit a524bb57dd367c299b6c61ff39df6328ae49ed08
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Sat Mar 4 18:13:59 2017 -0700

    Drivers: hv: util: move waiting for release to hv_utils_transport itself
    
    
    [ Upstream commit e9c18ae6eb2b312f16c63e34b43ea23926daa398 ]
    
    Waiting for release_event in all three drivers introduced issues on release
    as on_reset() hook is not always called. E.g. if the device was never
    opened we will never get the completion.
    
    Move the waiting code to hvutil_transport_destroy() and make sure it is
    only called when the device is open. hvt->lock serialization should
    guarantee the absence of races.
    
    Fixes: 5a66fecbf6aa ("Drivers: hv: util: kvp: Fix a rescind processing issue")
    Fixes: 20951c7535b5 ("Drivers: hv: util: Fcopy: Fix a rescind processing issue")
    Fixes: d77044d142e9 ("Drivers: hv: util: Backup: Fix a rescind processing issue")
    
    Reported-by: Dexuan Cui <decui@microsoft.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d4d5b507c6427b417f4ff5411649e55af4447c84 ......
	 orig commit -> 5a66fecbf6aa528e375cbebccb1061cc58d80c84 ......
		 5a66fecbf6aa528e375cbebccb1061cc58d80c84 has problem. Fixes commit -> e9c18ae6eb2b312f16c63e34b43ea23926daa398
commit a524bb57dd367c299b6c61ff39df6328ae49ed08
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Sat Mar 4 18:13:59 2017 -0700

    Drivers: hv: util: move waiting for release to hv_utils_transport itself
    
    
    [ Upstream commit e9c18ae6eb2b312f16c63e34b43ea23926daa398 ]
    
    Waiting for release_event in all three drivers introduced issues on release
    as on_reset() hook is not always called. E.g. if the device was never
    opened we will never get the completion.
    
    Move the waiting code to hvutil_transport_destroy() and make sure it is
    only called when the device is open. hvt->lock serialization should
    guarantee the absence of races.
    
    Fixes: 5a66fecbf6aa ("Drivers: hv: util: kvp: Fix a rescind processing issue")
    Fixes: 20951c7535b5 ("Drivers: hv: util: Fcopy: Fix a rescind processing issue")
    Fixes: d77044d142e9 ("Drivers: hv: util: Backup: Fix a rescind processing issue")
    
    Reported-by: Dexuan Cui <decui@microsoft.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 728fe696fd3ee551c24e02e7826dd9bdb89f1d47 ......
	 orig commit -> ccb61f8a99e6c29df4fb96a65dad4fad740d5be9 ......
		 ccb61f8a99e6c29df4fb96a65dad4fad740d5be9 has problem. Fixes commit -> 5e030d5ce9d99a899b648413139ff65bab12b038
commit df1fe6c9ad481f6ca1b125a081376744c97d3910
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Sun Mar 12 20:00:30 2017 -0700

    Drivers: hv: vmbus: Don't leak memory when a channel is rescinded
    
    commit 5e030d5ce9d99a899b648413139ff65bab12b038 upstream.
    
    When we close a channel that has been rescinded, we will leak memory since
    vmbus_teardown_gpadl() returns an error. Fix this so that we can properly
    cleanup the memory allocated to the ring buffers.
    
    Fixes: ccb61f8a99e6 ("Drivers: hv: vmbus: Fix a rescind handling bug")
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e44eab51e74c59a0b01c1fce2159c82b3c8a31b0 ......
	 orig commit -> e7e97dd8b77ee7366f2f8c70a033bf5fa05ec2e0 ......
checking 664f72a17f2c072175a0083388f315f811ff1acb ......
	 orig commit -> 56ef6718a1d8d77745033c5291e025ce18504159 ......
checking 6e936b06795ae5dcb5248e0c4344d8303de4c2db ......
	 orig commit -> 3c7630d35009e6635e5b58d62de554fd5b6db5df ......
checking 879dc37cc3a81c99527410a83ae9cc35c637e8b1 ......
	 orig commit -> 421b8f20d3c381b215f988b42428f56fc3b82405 ......
checking 6d0511ed15db30965f8a3be8f0733bb6efd2b95e ......
	 orig commit -> 33e4c1a9987a1fc3b42c3b534100b5b006d55c61 ......
checking d3acd94c0f79387b0d1855bdd4690f1596eb3f25 ......
	 orig commit -> aa65d11aa008f4de58a9cee7e121666d9d68505e ......
checking b6092a57150c1641dffb6bfeebbe2cbde7275d1f ......
	 orig commit -> 20d2ca955bd09639c7b01db5761d157c297aea0a ......
checking 92ee9483bc5fe7d4c2e6730515849467d818f8f7 ......
	 orig commit -> 5528954a1a0c49c6974ef1b8d6eaceff536204d5 ......
checking 881b5225558e2bad2f02aca4058b269dce0a834d ......
	 orig commit -> 8236800da115a3e24b9165c573067343f51cf5ea ......
checking 82bd560d9552a7b30ad1123591de63684fe0a63e ......
	 orig commit -> 5de4e1ea9a731cad195ce5152705c21daef3bbba ......
checking 3ccf60e1ff5e6cbd47b860b95f6cb53ebd98113b ......
	 orig commit -> ffb80fc672c3a7b6afd0cefcb1524fb99917b2f3 ......
checking 5413f432a1f33293b9183fadb1b44e29b168aa24 ......
	 orig commit -> a994ce2d7e66008381a0b184c73be9ae9b72eb5c ......
checking c259832acf57c51971582c84c89b2941a8a9e1ef ......
	 orig commit -> 61cd1b4cd1e8f7f7642ab64529d9bd52e8374641 ......
checking 1de86951101be4a3bcee9355a10f327bba491ec5 ......
	 orig commit -> d2ce4ea1a0b0162e5d2d7e7942ab6f5cc2063d5a ......
checking 7afc0ee6ae73c23d8acc7a58113e269f6c1da2a2 ......
	 orig commit -> 7c42631376306fb3f34d51fda546b50a9b6dd6ec ......
checking cec7abd27e878e3c83dc9af41ee87a2e9d483ac0 ......
	 orig commit -> c919a3069c775c1c876bec55e00b2305d5125caa ......
checking a34546c6234e77dc98f5ac40ad64ee5429c986e6 ......
	 orig commit -> 9cf6cdba586ced75c69b8314b88b2d2f5ce9b3ed ......
checking 602bd10f6e947308ffa7f9c2d11d07b9997aaee5 ......
	 orig commit -> 6a6e1d56a0769795a36c0461c64bf5e5b9bbb4c0 ......
checking d408d23addbaa9af9e0db492f774d3245ecfeefd ......
	 orig commit -> 0bdbf3b071986ba80731203683cf623d5c0cacb1 ......
checking 7127d43e1843400658e42c0b21dc598a59d603e4 ......
	 orig commit -> 7d0928f18bf890d2853281f59aba0dd5a46b34f9 ......
checking a8123045c94638114a0b1ab19fd218dd3a5cd0b5 ......
	 orig commit -> adbe7e26f4257f72817495b9bce114284060b0d7 ......
checking ac4c8fcf5ebceb0a2b6342707e4835a13f5bcf22 ......
	 orig commit -> 8f36ebaf21fdae99c091c67e8b6fab33969f2667 ......
checking bfb55d4087cfc4346b1ec5a04cbac04e9df10ab4 ......
	 orig commit -> 58ab9a088ddac4efe823471275859d64f735577e ......
		 58ab9a088ddac4efe823471275859d64f735577e has problem. Fixes commit -> 2fa9d1cfaf0e02f8abef0757002bff12dfcfa4e6
commit 7925d9da8d189025b190ad43ff476cba240144f2
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Wed May 9 10:13:58 2018 -0700

    x86/pkeys: Do not special case protection key 0
    
    commit 2fa9d1cfaf0e02f8abef0757002bff12dfcfa4e6 upstream.
    
    mm_pkey_is_allocated() treats pkey 0 as unallocated.  That is
    inconsistent with the manpages, and also inconsistent with
    mm->context.pkey_allocation_map.  Stop special casing it and only
    disallow values that are actually bad (< 0).
    
    The end-user visible effect of this is that you can now use
    mprotect_pkey() to set pkey=0.
    
    This is a bit nicer than what Ram proposed[1] because it is simpler
    and removes special-casing for pkey 0.  On the other hand, it does
    allow applications to pkey_free() pkey-0, but that's just a silly
    thing to do, so we are not going to protect against it.
    
    The scenario that could happen is similar to what happens if you free
    any other pkey that is in use: it might get reallocated later and used
    to protect some other data.  The most likely scenario is that pkey-0
    comes back from pkey_alloc(), an access-disable or write-disable bit
    is set in PKRU for it, and the next stack access will SIGSEGV.  It's
    not horribly different from if you mprotect()'d your stack or heap to
    be unreadable or unwritable, which is generally very foolish, but also
    not explicitly prevented by the kernel.
    
    1. http://lkml.kernel.org/r/1522112702-27853-1-git-send-email-linuxram@us.ibm.com
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>p
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Michael Ellermen <mpe@ellerman.id.au>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ram Pai <linuxram@us.ibm.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mm@kvack.org
    Cc: stable@vger.kernel.org
    Fixes: 58ab9a088dda ("x86/pkeys: Check against max pkey to avoid overflows")
    Link: http://lkml.kernel.org/r/20180509171358.47FD785E@viggo.jf.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 1e6be9c19c1286cdc3e87a27b06038361a0165ab ......
	 orig commit -> 2e38bea99a80eab408adee27f873a188d57b76cb ......
checking abf74467e7fb19c957eb284798fc41cc8059dc41 ......
	 orig commit -> 1c68bb0f62bf8de8bb30123ea840d5168f25abea ......
checking 11a4d644d6d84a34a393a389d5efd4e036b04a62 ......
	 orig commit -> aa33b9b9a2ebb00d33c83a5312d4fbf2d5aeba36 ......
checking 65013a93b6c335bd166c911d73c47ff4bcbdb8be ......
	 orig commit -> c0bb03924f1a80e7f65900e36c8e6b3dc167c5f8 ......
checking 730b1b20c6cdc63f4ce32efc5a494fc9b141b854 ......
	 orig commit -> 2a7275a3d867b228216886aae35e1f64291180b1 ......
checking 1fb738a3dc1304250c755e5e31715137c1c44c50 ......
	 orig commit -> 49f4b08e61547a5ccd2db551d994c4503efe5666 ......
checking bc5338a4fd3d9042107ce3fe40792c1c4839ebab ......
	 orig commit -> 60e2e2fbafdd1285ae1b4ad39ded41603e0c74d0 ......
checking 787fd7a6c8ede68e55321c5bfbea9f1ca89a8148 ......
	 orig commit -> c9f1e32600816d695f817477d56490bfc2ba43c6 ......
checking c41cae06bf6027d2f77ebbb12bc17da1cd6e131f ......
	 orig commit -> 3a5e969bb2f6692a256352649355d56d018d6b88 ......
checking 93c1f1db1a7421545e9aae9fb6091668ca570f2b ......
	 orig commit -> a70e1d6fd6b5e1a81fa6171600942bee34f5128f ......
checking bac7f7135d51144ff193002b296b8bdf06c9855f ......
	 orig commit -> cb4281528b62207918b1e95827cad7527aa4dbaa ......
checking d2a8cd3eee0fe9b14fe3a72c02cffa7df31a2383 ......
	 orig commit -> cb97fbbcac15982406e0c74cd5512a8b6fcf10b3 ......
checking d6407e10bcf540a67afbeca83e60a4323cba8b33 ......
	 orig commit -> 916cafdc95843fb9af5fd5f83ca499d75473d107 ......
checking d6dcec965bc53eb375e50642b3b1abb9b835c2a7 ......
	 orig commit -> 4753d8a24d4588657bc0a4cd66d4e282dff15c8c ......
checking 269bf7b8c5db7544133dcff03bd741f980e1f110 ......
	 orig commit -> 97abd7d4b5d9c48ec15c425485f054e1c15e591b ......
checking 0b37d0c0c6b35317bfc3aee8cdf94f853d594e5f ......
	 orig commit -> eb5efbcb762aee4b454b04f7115f73ccbcf8f0ef ......
checking 68ca0fdac41fa801e1e6c2f99e27a9c24e494532 ......
	 orig commit -> dd01b690f8f4b1e414f89e5a9a5326bf720d6652 ......
checking a5a9cf387de6dde4c79b6e7fb6311dbd7ec86f02 ......
	 orig commit -> 3b136499e906460919f0d21a49db1aaccf0ae963 ......
checking fc6c2da174edd7a7b760b12c60d432d300e05cca ......
	 orig commit -> cd648b8a8fd5071d232242d5ee7ee3c0815776af ......
checking e0b53d67291334125531f7f21b2f3df3d6ccc6ec ......
	 orig commit -> 03e916fa8b5577d85471452a3d0c5738aa658dae ......
checking 72ae476d0401c38c912ad740cadcc7ef302f5ef2 ......
	 orig commit -> 2a9b8cba62c0741109c33a2be700ff3d7703a7c2 ......
checking 8ca25e39ec2d67df1f69f08c1d4ad0d6310a5c5b ......
	 orig commit -> e02898b423802b1f3a3aaa7f16e896da069ba8f7 ......
checking 50447afd96145b6d3d7aea412da178dce95f1f9b ......
	 orig commit -> ecdd09597a57251323b0de50e3d45e69298c4a83 ......
		 ecdd09597a57251323b0de50e3d45e69298c4a83 has problem. Fixes commit -> 1e047eaab3bb5564f25b41e9cd3a053009f4e789
e02898b423802b1f3a3aaa7f16e896da069ba8f7
commit 8ca25e39ec2d67df1f69f08c1d4ad0d6310a5c5b
Author: Omar Sandoval <osandov@fb.com>
Date:   Wed Mar 1 10:42:38 2017 -0800

    loop: fix LO_FLAGS_PARTSCAN hang
    
    commit e02898b423802b1f3a3aaa7f16e896da069ba8f7 upstream.
    
    loop_reread_partitions() needs to do I/O, but we just froze the queue,
    so we end up waiting forever. This can easily be reproduced with losetup
    -P. Fix it by moving the reread to after we unfreeze the queue.
    
    Fixes: ecdd09597a57 ("block/loop: fix race between I/O and set_status")
    Reported-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Reviewed-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit c3530143fe2442b2b84abe4d720efb2cf6ec4338
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Apr 6 10:03:17 2018 +0900

    block/loop: fix deadlock after loop_set_status
    
    commit 1e047eaab3bb5564f25b41e9cd3a053009f4e789 upstream.
    
    syzbot is reporting deadlocks at __blkdev_get() [1].
    
    ----------------------------------------
    [   92.493919] systemd-udevd   D12696   525      1 0x00000000
    [   92.495891] Call Trace:
    [   92.501560]  schedule+0x23/0x80
    [   92.502923]  schedule_preempt_disabled+0x5/0x10
    [   92.504645]  __mutex_lock+0x416/0x9e0
    [   92.510760]  __blkdev_get+0x73/0x4f0
    [   92.512220]  blkdev_get+0x12e/0x390
    [   92.518151]  do_dentry_open+0x1c3/0x2f0
    [   92.519815]  path_openat+0x5d9/0xdc0
    [   92.521437]  do_filp_open+0x7d/0xf0
    [   92.527365]  do_sys_open+0x1b8/0x250
    [   92.528831]  do_syscall_64+0x6e/0x270
    [   92.530341]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [   92.931922] 1 lock held by systemd-udevd/525:
    [   92.933642]  #0: 00000000a2849e25 (&bdev->bd_mutex){+.+.}, at: __blkdev_get+0x73/0x4f0
    ----------------------------------------
    
    The reason of deadlock turned out that wait_event_interruptible() in
    blk_queue_enter() got stuck with bdev->bd_mutex held at __blkdev_put()
    due to q->mq_freeze_depth == 1.
    
    ----------------------------------------
    [   92.787172] a.out           S12584   634    633 0x80000002
    [   92.789120] Call Trace:
    [   92.796693]  schedule+0x23/0x80
    [   92.797994]  blk_queue_enter+0x3cb/0x540
    [   92.803272]  generic_make_request+0xf0/0x3d0
    [   92.807970]  submit_bio+0x67/0x130
    [   92.810928]  submit_bh_wbc+0x15e/0x190
    [   92.812461]  __block_write_full_page+0x218/0x460
    [   92.815792]  __writepage+0x11/0x50
    [   92.817209]  write_cache_pages+0x1ae/0x3d0
    [   92.825585]  generic_writepages+0x5a/0x90
    [   92.831865]  do_writepages+0x43/0xd0
    [   92.836972]  __filemap_fdatawrite_range+0xc1/0x100
    [   92.838788]  filemap_write_and_wait+0x24/0x70
    [   92.840491]  __blkdev_put+0x69/0x1e0
    [   92.841949]  blkdev_close+0x16/0x20
    [   92.843418]  __fput+0xda/0x1f0
    [   92.844740]  task_work_run+0x87/0xb0
    [   92.846215]  do_exit+0x2f5/0xba0
    [   92.850528]  do_group_exit+0x34/0xb0
    [   92.852018]  SyS_exit_group+0xb/0x10
    [   92.853449]  do_syscall_64+0x6e/0x270
    [   92.854944]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [   92.943530] 1 lock held by a.out/634:
    [   92.945105]  #0: 00000000a2849e25 (&bdev->bd_mutex){+.+.}, at: __blkdev_put+0x3c/0x1e0
    ----------------------------------------
    
    The reason of q->mq_freeze_depth == 1 turned out that loop_set_status()
    forgot to call blk_mq_unfreeze_queue() at error paths for
    info->lo_encrypt_type != NULL case.
    
    ----------------------------------------
    [   37.509497] CPU: 2 PID: 634 Comm: a.out Tainted: G        W        4.16.0+ #457
    [   37.513608] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 05/19/2017
    [   37.518832] RIP: 0010:blk_freeze_queue_start+0x17/0x40
    [   37.521778] RSP: 0018:ffffb0c2013e7c60 EFLAGS: 00010246
    [   37.524078] RAX: 0000000000000000 RBX: ffff8b07b1519798 RCX: 0000000000000000
    [   37.527015] RDX: 0000000000000002 RSI: ffffb0c2013e7cc0 RDI: ffff8b07b1519798
    [   37.529934] RBP: ffffb0c2013e7cc0 R08: 0000000000000008 R09: 47a189966239b898
    [   37.532684] R10: dad78b99b278552f R11: 9332dca72259d5ef R12: ffff8b07acd73678
    [   37.535452] R13: 0000000000004c04 R14: 0000000000000000 R15: ffff8b07b841e940
    [   37.538186] FS:  00007fede33b9740(0000) GS:ffff8b07b8e80000(0000) knlGS:0000000000000000
    [   37.541168] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   37.543590] CR2: 00000000206fdf18 CR3: 0000000130b30006 CR4: 00000000000606e0
    [   37.546410] Call Trace:
    [   37.547902]  blk_freeze_queue+0x9/0x30
    [   37.549968]  loop_set_status+0x67/0x3c0 [loop]
    [   37.549975]  loop_set_status64+0x3b/0x70 [loop]
    [   37.549986]  lo_ioctl+0x223/0x810 [loop]
    [   37.549995]  blkdev_ioctl+0x572/0x980
    [   37.550003]  block_ioctl+0x34/0x40
    [   37.550006]  do_vfs_ioctl+0xa7/0x6d0
    [   37.550017]  ksys_ioctl+0x6b/0x80
    [   37.573076]  SyS_ioctl+0x5/0x10
    [   37.574831]  do_syscall_64+0x6e/0x270
    [   37.576769]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    ----------------------------------------
    
    [1] https://syzkaller.appspot.com/bug?id=cd662bc3f6022c0979d01a262c318fab2ee9b56f
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <bot+48594378e9851eab70bcd6f99327c7db58c5a28a@syzkaller.appspotmail.com>
    Fixes: ecdd09597a572513 ("block/loop: fix race between I/O and set_status")
    Cc: Ming Lei <tom.leiming@gmail.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: stable <stable@vger.kernel.org>
    Cc: Jens Axboe <axboe@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ca25e39ec2d67df1f69f08c1d4ad0d6310a5c5b
Author: Omar Sandoval <osandov@fb.com>
Date:   Wed Mar 1 10:42:38 2017 -0800

    loop: fix LO_FLAGS_PARTSCAN hang
    
    commit e02898b423802b1f3a3aaa7f16e896da069ba8f7 upstream.
    
    loop_reread_partitions() needs to do I/O, but we just froze the queue,
    so we end up waiting forever. This can easily be reproduced with losetup
    -P. Fix it by moving the reread to after we unfreeze the queue.
    
    Fixes: ecdd09597a57 ("block/loop: fix race between I/O and set_status")
    Reported-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Reviewed-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking a9b0c14ba1e4be94036c5725c144818a2d3be191 ......
	 orig commit -> e112666b4959b25a8552d63bc564e1059be703e8 ......
checking 3de5a92847c1d87d86ee945e6002f2051e02e868 ......
	 orig commit -> 907565337ebf998a68cb5c5b2174ce5e5da065eb ......
checking 206af3d97f00d5c96de5bfd5a48045d444b3eec4 ......
	 orig commit -> 0b0408745e7ff24757cbfd571d69026c0ddb803c ......
checking e9dc8334d765f7910114921c63a0324272f1f636 ......
	 orig commit -> 857de6e00778738dc3d61f75acbac35bdc48e533 ......
checking 73f5176ecac265b03dcd8ef0aaed6950e5ecb828 ......
	 orig commit -> c421530bf848604e97d0785a03b3fe2c62775083 ......
		 c421530bf848604e97d0785a03b3fe2c62775083 has problem. Fixes commit -> 934767c56b0d9dbb95a40e9e6e4d9dcdc3a165ad
commit a7e08447c3d89d310c755f1606ae58aabaf44405
Author: Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
Date:   Thu Mar 2 09:21:33 2017 -0800

    scsi: aacraid: Fix typo in blink status
    
    [ Upstream commit 934767c56b0d9dbb95a40e9e6e4d9dcdc3a165ad ]
    
    The return status of the adapter check on KERNEL_PANIC is supposed to be
    the upper 16 bits of the OMR status register.
    
    Fixes: c421530bf848604e (scsi: aacraid: Reorder Adpater status check)
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
    Reviewed-by: Dave Carroll <david.carroll@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking a50781fe6edabe33ecdef862fd9e7f2f35277de6 ......
	 orig commit -> 40630f462824ee24bc00d692865c86c3828094e0 ......
checking e59693753e08c70a4da76e951ba4279003c1228e ......
	 orig commit -> bba5dc332ec2d3a685cb4dae668c793f6a3713a3 ......
checking 27f5ef378d2d56dad3c1a4c93c27fc5ce7c6eda0 ......
	 orig commit -> 3cd6d3d9b1abab8dcdf0800224ce26daac24eea2 ......
checking 2937e22c2314cdfe31d82e2cc36af4be863be978 ......
	 orig commit -> d36a19541fe8f392778ac137d60f9be8dfdd8f9d ......
checking b7f874eedc9308a43b0d29e2a12f848be724fca7 ......
	 orig commit -> 37a098e9d10db6e2efc05fe61e3a6ff2e9802c53 ......
checking bad6c16b81b68d81e95ada246649dacc3cdd5e1d ......
	 orig commit -> 6085831883c25860264721df15f05bbded45e2a2 ......
checking 9987feba902cbd6429cf3b3a3b6614aa23a555c2 ......
	 orig commit -> ca763d0a53b264a650342cee206512bc92ac7050 ......
checking fe8f92c7beba2f1c6b1235e52e199eafbe4aa39a ......
	 orig commit -> 30582c25a4b4e0a5e456a309fde79b845e9473b2 ......
checking 2294b771a4b425d9365aabeaff8d33ccd0c0fffe ......
	 orig commit -> bcf23c79c4e46130701370af4383b61a3cba755c ......
		 bcf23c79c4e46130701370af4383b61a3cba755c has problem. Fixes commit -> 63f1e05f7fe9ca509c60154d6a833abf96eecdc9
commit 715f7e3efef0227865162b00d13321431be7962f
Author: Gustavo A. R. Silva <garsilva@embeddedor.com>
Date:   Wed Dec 6 14:20:15 2017 -0600

    PM / devfreq: Fix potential NULL pointer dereference in governor_store
    
    
    [ Upstream commit 63f1e05f7fe9ca509c60154d6a833abf96eecdc9 ]
    
    df->governor is being dereferenced before it is null checked,
    hence there is a potential null pointer dereference.
    
    Notice that df->governor is being null checked at line 1004:
    if (df->governor) {, which implies it might be null.
    
    Fix this by null checking df->governor before dereferencing it.
    
    Addresses-Coverity-ID: 1401988 ("Dereference before null check")
    Fixes: bcf23c79c4e4 ("PM / devfreq: Fix available_governor sysfs")
    Signed-off-by: Gustavo A. R. Silva <garsilva@embeddedor.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d9cc31683a16f5619217d80c3d8e608c23c41afc ......
	 orig commit -> bc15ed663e7e53ee4dc3e60f8d09c93a0528c694 ......
		 bc15ed663e7e53ee4dc3e60f8d09c93a0528c694 has problem. Fixes commit -> 4e8581eefe720f8d990b892a8c9d298875e1a299
checking 270e84a1e6effd6c0c6e9b13b196b5fdaa392954 ......
	 orig commit -> 95e91b831f87ac8e1f8ed50c14d709089b4e01b8 ......
		 95e91b831f87ac8e1f8ed50c14d709089b4e01b8 has problem. Fixes commit -> a73ab244f0dad8fffb3291b905f73e2d3eaa7c00
commit 2ef44a3c1a32656dbae30cd16ec5c22a996a4ca9
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Fri May 25 14:47:27 2018 -0700

    Revert "ipc/shm: Fix shmat mmap nil-page protection"
    
    commit a73ab244f0dad8fffb3291b905f73e2d3eaa7c00 upstream.
    
    Patch series "ipc/shm: shmat() fixes around nil-page".
    
    These patches fix two issues reported[1] a while back by Joe and Andrea
    around how shmat(2) behaves with nil-page.
    
    The first reverts a commit that it was incorrectly thought that mapping
    nil-page (address=0) was a no no with MAP_FIXED.  This is not the case,
    with the exception of SHM_REMAP; which is address in the second patch.
    
    I chose two patches because it is easier to backport and it explicitly
    reverts bogus behaviour.  Both patches ought to be in -stable and ltp
    testcases need updated (the added testcase around the cve can be
    modified to just test for SHM_RND|SHM_REMAP).
    
    [1] lkml.kernel.org/r/20180430172152.nfa564pvgpk3ut7p@linux-n805
    
    This patch (of 2):
    
    Commit 95e91b831f87 ("ipc/shm: Fix shmat mmap nil-page protection")
    worked on the idea that we should not be mapping as root addr=0 and
    MAP_FIXED.  However, it was reported that this scenario is in fact
    valid, thus making the patch both bogus and breaks userspace as well.
    
    For example X11's libint10.so relies on shmat(1, SHM_RND) for lowmem
    initialization[1].
    
    [1] https://cgit.freedesktop.org/xorg/xserver/tree/hw/xfree86/os-support/linux/int10/linux.c#n347
    Link: http://lkml.kernel.org/r/20180503203243.15045-2-dave@stgolabs.net
    Fixes: 95e91b831f87 ("ipc/shm: Fix shmat mmap nil-page protection")
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Reported-by: Joe Lawrence <joe.lawrence@redhat.com>
    Reported-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 6d94a6b32e97c56dfbe96cc489517b338608f091 ......
	 orig commit -> 441398d378f29a5ad6d0fcda07918e54e4961800 ......
checking 521e92b198a89d3186930578e036d3b58a767081 ......
	 orig commit -> 71ab6cfe88dcf9f6e6a65eb85cf2bda20a257682 ......
checking 710531320af876192d76b2c1f68190a1df941b02 ......
	 orig commit -> fd538803731e50367b7c59ce4ad3454426a3d671 ......
checking 8f6620e391a43d5da24fa09f98d9b51016545470 ......
	 orig commit -> 9c57b5808c625f4fc93da330b932647eaff321f7 ......
checking 2c290eede9b6375ad15025aa85a7c07c3ce1a3f3 ......
	 orig commit -> dd8416c47715cf324c9a16f13273f9fda87acfed ......
checking 58d1dbb904ba9ce1f8ac99c5d210ad7bb14eed08 ......
	 orig commit -> e1587a4945408faa58d0485002c110eb2454740c ......
checking d1e8042628a31e28c8e92411ab83a28bd5e3f7c9 ......
	 orig commit -> e02dc017c3032dcdce1b993af0db135462e1b4b7 ......
checking f1faaec4843a6bfcb795887f5b1a280fb874789d ......
	 orig commit -> b5d24fda9c3dce51fcb4eee459550a458eaaf1e2 ......
checking c06d74df4ebb9ab3fedcf6d623816944edd206f5 ......
	 orig commit -> 9c25702cee1405099f982894c865c163de7909a8 ......
checking 24427cd71d2fbef3eeb087e802ff327c18c7275f ......
	 orig commit -> 21e722c4c8377b5bc82ad058fed12165af739c1b ......
checking 61cb3c6357fd77a2b1af49a9015955b9f82c68d4 ......
	 orig commit -> aaa59306b0b7e0ca4ba92cc04c5db101cbb1c096 ......
checking 84c2697c9cd3c4ed05945d80fdfd4b7e906dd074 ......
	 orig commit -> 5939eaf4f9d432586dd2cdeea778506471e8088e ......
checking 2f714ba1282aa6f5f0158329a1b2d3858698618c ......
	 orig commit -> e42a46b6f52473661ad192f76a128a68fe301df4 ......
checking 59cd503c8cfd3f69f8126165b274860bbbd058db ......
	 orig commit -> 4474f4c40a9c607c7317e686b23619b7b768004f ......
checking c7472b964d9a1bfabe4953175cdbd5ccf44bc416 ......
	 orig commit -> 6e017006022abfea5d2466cad936065f45763ad1 ......
checking 148c4526d76e1af4065fac629bff3fcc5019de1c ......
	 orig commit -> dc7ffefdcc28a45214aa707fdc3df6a5e611ba09 ......
checking 2893a55e39fcfe3b9f5738584db98848b4957d9f ......
	 orig commit -> 33b8807a6fe10d0e675e0704444373a6fad93188 ......
checking 6c95eba9ca104fad6abd758c58b3ac55c44f627d ......
	 orig commit -> 82dbe987b70042b340f851bdc969a971081e5f02 ......
checking 4401e4779e2e6edea43f80ba1dc8e25e9bec7abd ......
	 orig commit -> 4c7b8ca1ae5ed9e27014732c8a918ba11a86cf09 ......
checking acb06ff2d5d559c7a934fdb7f841cfc19eb4e4bd ......
	 orig commit -> 29693efcea0f38cf40d0055d2401490a4f9bf8be ......
		 29693efcea0f38cf40d0055d2401490a4f9bf8be has problem. Fixes commit -> 986376b68dcc95bb7df60ad30c2353c1f7578fa5
checking 2abe620e01c9a39c3b76dd419f6c0e58fae4b885 ......
	 orig commit -> 493de342748cc6f52938096f5480cf291da58a0b ......
checking 09cd5d3479b930f5cde8ed4d66784e724ffcf08c ......
	 orig commit -> f3ac9f737603da80c2da3e84b89e74429836bb6d ......
checking 074f6db61f962e302c83092ac2ee5692f9351454 ......
	 orig commit -> 15c75b09f8d190f89ab4db463b87d411ca349dfe ......
		 15c75b09f8d190f89ab4db463b87d411ca349dfe has problem. Fixes commit -> f363a06642f28caaa78cb6446bbad90c73fe183c
commit e800ff1fade62300f2e09f0789e243337e8a8d63
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 20 10:08:19 2017 +0100

    ALSA: ctxfi: Fix the incorrect check of dma_set_mask() call
    
    commit f363a06642f28caaa78cb6446bbad90c73fe183c upstream.
    
    In the commit [15c75b09f8d1: ALSA: ctxfi: Fallback DMA mask to 32bit],
    I forgot to put "!" at dam_set_mask() call check in cthw20k1.c (while
    cthw20k2.c is OK).  This patch fixes that obvious bug.
    
    (As a side note: although the original commit was completely wrong,
     it's still working for most of machines, as it sets to 32bit DMA mask
     in the end.  So the bug severity is low.)
    
    Fixes: 15c75b09f8d1 ("ALSA: ctxfi: Fallback DMA mask to 32bit")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5ac9276dd15f6aeb55e8eb0ecf6e15759ae1f501 ......
	 orig commit -> 71321eb3f2d0df4e6c327e0b936eec4458a12054 ......
checking 51ce9867c2efd422519edb92e6d4ea5276b3f283 ......
	 orig commit -> e7480b34ad1ab84a63540b2c884cb92c0764ab74 ......
checking ebc3e95502aa9feebe1fd021b6d3c44dd27ecb48 ......
	 orig commit -> 9f1bc2c4c58fcb2d86e0e26437dc8f3a18ac3276 ......
checking 9971863fdd623da5df091159cc889ea101b68202 ......
	 orig commit -> 78162d48466d23c45a784034630c5928af631e3d ......
checking f9a1949f8ff308d4320a44aa995c7f16ab40cf7f ......
	 orig commit -> ef8d02d4a2c36f7a93e74c95a9c419353b310117 ......
checking 37e70c4de51bf80123292f175dfce6b19af9c5d8 ......
	 orig commit -> e3f0a4017c2143b4b813df6a93e8cf79e3f76936 ......
checking 404950add4ce0bfb95346a8233f5daba7fad8a54 ......
	 orig commit -> 379f831a927817c130a62e3ca0082ae685557324 ......
checking da1e40237f8f3516581b534c484c236a79ccfd14 ......
	 orig commit -> c755e251357a0cee0679081f08c3f4ba797a8009 ......
checking 719f1765b02c6a65eff5db3765c87444a1156cb9 ......
	 orig commit -> 98d85f3cb912fde14593ead54dea4c1a00b3966f ......
checking ce1e60b492144b1d5ae0f67b781459325de0e884 ......
	 orig commit -> bd291208d7f5d6b2d6a033fee449a429230b06df ......
checking 238442c2b535ef39be70f54904a8882dfd0349ca ......
	 orig commit -> 0ffb94b6cc5df6376ab6bff5b80075641f6716f8 ......
checking 7e5b7798d0c8021d5d9b7a9e7bd404c6bcbbd011 ......
	 orig commit -> e3bb3cddd177550d63a3e4909cf1a7782f13414d ......
checking 02789ccd59ec10fe407cf5803e4fb081a5c14fa7 ......
	 orig commit -> 17c341ec0115837a610b2da15e32546e26068234 ......
checking d6b88a09cc2291aa3fac1e6eefd479398c1d8793 ......
	 orig commit -> 6ebf75774f823ddbdbd10921006989d4df222f4a ......
checking 80bbadbc42f912b43fd6664e834ba16c9dd28889 ......
	 orig commit -> e28d6f048799acb0014491e6b74e580d84bd7916 ......
checking 8d06cbd365e1fccb5b84bb8146d9bf30c2a55f4a ......
	 orig commit -> 096a0de427ea333f56f0ee00328cff2a2731bcf1 ......
checking 209ad1941daafab4255990c3b885cf184a05d72e ......
	 orig commit -> bb9bc4689b9c635714fbcd5d335bad9934a7ebfc ......
		 bb9bc4689b9c635714fbcd5d335bad9934a7ebfc has problem. Fixes commit -> cea8cd498f4f1c30ea27e3664b3c671e495c4fce
commit 416ca41754e2d7bfb08ae12b28a4b926f22d7356
Author: Matt Redfearn <matt.redfearn@imgtec.com>
Date:   Tue Aug 8 13:22:33 2017 +0100

    MIPS: microMIPS: Fix decoding of swsp16 instruction
    
    [ Upstream commit cea8cd498f4f1c30ea27e3664b3c671e495c4fce ]
    
    When the immediate encoded in the instruction is accessed, it is sign
    extended due to being a signed value being assigned to a signed integer.
    The ISA specifies that this operation is an unsigned operation.
    The sign extension leads us to incorrectly decode:
    
    801e9c8e:       cbf1            sw      ra,68(sp)
    
    As having an immediate of 1073741809.
    
    Since the instruction format does not specify signed/unsigned, and this
    is currently the only location to use this instuction format, change it
    to an unsigned immediate.
    
    Fixes: bb9bc4689b9c ("MIPS: Calculate microMIPS ra properly when unwinding the stack")
    Suggested-by: Paul Burton <paul.burton@imgtec.com>
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Reviewed-by: James Hogan <james.hogan@imgtec.com>
    Cc: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Cc: Miodrag Dinic <miodrag.dinic@imgtec.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: David Daney <david.daney@cavium.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/16957/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking b14e085086245a829a87f6cc44c996333c641390 ......
	 orig commit -> 67c75057709a6d85c681c78b9b2f9b71191f01a2 ......
checking b0b4eb58c5efe31c5dbd8fc771b43bb13bf84430 ......
	 orig commit -> b6c7a324df37bf05ef7a2c1580683cf10d082d97 ......
		 b6c7a324df37bf05ef7a2c1580683cf10d082d97 has problem. Fixes commit -> 2b424cfc69728224fcb5fad138ea7260728e0901
commit a189410b3f76b8f00c1da296836928904266b0f1
Author: Jun-Ru Chang <jrjang@realtek.com>
Date:   Tue Jan 29 11:56:07 2019 +0800

    MIPS: Remove function size check in get_frame_info()
    
    [ Upstream commit 2b424cfc69728224fcb5fad138ea7260728e0901 ]
    
    Patch (b6c7a324df37b "MIPS: Fix get_frame_info() handling of
    microMIPS function size.") introduces additional function size
    check for microMIPS by only checking insn between ip and ip + func_size.
    However, func_size in get_frame_info() is always 0 if KALLSYMS is not
    enabled. This causes get_frame_info() to return immediately without
    calculating correct frame_size, which in turn causes "Can't analyze
    schedule() prologue" warning messages at boot time.
    
    This patch removes func_size check, and let the frame_size check run
    up to 128 insns for both MIPS and microMIPS.
    
    Signed-off-by: Jun-Ru Chang <jrjang@realtek.com>
    Signed-off-by: Tony Wu <tonywu@realtek.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: b6c7a324df37b ("MIPS: Fix get_frame_info() handling of microMIPS function size.")
    Cc: <ralf@linux-mips.org>
    Cc: <jhogan@kernel.org>
    Cc: <macro@mips.com>
    Cc: <yamada.masahiro@socionext.com>
    Cc: <peterz@infradead.org>
    Cc: <mingo@kernel.org>
    Cc: <linux-mips@vger.kernel.org>
    Cc: <linux-kernel@vger.kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking ce449cbdcff78a383741bc79d66f2779a556735b ......
	 orig commit -> a3552dace7d1d0cabf573e88fc3025cb90c4a601 ......
checking d0eae5bbd1c3361659c3c0e349c14123f0aaba81 ......
	 orig commit -> ccaf7caf2c73c6db920772bf08bf1d47b2170634 ......
checking 3660e62cfce7a1db86fe330dadb92db59d0bc039 ......
	 orig commit -> 774f0c6419bb8f9d83901d33582c7fe3ba6a6cb3 ......
checking 6f35f1fc14b6188483f993ca989de4b0c85a5b1a ......
	 orig commit -> 884b426917e4b3c85f33b382c792a94305dfdd62 ......
checking ef9e73be031aa4998617a6e11581904687132e5e ......
	 orig commit -> bdfdaf1a016ef09cb941f2edad485a713510b8d5 ......
checking ef674c5eb8da4ecb028a2a670b0bb1eec9eed004 ......
	 orig commit -> 66fd848cadaa6be974a8c780fbeb328f0af4d3bd ......
checking a8af2054e98548e8515f5d7d5409bd50dcd77e82 ......
	 orig commit -> a726f1d2dd4fee179aa4513176d688ad309de6cc ......

Check from v4.9.35 to v4.9.36
Commit count: 172
checking 9f86f302ec0e37e84617481c587e11c47a397e3f ......
checking a29fd27ca26832fe03341a7fec75ea3b4b86fb51 ......
	 orig commit -> d4912215d1031e4fb3d1038d2e1857218dba0d0a ......
checking d1d3756f07da10505699d1d3a1227b5201da3ab8 ......
	 orig commit -> f0367ee1d64d27fa08be2407df5c125442e885e3 ......
checking f3c3ec96e5fb40b453693421577d446b5b22fc52 ......
	 orig commit -> 34b0dadbdf698f9b277a31b2747b625b9a75ea1f ......
checking 1eeb7942633225baad2f8465dd93a4fb72b4ec7f ......
	 orig commit -> 6ed071f051e12cf7baa1b69d3becb8f232fdfb7b ......
checking 982d8d92f25613e88f3a34a8a57da484f68d4c1d ......
	 orig commit -> 335d2c2d192266358c5dfa64953a4c162f46e464 ......
checking a4bfcab30928b1ef1a19b379f8d08efe10853a42 ......
	 orig commit -> 9d2ee0a60b8bd9bef2a0082c533736d6a7b39873 ......
checking de5862335ed7c465b0900774fbd869bf91a23c58 ......
	 orig commit -> 2de3ec4f1d4ba6ee380478055104eb918bd50cce ......
checking 8ee785016d5a05afa9ddd872ae7befa11798bfbf ......
	 orig commit -> 77c0d0cd10e793989d1e8b835a9a09694182cb39 ......
checking 65fc82cea84f38ce918553b557f3a24c8d8c9649 ......
	 orig commit -> 5b0ff9a00755d4d9c209033a77f1ed8f3186fe5c ......
checking 3e51ccbadd15aa4a0e0a64535ec0566749361938 ......
	 orig commit -> 5c51f4ae84df0f9df33ac08aa5be50061a8b4242 ......
checking 92e66676523a9f921dfaa383e37d3a4e2edf15df ......
	 orig commit -> 67bcc2c5f1da8c5bb58e72354274ea5c59a3950a ......
checking 8a6f400a374c2366ae2e0a3e528a2c9791b1dcd1 ......
	 orig commit -> a69261e4470d680185a15f748d9cdafb37c57a33 ......
checking 1781a29b31faee2cae9e7f353d8ab99ceb619c15 ......
	 orig commit -> 84a21dbdef0b96d773599c33c2afbb002198d303 ......
checking 0e55856b8f2918f3a6b8caf3c72867ee88f816dd ......
	 orig commit -> 73dbd4a4230216b6a5540a362edceae0c9b4876b ......
checking f0c31c674abdf563d2ad5d9ecfcad8d237f939f0 ......
	 orig commit -> 938f1bbe35e3a7cb07e1fa7c512e2ef8bb866bdf ......
checking d7fcb303d1ee4416a6e4772735cfacc36e86bff7 ......
	 orig commit -> 797a8b4d768c58caac58ee3e8cb36a164d1b7751 ......
checking c19bfc6765d44847a3880333474e2c992d63802f ......
	 orig commit -> f7116e115acdd74bc75a4daf6492b11d43505125 ......
checking d5c5e8ba5d9d7b3378cf08274c86c8a340110b05 ......
	 orig commit -> 33496c3c3d7b88dcbe5e55aa01288b05646c6aca ......
checking 8af88a950b4207f589b210657edc7c94b86b48e8 ......
	 orig commit -> dbd68d8e84c606673ebbcf15862f8c155fa92326 ......
checking 3667dafd6c04b46a827398b62fa97b9cf73d32f5 ......
	 orig commit -> 5ed386ec09a5d75bcf073967e55e895c2607a5c3 ......
checking b287ade87c9192b4ae6fe525eaa66fd25455bfb1 ......
	 orig commit -> 8eabf42ae5237e6b699aeac687b5b629e3537c8d ......
checking 15541e64163c0c5a2d2e3e8d1b73057888170f62 ......
	 orig commit -> e883d09c9eb2ffddfd057c17e6a0cef446ec8c9b ......
checking a2c222bef08f1ada42f85f12114f482a0682ea56 ......
	 orig commit -> 9e25ebfe56ece7541cd10a20d715cbdd148a2e06 ......
checking 7661b19687b2399783de2c00cf88981c93bc8383 ......
	 orig commit -> cb7cf772d83d2d4e6995c5bb9e0fb59aea8f7080 ......
checking 4efe34b500a740016e5eabb8114ceeb395af771e ......
	 orig commit -> 06e1a5cc570703796ff1bd3a712e8e3b15c6bb0d ......
checking 07bb2c7e7ea369f03a8893e445639324726680a5 ......
	 orig commit -> 04abaf07f6d5cdf22b7a478a86e706dfeeeef960 ......
checking e57aa416ca4ce2af2570f3b776d738c04d9a8e3e ......
	 orig commit -> 6308f1787fb85bc98b7241a08a9f7f33b47f8b61 ......
checking 88baad2e715967f237396bea47c496830d82a9c2 ......
	 orig commit -> 1c47f7c316de38c30b481e1886cc6352c9efdcc1 ......
checking 9846c67974d6af64f665707bb4f68ae458684faa ......
	 orig commit -> 8324147f38019865b29d03baf28412d2ec0bd828 ......
checking c52829f60f5f6e228a70162717df199e874898a8 ......
	 orig commit -> 88b0aa544af58ce3be125a1845a227264ec9ab89 ......
checking 478273e11521915b7a0fd977b4d43587997ec7b2 ......
	 orig commit -> 6e5f32f7a43f45ee55c401c0b9585eb01f9629a8 ......
checking eea0261db8efda7a5b3732c0d9a76e9b06bf040d ......
	 orig commit -> fedf266f9955d9a019643cde199a2fd9a0259f6f ......
checking 4211442b2088554f1c99a72b0476f967c0509a0e ......
	 orig commit -> 29e09229d9f26129a39462fae0ddabc4d9533989 ......
checking ac2730234cc1454b901656ed7f59ca1b519cdaf1 ......
	 orig commit -> 1e3d0c2c70cd3edb5deed186c5f5c75f2b84a633 ......
checking c460f2beb6f081fa22eb7291db49c13c266ffd86 ......
	 orig commit -> e747f64336fc15e1c823344942923195b800aa1e ......
checking 1e1666257cb69022e7a6fe61b1cf041a852ce1bc ......
	 orig commit -> 9b3eb54106cf6acd03f07cf0ab01c13676a226c2 ......
checking 647f605276c0b5e3019fcf8ad302d217d87adedc ......
	 orig commit -> 029c54b09599573015a5c18dbe59cbdf42742237 ......
checking f9f73c58feefa8a5dda019df9c549c6e355e15be ......
	 orig commit -> 79514ef670e9e575a1fe36922268c439d0f0ca8a ......
checking adfe95fe5b4290693a57f1682fcf3c4f61951086 ......
	 orig commit -> 0e9a709560dbcfbace8bf4019dc5298619235891 ......
		 0e9a709560dbcfbace8bf4019dc5298619235891 has problem. Fixes commit -> 46f8cd9d2fc1e4e8b82b53a0007f6c92e80c930b
5f733ee68f9a4df94775299ac6a7ab260704f6ed
commit 6fdeb3e0bb1d513828aec374749958ccb5ab8922
Author: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
Date:   Sat Jun 17 11:38:05 2017 +0800

    ip6_tunnel: Correct tos value in collect_md mode
    
    [ Upstream commit 46f8cd9d2fc1e4e8b82b53a0007f6c92e80c930b ]
    
    Same as ip_gre, geneve and vxlan, use key->tos as traffic class value.
    
    CC: Peter Dawson <petedaws@gmail.com>
    Fixes: 0e9a709560db ("ip6_tunnel, ip6_gre: fix setting of DSCP on
    encapsulated packets”)
    Signed-off-by: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
    Acked-by: Peter Dawson <peter.a.dawson@boeing.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fdd62a4286fbbf811ff650b90b2ef6e4abfe6f77
Author: Liam McBirnie <mcbirnie.l@gmail.com>
Date:   Thu Jun 1 15:36:01 2017 +1000

    ip6_tunnel: fix traffic class routing for tunnels
    
    
    [ Upstream commit 5f733ee68f9a4df94775299ac6a7ab260704f6ed ]
    
    ip6_route_output() requires that the flowlabel contains the traffic
    class for policy routing.
    
    Commit 0e9a709560db ("ip6_tunnel, ip6_gre: fix setting of DSCP on
    encapsulated packets") removed the code which previously added the
    traffic class to the flowlabel.
    
    The traffic class is added here because only route lookup needs the
    flowlabel to contain the traffic class.
    
    Fixes: 0e9a709560db ("ip6_tunnel, ip6_gre: fix setting of DSCP on encapsulated packets")
    Signed-off-by: Liam McBirnie <liam.mcbirnie@boeing.com>
    Acked-by: Peter Dawson <peter.a.dawson@boeing.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 6fdeb3e0bb1d513828aec374749958ccb5ab8922
Author: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
Date:   Sat Jun 17 11:38:05 2017 +0800

    ip6_tunnel: Correct tos value in collect_md mode
    
    [ Upstream commit 46f8cd9d2fc1e4e8b82b53a0007f6c92e80c930b ]
    
    Same as ip_gre, geneve and vxlan, use key->tos as traffic class value.
    
    CC: Peter Dawson <petedaws@gmail.com>
    Fixes: 0e9a709560db ("ip6_tunnel, ip6_gre: fix setting of DSCP on
    encapsulated packets”)
    Signed-off-by: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
    Acked-by: Peter Dawson <peter.a.dawson@boeing.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 168bd51ec5efbb92eb9bcdefb1327ef22e4898a9 ......
	 orig commit -> 912964eacb111551db73429719eb5fadcab0ff8a ......
checking 399566f8a4fb1ea442046942640e37d9ea9fa0d6 ......
	 orig commit -> 9577b174cd0323d287c994ef0891db71666d0765 ......
checking b6f75b986a7f7b79953b94f9778de295a253c624 ......
	 orig commit -> 613f050d68a8ed3c0b18b9568698908ef7bbc1f7 ......
		 613f050d68a8ed3c0b18b9568698908ef7bbc1f7 has problem. Fixes commit -> 7598f8bc1383ffd77686cb4e92e749bef3c75937
commit 2cdc70f39bda78afacf11065ae5cca2adcbf0008
Author: Björn Töpel <bjorn.topel@intel.com>
Date:   Wed Jun 21 18:41:34 2017 +0200

    perf probe: Fix probe definition for inlined functions
    
    [ Upstream commit 7598f8bc1383ffd77686cb4e92e749bef3c75937 ]
    
    In commit 613f050d68a8 ("perf probe: Fix to probe on gcc generated
    functions in modules"), the offset from symbol is, incorrectly, added
    to the trace point address. This leads to incorrect probe trace points
    for inlined functions and when using relative line number on symbols.
    
    Prior this patch:
      $ perf probe -m nf_nat -D in_range
      p:probe/in_range nf_nat:in_range.isra.9+0
      $ perf probe -m i40e -D i40e_clean_rx_irq
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+2212
      $ perf probe -m i40e -D i40e_clean_rx_irq:16
      p:probe/i40e_clean_rx_irq i40e:i40e_lan_xmit_frame+626
    
    After:
      $ perf probe -m nf_nat -D in_range
      p:probe/in_range nf_nat:in_range.isra.9+0
      $ perf probe -m i40e -D i40e_clean_rx_irq
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+1106
      $ perf probe -m i40e -D i40e_clean_rx_irq:16
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+2665
    
    Committer testing:
    
    Using 'pfunct', a tool found in the 'dwarves' package [1], one can ask what are
    the functions that while not being explicitely marked as inline, were inlined
    by the compiler:
    
      # pfunct --cc_inlined /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko | head
      __ew32
      e1000_regdump
      e1000e_dump_ps_pages
      e1000_desc_unused
      e1000e_systim_to_hwtstamp
      e1000e_rx_hwtstamp
      e1000e_update_rdt_wa
      e1000e_update_tdt_wa
      e1000_put_txbuf
      e1000_consume_page
    
    Then ask 'perf probe' to produce the kprobe_tracer probe definitions for two of
    them:
    
      # perf probe -m e1000e -D e1000e_rx_hwtstamp
      p:probe/e1000e_rx_hwtstamp e1000e:e1000_receive_skb+74
    
      # perf probe -m e1000e -D e1000_consume_page
      p:probe/e1000_consume_page e1000e:e1000_clean_jumbo_rx_irq+876
      p:probe/e1000_consume_page_1 e1000e:e1000_clean_jumbo_rx_irq+1506
      p:probe/e1000_consume_page_2 e1000e:e1000_clean_rx_irq_ps+1074
    
    Now lets concentrate on the 'e1000_consume_page' one, that was inlined twice in
    e1000_clean_jumbo_rx_irq(), lets see what readelf says about the DWARF tags for
    that function:
    
      $ readelf -wi /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko
      <SNIP>
      <1><13e27b>: Abbrev Number: 121 (DW_TAG_subprogram)
        <13e27c>   DW_AT_name        : (indirect string, offset: 0xa8945): e1000_clean_jumbo_rx_irq
        <13e287>   DW_AT_low_pc      : 0x17a30
      <3><13e6ef>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13e6f0>   DW_AT_abstract_origin: <0x13ed2c>
        <13e6f4>   DW_AT_low_pc      : 0x17be6
      <SNIP>
      <1><13ed2c>: Abbrev Number: 142 (DW_TAG_subprogram)
         <13ed2e>   DW_AT_name        : (indirect string, offset: 0xa54c3): e1000_consume_page
    
    So, the first time in e1000_clean_jumbo_rx_irq() where e1000_consume_page() is
    inlined is at PC 0x17be6, which subtracted from e1000_clean_jumbo_rx_irq()'s
    address, gives us the offset we should use in the probe definition:
    
      0x17be6 - 0x17a30 = 438
    
    but above we have 876, which is twice as much.
    
    Lets see the second inline expansion of e1000_consume_page() in
    e1000_clean_jumbo_rx_irq():
    
      <3><13e86e>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13e86f>   DW_AT_abstract_origin: <0x13ed2c>
        <13e873>   DW_AT_low_pc      : 0x17d21
    
      0x17d21 - 0x17a30 = 753
    
    So we where adding it at twice the offset from the containing function as we
    should.
    
    And then after this patch:
    
      # perf probe -m e1000e -D e1000e_rx_hwtstamp
      p:probe/e1000e_rx_hwtstamp e1000e:e1000_receive_skb+37
    
      # perf probe -m e1000e -D e1000_consume_page
      p:probe/e1000_consume_page e1000e:e1000_clean_jumbo_rx_irq+438
      p:probe/e1000_consume_page_1 e1000e:e1000_clean_jumbo_rx_irq+753
      p:probe/e1000_consume_page_2 e1000e:e1000_clean_jumbo_rx_irq+1353
      #
    
    Which matches the two first expansions and shows that because we were
    doubling the offset it would spill over the next function:
    
      readelf -sw /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko
       673: 0000000000017a30  1626 FUNC    LOCAL  DEFAULT    2 e1000_clean_jumbo_rx_irq
       674: 0000000000018090  2013 FUNC    LOCAL  DEFAULT    2 e1000_clean_rx_irq_ps
    
    This is the 3rd inline expansion of e1000_consume_page() in
    e1000_clean_jumbo_rx_irq():
    
       <3><13ec77>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13ec78>   DW_AT_abstract_origin: <0x13ed2c>
        <13ec7c>   DW_AT_low_pc      : 0x17f79
    
      0x17f79 - 0x17a30 = 1353
    
     So:
    
       0x17a30 + 2 * 1353 = 0x184c2
    
      And:
    
       0x184c2 - 0x18090 = 1074
    
    Which explains the bogus third expansion for e1000_consume_page() to end up at:
    
       p:probe/e1000_consume_page_2 e1000e:e1000_clean_rx_irq_ps+1074
    
    All fixed now :-)
    
    [1] https://git.kernel.org/pub/scm/devel/pahole/pahole.git/
    
    Signed-off-by: Björn Töpel <bjorn.topel@intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 613f050d68a8 ("perf probe: Fix to probe on gcc generated functions in modules")
    Link: http://lkml.kernel.org/r/20170621164134.5701-1-bjorn.topel@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 9f8ffe4e09520e209f41d01c73a29598414123b1 ......
	 orig commit -> 57d5f64d83ab5b5a5118b1597386dd76eaf4340d ......
checking 18b200e0c8ee07e7e3f2b1bd7a5552b58457452f ......
	 orig commit -> 34c55cf2fc75f8bf6ba87df321038c064cf2d426 ......
checking e1eac347d971b59f3b7de732d488ef00e087e2f8 ......
	 orig commit -> d2d4edbebe07ddb77980656abe7b9bc7a9e0cdf7 ......
checking cc439964fab1a58f5f7d9041845228bdd6ddfa6c ......
	 orig commit -> 34393529163af7163ef8459808e3cf2af7db7f16 ......
		 34393529163af7163ef8459808e3cf2af7db7f16 has problem. Fixes commit -> 4993b39ab04b083ff6ee1147e7e7f120feb6bf7f
commit 6129fd98822520dccf60389a4e2ef5d0148aad78
Author: Ivan Vecera <cera@cera.cz>
Date:   Tue Jan 31 20:01:31 2017 +0100

    be2net: fix initial MAC setting
    
    
    [ Upstream commit 4993b39ab04b083ff6ee1147e7e7f120feb6bf7f ]
    
    Recent commit 34393529163a ("be2net: fix MAC addr setting on privileged
    BE3 VFs") allows privileged BE3 VFs to set its MAC address during
    initialization. Although the initial MAC for such VFs is already
    programmed by parent PF the subsequent setting performed by VF is OK,
    but in certain cases (after fresh boot) this command in VF can fail.
    
    The MAC should be initialized only when:
    1) no MAC is programmed (always except BE3 VFs during first init)
    2) programmed MAC is different from requested (e.g. MAC is set when
       interface is down). In this case the initial MAC programmed by PF
       needs to be deleted.
    
    The adapter->dev_mac contains MAC address currently programmed in HW so
    it should be zeroed when the MAC is deleted from HW and should not be
    filled when MAC is set when interface is down in be_mac_addr_set() as
    no programming is performed in this case.
    
    Example of failure without the fix (immediately after fresh boot):
    
    # ip link set eth0 up  <- eth0 is BE3 PF
    be2net 0000:01:00.0 eth0: Link is Up
    
    # echo 1 > /sys/class/net/eth0/device/sriov_numvfs  <- Create 1 VF
    ...
    be2net 0000:01:04.0: Emulex OneConnect(be3): VF  port 0
    
    # ip link set eth8 up  <- eth8 is created privileged VF
    be2net 0000:01:04.0: opcode 59-1 failed:status 1-76
    RTNETLINK answers: Input/output error
    
    # echo 0 > /sys/class/net/eth0/device/sriov_numvfs  <- Delete VF
    iommu: Removing device 0000:01:04.0 from group 33
    ...
    
    # echo 1 > /sys/class/net/eth0/device/sriov_numvfs  <- Create it again
    iommu: Removing device 0000:01:04.0 from group 33
    ...
    
    # ip link set eth8 up
    be2net 0000:01:04.0 eth8: Link is Up
    
    Initialization is now OK.
    
    v2 - Corrected the comment and condition check suggested by Suresh & Harsha
    
    Fixes: 34393529163a ("be2net: fix MAC addr setting on privileged BE3 VFs")
    Cc: Sathya Perla <sathya.perla@broadcom.com>
    Cc: Ajit Khaparde <ajit.khaparde@broadcom.com>
    Cc: Sriharsha Basavapatna <sriharsha.basavapatna@broadcom.com>
    Cc: Somnath Kotur <somnath.kotur@broadcom.com>
    Signed-off-by: Ivan Vecera <cera@cera.cz>
    Acked-by: Sriharsha Basavapatna <sriharsha.basavapatna@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 02434def6fd0df57a5c4b1309b7d16f985234a7d ......
	 orig commit -> 6d928ae590c8d58cfd5cca997d54394de139cbb7 ......
checking fa1dbf505aefe87cb3adbe279c3eaac087d5790d ......
	 orig commit -> fe68d8bfe59c561664aa87d827aa4b320eb08895 ......
checking 5f54c4e1e2afd0a437e24c0b9689728c1afc1591 ......
	 orig commit -> ca02954ada711b08e5b0d84590a631fd63ed39f9 ......
checking 0e9867b7113c56b367f2e753cd411cf7cef0d2ec ......
	 orig commit -> e991c24d68b8c0ba297eeb7af80b1e398e98c33f ......
checking 9d00195bc0afa0252b9cdb157eb4ed1e13631bc6 ......
	 orig commit -> 602d9858f07c72eab64f5f00e2fae55f9902cfbe ......
checking 68a5dc38573586ad47befe5b91c62d7c2cb8141d ......
	 orig commit -> 4d22c75d4c7b5c5f4bd31054f09103ee490878fd ......
checking d21816c24591060a0af9fd258f85a1e5c04fba0f ......
	 orig commit -> a12f1ae61c489076a9aeb90bddca7722bf330df3 ......
checking 82835fb33ce54820206c14580eb1a149c473c50c ......
	 orig commit -> 18e7a45af91acdde99d3aa1372cc40e1f8142f7b ......
		 18e7a45af91acdde99d3aa1372cc40e1f8142f7b has problem. Fixes commit -> 7a1ac110c22eb726684c837544a2d42c33e07be7
commit 4d19a505207edee6f6b2c214c7c11e9a8294fd2c
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Fri Jun 9 16:54:28 2017 -0300

    perf evsel: Fix probing of precise_ip level for default cycles event
    
    [ Upstream commit 7a1ac110c22eb726684c837544a2d42c33e07be7 ]
    
    Since commit 18e7a45af91a ("perf/x86: Reject non sampling events with
    precise_ip") returns -EINVAL for sys_perf_event_open() with an attribute
    with (attr.precise_ip > 0 && attr.sample_period == 0), just like is done
    in the routine used to probe the max precise level when no events were
    passed to 'perf record' or 'perf top', i.e.:
    
            perf_evsel__new_cycles()
                    perf_event_attr__set_max_precise_ip()
    
    The x86 code, in x86_pmu_hw_config(), which is called all the way from
    sys_perf_event_open() did, starting with the aforementioned commit:
    
                    /* There's no sense in having PEBS for non sampling events: */
                    if (!is_sampling_event(event))
                            return -EINVAL;
    
    Which makes it fail for cycles:ppp, cycles:pp and cycles:p, always using
    just the non precise cycles variant.
    
    To make sure that this is the case, I tested it, before this patch,
    with:
    
      # perf probe -L x86_pmu_hw_config
      <x86_pmu_hw_config@/home/acme/git/linux/arch/x86/events/core.c:0>
            0  int x86_pmu_hw_config(struct perf_event *event)
            1  {
            2         if (event->attr.precise_ip) {
    <SNIP>
           17                 if (event->attr.precise_ip > precise)
           18                         return -EOPNOTSUPP;
    
                              /* There's no sense in having PEBS for non sampling events: */
           21                 if (!is_sampling_event(event))
           22                         return -EINVAL;
                      }
    <SNIP>
      # perf probe x86_pmu_hw_config:22
      Added new events:
        probe:x86_pmu_hw_config (on x86_pmu_hw_config:22)
        probe:x86_pmu_hw_config_1 (on x86_pmu_hw_config:22)
    
      You can now use it in all perf tools, such as:
    
            perf record -e probe:x86_pmu_hw_config_1 -aR sleep 1
    
      # perf trace -e perf_event_open,probe:x86_pmu_hwconfig*/max-stack=16/ perf record usleep 1
         0.000 ( 0.015 ms): perf/4150 perf_event_open(attr_uptr: 0x7ffebc8ba110, cpu: -1, group_fd: -1      ) ...
         0.015 (         ): probe:x86_pmu_hw_config:(ffffffff9c0065e1))
                                           x86_pmu_hw_config ([kernel.kallsyms])
                                           hsw_hw_config ([kernel.kallsyms])
                                           x86_pmu_event_init ([kernel.kallsyms])
                                           perf_try_init_event ([kernel.kallsyms])
                                           perf_event_alloc ([kernel.kallsyms])
                                           SYSC_perf_event_open ([kernel.kallsyms])
                                           sys_perf_event_open ([kernel.kallsyms])
                                           do_syscall_64 ([kernel.kallsyms])
                                           return_from_SYSCALL_64 ([kernel.kallsyms])
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_attr__set_max_precise_ip (/home/acme/bin/perf)
                                           perf_evsel__new_cycles (/home/acme/bin/perf)
                                           perf_evlist__add_default (/home/acme/bin/perf)
                                           cmd_record (/home/acme/bin/perf)
                                           run_builtin (/home/acme/bin/perf)
                                           handle_internal_command (/home/acme/bin/perf)
         0.000 ( 0.021 ms): perf/4150  ... [continued]: perf_event_open()) = -1 EINVAL Invalid argument
         0.023 ( 0.002 ms): perf/4150 perf_event_open(attr_uptr: 0x7ffebc8ba110, cpu: -1, group_fd: -1      ) ...
         0.025 (         ): probe:x86_pmu_hw_config:(ffffffff9c0065e1))
                                           x86_pmu_hw_config ([kernel.kallsyms])
                                           hsw_hw_config ([kernel.kallsyms])
                                           x86_pmu_event_init ([kernel.kallsyms])
                                           perf_try_init_event ([kernel.kallsyms])
                                           perf_event_alloc ([kernel.kallsyms])
                                           SYSC_perf_event_open ([kernel.kallsyms])
                                           sys_perf_event_open ([kernel.kallsyms])
                                           do_syscall_64 ([kernel.kallsyms])
                                           return_from_SYSCALL_64 ([kernel.kallsyms])
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_attr__set_max_precise_ip (/home/acme/bin/perf)
                                           perf_evsel__new_cycles (/home/acme/bin/perf)
                                           perf_evlist__add_default (/home/acme/bin/perf)
                                           cmd_record (/home/acme/bin/perf)
                                           run_builtin (/home/acme/bin/perf)
                                           handle_internal_command (/home/acme/bin/perf)
         0.023 ( 0.004 ms): perf/4150  ... [continued]: perf_event_open()) = -1 EINVAL Invalid argument
         0.028 ( 0.002 ms): perf/4150 perf_event_open(attr_uptr: 0x7ffebc8ba110, cpu: -1, group_fd: -1      ) ...
         0.030 (         ): probe:x86_pmu_hw_config:(ffffffff9c0065e1))
                                           x86_pmu_hw_config ([kernel.kallsyms])
                                           hsw_hw_config ([kernel.kallsyms])
                                           x86_pmu_event_init ([kernel.kallsyms])
                                           perf_try_init_event ([kernel.kallsyms])
                                           perf_event_alloc ([kernel.kallsyms])
                                           SYSC_perf_event_open ([kernel.kallsyms])
                                           sys_perf_event_open ([kernel.kallsyms])
                                           do_syscall_64 ([kernel.kallsyms])
                                           return_from_SYSCALL_64 ([kernel.kallsyms])
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_attr__set_max_precise_ip (/home/acme/bin/perf)
                                           perf_evsel__new_cycles (/home/acme/bin/perf)
                                           perf_evlist__add_default (/home/acme/bin/perf)
                                           cmd_record (/home/acme/bin/perf)
                                           run_builtin (/home/acme/bin/perf)
                                           handle_internal_command (/home/acme/bin/perf)
         0.028 ( 0.004 ms): perf/4150  ... [continued]: perf_event_open()) = -1 EINVAL Invalid argument
        41.018 ( 0.012 ms): perf/4150 perf_event_open(attr_uptr: 0x7ffebc8b5dd0, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
        41.065 ( 0.011 ms): perf/4150 perf_event_open(attr_uptr: 0x3c7db78, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
        41.080 ( 0.006 ms): perf/4150 perf_event_open(attr_uptr: 0x3c7db78, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
        41.103 ( 0.010 ms): perf/4150 perf_event_open(attr_uptr: 0x3c4e748, pid: 4151 (perf), group_fd: -1, flags: FD_CLOEXEC) = 4
        41.115 ( 0.006 ms): perf/4150 perf_event_open(attr_uptr: 0x3c4e748, pid: 4151 (perf), cpu: 1, group_fd: -1, flags: FD_CLOEXEC) = 5
        41.122 ( 0.004 ms): perf/4150 perf_event_open(attr_uptr: 0x3c4e748, pid: 4151 (perf), cpu: 2, group_fd: -1, flags: FD_CLOEXEC) = 6
        41.128 ( 0.008 ms): perf/4150 perf_event_open(attr_uptr: 0x3c4e748, pid: 4151 (perf), cpu: 3, group_fd: -1, flags: FD_CLOEXEC) = 8
      [ perf record: Woken up 1 times to write data ]
      [ perf record: Captured and wrote 0.017 MB perf.data (2 samples) ]
      #
    
    I.e. that return -EINVAL in x86_pmu_hw_config() is hit three times.
    
    So fix it by just setting attr.sample_period
    
    Now, after this patch:
    
      # perf trace --max-stack=2 -e perf_event_open,probe:x86_pmu_hw_config* perf record usleep 1
      [ perf record: Woken up 1 times to write data ]
         0.000 ( 0.017 ms): perf/8469 perf_event_open(attr_uptr: 0x7ffe36c27d10, pid: -1, cpu: 3, group_fd: -1, flags: FD_CLOEXEC) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_open_cloexec_flag (/home/acme/bin/perf)
         0.050 ( 0.031 ms): perf/8469 perf_event_open(attr_uptr: 0x24ebb78, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evlist__config (/home/acme/bin/perf)
         0.092 ( 0.040 ms): perf/8469 perf_event_open(attr_uptr: 0x24ebb78, pid: -1, group_fd: -1, flags: FD_CLOEXEC) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evlist__config (/home/acme/bin/perf)
         0.143 ( 0.007 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, cpu: -1, group_fd: -1           ) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_event_attr__set_max_precise_ip (/home/acme/bin/perf)
         0.161 ( 0.007 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, pid: 8470 (perf), group_fd: -1, flags: FD_CLOEXEC) = 4
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evsel__open (/home/acme/bin/perf)
         0.171 ( 0.005 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, pid: 8470 (perf), cpu: 1, group_fd: -1, flags: FD_CLOEXEC) = 5
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evsel__open (/home/acme/bin/perf)
         0.180 ( 0.007 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, pid: 8470 (perf), cpu: 2, group_fd: -1, flags: FD_CLOEXEC) = 6
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evsel__open (/home/acme/bin/perf)
         0.190 ( 0.005 ms): perf/8469 perf_event_open(attr_uptr: 0x24bc748, pid: 8470 (perf), cpu: 3, group_fd: -1, flags: FD_CLOEXEC) = 8
                                           syscall (/usr/lib64/libc-2.24.so)
                                           perf_evsel__open (/home/acme/bin/perf)
      [ perf record: Captured and wrote 0.017 MB perf.data (7 samples) ]
      #
    
    The probe one called from perf_event_attr__set_max_precise_ip() works
    the first time, with attr.precise_ip = 3, wit hthe next ones being the
    per cpu ones for the cycles:ppp event.
    
    And here is the text from a report and alternative proposed patch by
    Thomas-Mich Richter:
    
     ---
    
    On s390 the counter and sampling facility do not support a precise IP
    skid level and sometimes returns EOPNOTSUPP when structure member
    precise_ip in struct perf_event_attr is not set to zero.
    
    On s390 commnd 'perf record -- true' fails with error EOPNOTSUPP.  This
    happens only when no events are specified on command line.
    
    The functions called are
    ...
      --> perf_evlist__add_default
          --> perf_evsel__new_cycles
              --> perf_event_attr__set_max_precise_ip
    
    The last function determines the value of structure member precise_ip by
    invoking the perf_event_open() system call and checking the return code.
    The first successful open is the value for precise_ip.
    
    However the value is determined without setting member sample_period and
    indicates no sampling.
    
    On s390 the counter facility and sampling facility are different.  The
    above procedure determines a precise_ip value of 3 using the counter
    facility. Later it uses the sampling facility with a value of 3 and
    fails with EOPNOTSUPP.
    
     ---
    
    v2: Older compilers (e.g. gcc 4.4.7) don't support referencing members
        of unnamed union members in the container struct initialization, so
        move from:
    
            struct perf_event_attr attr = {
                    ...
                    .sample_period = 1,
            };
    
    to right after it as:
    
            struct perf_event_attr attr = {
                    ...
            };
    
            attr.sample_period = 1;
    
    v3: We need to reset .sample_period to 0 to let the users of
    perf_evsel__new_cycles() to properly setup attr.sample_period or
    attr.sample_freq. Reported by Ingo Molnar.
    
    Reported-and-Acked-by: Thomas-Mich Richter <tmricht@linux.vnet.ibm.com>
    Acked-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Fixes: 18e7a45af91a ("perf/x86: Reject non sampling events with precise_ip")
    Link: http://lkml.kernel.org/n/tip-yv6nnkl7tzqocrm0hl3x7vf1@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 1c68633329d230dc350bc8c521689be4703f6016 ......
	 orig commit -> 63cae12bce9861cec309798d34701cf3da20bc71 ......
checking 48131dd0f2b19dd297147c23dc634432fecee638 ......
	 orig commit -> 453828625731d0ba7218242ef6ec88f59408f368 ......
checking 283994074501393b67590220ec8015f60ee670a8 ......
	 orig commit -> 695085b4bc7603551db0b3da897b8bf9893ca218 ......
checking 6baa8c92dab9a43f0b363f1b7d7bd269d5efcf8d ......
	 orig commit -> 43071d8fb3b7f589d72663c496a6880fb097533c ......
checking 8eaaf66d41adf7b9b31486f03d93de3a1013e28d ......
	 orig commit -> d47d1d27fd6206c18806440f6ebddf51a806be4f ......
checking 25319ae8e8a72a3fcdac7c964d267ca3c4e7c0a0 ......
	 orig commit -> ab8db87b8256e13a62f10af1d32f5fc233c398cc ......
checking f275ac7fc5d2b6013980864f14d1ced016211349 ......
	 orig commit -> 3731d12dce83d47b357753ffc450ce03f1b49688 ......
checking 77e82094a3c9d3ca8308a48a4b11037c6234a262 ......
	 orig commit -> ef736d394e85b1bf1fd65ba5e5257b85f6c82325 ......
checking 4ae8dc6acb710419c8766c290b7fb5eac2f1ed68 ......
	 orig commit -> 7aa4865506a26c607e00bd9794a85785b55ebca7 ......
checking f88f06e1831878ecdd5fa78090a45ea8ff77f38f ......
	 orig commit -> 41c066f2c4d436c535616fe182331766c57838f0 ......
checking aabb797b4c1204b2e8518538b2616e476f2bac92 ......
	 orig commit -> c5a2a394835f473ae23931eda5066d3771d7b2f8 ......
checking c32462d0b5232712f8a2a1d6cedb731115ba6f7b ......
	 orig commit -> cd60be4916ae689387d04b86b6fc15931e4c95ae ......
checking 582c1ca0ea1d13a9e2912c5a7530f0728b3c3d1c ......
	 orig commit -> a89af4abdf9b353cdd6f61afc0eaaac403304873 ......
checking c78b8de5c05c73ff451b7c5a085766b421920ccd ......
	 orig commit -> ad5013d5699d30ded0cdbbc68b93b2aa28222c6e ......
checking 6130fac994818eb0fbc9dfc95056292e71fb3791 ......
	 orig commit -> d2941df8fbd9708035d66d889ada4d3d160170ce ......
checking d48cb21fd50bf6bea379ad04dc2baced20cf5275 ......
	 orig commit -> a13c06525ab9ff442924e67df9393a5efa914c56 ......
checking 849f2d0665e049c21dbac8c0fa566a8ac04fead5 ......
	 orig commit -> 17fab473693e8357a9aa6fee4fbed6c13a34bd81 ......
		 17fab473693e8357a9aa6fee4fbed6c13a34bd81 has problem. Fixes commit -> d68b42e30bbacd24354d644f430d088435b15e83
commit d4c9c7c1eef0074bc9d34203da6e5089e7c647e0
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Aug 24 11:19:33 2017 +0300

    pinctrl: intel: Read back TX buffer state
    
    commit d68b42e30bbacd24354d644f430d088435b15e83 upstream.
    
    In the same way as it's done in pinctrl-cherryview.c we would provide
    a readback TX buffer state.
    
    Fixes: 17fab473693 ("pinctrl: intel: Set pin direction properly")
    Reported-by: "Bourque, Francis" <francis.bourque@intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: "Bourque, Francis" <francis.bourque@intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: Anthony de Boer <adb@adb.ca>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3a6edbc95ba0df871e1eb72a411c0fa06644785e ......
	 orig commit -> 6d6daa20945f3f598e56e18d1f926c08754f5801 ......
checking b8c5e7b1241362a131a2364fd166f8c8fdd9b363 ......
	 orig commit -> 3546fb0cdac25a79c89d87020566fab52b92867d ......
checking 2bc8fcd633d8e7d59a242eb4d86fbebb8cf7ff61 ......
	 orig commit -> 61976fff20f92aceecc3670f6168bfc57a79e047 ......
checking c5c8743642aee21300b99540643549054edbf17f ......
	 orig commit -> ff7a28a074ccbea999dadbb58c46212cf90984c6 ......
checking 00f468f51dd5182390b4e859dced75f22e89034e ......
	 orig commit -> 23d28a859fb847fd7fcfbd31acb3b160abb5d6ae ......
checking 32bd4d2ed9d8355edc2263947286c8039c6bf171 ......
	 orig commit -> efb5f68f32995c146944a9d4257c3cf8eae2c4a1 ......
checking b07bf2364605dc7d78401b7eb02a533b0b6ddc05 ......
	 orig commit -> 21b995a9cb093fff33ec91d7cb3822b882a90a1e ......
checking 7fdc81f6e1a9b3f520e40cfc4ebccc94858da62d ......
	 orig commit -> d0fa28f00052391b5df328f502fbbdd4444938b7 ......
checking a6c3e01bf32e82494fb634801982e31f257f25cc ......
	 orig commit -> a59b7e0246774e28193126fe7fdbbd0ae9c67dcc ......
checking ff3b1dd026bb1f9df6f345ec91b9a754d363306f ......
	 orig commit -> bd00fdf198e2da475a2f4265a83686ab42d998a8 ......
checking 8895ef4e5357fa54e614c5654eb4416623c2feb6 ......
	 orig commit -> c5f21c9f878b8dcd54d0b9739c025ca73cb4c091 ......
checking e5a2ba9af818cf214f2a0a1e431fb2b1102883c0 ......
	 orig commit -> 4078b76cac68e50ccf1f76a74e7d3d5788aec3fe ......
checking c6f284899e01f9ea095d0e5d7aa2f3814915def1 ......
	 orig commit -> 738f7f647371ff4cfc9646c99dba5b58ad142db3 ......
checking e99d86d76eed4f4bccc01e58e0bb3c96fbe88f67 ......
	 orig commit -> cfee5d63767b2e7997c1f36420d008abbe61565c ......
checking e9a87e0f5bbb3f3fd28048b923b9941687c6233f ......
	 orig commit -> 92549cdc288f47f3a98cf80ac5890c91f5876a06 ......
checking 322baf72eed51cef55a61f5d4ac1b51bd7824c1a ......
	 orig commit -> 773c7220e22d193e5667c352fcbf8d47eefc817f ......
checking 5d5c293af8348b540ef721d810f7549ac3ab81c2 ......
	 orig commit -> 90c311b0eeead647b708a723dbdde1eda3dcad05 ......
		 90c311b0eeead647b708a723dbdde1eda3dcad05 has problem. Fixes commit -> 538d92912d3190a1dd809233a0d57277459f37b2
commit 21f79ae43fd2d498847ff82161027a62a1269926
Author: Vineeth Remanan Pillai <vineethp@amazon.com>
Date:   Tue Feb 7 18:59:01 2017 +0000

    xen-netfront: Rework the fix for Rx stall during OOM and network stress
    
    commit 538d92912d3190a1dd809233a0d57277459f37b2 upstream.
    
    The commit 90c311b0eeea ("xen-netfront: Fix Rx stall during network
    stress and OOM") caused the refill timer to be triggerred almost on
    all invocations of xennet_alloc_rx_buffers for certain workloads.
    This reworks the fix by reverting to the old behaviour and taking into
    consideration the skb allocation failure. Refill timer is now triggered
    on insufficient requests or skb allocation failure.
    
    Signed-off-by: Vineeth Remanan Pillai <vineethp@amazon.com>
    Fixes: 90c311b0eeea (xen-netfront: Fix Rx stall during network stress and OOM)
    Reported-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Eduardo Valentin <eduval@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 72191c7d82e7a559ef05b1b89e6365911a8726aa ......
	 orig commit -> f1225ee4c8fcf09afaa199b8b1f0450f38b8cd11 ......
checking 884baf2abf6dd0273b821a1f9e06023438528a52 ......
	 orig commit -> 8379cadf71c3ee8173a1c6fc1ea7762a9638c047 ......
checking c3eab85ff11a8cd4def8cf2b4cc0610f6b47a8cd ......
	 orig commit -> 91298eec05cd8d4e828cf7ee5d4a6334f70cf69a ......
checking e8b5068b64d0505fe138e3db243e6e3385ae1a15 ......
	 orig commit -> 97dcdea076ecef41ea4aaa23d4397c2f622e4265 ......
checking 83571e9ef7c91ef6e249aae374de068b30963551 ......
	 orig commit -> 69fed99baac186013840ced3524562841296034f ......
checking c48a862c47d481838b26f5d6cd5c29e2064339da ......
	 orig commit -> b5b46c4740aed1538544f0fa849c5b76c7823469 ......
checking 251d00bf1309c65316f5bd3850b2ca523b46921c ......
	 orig commit -> d407bd25a204bd66b7346dde24bd3d37ef0e0b05 ......
checking a7a2a6d34fe78261945a5eb5eeca6c4fa3ad800e ......
	 orig commit -> 719ca8111402aa6157bd83a3c966d184db0d8956 ......
checking da805bc788b0dfce728b22d2595e569d2ee9769e ......
	 orig commit -> f16f1df65f1cf139ff9e9f84661e6573d6bb27fc ......
checking 7bdccaa5da12f294636de312c73d7d33dfaa947c ......
	 orig commit -> 9a6cdf52b85ea5fb21d2bb31e4a7bc61b79923a7 ......
checking 5dcd085942761174f6ff1271fe707e4e2308d64c ......
	 orig commit -> 31a86d137219373c3222ca5f4f912e9a4d8065bb ......
checking 6e315b2b10b65022ce07e6ed3e2decf7678d58c2 ......
	 orig commit -> 387bbc974f6adf91aa635090f73434ed10edd915 ......
checking ea7b808165a5161fcd148c8b41fa03e79e65cb82 ......
	 orig commit -> e6afb1ad88feddf2347ea779cfaf4d03d3cd40b6 ......
checking fded17be01abfefe7218a72df703d8fe6b28206f ......
	 orig commit -> 4e71de7986386d5fd3765458f27d612931f27f5e ......
checking 3eeb3459b7e6ec77d0ca2ae1bc82ecefe16d4c50 ......
	 orig commit -> 93b43fd137cd8865adf9978ab9870a344365d3af ......
checking 10c24e89b2b86907fc9588db1fa7300e9a1a194a ......
	 orig commit -> 17324b6add82d6c0bf119f1d1944baef392a4e39 ......
checking 9f2a36a7504c994f89a1fe8e4d94b8d43423816f ......
	 orig commit -> 50a1ebc70a2803deb7811fc73fb55d70e353bc34 ......
checking 0c9626619777f76a4a6761a259dcad263b1902d3 ......
	 orig commit -> 4f060736f29a960aba8e781a88837464756200a8 ......
checking 8cfcaa2899f322fa602e903e983389fd1de36fe8 ......
	 orig commit -> 5f35509db179ca7ed1feaa4b14f841adb06ed220 ......
		 5f35509db179ca7ed1feaa4b14f841adb06ed220 has problem. Fixes commit -> cbe3fd39d223f14b1c60c80fe9347a3dd08c2edb
commit fccf159614b29580b4744b2dbd4ae65cb49e9f60
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Sep 8 11:42:27 2018 +0300

    scsi: qla2xxx: Fix an endian bug in fcpcmd_is_corrupted()
    
    [ Upstream commit cbe3fd39d223f14b1c60c80fe9347a3dd08c2edb ]
    
    We should first do the le16_to_cpu endian conversion and then apply the
    FCP_CMD_LENGTH_MASK mask.
    
    Fixes: 5f35509db179 ("qla2xxx: Terminate exchange if corrupted")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Quinn Tran <Quinn.Tran@cavium.com>
    Acked-by: Himanshu Madhani <himanshu.madhani@cavium.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 42a1d5b47594eb846f709f6558082919dabc7344 ......
	 orig commit -> 8667f515952feefebb3c0f8d9a9266c91b101a46 ......
checking 7782ab228f64e7da4c47a90b40fbb80920ce722b ......
	 orig commit -> a249708bc2aa1fe3ddf15dfac22bee519d15996b ......
checking ee4494c6bda8ac530f85756e619c1727d2539b6c ......
	 orig commit -> 26f2819772af891dee2843e1f8662c58e5129d5f ......
checking 80b1a1180e4e72fed893e5aba73fe7ccea7aa30e ......
	 orig commit -> ce2e852ecc9a42e4b8dabb46025cfef63209234a ......
checking afaee3ef513650b2f6cb9e2c860b9210875a8135 ......
	 orig commit -> 71df1d7ccad1c36f7321d6b3b48f2ea42681c363 ......
checking 13fa36f9fbc84c47cef6673d5e2f3a20693d6eff ......
	 orig commit -> feb3cbea0946c67060e2d5bcb7499b0a6f6700fe ......
		 feb3cbea0946c67060e2d5bcb7499b0a6f6700fe has problem. Fixes commit -> 8b3e6f8999f8d704fccce225b9455b3fa639d1c9
checking 8bface142a8d4bc5766bc71c94a618f234ed2bc6 ......
	 orig commit -> 308d3165d8b2b98d3dc3d97d6662062735daea67 ......
checking 3897ae12b706bfc47c07a1eef58fe6ce328784cf ......
	 orig commit -> 57f3986231bb2c69a55ccab1d2b30a00818027ac ......
checking 40373d91a0f764c8ba5c56ea3dc88896faa4510d ......
	 orig commit -> 3bb9ab63276696988d8224f52db20e87194deb4b ......
checking 752ba680eb70ebc1e235b2ac1087ce471e2c800d ......
	 orig commit -> 1fc31357ad194fb98691f3d122bcd47e59239e83 ......
checking 97ace183074d306942b903a148aebd5d061758f0 ......
	 orig commit -> d853d145ea3e63387a2ac759aa41d5e43876e561 ......
		 d853d145ea3e63387a2ac759aa41d5e43876e561 has problem. Fixes commit -> 3bb9ab63276696988d8224f52db20e87194deb4b
commit 40373d91a0f764c8ba5c56ea3dc88896faa4510d
Author: jbrunet <jbrunet@baylibre.com>
Date:   Mon Dec 19 16:05:36 2016 +0100

    net: phy: fix sign type error in genphy_config_eee_advert
    
    
    [ Upstream commit 3bb9ab63276696988d8224f52db20e87194deb4b ]
    
    In genphy_config_eee_advert, the return value of phy_read_mmd_indirect is
    checked to know if the register could be accessed but the result is
    assigned to a 'u32'.
    Changing to 'int' to correctly get errors from phy_read_mmd_indirect.
    
    Fixes: d853d145ea3e ("net: phy: add an option to disable EEE advertisement")
    Reported-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0e8eca987e27077fc2ade85aa402dbc177fdb026 ......
	 orig commit -> 94842b4fc4d6b1691cfc86c6f5251f299d27f4ba ......
checking 8886196a73204d167b7f8797eb6ebf61e76794d6 ......
	 orig commit -> 7a7dc961a28b965a0d0303c2e989df17b411708b ......
checking 41172b772da4b9d875ed3fb90fe0e1a86742dc2a ......
	 orig commit -> 047487241ff59374fded8c477f21453681f5995c ......
checking 2aa6d036b716c9242222e054d4ef34905ad45fd3 ......
	 orig commit -> 3c226c637b69104f6b9f1c6ec5b08d7b741b3229 ......
checking 08cb8e5f83fd2d4f6327173cc01322bc842806f1 ......
	 orig commit -> 2777e2ab5a9cf2b4524486c6db1517a6ded25261 ......
checking 599e6f038777c6733eef244d4aac192edb612aa6 ......
	 orig commit -> 5e6a9e5a3554a5b3db09cdc22253af1849c65dff ......
checking d9face6fc62a73059f0fc3a3de4dfe8f53536aa7 ......
	 orig commit -> dbdbc73b44782e22b3b4b6e8b51e7a3d245f3086 ......
		 dbdbc73b44782e22b3b4b6e8b51e7a3d245f3086 has problem. Fixes commit -> 9ee369a405c57613d7c83a3967780c3e30c52ecc
checking 806e98835683694cbb9e74c28641df8042792e27 ......
	 orig commit -> 57377d63547861919ee634b845c7caa38de4a452 ......
checking 6539c4f991c28e82d1eb0385d35cc9662985f61a ......
	 orig commit -> 61b9a047729bb230978178bca6729689d0c50ca2 ......
checking d2da8d394147526a28c6d5bb83a72635e7f0a288 ......
	 orig commit -> b3ce3ce02d146841af012d08506b4071db8ffde3 ......
checking ed96148d7f8e900b61d90de79bf3b273887ffa70 ......
	 orig commit -> fc5f9d5f151c9fff21d3d1d2907b888a5aec3ff7 ......
checking 1c0fa383b3391f1e5528b264bd9b3ca9209054cf ......
	 orig commit -> 00a0ea33b495ee6149bf5a77ac5807ce87323abb ......
		 00a0ea33b495ee6149bf5a77ac5807ce87323abb has problem. Fixes commit -> d445bd9cec1a850c2100fcf53684c13b3fd934f2
commit 5675a52cf5e1b673da900e59f01bf959f158b64b
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Jan 15 13:27:01 2019 -0500

    dm thin: fix passdown_double_checking_shared_status()
    
    commit d445bd9cec1a850c2100fcf53684c13b3fd934f2 upstream.
    
    Commit 00a0ea33b495 ("dm thin: do not queue freed thin mapping for next
    stage processing") changed process_prepared_discard_passdown_pt1() to
    increment all the blocks being discarded until after the passdown had
    completed to avoid them being prematurely reused.
    
    IO issued to a thin device that breaks sharing with a snapshot, followed
    by a discard issued to snapshot(s) that previously shared the block(s),
    results in passdown_double_checking_shared_status() being called to
    iterate through the blocks double checking their reference count is zero
    and issuing the passdown if so.  So a side effect of commit 00a0ea33b495
    is passdown_double_checking_shared_status() was broken.
    
    Fix this by checking if the block reference count is greater than 1.
    Also, rename dm_pool_block_is_used() to dm_pool_block_is_shared().
    
    Fixes: 00a0ea33b495 ("dm thin: do not queue freed thin mapping for next stage processing")
    Cc: stable@vger.kernel.org # 4.9+
    Reported-by: ryan.p.norwood@gmail.com
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 466877f2d25758e5ad007b292c1f225520f8c877 ......
	 orig commit -> 82fcee526ba8ca2c5d378bdf51b21b7eb058fe3a ......
checking 78c4244f8bdbf3cefa1e01bfcfe7a53bcc45c0f3 ......
	 orig commit -> ad537b822577fcc143325786cd6ad50d7b9df31c ......
		 ad537b822577fcc143325786cd6ad50d7b9df31c has problem. Fixes commit -> df1e76f28ffe87d1b065eecab2d0fbb89e6bdee5
commit b680e22fca767103ea4f86e21a8cca927f9d1ca7
Author: Bartosz Golaszewski <brgl@bgdev.pl>
Date:   Mon Jul 3 11:12:03 2017 +0200

    gpiolib: skip unwanted events, don't convert them to opposite edge
    
    commit df1e76f28ffe87d1b065eecab2d0fbb89e6bdee5 upstream.
    
    The previous fix for filtering out of unwatched events was not entirely
    correct. Instead of skipping the events we don't want, they are now
    interpreted as events with opposing edge.
    
    In order to fix it: always read the GPIO line value on interrupt and
    only emit the event if it corresponds with the event type we requested.
    
    Fixes: ad537b822577 ("gpiolib: fix filtering out unwanted events")
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking cb2c6fdf620f4802c31d6577ff34391fdd949cc6 ......
	 orig commit -> bd171930e6a3de4f5cffdafbb944e50093dfb59b ......
checking 7d0e27fe24c55dda16ad579db5a0234b3ff97770 ......
	 orig commit -> a8f20fd25bdce81a8e41767c39f456d346b63427 ......
checking 093750c3dec46a1d440098341e531e3e7c17a96d ......
	 orig commit -> d94815f917da770d42c377786dc428f542e38f71 ......
checking dad3135e762bdb66318fe5ab902db5c4fbb1ad2f ......
	 orig commit -> d8550860d910c6b7b70f830f59003b33daaa52c9 ......
checking e9e24faf823e58713115974ab50102319c33a34d ......
	 orig commit -> 161c51ccb7a6faf45ffe09aa5cf1ad85ccdad503 ......
checking f7d3d40ea1242f633bbf093b63181acff2da319e ......
	 orig commit -> 854236363370995a609a10b03e35fd3dc5e9e4a1 ......
checking 3d4ac49a9538c36d9c3c121ddbcb4c3958dee5e9 ......
	 orig commit -> 25d8b92e0af75d72ce8b99e63e5a449cc0888efa ......
checking b1355226a64e6301ca63aee1e78728887e3527f1 ......
	 orig commit -> 460bcec84e11c75122ace5976214abbc596eb91b ......
checking dbc808362b6cb2124f36b14ce354abcc64b6f1bb ......
	 orig commit -> 71f677a91046599ece96ebab21df956ce909c456 ......
checking 8dc9f9dede5b92658a1bb32866e11905933d2b48 ......
	 orig commit -> a24fa22ce22ae302b3bf8f7008896d52d5d57b8d ......
checking 4ebe28d23d35df2e69542c0146a74d21834ef235 ......
	 orig commit -> df807fffaabde625fa9adb82e3e5b88cdaa5709a ......
checking 955f270b6f5d7d830188de1f05f055180a8712dc ......
	 orig commit -> 366a1569bff3fe14abfdf9285e31e05e091745f5 ......
checking b89bd0c715c148ea3cfef6b250482a77225573b5 ......
	 orig commit -> 87e94dbc210a720a34be5c1174faee5c84be963e ......
checking ced7689be60ddcac4b1746212c547e8817c5ae5e ......
	 orig commit -> 2638fd0f92d4397884fd991d8f4925cb3f081901 ......
checking 8e2316399b8faa87496886506f145ed988cf5c68 ......
	 orig commit -> db833d40ad3263b2ee3b59a1ba168bb3cfed8137 ......
checking b9ca9b0f551080aeb5adf7ab1b5f0c47c3e83f57 ......
	 orig commit -> 07f615574f8ac499875b21c1142f26308234a92c ......
checking e4089baa08c4a1fba87c19f8d018ecf032cab0b5 ......
checking 08058c258afba77abf1fe6f4d327d3154a2bc336 ......
	 orig commit -> 9745e362add89432d2c951272a99b0a5fe4348a9 ......
checking f1a0e7d172b01e258a8c0ca6c67d003fbac54f64 ......
	 orig commit -> 76371d2e3ad1f84426a30ebcd8c3b9b98f4c724f ......
checking c7d422d68fe98627ea9f60d06e38dc7f1af302b9 ......
	 orig commit -> f0b381178b01b831f9907d72f467d6443afdea67 ......
checking 25ff35074e276b457f16c00f97afea41b6d5051d ......
	 orig commit -> 6c780a0267b8a1075f40b39851132eeaefefcff5 ......
		 6c780a0267b8a1075f40b39851132eeaefefcff5 has problem. Fixes commit -> 8ce59b16b4b6eacedaec1f7b652b4781cdbfe15f
commit 3d28f9a3aeee9529d5890d4164931c4d668ea8f6
Author: Gal Pressman <galp@mellanox.com>
Date:   Mon Jun 19 18:25:59 2017 +0300

    net/mlx5: Fix driver load error flow when firmware is stuck
    
    [ Upstream commit 8ce59b16b4b6eacedaec1f7b652b4781cdbfe15f ]
    
    When wait for firmware init fails, previous code would mistakenly
    return success and cause inconsistency in the driver state.
    
    Fixes: 6c780a0267b8 ("net/mlx5: Wait for FW readiness before initializing command interface")
    Signed-off-by: Gal Pressman <galp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 176b9874a203ae170912b063999e2c00d56b9ee6 ......
	 orig commit -> 31ac93386d135a6c96de9c8bab406f5ccabf5a4d ......
checking 4c246863e7b42eaecbaf90c319720bbf426b5958 ......
	 orig commit -> 988c7322116970696211e902b468aefec95b6ec4 ......
checking fded2d74a3505f7daad70db4e8ffd87ceb366ecb ......
	 orig commit -> f8a894b218138888542a5058d0e902378fd0d4ec ......
checking cac2a9bb4034f2395bdbe1ad2bd3f29a470e14f0 ......
	 orig commit -> b4846fc3c8559649277e3e4e6b5cec5348a8d208 ......
checking ecd6627f48bd2d8e0f85eee703b5b4609ed6f744 ......
	 orig commit -> c38b7d327aafd1e3ad7ff53eefac990673b65667 ......
		 c38b7d327aafd1e3ad7ff53eefac990673b65667 has problem. Fixes commit -> b4846fc3c8559649277e3e4e6b5cec5348a8d208
commit cac2a9bb4034f2395bdbe1ad2bd3f29a470e14f0
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue Jun 20 10:46:27 2017 -0700

    igmp: add a missing spin_lock_init()
    
    
    [ Upstream commit b4846fc3c8559649277e3e4e6b5cec5348a8d208 ]
    
    Andrey reported a lockdep warning on non-initialized
    spinlock:
    
     INFO: trying to register non-static key.
     the code is fine but needs lockdep annotation.
     turning off the locking correctness validator.
     CPU: 1 PID: 4099 Comm: a.out Not tainted 4.12.0-rc6+ #9
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
     Call Trace:
      __dump_stack lib/dump_stack.c:16
      dump_stack+0x292/0x395 lib/dump_stack.c:52
      register_lock_class+0x717/0x1aa0 kernel/locking/lockdep.c:755
      ? 0xffffffffa0000000
      __lock_acquire+0x269/0x3690 kernel/locking/lockdep.c:3255
      lock_acquire+0x22d/0x560 kernel/locking/lockdep.c:3855
      __raw_spin_lock_bh ./include/linux/spinlock_api_smp.h:135
      _raw_spin_lock_bh+0x36/0x50 kernel/locking/spinlock.c:175
      spin_lock_bh ./include/linux/spinlock.h:304
      ip_mc_clear_src+0x27/0x1e0 net/ipv4/igmp.c:2076
      igmpv3_clear_delrec+0xee/0x4f0 net/ipv4/igmp.c:1194
      ip_mc_destroy_dev+0x4e/0x190 net/ipv4/igmp.c:1736
    
    We miss a spin_lock_init() in igmpv3_add_delrec(), probably
    because previously we never use it on this code path. Since
    we already unlink it from the global mc_tomb list, it is
    probably safe not to acquire this spinlock here. It does not
    harm to have it although, to avoid conditional locking.
    
    Fixes: c38b7d327aaf ("igmp: acquire pmc lock for ip_mc_clear_src()")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 059686754c1870f182ce55495b81728763732d48 ......
	 orig commit -> 3500cd73dff48f28f4ba80c171c4c80034d40f76 ......
checking 78b24ab695abafe4c5754a661a591b841661df8b ......
	 orig commit -> 53acd76ce571e3b71f9205f2d49ab285a9f1aad8 ......
checking 9854e58659908b4923d95b0fe3cd1db7ea62fe39 ......
	 orig commit -> c3164d2fc48fd4fa0477ab658b644559c3fe9073 ......
		 c3164d2fc48fd4fa0477ab658b644559c3fe9073 has problem. Fixes commit -> e58edaa4863583b54409444f11b4f80dff0af1cd
5165674ff5022d8a76f3147d75cab1fecd529497
commit 8013d43a0bf15cd9bf17acb827ae9f8d1b720708
Author: Talat Batheesh <talatb@mellanox.com>
Date:   Sun Jan 21 05:30:42 2018 +0200

    net/mlx5e: Fix fixpoint divide exception in mlx5e_am_stats_compare
    
    [ Upstream commit e58edaa4863583b54409444f11b4f80dff0af1cd ]
    
    Helmut reported a bug about division by zero while
    running traffic and doing physical cable pull test.
    
    When the cable unplugged the ppms become zero, so when
    dividing the current ppms by the previous ppms in the
    next dim iteration there is division by zero.
    
    This patch prevent this division for both ppms and epms.
    
    Fixes: c3164d2fc48f ("net/mlx5e: Added BW check for DIM decision mechanism")
    Reported-by: Helmut Grauer <helmut.grauer@de.ibm.com>
    Signed-off-by: Talat Batheesh <talatb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
commit 8013d43a0bf15cd9bf17acb827ae9f8d1b720708
Author: Talat Batheesh <talatb@mellanox.com>
Date:   Sun Jan 21 05:30:42 2018 +0200

    net/mlx5e: Fix fixpoint divide exception in mlx5e_am_stats_compare
    
    [ Upstream commit e58edaa4863583b54409444f11b4f80dff0af1cd ]
    
    Helmut reported a bug about division by zero while
    running traffic and doing physical cable pull test.
    
    When the cable unplugged the ppms become zero, so when
    dividing the current ppms by the previous ppms in the
    next dim iteration there is division by zero.
    
    This patch prevent this division for both ppms and epms.
    
    Fixes: c3164d2fc48f ("net/mlx5e: Added BW check for DIM decision mechanism")
    Reported-by: Helmut Grauer <helmut.grauer@de.ibm.com>
    Signed-off-by: Talat Batheesh <talatb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 57360bc3c7a6fc9c7422e422508bf77166a05028 ......
	 orig commit -> 343eba69c6968190d8654b857aea952fed9a6749 ......
checking bb566ce3a60eded40ae4a3421a59c0f5f1c7ef20 ......
	 orig commit -> f146e872eb12ebbe92d8e583b2637e0741440db3 ......
checking 8cda426a7cfa61b902c4335d1d1ab945bbcb41b6 ......
	 orig commit -> 581409dacc9176b0de1f6c4ca8d66e13aa8e1b29 ......
checking c6d4ff85722b25877af48b311eda944dcc8c6feb ......
	 orig commit -> f186ce61bb8235d80068c390dc2aad7ca427a4c2 ......
checking bb84290cd2967a5774a97fa44381713e20a7924c ......
	 orig commit -> defbcf2decc903a28d8398aa477b6881e711e3ea ......
checking 386ed38f0f28b5dffe11c5665997882115fb788e ......
	 orig commit -> 097d3c9508dc58286344e4a22b300098cf0c1566 ......
checking b5cc68e0c1905a3cb94677a4d1b3e03f65881231 ......
	 orig commit -> 0eed9cf58446b28b233388b7f224cbca268b6986 ......
checking fd9b13e6c175b01d61f0f234502919c6c40e4dd2 ......
	 orig commit -> dd0da17b209ed91f39872766634ca967c170ada1 ......
checking d2f459e3feb0f73d2e95ab7892adcf22f21fe9ef ......
	 orig commit -> c28294b941232931fbd714099798eb7aa7e865d7 ......
checking 98184bbb8daea6af32208d63831e66023db4bb58 ......
	 orig commit -> 00ea1ceebe0d9f2dc1cc2b7bd575a00100c27869 ......

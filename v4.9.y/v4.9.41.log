Check from v4.9.41 to v4.9.42
Commit count: 95
checking 4c666b0d9070a095e945387bd674476820f79528 ......
checking f9636c9bdd5828f29cdfaf620e3a424a5f8cc221 ......
	 orig commit -> 0a94efb5acbb6980d7c9ab604372d93cd507e4d8 ......
		 0a94efb5acbb6980d7c9ab604372d93cd507e4d8 has problem. Fixes commit -> fbf1c41fc0f4d3574ac2377245efd666c1fa3075
commit ec552ece1f25e8ecadf0afafe87ce314d13dc3e7
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sun Sep 3 01:18:41 2017 +0100

    workqueue: Fix flag collision
    
    commit fbf1c41fc0f4d3574ac2377245efd666c1fa3075 upstream.
    
    Commit 0a94efb5acbb ("workqueue: implicit ordered attribute should be
    overridable") introduced a __WQ_ORDERED_EXPLICIT flag but gave it the
    same value as __WQ_LEGACY.  I don't believe these were intended to
    mean the same thing, so renumber __WQ_ORDERED_EXPLICIT.
    
    Fixes: 0a94efb5acbb ("workqueue: implicit ordered attribute should be ...")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking c3c94716855a1601b39c2ff587812906ea8b451c ......
	 orig commit -> 7b9a88a390dacb37b051a7b09b9a08f546edf5eb ......
checking ef09c9ff343122a0b245416066992d096416ff19 ......
	 orig commit -> a5cb659bbc1c8644efa0c3138a757a1e432a4880 ......
checking f102bb7164c9020e12662998f0fd99c3be72d4f6 ......
	 orig commit -> 0a28cfd51e17f4f0a056bcf66bfbe492c3b99f38 ......
checking a69f0d54fdc96914a041039c22e46da8e95c4d22 ......
	 orig commit -> 5bae8c031053c69b4aa74b7f1ba15d4ec8426208 ......
checking 22cccef1fc709cae4d78c47c7371acf24f328037 ......
	 orig commit -> f073bdc51771f5a5c7a8d1191bfc3ae371d44de7 ......
checking 916a05b90d8322f38ea133feb3a194617e507c3c ......
	 orig commit -> 2d39b3cd34e6d323720d4c61bd714f5ae202c022 ......
checking d12824c897a2dea1b8b794e28b4b88f9cd197d28 ......
	 orig commit -> da0510c47519fe0999cffe316e1d370e29f952be ......
checking c736011052cf2fdc6e310195ce0fd0805ddbb0b6 ......
	 orig commit -> bb1107f7c6052c863692a41f78c000db792334bf ......
checking bebbe845cb50ab4b499bff2d0bbe2fef09de86af ......
	 orig commit -> 270c8cf1cacc69cb8d99dea812f06067a45e4609 ......
checking e6d53f5f8c0311032bf518d253522b73c96416f3 ......
	 orig commit -> 6bf6b0aa3da84a3d9126919a94c49c0fb7ee2fb3 ......
checking 952d07ac1e6e9e59267d69341c2e820710eaa718 ......
	 orig commit -> 25b4acfc7de0fc4da3bfea3a316f7282c6fbde81 ......
checking 44d52834efb3d23e73a014afd8b22cfedb9a0eae ......
	 orig commit -> 3bcf96e0183f5c863657cb6ae9adad307a0f6071 ......
checking 984922f2c897f669e994ad851eb799d8348f92fd ......
	 orig commit -> 3116d37651d77125bf50f81f859b1278e02ccce6 ......
checking 1e9e71782f3462d5aecb0720d26298253bdbeca7 ......
	 orig commit -> 661ccdc1a95f18ab6c1373322fde09afd5b90a1f ......
checking 61cf0afe12eb0e5417b0c39087001412ca470d32 ......
	 orig commit -> 71d3f6ef7f5af38dea2975ec5715c88bae92e92d ......
checking 2a60965a0ef7e92325c4e72d8965c4b8c8fdc429 ......
	 orig commit -> c7702b8c22712a06080e10f1d2dee1a133ec8809 ......
checking 99eb27d6182d0d90c7f0786a1fa0147d75c25684 ......
	 orig commit -> 318fa46cc60d37fec1e87dbf03a82aca0f5ce695 ......
		 318fa46cc60d37fec1e87dbf03a82aca0f5ce695 has problem. Fixes commit -> c07c1a0f68d0f2f7ca9aff924e2772526027b019
commit 503c394139c94e263401ea59b1553e1916e110f2
Author: Andrzej Pietrasiewicz <andrzej.p@samsung.com>
Date:   Fri Sep 29 09:32:53 2017 +0200

    clk: samsung: Fix m2m scaler clock on Exynos542x
    
    [ Upstream commit c07c1a0f68d0f2f7ca9aff924e2772526027b019 ]
    
    The TOP "aclk400_mscl" clock should be kept enabled all the time
    to allow proper access to power management control for MSC power
    domain and devices that are a part of it. This change is required
    for the scaler to work properly after domain power on/off sequence.
    
    Fixes: 318fa46cc60d ("clk/samsung: exynos542x: mark some clocks as critical")
    Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking ee96797b78cacf08b0d3d5ca72f725bd4e371c20 ......
	 orig commit -> b007f09072ca8afa118ade333e717ba443e8d807 ......
checking 0bbbbaef6aa0df22c4bafd6db231b173697483ee ......
	 orig commit -> 811a919135b980bac8009d042acdccf10dc1ef5e ......
checking 9acfb313849e44e956a393b91a63386f7ef1df97 ......
	 orig commit -> cc31d43b4154ad5a7d8aa5543255a93b7e89edc2 ......
checking 2e2a390b7f6784d2409656f5ccf3433f4ec3e18d ......
	 orig commit -> 02c5c03283c52157d336abf5e44ffcda10579fbf ......
checking c77512d671027c613db117dd1b45bd983c3a9954 ......
	 orig commit -> 9620ca90115d4bd700f05862d3b210a266a66efe ......
checking f897e9ae07c428a04cf4fae0150a3d148ed1b09a ......
	 orig commit -> fac69d0efad08fc15e4dbfc116830782acc0dc9a ......
checking 1042bd47ddfbe4cbb7b91156317752fec43f2d46 ......
	 orig commit -> f5992b72ebe0dde488fa8f706b887194020c66fc ......
		 f5992b72ebe0dde488fa8f706b887194020c66fc has problem. Fixes commit -> d89a2adb8bfe6f8949ff389acdb9fa298b6e8e12
commit d979320029f97adc7c2112d85fc626a71fe2366a
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Thu May 3 20:04:27 2018 -0400

    tg3: Fix vunmap() BUG_ON() triggered from tg3_free_consistent().
    
    [ Upstream commit d89a2adb8bfe6f8949ff389acdb9fa298b6e8e12 ]
    
    tg3_free_consistent() calls dma_free_coherent() to free tp->hw_stats
    under spinlock and can trigger BUG_ON() in vunmap() because vunmap()
    may sleep.  Fix it by removing the spinlock and relying on the
    TG3_FLAG_INIT_COMPLETE flag to prevent race conditions between
    tg3_get_stats64() and tg3_free_consistent().  TG3_FLAG_INIT_COMPLETE
    is always cleared under tp->lock before tg3_free_consistent()
    and therefore tg3_get_stats64() can safely access tp->hw_stats
    under tp->lock if TG3_FLAG_INIT_COMPLETE is set.
    
    Fixes: f5992b72ebe0 ("tg3: Fix race condition in tg3_get_stats64().")
    Reported-by: Zumeng Chen <zumeng.chen@gmail.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5f7eeee7940e256d786b883aa5b37188a05a156b ......
	 orig commit -> 5ca7d1ca77dc23934504b95a96d2660d345f83c2 ......
checking bfe384ed452af92f390813e0fb041a5a7631a3ab ......
	 orig commit -> 0f1f9cbc04dbb3cc310f70a11cba0cf1f2109d9c ......
checking 2d4fef7f4102ec8c9884a2600fd16218ccce7c1a ......
	 orig commit -> 978d3639fd13d987950e4ce85c8737ae92154b2c ......
checking b87145215abe415dc3a31d0ff0e187117fe8e1b6 ......
	 orig commit -> 93be2b74279c15c2844684b1a027fdc71dd5d9bf ......
checking b9d68cdce72d49c06c24fb2f5bee5673557b33ac ......
	 orig commit -> 0ede1c401332173ab0693121dc6cde04a4dbf131 ......
checking bfafa56e6c675adaa4942c4259baacc9650073ff ......
	 orig commit -> 9d53caec84c7c5700e7c1ed744ea584fff55f9ac ......
checking 816843a257c77828c389cf9cce2170ef057bfc1b ......
	 orig commit -> dfa523ae9f2542bee4cddaea37b3be3e157f6e6b ......
checking 38e71eabb8f71db17ce1aa846fb31abc936dcefa ......
	 orig commit -> 7ad813f208533cebfcc32d3d7474dc1677d1b09a ......
		 7ad813f208533cebfcc32d3d7474dc1677d1b09a has problem. Fixes commit -> ebc8254aeae34226d0bc8fda309fd9790d4dccfe
commit a6e51fda71a205fbd8f7b98da799c46e563c3db1
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Aug 30 17:49:29 2017 -0700

    Revert "net: phy: Correctly process PHY_HALTED in phy_stop_machine()"
    
    
    [ Upstream commit ebc8254aeae34226d0bc8fda309fd9790d4dccfe ]
    
    This reverts commit 7ad813f208533cebfcc32d3d7474dc1677d1b09a ("net: phy:
    Correctly process PHY_HALTED in phy_stop_machine()") because it is
    creating the possibility for a NULL pointer dereference.
    
    David Daney provide the following call trace and diagram of events:
    
    When ndo_stop() is called we call:
    
     phy_disconnect()
        +---> phy_stop_interrupts() implies: phydev->irq = PHY_POLL;
        +---> phy_stop_machine()
        |      +---> phy_state_machine()
        |              +----> queue_delayed_work(): Work queued.
        +--->phy_detach() implies: phydev->attached_dev = NULL;
    
    Now at a later time the queued work does:
    
     phy_state_machine()
        +---->netif_carrier_off(phydev->attached_dev): Oh no! It is NULL:
    
     CPU 12 Unable to handle kernel paging request at virtual address
    0000000000000048, epc == ffffffff80de37ec, ra == ffffffff80c7c
    Oops[#1]:
    CPU: 12 PID: 1502 Comm: kworker/12:1 Not tainted 4.9.43-Cavium-Octeon+ #1
    Workqueue: events_power_efficient phy_state_machine
    task: 80000004021ed100 task.stack: 8000000409d70000
    $ 0   : 0000000000000000 ffffffff84720060 0000000000000048 0000000000000004
    $ 4   : 0000000000000000 0000000000000001 0000000000000004 0000000000000000
    $ 8   : 0000000000000000 0000000000000000 00000000ffff98f3 0000000000000000
    $12   : 8000000409d73fe0 0000000000009c00 ffffffff846547c8 000000000000af3b
    $16   : 80000004096bab68 80000004096babd0 0000000000000000 80000004096ba800
    $20   : 0000000000000000 0000000000000000 ffffffff81090000 0000000000000008
    $24   : 0000000000000061 ffffffff808637b0
    $28   : 8000000409d70000 8000000409d73cf0 80000000271bd300 ffffffff80c7804c
    Hi    : 000000000000002a
    Lo    : 000000000000003f
    epc   : ffffffff80de37ec netif_carrier_off+0xc/0x58
    ra    : ffffffff80c7804c phy_state_machine+0x48c/0x4f8
    Status: 14009ce3        KX SX UX KERNEL EXL IE
    Cause : 00800008 (ExcCode 02)
    BadVA : 0000000000000048
    PrId  : 000d9501 (Cavium Octeon III)
    Modules linked in:
    Process kworker/12:1 (pid: 1502, threadinfo=8000000409d70000,
    task=80000004021ed100, tls=0000000000000000)
    Stack : 8000000409a54000 80000004096bab68 80000000271bd300 80000000271c1e00
            0000000000000000 ffffffff808a1708 8000000409a54000 80000000271bd300
            80000000271bd320 8000000409a54030 ffffffff80ff0f00 0000000000000001
            ffffffff81090000 ffffffff808a1ac0 8000000402182080 ffffffff84650000
            8000000402182080 ffffffff84650000 ffffffff80ff0000 8000000409a54000
            ffffffff808a1970 0000000000000000 80000004099e8000 8000000402099240
            0000000000000000 ffffffff808a8598 0000000000000000 8000000408eeeb00
            8000000409a54000 00000000810a1d00 0000000000000000 8000000409d73de8
            8000000409d73de8 0000000000000088 000000000c009c00 8000000409d73e08
            8000000409d73e08 8000000402182080 ffffffff808a84d0 8000000402182080
            ...
    Call Trace:
    [<ffffffff80de37ec>] netif_carrier_off+0xc/0x58
    [<ffffffff80c7804c>] phy_state_machine+0x48c/0x4f8
    [<ffffffff808a1708>] process_one_work+0x158/0x368
    [<ffffffff808a1ac0>] worker_thread+0x150/0x4c0
    [<ffffffff808a8598>] kthread+0xc8/0xe0
    [<ffffffff808617f0>] ret_from_kernel_thread+0x14/0x1c
    
    The original motivation for this change originated from Marc Gonzales
    indicating that his network driver did not have its adjust_link callback
    executing with phydev->link = 0 while he was expecting it.
    
    PHYLIB has never made any such guarantees ever because phy_stop() merely just
    tells the workqueue to move into PHY_HALTED state which will happen
    asynchronously.
    
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reported-by: David Daney <ddaney.cavm@gmail.com>
    Fixes: 7ad813f20853 ("net: phy: Correctly process PHY_HALTED in phy_stop_machine()")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 33e25b2168dda8b000bc2951762c86fcbc23229b ......
	 orig commit -> f08c39ed0bfb503c7b3e013cd40d036ce6a0941a ......
checking 862ade9a4383fc336d20036a085a13a196e686ce ......
	 orig commit -> d439c84509a510e864fdc6166c760482cd03fc57 ......
checking d7049799668a206eb2a97024c91fc822e0a8a5c6 ......
	 orig commit -> 0242f4a0bb03906010bbf80495512be00494a0ef ......
checking d19d0ac684e505200aad8db44271acbd0ab35bd1 ......
	 orig commit -> 219c81f7d1d5a89656cb3b53d3b4e11e93608d80 ......
checking fca84d617f77ef8b5e52ef4db057971e96eee25a ......
	 orig commit -> dc798b4cc0f2a06e7ad7d522403de274b86a0a6f ......
checking df32d08293ea7db4fe7e030bd47c71b7f63fc05f ......
	 orig commit -> 6b84202c946cd3da3a8daa92c682510e9ed80321 ......
checking cc6f1486f2cb053a647db3a51cba5fbeabaa4a3f ......
	 orig commit -> b1f5bfc27a19f214006b9b4db7b9126df2dfdf5a ......
		 b1f5bfc27a19f214006b9b4db7b9126df2dfdf5a has problem. Fixes commit -> 6b84202c946cd3da3a8daa92c682510e9ed80321
commit df32d08293ea7db4fe7e030bd47c71b7f63fc05f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Jul 26 16:24:59 2017 +0800

    sctp: fix the check for _sctp_walk_params and _sctp_walk_errors
    
    
    [ Upstream commit 6b84202c946cd3da3a8daa92c682510e9ed80321 ]
    
    Commit b1f5bfc27a19 ("sctp: don't dereference ptr before leaving
    _sctp_walk_{params, errors}()") tried to fix the issue that it
    may overstep the chunk end for _sctp_walk_{params, errors} with
    'chunk_end > offset(length) + sizeof(length)'.
    
    But it introduced a side effect: When processing INIT, it verifies
    the chunks with 'param.v == chunk_end' after iterating all params
    by sctp_walk_params(). With the check 'chunk_end > offset(length)
    + sizeof(length)', it would return when the last param is not yet
    accessed. Because the last param usually is fwdtsn supported param
    whose size is 4 and 'chunk_end == offset(length) + sizeof(length)'
    
    This is a badly issue even causing sctp couldn't process 4-shakes.
    Client would always get abort when connecting to server, due to
    the failure of INIT chunk verification on server.
    
    The patch is to use 'chunk_end <= offset(length) + sizeof(length)'
    instead of 'chunk_end < offset(length) + sizeof(length)' for both
    _sctp_walk_params and _sctp_walk_errors.
    
    Fixes: b1f5bfc27a19 ("sctp: don't dereference ptr before leaving _sctp_walk_{params, errors}()")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking bb21d2e75378ddda86775315e39344be624f9987 ......
	 orig commit -> e90ce2fc27cad7e7b1e72b9e66201a7a4c124c2b ......
checking 4d938b6fcb90c5d19ce7d23581d9bccc7ce70724 ......
	 orig commit -> b7953d3c0e30a5fc944f6b7bd0bcceb0794bcd85 ......
checking 9ffa6727f5712b8774b265b0a3c020acb9da726e ......
	 orig commit -> 0c2232b0a71db0ac1d22f751aa1ac0cadb950fd2 ......
checking c0c8688f0debfef57af1f3a48cee4027ef7f50ab ......
	 orig commit -> 4813497b537c6208c90d6cbecac5072d347de900 ......
checking 23a91c8ab682b841a18a88cb1d5332f20f1ec219 ......
	 orig commit -> afce615aaabfbaad02550e75c0bec106dafa1adf ......
checking 47f3bf6e31164a0a3b77746d30bf9b3ac9664b03 ......
	 orig commit -> c800aaf8d869f2b9b47b10c5c312fe19f0a94042 ......
checking d53ff3816d94c841f7a7f1bf68505a2abb06757a ......
	 orig commit -> 69ec932e364b1ba9c3a2085fe96b76c8a3f71e7c ......
checking 59e76ed17981aa9ee8da4496d13edf42ec29958c ......
	 orig commit -> 9476d393667968b4a02afbe9d35a3558482b943e ......
checking cda2bc91baf7b6849733145331726a1364f20512 ......
	 orig commit -> 153711f9421be5dbc973dc57a4109dc9d54c89b1 ......
checking 0c47f11bc4a5ddd37962b2ba5a4d53f6caeeaec1 ......
	 orig commit -> 8799a221f5944a7d74516ecf46d58c28ec1d1f75 ......
checking 5a2d511a95ccaa164005991944d7564e2e21bca2 ......
	 orig commit -> be35e8c516c1915a3035d266a2015b41f73ba3f9 ......
checking 4a2ffe1707e3787f93a7d0ff2dec682a57ba25ad ......
	 orig commit -> 6399f1fae4ec29fab5ec76070435555e256ca3a6 ......
		 6399f1fae4ec29fab5ec76070435555e256ca3a6 has problem. Fixes commit -> 3de33e1ba0506723ab25734e098cf280ecc34756
commit dccb31be7ef8984b8fa636b65f74b662db6b3cb3
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Fri Aug 18 14:40:53 2017 +0200

    ipv6: accept 64k - 1 packet length in ip6_find_1stfragopt()
    
    
    [ Upstream commit 3de33e1ba0506723ab25734e098cf280ecc34756 ]
    
    A packet length of exactly IPV6_MAXPLEN is allowed, we should
    refuse parsing options only if the size is 64KiB or more.
    
    While at it, remove one extra variable and one assignment which
    were also introduced by the commit that introduced the size
    check. Checking the sum 'offset + len' and only later adding
    'len' to 'offset' doesn't provide any advantage over directly
    summing to 'offset' and checking it.
    
    Fixes: 6399f1fae4ec ("ipv6: avoid overflow of offset in ip6_find_1stfragopt")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0b83249a57adc1afd19c7e4818731d61d3a8ce7e ......
	 orig commit -> 63679112c536289826fec61c917621de95ba2ade ......
checking a62bc8d336e3e93538c3c5dd64a36db5efcf2fa8 ......
	 orig commit -> 18bcf2907df935981266532e1e0d052aff2e6fae ......
checking 0cd73c42b7a2d9ab96632ccb895ddb521060c7a9 ......
	 orig commit -> 32984565574da7ed3afa10647bb4020d7a9e6c93 ......
checking 2e6b237dc03be379435de3c3f19841fe38096e51 ......
	 orig commit -> 1d3648eb5d1fe9ed3d095ed8fa19ad11ca4c8bc0 ......
checking 0c0ede36b9e0a6b35c48c14203432c8ec0619b12 ......
	 orig commit -> 79135b89b8af304456bd67916b80116ddf03d7b6 ......
checking ec789686d79b5d95c1623d2bbd6f0bb8657f6dcd ......
	 orig commit -> f19fd62dafaf1ed6cf615dba655b82fa9df59074 ......
checking 73520d3814b6fd37483dc79e578906301122bbb3 ......
	 orig commit -> 4aea287e90dd61a48268ff2994b56f9799441b62 ......
checking 12d17d78e3f74b5022f61eee7d6de082e472a401 ......
	 orig commit -> 6fb05e0dd32e566facb96ea61a48c7488daa5ac3 ......
checking 3a63729427acd0ee9f6265d20cf3b9890e8d7a96 ......
	 orig commit -> 17024ad0a0fdfcfe53043afb969b813d3e020c21 ......
checking 0f442c5b2e4ac0b65027ed3374462f1c38675f7e ......
	 orig commit -> 15d3042a937c13f5d9244241c7a9c8416ff6e82a ......
checking c14e327bee7018659e0b64db265e19f62cc2bd72 ......
	 orig commit -> 9f5039ba440e499d85c29b1ddbc3cbc9dc90e44b ......
checking e92add299fee14a3042960d723e074e8bd5c8412 ......
	 orig commit -> 73a47a9bb3e2c4a9c553c72456e63ab991b1a4d9 ......
checking baf4ad0e51620f88216a6b11cdc868ae861983a9 ......
	 orig commit -> 852ff5fea9eb6a9799f1881d6df2cd69a9e6eed5 ......
checking bdabf097f05b9ef78c58622e3dfdec39b11a2ee5 ......
	 orig commit -> 25cdda95fda78d22d44157da15aa7ea34be3c804 ......
	 orig commit -> bb048357dad6d604520c91586334c9c230366a14 ......
checking 733d7ab6c5bccef9a644afdcffc1e2369f0d5b6e ......
	 orig commit -> da05d52d2f0f6bd61094a0cd045fed94bf7d673a ......
checking 4f3544816937b0b59f81838295f018a2367e7e53 ......
	 orig commit -> 985333b0eef8603b02181c4ec0a722b82be9642d ......
checking ff603e017bee376dbc730924bbf4e554a719100f ......
	 orig commit -> 8d4514173211586c6238629b1ef1e071927735f5 ......
checking 12353a00df25d5c8da8de8c60b705e5ccc436cfe ......
	 orig commit -> aec51758ce10a9c847a62a48a168f8c804c6e053 ......
checking 0814c3a9447ba284ef91b2d27755bf5a4514ca64 ......
	 orig commit -> fcf5ea10992fbac3c7473a1db33d56a139333cd1 ......
checking b680e22fca767103ea4f86e21a8cca927f9d1ca7 ......
	 orig commit -> df1e76f28ffe87d1b065eecab2d0fbb89e6bdee5 ......
checking be5c6efc996e439205c298331c755f007f66484b ......
	 orig commit -> efe6f241602cb61466895f6816b8ea6b90f04d4e ......
checking 03ebdd1eb95afc3d4524540ecb1226567e655e5e ......
	 orig commit -> 3db40c312c2c1eb2187c5731102fa8ff380e6e40 ......
checking 8164692a2f66ecc08bcdc42955b6ce62d47637ec ......
	 orig commit -> cd63f3cf1d59b7ad8419eba1cac8f9126e79cc43 ......
checking 9ef8b23b94b98ec9b270e6fca5eadb97c96d809a ......
	 orig commit -> 34f41c0316ed52b0b44542491d89278efdaa70e4 ......
checking 7b95b74563627b95da435f5c120af63451e95380 ......
	 orig commit -> adb1fe9ae2ee6ef6bc10f3d5a588020e7664dfa7 ......
checking 0c609d3e1fbdc82ca9b628835b8480de98b7f448 ......
	 orig commit -> 337c017ccdf2653d0040099433fc1a2b1beb5926 ......
checking 650c763ea5ea68c136334f0e51ed2cd3938e09f5 ......
	 orig commit -> b1cd2e34c69a2f3988786af451b6e17967c293a0 ......
checking 69f15fff03e886e306fb4d7218403d1cb04e4840 ......
	 orig commit -> 5694785cf09bf0e7bd8e5f62361ea34fa162a4a0 ......
checking c531a24057acb51fe60450c48c7f2a7bb80178f1 ......
	 orig commit -> 3f3c371421e601fa93b6cb7fb52da9ad59ec90b4 ......
checking 45a636ec1849f842feb0716c7e25176a8b53af69 ......
	 orig commit -> 89affbf5d9ebb15c6460596822e8857ea2f9e735 ......
checking 5a1eef71aa2aaa46892a07a0cfc94dd38d24b040 ......
	 orig commit -> 3ea277194daaeaa84ce75180ec7c7a2075027a68 ......
checking 943281eb4ecfd5485abf41338c967d9ebf168ead ......
	 orig commit -> 773dc118756b1f38766063e90e582016be868f09 ......
checking 1f32e67adac40508e9c8753151effbe0bbf06bdb ......
	 orig commit -> e44bb0cbdc88686c21e2175a990b40bf6db5d005 ......
checking 347be00b56f72a5a6759930dc7269cb3b1fbbad6 ......
	 orig commit -> 7a1e3f143176e8ebdb2f5a9b3b47abc18b879d90 ......
checking f7d3e54fb40cfc6f829b8f8ad3aab026714f2ffc ......
	 orig commit -> fd40559c8657418385e42f797e0b04bfc0add748 ......
checking f5214eb4baf87b0134acf98c29150071fa3b815c ......
	 orig commit -> 5f5d03143de5e0c593da4ab18fc6393c2815e108 ......
checking de8c33290f1c8fdd037b6e3d43ea888928f21e8c ......
	 orig commit -> 0b0f934e92a8eaed2e6c48a50eae6f84661f74f3 ......
checking 61a0adbfaad70713c45964e48b72e5e5b6ef30b1 ......
	 orig commit -> 5c0338c68706be53b3dc472e4308961c36e4ece1 ......
		 5c0338c68706be53b3dc472e4308961c36e4ece1 has problem. Fixes commit -> 0a94efb5acbb6980d7c9ab604372d93cd507e4d8
commit f9636c9bdd5828f29cdfaf620e3a424a5f8cc221
Author: Tejun Heo <tj@kernel.org>
Date:   Sun Jul 23 08:36:15 2017 -0400

    workqueue: implicit ordered attribute should be overridable
    
    commit 0a94efb5acbb6980d7c9ab604372d93cd507e4d8 upstream.
    
    5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1 to be
    ordered") automatically enabled ordered attribute for unbound
    workqueues w/ max_active == 1.  Because ordered workqueues reject
    max_active and some attribute changes, this implicit ordered mode
    broke cases where the user creates an unbound workqueue w/ max_active
    == 1 and later explicitly changes the related attributes.
    
    This patch distinguishes explicit and implicit ordered setting and
    overrides from attribute changes if implict.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Fixes: 5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1 to be ordered")
    Cc: Holger Hoffstätte <holger@applied-asynchrony.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 804b1a9f0aeabc002b162c5b1861d65e1316a53a ......
	 orig commit -> 59a5e266c3f5c1567508888dd61a45b86daed0fa ......
checking 445ee6cdd91ea6b2f65653ca05f3e951d8458ebc ......
	 orig commit -> 3c74541777302eec43a0d1327c4d58b8659a776b ......
checking 4a99eac8d2b3f5e45336894ac16caa87f67d2199 ......
	 orig commit -> 7af608e4f9530372aec6e940552bf76595f2e265 ......
checking 5d23e4f3a333639d36723ac9fe027749e96c9844 ......
	 orig commit -> 13d57093c141db2036364d6be35e394fc5b64728 ......

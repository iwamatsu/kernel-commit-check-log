Check from v4.9.149 to v4.9.150
Commit count: 65
checking df6062688e387419f0e10ee1bef2e9cfd7795399 ......
checking b54c67cec5fa47a442bdfd5d38f67afd17f11eea ......
	 orig commit -> 38355a5f9a22bfa5bd5b1bb79805aca39fa53729 ......
checking 484cb974027ad7738cd222f82ebb7e526a5f6e1f ......
	 orig commit -> 2b02a05bdc3a62d36e0d0b015351897109e25991 ......
checking 8abd786766ffae89c3a1436ba302c58dc4df41b0 ......
	 orig commit -> ed54ffbe554f0902689fd6d1712bbacbacd11376 ......
checking 8fcfb8fc0f7cabdeca8e1c6cb2773e1dc2e66039 ......
	 orig commit -> ec5b5ad6e272d8d6b92d1007f79574919862a2d2 ......
checking 49edc8313def93b56395caf09ddd56dac5843b39 ......
	 orig commit -> fdd669684655c07dacbdb0d753fd13833de69a33 ......
checking 6fa22a7d5ef95048c90f6cd5f9ad7168cf976458 ......
	 orig commit -> 3c1392d4c49962a31874af14ae9ff289cb2b3851 ......
checking da4b7ae4caff1cba6a1d40e99f34ab9955270068 ......
	 orig commit -> 3569dd07aaad71920c5ea4da2d5cc9a167c1ffd4 ......
checking 093392ecdb5ace49d26a9174ca6e8efeec1cb4bc ......
	 orig commit -> e48d8ed9c6193502d849b35767fd18e20bbd7ba2 ......
checking 00f0194cfeb90e5c16500bfe4b37f40cbc085e3e ......
	 orig commit -> 574d356b7a02c7e1b01a1d9cba8a26b3c2888f45 ......
		 574d356b7a02c7e1b01a1d9cba8a26b3c2888f45 has problem. Fixes commit -> bb06c388fa20ae24cfe80c52488de718a7e3a53f
commit b5d6f47074890c8c02471e5492c5b4d057ce230f
Author: zhengbin <zhengbin13@huawei.com>
Date:   Wed Mar 13 16:01:37 2019 +0800

    9p/net: fix memory leak in p9_client_create
    
    commit bb06c388fa20ae24cfe80c52488de718a7e3a53f upstream.
    
    If msize is less than 4096, we should close and put trans, destroy
    tagpool, not just free client. This patch fixes that.
    
    Link: http://lkml.kernel.org/m/1552464097-142659-1-git-send-email-zhengbin13@huawei.com
    Cc: stable@vger.kernel.org
    Fixes: 574d356b7a02 ("9p/net: put a lower bound on msize")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: zhengbin <zhengbin13@huawei.com>
    Signed-off-by: Dominique Martinet <dominique.martinet@cea.fr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 49edda5952ae2ba72a78dbfd24946f0d91370ccd ......
	 orig commit -> e1c3743e1a20647c53b719dbf28b48f45d23f2cd ......
		 e1c3743e1a20647c53b719dbf28b48f45d23f2cd has problem. Fixes commit -> 897bc3df8c5aebb54c32d831f917592e873d0559
commit 4d8b1fd22eacd0ba4ae9a9c547094690b4487b65
Author: Breno Leitao <leitao@debian.org>
Date:   Mon Apr 8 16:32:38 2019 +1000

    powerpc/tm: Limit TM code inside PPC_TRANSACTIONAL_MEM
    
    [ Upstream commit 897bc3df8c5aebb54c32d831f917592e873d0559 ]
    
    Commit e1c3743e1a20 ("powerpc/tm: Set MSR[TS] just prior to recheckpoint")
    moved a code block around and this block uses a 'msr' variable outside of
    the CONFIG_PPC_TRANSACTIONAL_MEM, however the 'msr' variable is declared
    inside a CONFIG_PPC_TRANSACTIONAL_MEM block, causing a possible error when
    CONFIG_PPC_TRANSACTION_MEM is not defined.
    
            error: 'msr' undeclared (first use in this function)
    
    This is not causing a compilation error in the mainline kernel, because
    'msr' is being used as an argument of MSR_TM_ACTIVE(), which is defined as
    the following when CONFIG_PPC_TRANSACTIONAL_MEM is *not* set:
    
            #define MSR_TM_ACTIVE(x) 0
    
    This patch just fixes this issue avoiding the 'msr' variable usage outside
    the CONFIG_PPC_TRANSACTIONAL_MEM block, avoiding trusting in the
    MSR_TM_ACTIVE() definition.
    
    Cc: stable@vger.kernel.org
    Reported-by: Christoph Biedl <linux-kernel.bfrz@manchmal.in-ulm.de>
    Fixes: e1c3743e1a20 ("powerpc/tm: Set MSR[TS] just prior to recheckpoint")
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 0e36c79c6c008971f4ad73034f3f5e39d5e9482a ......
	 orig commit -> 8ea3819c0bbef57a51d8abe579e211033e861677 ......
checking b854c7b3c683bbf60a0ff6a5d950e89d416d07ae ......
	 orig commit -> 2d29f6b96d8f80322ed2dd895bca590491c38d34 ......
checking 02b03b2c3059483156ecaa0393f040cdbe8bb1ac ......
	 orig commit -> 6ff9b09e00a441599f3aacdf577254455a048bc9 ......
checking 579d0aacc4f58a8aa83d5762895ed80dc6775bfc ......
	 orig commit -> d47b41aceeadc6b58abc9c7c6485bef7cfb75636 ......
checking 0f090eb97008318eb3dbf53aa4cde990f547ac69 ......
	 orig commit -> c0174726c3976e67da8649ac62cae43220ae173a ......
checking 4e28e1e18dbdcb3e351962f0c09c03e2a58dba44 ......
	 orig commit -> 23851e978f31eda8b2d01bd410d3026659ca06c7 ......
checking 5dbe8ebf8a9c7b0014e1bfcc1a2159b212767ff5 ......
	 orig commit -> b982896cdb6e6a6b89d86dfb39df489d9df51e14 ......
checking 46f5376ca672326bd088149ffaff256c5354b09c ......
	 orig commit -> cbb2ebf70daf7f7d97d3811a2ff8e39655b8c184 ......
checking beab6f305f4f271caa500170d7fed1d2bda6ea88 ......
	 orig commit -> f4351a199cc120ff9d59e06d02e8657d08e6cc46 ......
checking 4cdad05eb6f773be68ae6b2686f933033b80f5a4 ......
	 orig commit -> 1524f4e47f90b27a3ac84efbdd94c63172246a6f ......
checking dbf1c67c19b589312e5d91a549c5ef347e1112fa ......
	 orig commit -> dbc2970caef74e8ff41923d302aa6fb5a4812d0e ......
checking 258d8549b55e2cd5d73d9ff3d18b39aeeab08e1f ......
	 orig commit -> a72b69dc083a931422cc8a5e33841aff7d5312f2 ......
checking ce8ca305b49b3e6f3c495c3fbc31665f4eb0b9fd ......
checking f12e01b3c64d89b86714d7f591b8e45dc47192af ......
	 orig commit -> adcc81f148d733b7e8e641300c5590a2cdc13bf3 ......
checking 4faef7aee9a922be4f6c871a6afcf6f5ea886542 ......
	 orig commit -> b8be5674fa9a6f3677865ea93f7803c4212f3e10 ......
checking 9369b7dd1019a5904978227e51cd4c78b01a92c8 ......
	 orig commit -> 4ecd55ea074217473f94cfee21bb72864d39f8d7 ......
		 4ecd55ea074217473f94cfee21bb72864d39f8d7 has problem. Fixes commit -> d58431eacb226222430940134d97bfd72f292fcd
commit 9bae0c05a3eb2fd62a5082c7e451110d3453f9be
Author: NeilBrown <neilb@suse.com>
Date:   Fri Apr 5 11:34:40 2019 +1100

    sunrpc: don't mark uninitialised items as VALID.
    
    commit d58431eacb226222430940134d97bfd72f292fcd upstream.
    
    A recent commit added a call to cache_fresh_locked()
    when an expired item was found.
    The call sets the CACHE_VALID flag, so it is important
    that the item actually is valid.
    There are two ways it could be valid:
    1/ If ->update has been called to fill in relevant content
    2/ if CACHE_NEGATIVE is set, to say that content doesn't exist.
    
    An expired item that is waiting for an update will be neither.
    Setting CACHE_VALID will mean that a subsequent call to cache_put()
    will be likely to dereference uninitialised pointers.
    
    So we must make sure the item is valid, and we already have code to do
    that in try_to_negate_entry().  This takes the hash lock and so cannot
    be used directly, so take out the two lines that we need and use them.
    
    Now cache_fresh_locked() is certain to be called only on
    a valid item.
    
    Cc: stable@kernel.org # 2.6.35
    Fixes: 4ecd55ea0742 ("sunrpc: fix cache_head leak due to queued request")
    Signed-off-by: NeilBrown <neilb@suse.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 298cf9b3308cfc6f3ab6c7a29b2d3df9e85cfe91 ......
	 orig commit -> 06489cfbd915ff36c8e36df27f1c2dc60f97ca56 ......
checking 8f62cf80a309fd7aa0d6bfe90157ecbf12cd060b ......
	 orig commit -> 808153e1187fa77ac7d7dad261ff476888dcf398 ......
checking cb1206e85df291fefde27401190329e26996c54c ......
	 orig commit -> b15c87263a69272423771118c653e9a1d0672caa ......
checking 0ea6030b555803b9c565e0471c94648fe2a4bda7 ......
	 orig commit -> 7b55851367136b1efd84d98fea81ba57a98304cf ......
checking 90b7f94812437be10cc3e81bfa10e6c9b6a2e5e2 ......
checking 5d1a7cebad586a3194b1e32240c280769d9494ed ......
	 orig commit -> 60a161b7e5b2a252ff0d4c622266a7d8da1120ce ......
checking 8ebaa4f2e66b2570276a83fc990a728dc6a4621e ......
	 orig commit -> d430aff8cd0c57502d873909c184e3b5753f8b88 ......
checking 154b7716f9aaf55a8307e464069d25cf5830f6e3 ......
	 orig commit -> d134e486e831defd26130770181f01dfc6195f7d ......
checking 5d036c3ad4bcb100b98640e78ee2fd5f9ec634f0 ......
	 orig commit -> f7db2beb4c2c6cc8111f5ab90fc7363ca91107b6 ......
checking 253b944c159828045aa9d290a4a72da3c81b173f ......
	 orig commit -> 15515aaaa69659c502003926a2067ee76176148a ......
checking 6b464ecc3eeab0b6932cec9b8cc5f7778ace52ba ......
	 orig commit -> cf76785d30712d90185455e752337acdb53d2a5d ......
checking 3f2c31043c4400bebce2f418771bc8384fe6da03 ......
	 orig commit -> 726ae5c9e5f0c18eca8ea5296b526242c3e89822 ......
checking c3c9031136837178875f05d55760e1a71a62b965 ......
	 orig commit -> 7e74a19ca522aec7c2be201a7ae1d1d57ded409b ......
checking 2f603000560ef599e31dd2ffb5cfeb706f8b9388 ......
	 orig commit -> a57275d35576fdd89d8c771eedf1e7cf97e0dfa6 ......
checking 03b2d56bda1eaee55fd8f80e4308eb7f6a29b49d ......
	 orig commit -> c82bd077e1ba3dd586569c733dc6d3dd4b0e43cd ......
checking c2a11c3dc459e5940eed4f2691b90bd9276051cf ......
	 orig commit -> 31f6b61d810654fb3ef43f4d8afda0f44b142fad ......
checking 1d6bde50667d655601d915a9ec534b7694e566bd ......
	 orig commit -> 5778b13b64eca5549d242686f2f91a2c80c8fa40 ......
checking bf27509b03d957a6228719abd362b482089ea31d ......
	 orig commit -> 4ad26f117b6ea0f5d5f1592127bafb5ec65904d3 ......
checking f079768d690c966800a4fa40e7f5becd0b0fb184 ......
	 orig commit -> 308c6cafde0147616da45e3a928adae55c428deb ......
		 308c6cafde0147616da45e3a928adae55c428deb has problem. Fixes commit -> c77804be53369dd4c15bfc376cf9b45948194cab
checking c4cb69d23c2777c46999dcf2af7ac75718584e96 ......
	 orig commit -> 4e1d4be681b2c26fd874adbf584bf034573ac45d ......
checking 225219d7edf8dbdac1b9a1daac5c06550f1dc7e7 ......
	 orig commit -> 51367e423c6501a26e67d91a655d2bc892303462 ......
checking ec3947acec298aecb4a4e8f61ab00d35d33ddb2a ......
	 orig commit -> 2ab4c3426c0cf711d7147e3f559638e4ab88960e ......
checking eb7bd2fdb6b0b160c1c91cec828efd0c7d115985 ......
	 orig commit -> 9e6371d3c6913ff1707fb2c0274c9925f7aaef80 ......
checking 8323aafe67b31c7f73d18747604ba1cc6c3e4f3a ......
	 orig commit -> 801df68d617e3cb831f531c99fa6003620e6b343 ......
checking 0c8afaa83988de5fa6ec2b2003055f21cc25555b ......
	 orig commit -> 9061193c4ee065d3240fde06767c2e06ec61decc ......
checking e7c8e00eb776198266d92ee5eb34db7af3bf40ca ......
	 orig commit -> 04f05230c5c13b1384f66f5186a68d7499e34622 ......
		 04f05230c5c13b1384f66f5186a68d7499e34622 has problem. Fixes commit -> 38355a5f9a22bfa5bd5b1bb79805aca39fa53729
commit b54c67cec5fa47a442bdfd5d38f67afd17f11eea
Author: Ivan Mironov <mironov.ivan@gmail.com>
Date:   Mon Dec 24 20:13:05 2018 +0500

    bnx2x: Fix NULL pointer dereference in bnx2x_del_all_vlans() on some hw
    
    commit 38355a5f9a22bfa5bd5b1bb79805aca39fa53729 upstream.
    
    This happened when I tried to boot normal Fedora 29 system with latest
    available kernel (from fedora rawhide, plus some unrelated custom
    patches):
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
            PGD 0 P4D 0
            Oops: 0010 [#1] SMP PTI
            CPU: 6 PID: 1422 Comm: libvirtd Tainted: G          I       4.20.0-0.rc7.git3.hpsa2.1.fc29.x86_64 #1
            Hardware name: HP ProLiant BL460c G6, BIOS I24 05/21/2018
            RIP: 0010:          (null)
            Code: Bad RIP value.
            RSP: 0018:ffffa47ccdc9fbe0 EFLAGS: 00010246
            RAX: 0000000000000000 RBX: 00000000000003e8 RCX: ffffa47ccdc9fbf8
            RDX: ffffa47ccdc9fc00 RSI: ffff97d9ee7b01f8 RDI: ffff97d9f0150b80
            RBP: ffff97d9f0150b80 R08: 0000000000000000 R09: 0000000000000000
            R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000003
            R13: ffff97d9ef1e53e8 R14: 0000000000000009 R15: ffff97d9f0ac6730
            FS:  00007f4d224ef700(0000) GS:ffff97d9fa200000(0000) knlGS:0000000000000000
            CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
            CR2: ffffffffffffffd6 CR3: 00000011ece52006 CR4: 00000000000206e0
            Call Trace:
             ? bnx2x_chip_cleanup+0x195/0x610 [bnx2x]
             ? bnx2x_nic_unload+0x1e2/0x8f0 [bnx2x]
             ? bnx2x_reload_if_running+0x24/0x40 [bnx2x]
             ? bnx2x_set_features+0x79/0xa0 [bnx2x]
             ? __netdev_update_features+0x244/0x9e0
             ? netlink_broadcast_filtered+0x136/0x4b0
             ? netdev_update_features+0x22/0x60
             ? dev_disable_lro+0x1c/0xe0
             ? devinet_sysctl_forward+0x1c6/0x211
             ? proc_sys_call_handler+0xab/0x100
             ? __vfs_write+0x36/0x1a0
             ? rcu_read_lock_sched_held+0x79/0x80
             ? rcu_sync_lockdep_assert+0x2e/0x60
             ? __sb_start_write+0x14c/0x1b0
             ? vfs_write+0x159/0x1c0
             ? vfs_write+0xba/0x1c0
             ? ksys_write+0x52/0xc0
             ? do_syscall_64+0x60/0x1f0
             ? entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    After some investigation I figured out that recently added cleanup code
    tries to call VLAN filtering de-initialization function which exist only
    for newer hardware. Corresponding function pointer is not
    set (== 0) for older hardware, namely these chips:
    
            #define CHIP_NUM_57710                  0x164e
            #define CHIP_NUM_57711                  0x164f
            #define CHIP_NUM_57711E                 0x1650
    
    And I have one of those in my test system:
    
            Broadcom Inc. and subsidiaries NetXtreme II BCM57711E 10-Gigabit PCIe [14e4:1650]
    
    Function bnx2x_init_vlan_mac_fp_objs() from
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.h decides whether to
    initialize relevant pointers in bnx2x_sp_objs.vlan_obj or not.
    
    This regression was introduced after v4.20-rc7, and still exists in v4.20
    release.
    
    Fixes: 04f05230c5c13 ("bnx2x: Remove configured vlans as part of unload sequence.")
    Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
    Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
    Acked-by: Sudarsana Kalluru <Sudarsana.Kalluru@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 40790571fbc57e9cfd2c220c49e8ebef07086519 ......
	 orig commit -> bbf666c1af916ed74795493c564df6fad462cc80 ......
checking 1231e259d43a85f61bde30fe6548346f961eddc5 ......
	 orig commit -> 708abf74dd87f8640871b814faa195fb5970b0e3 ......
checking 48a732cbd425eca878e7482e0478fbf685d7ab55 ......
	 orig commit -> e2ca26ec4f01486661b55b03597c13e2b9c18b73 ......
checking 627fdfac7808fffdeb64e4d08fa9c74e4acd5d10 ......
	 orig commit -> 9ae4f8420ed7be4b13c96600e3568c144d101a23 ......
checking d013a1cd9c1d1a4d6ed0377ff328e0b633ab6387 ......
	 orig commit -> 530aad77010b81526586dfc09130ec875cd084e4 ......
checking bcbc7da1e37208c3c602702886cf39e26444ae38 ......
	 orig commit -> ca92e173ab34a4f7fc4128bd372bd96f1af6f507 ......
checking 38886b1d0592f1acf41e76df27bdaf27dd3b8854 ......
	 orig commit -> f1733a1d3cd32a9492f4cf866be37bb46e10163d ......
checking e34040279333d2582db5287899e2d6908ec57184 ......
	 orig commit -> c201e3808e0e4be9b98d192802085a9f491bd80c ......
checking 752d39ee1bef8d25202b36585f7848b3198e796f ......
	 orig commit -> f15096f12a4e9340168df5fdd9201aa8ed60d59e ......
checking 559ddc885a5ec7a690868d97c86ff61e3d01d02a ......
	 orig commit -> 1e434b703248580b7aaaf8a115d93e682f57d29f ......
checking 1837a06a163b6a2254bf6df8e1c82f5c49b45daf ......
	 orig commit -> 5564597d51c8ff5b88d95c76255e18b13b760879 ......
checking 609a4c7977ff44269a04a2b71ad991c2feb9f849 ......
	 orig commit -> 614b1868a125a0ba24be08f3a7fa832ddcde6bca ......

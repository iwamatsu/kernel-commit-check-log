Check from v4.9.90 to v4.9.91
Commit count: 68
checking c44cfe06dfe2a5f54527e87a48c92a6595d070cc ......
checking c9e307194fcdcb750e88a0014f9222d5a37b8bf5 ......
	 orig commit -> 6007b080d2e2adb7af22bf29165f0594ea12b34c ......
checking 3eb88807b26daef1342d733d75956ad50d72b9d6 ......
	 orig commit -> 0fa4fe85f4724fff89b09741c437cbee9cf8b008 ......
checking 733a4e1af803b1094b26040fc50e5c821fa2f28f ......
	 orig commit -> 87e0d4f0f37fb0c8c4aeeac46fff5e957738df79 ......
checking 353f71fe3c07fabc3433d94c894c0acdeadb2a29 ......
	 orig commit -> 3346a6a4e5ba8c040360f753b26938cec31a4bdc ......
checking 1443abc90332311982e0634b6ef762ede5f98e4a ......
	 orig commit -> 91c49c2deb96ffc3c461eaae70219d89224076b7 ......
checking f41f8156aee5b69ef45f3e54a27ea85033973199 ......
	 orig commit -> d12fe87e62d773e81e0cb3a123c5a480a10d7d91 ......
checking 93b4839239e3c76a31fe1e56e19405674c9948e7 ......
	 orig commit -> 693cb5580fdb026922363aa103add64b3ecd572e ......
checking 26e9852f9d50945c7a3b245143eed8f7004cdaed ......
	 orig commit -> 2195bff041486eb7fcceaf058acaedcd057efbdc ......
checking 1e0fc7dba23d8ecf8baee8ccf8440503f7013221 ......
	 orig commit -> c3eec59659cf25916647d2178c541302bb4822ad ......
checking 162daa27140a592aa6bd524f4553f9678e1efcf8 ......
	 orig commit -> b9a3589332c2a25fb7edad25a26fcaada3209126 ......
checking 9c0d0a0c79ee7e1c0834594a5a8f4e701067828f ......
	 orig commit -> 320b0651f32b830add6497fcdcfdcb6ae8c7b8a0 ......
checking e91ec3494168e1d4505f413effe0dfbbbcc64208 ......
	 orig commit -> e5ea9b54a055619160bbfe527ebb7d7191823d66 ......
checking a8b3a6a4ae5e7b790cdc62335a6f5952c3f9b6ea ......
	 orig commit -> 40c21898ba5372c14ef71717040529794a91ccc2 ......
checking b3076abb678614363985d58a4b839148a47f5e82 ......
	 orig commit -> 317660940fd9dddd3201c2f92e25c27902c753fa ......
checking 3681c24a7d096b092cf05c8338adbb9019bb1536 ......
	 orig commit -> d8ba61ba58c88d5207c1ba2f7d9a2280e7d03be9 ......
checking f9ed24457265f2dac9fa80a20d8d546b201b5540 ......
	 orig commit -> c55b8550fa57ba4f5e507be406ff9fc2845713e8 ......
checking 678b405bff8be2ccfc1d3b86ac9119049c1ea718 ......
	 orig commit -> e3d03598e8ae7d195af5d3d049596dec336f569f ......
checking 587da2b6282302325bd4bcc28a7615e822184ff1 ......
	 orig commit -> 32d43cd391bacb5f0814c2624399a5dad3501d09 ......
checking c68a7a87e1e6553b7f65ad35acdaf31c84fc5b16 ......
	 orig commit -> 4b0b37d4cc54b21a6ecad7271cbc850555869c62 ......
checking 7c28067736a24a19e0d646fea510357228e95910 ......
	 orig commit -> f1869a890cdedb92a3fab969db5d0fd982850273 ......
checking 101a72edd98d2f87d112f21f81f796f584f1bd58 ......
	 orig commit -> 9ffd7503944ec7c0ef41c3245d1306c221aef2be ......
checking 5fdbcc3d6db6f17ec43ef200353208a3a9cf7234 ......
	 orig commit -> 746201235b3f876792099079f4c6fea941d76183 ......
		 746201235b3f876792099079f4c6fea941d76183 has problem. Fixes commit -> 9ffd7503944ec7c0ef41c3245d1306c221aef2be
commit 101a72edd98d2f87d112f21f81f796f584f1bd58
Author: Andri Yngvason <andri.yngvason@marel.com>
Date:   Thu Mar 15 18:23:17 2018 +0000

    can: cc770: Fix use after free in cc770_tx_interrupt()
    
    commit 9ffd7503944ec7c0ef41c3245d1306c221aef2be upstream.
    
    This fixes use after free introduced by the last cc770 patch.
    
    Signed-off-by: Andri Yngvason <andri.yngvason@marel.com>
    Fixes: 746201235b3f ("can: cc770: Fix queue stall & dropped RTR reply")
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 01a303d27a9c5fc80d7bdf2f2961e9ad14b608dc ......
	 orig commit -> f4353daf4905c0099fd25fa742e2ffd4a4bab26a ......
checking 6e400b460a92fd662548edd23d819fd5cc11b208 ......
	 orig commit -> 591d65d5b15496af8d05e252bc1da611c66c0b79 ......
checking a452b356c58cdec58ff3a628be725755b0715540 ......
	 orig commit -> 880dd464b4304583c557c4e5f5ecebfd55d232b1 ......
checking 5e7124c4d6786488198b192f90491e5a5ba51230 ......
	 orig commit -> 4c41aa24baa4ed338241d05494f2c595c885af8f ......
checking 4d9ed68855f0844af153d70424e9e6160fe6f61c ......
	 orig commit -> 6b00c35138b404be98b85f4a703be594cbed501c ......
checking eca95cb6b47a4190d3cf110d51ba186eb40e3a44 ......
	 orig commit -> 843c3a59997f18060848b8632607dd04781b52d1 ......
checking 9b5dd849509b3df53d0b98eac79d86cdeb54ef2c ......
	 orig commit -> fa8e6d58c5bc260f4369c6699683d69695daed0a ......
checking 9eab80eded7bb767f2f0770b3380e6affd3dc2c5 ......
	 orig commit -> 6de564939e14327148e31ddcf769e34105176447 ......
checking d434dae76129e2466dd1dab294ed0acc8e49939e ......
	 orig commit -> c5d343b6b7badd1f5fe0873eff2e8d63a193e732 ......
checking 0e17fddb648afe74a4fc94789b7b70cf854e8903 ......
	 orig commit -> 78dc897b7ee67205423dbbc6b56be49fb18d15b5 ......
checking 0a9be1b13232aa76c5561513415029da4e513f75 ......
	 orig commit -> 455f3e76cfc0d893585a5f358b9ddbe9c1e1e53b ......
checking 6fa877d2aca8da2f597c3a97355f7b4d8690dc1e ......
	 orig commit -> 3ffb0ba9b567a8efb9a04ed3d1ec15ff333ada22 ......
checking d0826ba87dedab9abd3f2628cc9fbee3f413bd4f ......
	 orig commit -> b1abf6fc49829d89660c961fafe3f90f3d843c55 ......
checking f33db316d0f531f18659a240ffeda9d910446370 ......
	 orig commit -> dc9e0a9347e932e3fd3cd03e7ff241022ed6ea8a ......
checking 4ac9ab4f5f45d1ad0585c7bfa9ccff43b9984045 ......
	 orig commit -> 3b82a4db8eaccce735dffd50b4d4e1578099b8e8 ......
checking e664e6d66380d53e5e468d0f1318df4516a3be25 ......
	 orig commit -> 2681bc79eeb640562c932007bfebbbdc55bf6a7d ......
checking f0c88241d3526f9de39970e006a49d9c66650ab3 ......
	 orig commit -> 73a88250b70954a8f27c2444e1c2411bba3c29d9 ......
		 73a88250b70954a8f27c2444e1c2411bba3c29d9 has problem. Fixes commit -> 13f149d47392782baafd96d54d4e65f3b5ca342f
commit 32c6a543d8a58cb4df06e103dae241d848263938
Author: Thomas Hellstrom <thellstrom@vmware.com>
Date:   Thu Apr 26 09:59:30 2018 +0200

    drm/vmwgfx: Fix a buffer object leak
    
    commit 13f149d47392782baafd96d54d4e65f3b5ca342f upstream.
    
    A buffer object leak was introduced when fixing a premature buffer
    object release. Fix this.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 73a88250b709 ("Fix a destoy-while-held mutex problem.")
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Reviewed-by: Deepak Rawat <drawat@vmware.com>
    Reviewed-by: Sinclair Yeh <syeh@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8ab899550b9a7ab2eebf84c1a694aafbd1e2121f ......
	 orig commit -> b3cd54b257ad95d344d121dc563d943ca39b0921 ......
checking 142d9dda9e3b55c2b4604bd3d90f3db1c3219e55 ......
	 orig commit -> fa41b900c30b45fab03783724932dc30cd46a6be ......
checking 24284d5f53d0d8d4bc9321cfbd23f7bd63480059 ......
	 orig commit -> fece2029a9e65b9a990831afe2a2b83290cbbe26 ......
checking f4fe4f987ad9df650495102965ff86a950eff4e2 ......
	 orig commit -> 28ee90fe6048fa7b7ceaeb8831c0e4e454a4cf89 ......
		 28ee90fe6048fa7b7ceaeb8831c0e4e454a4cf89 has problem. Fixes commit -> 5e0fb5df2ee871b841f96f9cb6a7f2784e96aa4e
785a19f9d1dd8a4ab2d0633be4656653bd3de1fc
f967db0b9ed44ec3057a28f3b28efc51df51b835
commit 6e6b637779d78fd7d32e4e19d59cfe815e68857c
Author: Chintan Pandya <cpandya@codeaurora.org>
Date:   Wed Jun 27 08:13:47 2018 -0600

    ioremap: Update pgtable free interfaces with addr
    
    commit 785a19f9d1dd8a4ab2d0633be4656653bd3de1fc upstream.
    
    The following kernel panic was observed on ARM64 platform due to a stale
    TLB entry.
    
     1. ioremap with 4K size, a valid pte page table is set.
     2. iounmap it, its pte entry is set to 0.
     3. ioremap the same address with 2M size, update its pmd entry with
        a new value.
     4. CPU may hit an exception because the old pmd entry is still in TLB,
        which leads to a kernel panic.
    
    Commit b6bdb7517c3d ("mm/vmalloc: add interfaces to free unmapped page
    table") has addressed this panic by falling to pte mappings in the above
    case on ARM64.
    
    To support pmd mappings in all cases, TLB purge needs to be performed
    in this case on ARM64.
    
    Add a new arg, 'addr', to pud_free_pmd_page() and pmd_free_pte_page()
    so that TLB purge can be added later in seprate patches.
    
    [toshi.kani@hpe.com: merge changes, rewrite patch description]
    Fixes: 28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    Signed-off-by: Chintan Pandya <cpandya@codeaurora.org>
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: mhocko@suse.com
    Cc: akpm@linux-foundation.org
    Cc: hpa@zytor.com
    Cc: linux-mm@kvack.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: stable@vger.kernel.org
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20180627141348.21777-3-toshi.kani@hpe.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2130e543ff1aa0885ac4fc5f4ecd98cfccdeed00
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Jun 27 08:13:46 2018 -0600

    x86/mm: Disable ioremap free page handling on x86-PAE
    
    commit f967db0b9ed44ec3057a28f3b28efc51df51b835 upstream.
    
    ioremap() supports pmd mappings on x86-PAE.  However, kernel's pmd
    tables are not shared among processes on x86-PAE.  Therefore, any
    update to sync'd pmd entries need re-syncing.  Freeing a pte page
    also leads to a vmalloc fault and hits the BUG_ON in vmalloc_sync_one().
    
    Disable free page handling on x86-PAE.  pud_free_pmd_page() and
    pmd_free_pte_page() simply return 0 if a given pud/pmd entry is present.
    This assures that ioremap() does not update sync'd pmd entries at the
    cost of falling back to pte mappings.
    
    Fixes: 28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    Reported-by: Joerg Roedel <joro@8bytes.org>
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: mhocko@suse.com
    Cc: akpm@linux-foundation.org
    Cc: hpa@zytor.com
    Cc: cpandya@codeaurora.org
    Cc: linux-mm@kvack.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: stable@vger.kernel.org
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20180627141348.21777-2-toshi.kani@hpe.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit e853786d3c72e1e1445cfd144f44fb9ba3b211f4
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Jun 27 08:13:48 2018 -0600

    x86/mm: Add TLB purge to free pmd/pte page interfaces
    
    commit 5e0fb5df2ee871b841f96f9cb6a7f2784e96aa4e upstream.
    
    ioremap() calls pud_free_pmd_page() / pmd_free_pte_page() when it creates
    a pud / pmd map.  The following preconditions are met at their entry.
     - All pte entries for a target pud/pmd address range have been cleared.
     - System-wide TLB purges have been peformed for a target pud/pmd address
       range.
    
    The preconditions assure that there is no stale TLB entry for the range.
    Speculation may not cache TLB entries since it requires all levels of page
    entries, including ptes, to have P & A-bits set for an associated address.
    However, speculation may cache pud/pmd entries (paging-structure caches)
    when they have P-bit set.
    
    Add a system-wide TLB purge (INVLPG) to a single page after clearing
    pud/pmd entry's P-bit.
    
    SDM 4.10.4.1, Operation that Invalidate TLBs and Paging-Structure Caches,
    states that:
      INVLPG invalidates all paging-structure caches associated with the
      current PCID regardless of the liner addresses to which they correspond.
    
    Fixes: 28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: mhocko@suse.com
    Cc: akpm@linux-foundation.org
    Cc: hpa@zytor.com
    Cc: cpandya@codeaurora.org
    Cc: linux-mm@kvack.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: stable@vger.kernel.org
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20180627141348.21777-4-toshi.kani@hpe.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e6b637779d78fd7d32e4e19d59cfe815e68857c
Author: Chintan Pandya <cpandya@codeaurora.org>
Date:   Wed Jun 27 08:13:47 2018 -0600

    ioremap: Update pgtable free interfaces with addr
    
    commit 785a19f9d1dd8a4ab2d0633be4656653bd3de1fc upstream.
    
    The following kernel panic was observed on ARM64 platform due to a stale
    TLB entry.
    
     1. ioremap with 4K size, a valid pte page table is set.
     2. iounmap it, its pte entry is set to 0.
     3. ioremap the same address with 2M size, update its pmd entry with
        a new value.
     4. CPU may hit an exception because the old pmd entry is still in TLB,
        which leads to a kernel panic.
    
    Commit b6bdb7517c3d ("mm/vmalloc: add interfaces to free unmapped page
    table") has addressed this panic by falling to pte mappings in the above
    case on ARM64.
    
    To support pmd mappings in all cases, TLB purge needs to be performed
    in this case on ARM64.
    
    Add a new arg, 'addr', to pud_free_pmd_page() and pmd_free_pte_page()
    so that TLB purge can be added later in seprate patches.
    
    [toshi.kani@hpe.com: merge changes, rewrite patch description]
    Fixes: 28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    Signed-off-by: Chintan Pandya <cpandya@codeaurora.org>
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: mhocko@suse.com
    Cc: akpm@linux-foundation.org
    Cc: hpa@zytor.com
    Cc: linux-mm@kvack.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: stable@vger.kernel.org
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20180627141348.21777-3-toshi.kani@hpe.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2130e543ff1aa0885ac4fc5f4ecd98cfccdeed00
Author: Toshi Kani <toshi.kani@hpe.com>
Date:   Wed Jun 27 08:13:46 2018 -0600

    x86/mm: Disable ioremap free page handling on x86-PAE
    
    commit f967db0b9ed44ec3057a28f3b28efc51df51b835 upstream.
    
    ioremap() supports pmd mappings on x86-PAE.  However, kernel's pmd
    tables are not shared among processes on x86-PAE.  Therefore, any
    update to sync'd pmd entries need re-syncing.  Freeing a pte page
    also leads to a vmalloc fault and hits the BUG_ON in vmalloc_sync_one().
    
    Disable free page handling on x86-PAE.  pud_free_pmd_page() and
    pmd_free_pte_page() simply return 0 if a given pud/pmd entry is present.
    This assures that ioremap() does not update sync'd pmd entries at the
    cost of falling back to pte mappings.
    
    Fixes: 28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    Reported-by: Joerg Roedel <joro@8bytes.org>
    Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: mhocko@suse.com
    Cc: akpm@linux-foundation.org
    Cc: hpa@zytor.com
    Cc: cpandya@codeaurora.org
    Cc: linux-mm@kvack.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: stable@vger.kernel.org
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20180627141348.21777-2-toshi.kani@hpe.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 9c7f7bdb1932f8c1e5f80d32c717184701afe701 ......
	 orig commit -> b6bdb7517c3d3f41f20e5c2948d6bc3f8897394e ......
checking e294c4c2d33b7307a89cdf31bec08a112d6a9297 ......
	 orig commit -> 68ef3bc3166468678d5e1fdd216628c35bd1186f ......
checking 8d7a2a6d455cea5b80b584a6df147191ba0043ad ......
	 orig commit -> d418ff56b8f2d2b296daafa8da151fe27689b757 ......
checking ed57941c84c4d8c5d30998c3832e0d20deaf0cfe ......
	 orig commit -> 3bf7b5d6d017c27e0d3b160aafb35a8e7cfeda1f ......
checking a7262d24ab62e92728b7c3fbbd85b718a81ce865 ......
	 orig commit -> 62ac3f7305470e3f52f159de448bc1a771717e88 ......
checking db4a121a8939ec1d24efe38e3405dc9776c6b925 ......
	 orig commit -> ca6bfcb2f6d9deab3924bf901e73622a94900473 ......
checking 2bcfcae486246875cfb9835cee24955fbfc0c17a ......
	 orig commit -> b17e5729a630d8326a48ec34ef02e6b4464a6aef ......
		 b17e5729a630d8326a48ec34ef02e6b4464a6aef has problem. Fixes commit -> 3bf7b5d6d017c27e0d3b160aafb35a8e7cfeda1f
commit ed57941c84c4d8c5d30998c3832e0d20deaf0cfe
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 19 16:33:59 2018 +0100

    libata: Make Crucial BX100 500GB LPM quirk apply to all firmware versions
    
    commit 3bf7b5d6d017c27e0d3b160aafb35a8e7cfeda1f upstream.
    
    Commit b17e5729a630 ("libata: disable LPM for Crucial BX100 SSD 500GB
    drive"), introduced a ATA_HORKAGE_NOLPM quirk for Crucial BX100 500GB SSDs
    but limited this to the MU02 firmware version, according to:
    http://www.crucial.com/usa/en/support-ssd-firmware
    
    MU02 is the last version, so there are no newer possibly fixed versions
    and if the MU02 version has broken LPM then the MU01 almost certainly
    also has broken LPM, so this commit changes the quirk to apply to all
    firmware versions.
    
    Fixes: b17e5729a630 ("libata: disable LPM for Crucial BX100 SSD 500GB...")
    Cc: stable@vger.kernel.org
    Cc: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking a9f062b850db21be39afb2cf22b8eca42ec1e314 ......
	 orig commit -> 9c7be59fc519af9081c46c48f06f2b8fadf55ad8 ......
		 9c7be59fc519af9081c46c48f06f2b8fadf55ad8 has problem. Fixes commit -> d418ff56b8f2d2b296daafa8da151fe27689b757
commit 8d7a2a6d455cea5b80b584a6df147191ba0043ad
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 19 16:34:00 2018 +0100

    libata: Modify quirks for MX100 to limit NCQ_TRIM quirk to MU01 version
    
    commit d418ff56b8f2d2b296daafa8da151fe27689b757 upstream.
    
    When commit 9c7be59fc519af ("libata: Apply NOLPM quirk to Crucial MX100
    512GB SSDs") was added it inherited the ATA_HORKAGE_NO_NCQ_TRIM quirk
    from the existing "Crucial_CT*MX100*" entry, but that entry sets model_rev
    to "MU01", where as the entry adding the NOLPM quirk sets it to NULL.
    
    This means that after this commit we no apply the NO_NCQ_TRIM quirk to
    all "Crucial_CT512MX100*" SSDs even if they have the fixed "MU02"
    firmware. This commit splits the "Crucial_CT512MX100*" quirk into 2
    quirks, one for the "MU01" firmware and one for all other firmware
    versions, so that we once again only apply the NO_NCQ_TRIM quirk to the
    "MU01" firmware version.
    
    Fixes: 9c7be59fc519af ("libata: Apply NOLPM quirk to ... MX100 512GB SSDs")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8b8524d75697da34116c3fd42103b67f69f3dcc8 ......
	 orig commit -> 2c1ec6fda2d07044cda922ee25337cf5d4b429b3 ......
checking 195c71dc031bed7890e39d9571d8f9e2acdb6a5b ......
	 orig commit -> 9173e5e80729c8434b8d27531527c5245f4a5594 ......
checking 85f0fec12c58509b0e3717ad07427aa508a2d869 ......
	 orig commit -> 058f58e235cbe03e923b30ea7c49995a46a8725f ......
checking dd62bc3058313ef183aeb22d9de2297cb486dd8d ......
	 orig commit -> f44cb4b19ed40b655c2d422c9021ab2c2625adb6 ......
checking bdbd9153899061cc9aacfc376b26a2224850c61a ......
	 orig commit -> 5682e268350f9eccdbb04006605c1b7068a7b323 ......
checking 8f0dd27b3db01e7785038ea9a711f210067ee6ae ......
	 orig commit -> 7997f3b2df751aab0b8e60149b226a32966c41ac ......
checking beb9ece1db9cabbe01b297e7df2e4d6769dad8bc ......
	 orig commit -> 49012d1bf5f78782d398adb984a080a88ba42965 ......
checking 3ba5143bbbed8bd0ab2ee85a46f1165ff3039232 ......
	 orig commit -> 28b2182dad43f6f8fcbd167539a26714fd12bd64 ......
checking d2327a25e43a7843d65f5bab3daeb833c5caf63f ......
	 orig commit -> 1903be8222b7c278ca897c129ce477c1dd6403a8 ......
checking d8963938399a4b066448dd2a8dd100fb4e91fef8 ......
	 orig commit -> 47b7de2f6c18f75d1f2716efe752cba43f32a626 ......
checking ff0b03a460b12bcafa0cccd6c2dd8ce89340d986 ......
	 orig commit -> e40bdb03d3cd7da66bd0bc1e40cbcfb49351265c ......
checking 789697007799297173bfb388cc7a71417b31273a ......
	 orig commit -> 8e6b1a72a75bb5067ccb6b56d8ca4aa3a300a64e ......
checking d44f3ad7b06b84cff1c9f74efa3e4305c7b3e177 ......
	 orig commit -> 67a01afaf3d34893cf7d2ea19b34555d6abb7cb0 ......
checking b1d25da581e5f36c5a6cea0fca7db3bb2b6573ad ......
	 orig commit -> a6618f4aedb2b60932d766bd82ae7ce866e842aa ......
checking 055c49dcf10fe7db6087037abb87728e7dc84192 ......
	 orig commit -> 8b438686a001db64c21782d04ef68111e53c45d9 ......
checking 3eaa5de1101627899c0cfb986588a969969fdabc ......
	 orig commit -> 891731f6a5dbe508d12443175a7e166a2fba616a ......

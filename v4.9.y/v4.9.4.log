Check from v4.9.4 to v4.9.5
Commit count: 120
checking 40bf0662fe3f794fef0a44456337cfb1b1eb45b5 ......
checking 4e764538512ebc82f13893709ddc0182b5c4af5c ......
	 orig commit -> 5d7400c4acbf7fe633a976a89ee845f7333de3e4 ......
checking b90a617fef04ae2e2394fead9eb8de5fcf8c7fdc ......
	 orig commit -> 69d012345a1a32d3f03957f14d972efccc106a98 ......
checking 2021e55d719acfebdabbb4d6d0104465f76c9158 ......
	 orig commit -> 20156ce2365d61beaa6f5a78a7a789044e0e7acc ......
checking 736aec92c4e95a993a6e936ba3a90498975f5d62 ......
	 orig commit -> 0c2f0afe3582c58efeef93bc57bc07d502132618 ......
checking 3083593700ddf653f765031189805fef56959281 ......
	 orig commit -> d4791db527bf397c84c9956c3ece9692ed5322ac ......
checking dcd15c20c2088e7d0a910f74c706dd7870dc7f62 ......
	 orig commit -> fe0f3168169f7c34c29b0cf0c489f126a7f29643 ......
checking 25bba7152f2afc3e9517a53f3aa934fbaa68cd68 ......
	 orig commit -> 815a7141c4d1b11610dccb7fcbb38633759824f2 ......
checking ae4c24b2d58492d0da72b93aca9cd2f3ed48c69e ......
	 orig commit -> 555c16328ae6d75a90e234eac9b51998d68f185b ......
checking 42eded92c42b7c177ac749e1c44af38acba42d37 ......
	 orig commit -> c090959b9dd8c87703e275079aa4b4a824ba3f8e ......
checking d9c19f90f3a50eb4ff8d17616492338c0b2f9434 ......
	 orig commit -> c02ebfdddbafa9a6a0f52fbd715e6bfa229af9d3 ......
checking cb50d45c3d42633830ca60b34bf46c14941cdde4 ......
	 orig commit -> 3bee9ea1de687925d116670f036599cbed8b66b0 ......
checking df386a0c2804c0a2282dd95d5530e3aa75f7cd3f ......
	 orig commit -> 075eb5719d53e8bb4a406ad87e1de99319aa50f0 ......
checking 4b07d85374f582fc3aa009deda62fcc26713146a ......
	 orig commit -> 15f7e3c21b76598bc6e5816d2577ce843b2b963f ......
checking aa3ee06a2ae2fe7b7b65fc9a82d52b96f99ab1d6 ......
	 orig commit -> cb43f81b8489dcb87555e16c17453f0a9fa690f2 ......
checking f53cfb081f000bb07f838515bf090a9d7d9047c6 ......
	 orig commit -> a545715d2dae8d071c5b06af947b07ffa846b288 ......
checking f57d8710096d9f95ed4fd5bb80a6dc5865e4ea7c ......
	 orig commit -> ebc4ff661fbe76781c6b16dfb7b754a5d5073f8e ......
checking f99694cdaf7667c737a6ffa14609a4e880647dcd ......
	 orig commit -> 9a05e7541c39680d28ecf91892338e074738d5fd ......
checking a4e73cc229d8c2e7f75016e3f9e36455fb3c4aca ......
	 orig commit -> 501634759d55a5b56967de6d9465acf02bbc3565 ......
checking 26991b28b47c4a730f08337de557fe4883c44cc2 ......
	 orig commit -> 85b037442e3f0e84296ab1010fd6b057eee18496 ......
checking 89c728ed9237748b24456dc8502a6e1577b23105 ......
	 orig commit -> 8a10c06a20ec8097a68fd7a4a1c0e285095b4d2f ......
checking e5f33ef0a60141e8eb560962750d6942a830048f ......
	 orig commit -> 6b243fcfb5f1e16bcf732e6f86a63f8af5b59a9f ......
checking f607fd883654003e76db567ebb4c4dd9054892bf ......
	 orig commit -> 1d701d3dd8caf6660ff33c3c23a115b4649c5cdb ......
checking 0e38a0b7acbb8d046c7312ae8cb1e98951934226 ......
	 orig commit -> 6de1a507c46bf22ed97043495b9ab96e4d5c213b ......
checking b4a69e3877ca10318a7a12296524e92a79a6eea3 ......
	 orig commit -> cc98e6ce6abe1c0103cbd7aff1ee586622a9361e ......
checking 5bdb57418845ce068cd5272fbfc15d6ec6a94c7f ......
	 orig commit -> 00b2b7288299a8c73c0c37b531a075ba5c849e67 ......
checking 699fbc4cb7d4ba30865f978750f0364cebabb31c ......
	 orig commit -> 230c5b44233ff0543c0b5ccf4ff9400057010fbe ......
checking 214417a0419b9e37bebf24a1e3c6d3dea8ed0b52 ......
	 orig commit -> cff52e5fc4cfc978b7df898dc14a0492c7ef0ae8 ......
checking 3b376640445a68d3531caf39d8092331fd14b641 ......
	 orig commit -> dccf82ad1775f2b9c36ec85e25e39d88c7e86818 ......
checking 26eae206b78669ec4994d047a4b9418b1c588e35 ......
	 orig commit -> 7f638c1cb0a1112dbe0b682a42db30521646686b ......
checking 396b25173370fc1afa3bc91a315d5597c2b10734 ......
	 orig commit -> cfd278c280f997cf2fe4662e0acab0fe465f637b ......
checking e331f2f2b1fbb5157dfb4f0a977bc8c3737e5927 ......
	 orig commit -> 79f687a3de9e3ba2518b4ea33f38ca6cbe9133eb ......
checking 4c4d4bec6c904fc050847f977b13052be5745ae1 ......
	 orig commit -> ee284e35d8c71bf5d4d807eaff6f67a17134b359 ......
checking 633b570376991e0447c63d925990ecc02896b25e ......
	 orig commit -> f36ab161bebe464d33b998294eff29b17a9c8918 ......
checking a5209aa990423458d10849575bd768663d40bebb ......
	 orig commit -> f24d311f92b516a8aadef5056424ccabb4068e7b ......
checking 7a1dcd92fd396cd66f60b51fb102171d8dee460d ......
	 orig commit -> aa7c8da35d1905d80e840d075f07d26ec90144b5 ......
checking 003e3163fcc76bfdf27c27ef4f5c776bfa925067 ......
	 orig commit -> d0280996437081dd12ed1e982ac8aeaa62835ec4 ......
checking 0aefd99f37f315a67dcb6487ce371f32dd1422a7 ......
	 orig commit -> b5a10c5f7532b7473776da87e67f8301bbc32693 ......
checking 9bae3c370a9ecc658d6a807efa007fdec915d0ed ......
	 orig commit -> dd853fd216d1485ed3045ff772079cc8689a9a4a ......
checking 64e236812197178a0ffae4ac76394730c392ccd9 ......
	 orig commit -> 701dc207bf551d9fe6defa36e84a911e880398c3 ......
		 701dc207bf551d9fe6defa36e84a911e880398c3 has problem. Fixes commit -> bbb27fc33d44e7b8d96369810654df4ee1837566
f43128c75202f29ee71aa83e6c320a911137c189
commit 47a5aabc34247d75c7bfa87f4e3f884f055dded6
Author: Ricardo Ribalda <ricardo.ribalda@gmail.com>
Date:   Tue May 23 21:53:45 2017 -0400

    i2c: piix4: Fix request_region size
    
    
    [ Upstream commit f43128c75202f29ee71aa83e6c320a911137c189 ]
    
    Since '701dc207bf55 ("i2c: piix4: Avoid race conditions with IMC")' we
    are using the SMBSLVCNT register at offset 0x8. We need to request it.
    
    Fixes: 701dc207bf55 ("i2c: piix4: Avoid race conditions with IMC")
    Signed-off-by: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1a4306f24a092f55ee9bbdff0c0a8741e9c833c
Author: Ricardo Ribalda <ricardo.ribalda@gmail.com>
Date:   Tue May 23 21:53:44 2017 -0400

    i2c: piix4: Request the SMBUS semaphore inside the mutex
    
    
    [ Upstream commit bbb27fc33d44e7b8d96369810654df4ee1837566 ]
    
    SMBSLVCNT must be protected with the piix4_mutex_sb800 in order to avoid
    multiple buses accessing to the semaphore at the same time.
    
    Fixes: 701dc207bf55 ("i2c: piix4: Avoid race conditions with IMC")
    Reported-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit c1a4306f24a092f55ee9bbdff0c0a8741e9c833c
Author: Ricardo Ribalda <ricardo.ribalda@gmail.com>
Date:   Tue May 23 21:53:44 2017 -0400

    i2c: piix4: Request the SMBUS semaphore inside the mutex
    
    
    [ Upstream commit bbb27fc33d44e7b8d96369810654df4ee1837566 ]
    
    SMBSLVCNT must be protected with the piix4_mutex_sb800 in order to avoid
    multiple buses accessing to the semaphore at the same time.
    
    Fixes: 701dc207bf55 ("i2c: piix4: Avoid race conditions with IMC")
    Reported-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ce31072b43426e3bf45bc490e93504f5746cb9b5 ......
	 orig commit -> 5e44fca5047054f1762813751626b5245e0da022 ......
		 5e44fca5047054f1762813751626b5245e0da022 has problem. Fixes commit -> 2a0165a034ac024b60cca49c61e46f4afa2e4d98
commit e20204dc2c74b896b3ef4f4328acb15f4abcd5cb
Author: Mohamad Haj Yahia <mohamad@mellanox.com>
Date:   Thu Mar 30 17:09:00 2017 +0300

    net/mlx5: Cancel delayed recovery work when unloading the driver
    
    commit 2a0165a034ac024b60cca49c61e46f4afa2e4d98 upstream.
    
    Draining the health workqueue will ignore future health works including
    the one that report hardware failure and thus we can't enter error state
    Instead cancel the recovery flow and make sure only recovery flow won't
    be scheduled.
    
    Fixes: 5e44fca50470 ('net/mlx5: Only cancel recovery work when cleaning up device')
    Signed-off-by: Mohamad Haj Yahia <mohamad@mellanox.com>
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2f946414a080e8f516d267a6722f38104699efd1 ......
	 orig commit -> 030ee7ae52a46a2be52ccc8242c4a330aba8d38e ......
checking 12a26bd342b5828b87e098291d17f9a188a0e7e6 ......
	 orig commit -> 7192c54a68013f6058b1bb505645fcd07015191c ......
checking d52e714b39cecab78c0ad83e60c81f3a90a42fef ......
	 orig commit -> 5165484b02f2cbedb5bf3a41ff5e8ae16069016c ......
checking 0c37b07002d5f619ec6d691bb6f6c2a2cab78d5b ......
	 orig commit -> 8a08403bcb39f5d0e733bcf59a8a74f16b538f6e ......
checking 7cd7aea3dc78c5f592516159c719b8e3c7540449 ......
	 orig commit -> 6458bd4dfd9414cba5804eb9907fe2a824278c34 ......
checking 5375b71f3b1784c430ca7c58e6aae6bba8ef222c ......
	 orig commit -> aebe55c2d4b998741c0847ace1b4af47d73c763b ......
checking 6d15a83af98200f0ebdd36ac1d1cda743e76ad90 ......
checking 9297e0c189f59f42e5d39aee901d54a4493a60e2 ......
	 orig commit -> dc5367bcc556e97555fc94a32cd1aadbebdff47e ......
checking 00cf64fbaa1e99d0420f2934f301c671ba298342 ......
	 orig commit -> 93362fa47fe98b62e4a34ab408c4a418432e7939 ......
checking eca02f01be96d2ced5b2314dc4462c32e4ad0366 ......
	 orig commit -> 2bed8a8e70729f996af92042d3ad0f11870acc1f ......
		 2bed8a8e70729f996af92042d3ad0f11870acc1f has problem. Fixes commit -> f6aa5beb45be27968a4df90176ca36dfc4363d37
checking 86820a103f517f8d51a09ceacac30bde355f4e89 ......
	 orig commit -> 5b11ebedd6a8bb4271b796e498cd15c0fe1133b6 ......
checking ef8ee4495171489ae456c2a6304709cfb5d58881 ......
	 orig commit -> 802c03881f29844af0252b6e22be5d2f65f93fd0 ......
checking 4a940d6503e1ac6c6ba235a8f4c9b4fd61934fee ......
	 orig commit -> 570b90fa230b8021f51a67fab2245fe8df6fe37d ......
	 orig commit -> 1fef293b8a9850cfa124a53c1d8878d355010403 ......
checking 0edcc47cdb7f2d80c1e7236f5f797b7443cb2142 ......
	 orig commit -> 7c9d8d0c41b3e24473ac7648a7fc2d644ccf08ff ......
checking ba04d869974ed02c8ac1769a6693d925bd861f68 ......
	 orig commit -> 89d8232411a85b9a6b12fd5da4d07d8a138a8e0c ......
		 89d8232411a85b9a6b12fd5da4d07d8a138a8e0c has problem. Fixes commit -> 497e1e16f45c70574dc9922c7f75c642c2162119
commit 1f1c9e29651df61516b028c58632124b345ec85b
Author: Nicolas Ferre <nicolas.ferre@microchip.com>
Date:   Mon Mar 20 16:38:57 2017 +0100

    tty/serial: atmel: fix TX path in atmel_console_write()
    
    commit 497e1e16f45c70574dc9922c7f75c642c2162119 upstream.
    
    A side effect of 89d8232411a8 ("tty/serial: atmel_serial: BUG: stop DMA
    from transmitting in stop_tx") is that the console can be called with
    TX path disabled. Then the system would hang trying to push charecters
    out in atmel_console_putchar().
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Fixes: 89d8232411a8 ("tty/serial: atmel_serial: BUG: stop DMA from transmitting in stop_tx")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 2d789bd1fc24788116ee0711208ef439a8db7ba5 ......
	 orig commit -> b389f173aaa1204d6dc1f299082a162eb0491545 ......
		 b389f173aaa1204d6dc1f299082a162eb0491545 has problem. Fixes commit -> 69646d7a3689fbe1a65ae90397d22ac3f1b8d40f
f3040983132bf3477acd45d2452a906e67c2fec9
commit ab18aa0d0c6d07438a098b3d5d285ec4cf4869b8
Author: Razvan Stefanescu <razvan.stefanescu@microchip.com>
Date:   Tue Mar 19 15:20:34 2019 +0200

    tty/serial: atmel: Add is_half_duplex helper
    
    commit f3040983132bf3477acd45d2452a906e67c2fec9 upstream.
    
    Use a helper function to check that a port needs to use half duplex
    communication, replacing several occurrences of multi-line bit checking.
    
    Fixes: b389f173aaa1 ("tty/serial: atmel: RS485 half duplex w/DMA: enable RX after TX is done")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Razvan Stefanescu <razvan.stefanescu@microchip.com>
    Acked-by: Richard Genoud <richard.genoud@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 0668f0d6874088e7fca49c60703e1aa732616d4e
Author: Razvan Stefanescu <razvan.stefanescu@microchip.com>
Date:   Tue Mar 19 15:20:35 2019 +0200

    tty/serial: atmel: RS485 HD w/DMA: enable RX after TX is stopped
    
    commit 69646d7a3689fbe1a65ae90397d22ac3f1b8d40f upstream.
    
    In half-duplex operation, RX should be started after TX completes.
    
    If DMA is used, there is a case when the DMA transfer completes but the
    TX FIFO is not emptied, so the RX cannot be restarted just yet.
    
    Use a boolean variable to store this state and rearm TX interrupt mask
    to be signaled again that the transfer finished. In interrupt transmit
    handler this variable is used to start RX. A warning message is generated
    if RX is activated before TX fifo is cleared.
    
    Fixes: b389f173aaa1 ("tty/serial: atmel: RS485 half duplex w/DMA: enable
    RX after TX is done")
    Signed-off-by: Razvan Stefanescu <razvan.stefanescu@microchip.com>
    Acked-by: Richard Genoud <richard.genoud@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab18aa0d0c6d07438a098b3d5d285ec4cf4869b8
Author: Razvan Stefanescu <razvan.stefanescu@microchip.com>
Date:   Tue Mar 19 15:20:34 2019 +0200

    tty/serial: atmel: Add is_half_duplex helper
    
    commit f3040983132bf3477acd45d2452a906e67c2fec9 upstream.
    
    Use a helper function to check that a port needs to use half duplex
    communication, replacing several occurrences of multi-line bit checking.
    
    Fixes: b389f173aaa1 ("tty/serial: atmel: RS485 half duplex w/DMA: enable RX after TX is done")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Razvan Stefanescu <razvan.stefanescu@microchip.com>
    Acked-by: Richard Genoud <richard.genoud@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 199c89fd32b2a127f12d5614a701e275f7f5a10f ......
	 orig commit -> a14d749fcebe97ddf6af6db3d1f6ece85c9ddcb9 ......
checking 6c6ae8c43df99284b3260082b43b5858b701bd5e ......
	 orig commit -> 836c3ce2566fb8c1754f8d7c9534cad9bc8a6879 ......
checking 3fbaff3adc763d999fa803bc1aeb5e49c48ce5c0 ......
	 orig commit -> 488debb9971bc7d0edd6d8080ba78ca02a04f6c4 ......
checking 1a62a0f76556f39d6d67789bb981b28230aaa338 ......
	 orig commit -> 3895dbf8985f656675b5bde610723a29cbce3fa7 ......
checking 52fd0ab07676b295abc54eeb1cef7a06d49c9847 ......
	 orig commit -> add7c65ca426b7a37184dd3d2172394e23d585d6 ......
		 add7c65ca426b7a37184dd3d2172394e23d585d6 has problem. Fixes commit -> 880a38547ff08715ce4f1daf9a4bb30c87676e68
commit c7556867782ee8ae0383a1e99df09222f1f01332
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Fri Jan 20 15:21:35 2017 +0200

    userns: Make ucounts lock irq-safe
    
    commit 880a38547ff08715ce4f1daf9a4bb30c87676e68 upstream.
    
    The ucounts_lock is being used to protect various ucounts lifecycle
    management functionalities. However, those services can also be invoked
    when a pidns is being freed in an RCU callback (e.g. softirq context).
    This can lead to deadlocks. There were already efforts trying to
    prevent similar deadlocks in add7c65ca426 ("pid: fix lockdep deadlock
    warning due to ucount_lock"), however they just moved the context
    from hardirq to softrq. Fix this issue once and for all by explictly
    making the lock disable irqs altogether.
    
    Dmitry Vyukov <dvyukov@google.com> reported:
    
    > I've got the following deadlock report while running syzkaller fuzzer
    > on eec0d3d065bfcdf9cd5f56dd2a36b94d12d32297 of linux-next (on odroid
    > device if it matters):
    >
    > =================================
    > [ INFO: inconsistent lock state ]
    > 4.10.0-rc3-next-20170112-xc2-dirty #6 Not tainted
    > ---------------------------------
    > inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    > swapper/2/0 [HC0[0]:SC1[1]:HE1:SE0] takes:
    >  (ucounts_lock){+.?...}, at: [<     inline     >] spin_lock
    > ./include/linux/spinlock.h:302
    >  (ucounts_lock){+.?...}, at: [<ffff2000081678c8>]
    > put_ucounts+0x60/0x138 kernel/ucount.c:162
    > {SOFTIRQ-ON-W} state was registered at:
    > [<ffff2000081c82d8>] mark_lock+0x220/0xb60 kernel/locking/lockdep.c:3054
    > [<     inline     >] mark_irqflags kernel/locking/lockdep.c:2941
    > [<ffff2000081c97a8>] __lock_acquire+0x388/0x3260 kernel/locking/lockdep.c:3295
    > [<ffff2000081cce24>] lock_acquire+0xa4/0x138 kernel/locking/lockdep.c:3753
    > [<     inline     >] __raw_spin_lock ./include/linux/spinlock_api_smp.h:144
    > [<ffff200009798128>] _raw_spin_lock+0x90/0xd0 kernel/locking/spinlock.c:151
    > [<     inline     >] spin_lock ./include/linux/spinlock.h:302
    > [<     inline     >] get_ucounts kernel/ucount.c:131
    > [<ffff200008167c28>] inc_ucount+0x80/0x6c8 kernel/ucount.c:189
    > [<     inline     >] inc_mnt_namespaces fs/namespace.c:2818
    > [<ffff200008481850>] alloc_mnt_ns+0x78/0x3a8 fs/namespace.c:2849
    > [<ffff200008487298>] create_mnt_ns+0x28/0x200 fs/namespace.c:2959
    > [<     inline     >] init_mount_tree fs/namespace.c:3199
    > [<ffff200009bd6674>] mnt_init+0x258/0x384 fs/namespace.c:3251
    > [<ffff200009bd60bc>] vfs_caches_init+0x6c/0x80 fs/dcache.c:3626
    > [<ffff200009bb1114>] start_kernel+0x414/0x460 init/main.c:648
    > [<ffff200009bb01e8>] __primary_switched+0x6c/0x70 arch/arm64/kernel/head.S:456
    > irq event stamp: 2316924
    > hardirqs last  enabled at (2316924): [<     inline     >] rcu_do_batch
    > kernel/rcu/tree.c:2911
    > hardirqs last  enabled at (2316924): [<     inline     >]
    > invoke_rcu_callbacks kernel/rcu/tree.c:3182
    > hardirqs last  enabled at (2316924): [<     inline     >]
    > __rcu_process_callbacks kernel/rcu/tree.c:3149
    > hardirqs last  enabled at (2316924): [<ffff200008210414>]
    > rcu_process_callbacks+0x7a4/0xc28 kernel/rcu/tree.c:3166
    > hardirqs last disabled at (2316923): [<     inline     >] rcu_do_batch
    > kernel/rcu/tree.c:2900
    > hardirqs last disabled at (2316923): [<     inline     >]
    > invoke_rcu_callbacks kernel/rcu/tree.c:3182
    > hardirqs last disabled at (2316923): [<     inline     >]
    > __rcu_process_callbacks kernel/rcu/tree.c:3149
    > hardirqs last disabled at (2316923): [<ffff20000820fe80>]
    > rcu_process_callbacks+0x210/0xc28 kernel/rcu/tree.c:3166
    > softirqs last  enabled at (2316912): [<ffff20000811b4c4>]
    > _local_bh_enable+0x4c/0x80 kernel/softirq.c:155
    > softirqs last disabled at (2316913): [<     inline     >]
    > do_softirq_own_stack ./include/linux/interrupt.h:488
    > softirqs last disabled at (2316913): [<     inline     >]
    > invoke_softirq kernel/softirq.c:371
    > softirqs last disabled at (2316913): [<ffff20000811c994>]
    > irq_exit+0x264/0x308 kernel/softirq.c:405
    >
    > other info that might help us debug this:
    >  Possible unsafe locking scenario:
    >
    >        CPU0
    >        ----
    >   lock(ucounts_lock);
    >   <Interrupt>
    >     lock(ucounts_lock);
    >
    >  *** DEADLOCK ***
    >
    > 1 lock held by swapper/2/0:
    >  #0:  (rcu_callback){......}, at: [<     inline     >] __rcu_reclaim
    > kernel/rcu/rcu.h:108
    >  #0:  (rcu_callback){......}, at: [<     inline     >] rcu_do_batch
    > kernel/rcu/tree.c:2919
    >  #0:  (rcu_callback){......}, at: [<     inline     >]
    > invoke_rcu_callbacks kernel/rcu/tree.c:3182
    >  #0:  (rcu_callback){......}, at: [<     inline     >]
    > __rcu_process_callbacks kernel/rcu/tree.c:3149
    >  #0:  (rcu_callback){......}, at: [<ffff200008210390>]
    > rcu_process_callbacks+0x720/0xc28 kernel/rcu/tree.c:3166
    >
    > stack backtrace:
    > CPU: 2 PID: 0 Comm: swapper/2 Not tainted 4.10.0-rc3-next-20170112-xc2-dirty #6
    > Hardware name: Hardkernel ODROID-C2 (DT)
    > Call trace:
    > [<ffff20000808fa60>] dump_backtrace+0x0/0x440 arch/arm64/kernel/traps.c:500
    > [<ffff20000808fec0>] show_stack+0x20/0x30 arch/arm64/kernel/traps.c:225
    > [<ffff2000088a99e0>] dump_stack+0x110/0x168
    > [<ffff2000082fa2b4>] print_usage_bug.part.27+0x49c/0x4bc
    > kernel/locking/lockdep.c:2387
    > [<     inline     >] print_usage_bug kernel/locking/lockdep.c:2357
    > [<     inline     >] valid_state kernel/locking/lockdep.c:2400
    > [<     inline     >] mark_lock_irq kernel/locking/lockdep.c:2617
    > [<ffff2000081c89ec>] mark_lock+0x934/0xb60 kernel/locking/lockdep.c:3065
    > [<     inline     >] mark_irqflags kernel/locking/lockdep.c:2923
    > [<ffff2000081c9a60>] __lock_acquire+0x640/0x3260 kernel/locking/lockdep.c:3295
    > [<ffff2000081cce24>] lock_acquire+0xa4/0x138 kernel/locking/lockdep.c:3753
    > [<     inline     >] __raw_spin_lock ./include/linux/spinlock_api_smp.h:144
    > [<ffff200009798128>] _raw_spin_lock+0x90/0xd0 kernel/locking/spinlock.c:151
    > [<     inline     >] spin_lock ./include/linux/spinlock.h:302
    > [<ffff2000081678c8>] put_ucounts+0x60/0x138 kernel/ucount.c:162
    > [<ffff200008168364>] dec_ucount+0xf4/0x158 kernel/ucount.c:214
    > [<     inline     >] dec_pid_namespaces kernel/pid_namespace.c:89
    > [<ffff200008293dc8>] delayed_free_pidns+0x40/0xe0 kernel/pid_namespace.c:156
    > [<     inline     >] __rcu_reclaim kernel/rcu/rcu.h:118
    > [<     inline     >] rcu_do_batch kernel/rcu/tree.c:2919
    > [<     inline     >] invoke_rcu_callbacks kernel/rcu/tree.c:3182
    > [<     inline     >] __rcu_process_callbacks kernel/rcu/tree.c:3149
    > [<ffff2000082103d8>] rcu_process_callbacks+0x768/0xc28 kernel/rcu/tree.c:3166
    > [<ffff2000080821dc>] __do_softirq+0x324/0x6e0 kernel/softirq.c:284
    > [<     inline     >] do_softirq_own_stack ./include/linux/interrupt.h:488
    > [<     inline     >] invoke_softirq kernel/softirq.c:371
    > [<ffff20000811c994>] irq_exit+0x264/0x308 kernel/softirq.c:405
    > [<ffff2000081ecc28>] __handle_domain_irq+0xc0/0x150 kernel/irq/irqdesc.c:636
    > [<ffff200008081c80>] gic_handle_irq+0x68/0xd8
    > Exception stack(0xffff8000648e7dd0 to 0xffff8000648e7f00)
    > 7dc0:                                   ffff8000648d4b3c 0000000000000007
    > 7de0: 0000000000000000 1ffff0000c91a967 1ffff0000c91a967 1ffff0000c91a967
    > 7e00: ffff20000a4b6b68 0000000000000001 0000000000000007 0000000000000001
    > 7e20: 1fffe4000149ae90 ffff200009d35000 0000000000000000 0000000000000002
    > 7e40: 0000000000000000 0000000000000000 0000000002624a1a 0000000000000000
    > 7e60: 0000000000000000 ffff200009cbcd88 000060006d2ed000 0000000000000140
    > 7e80: ffff200009cff000 ffff200009cb6000 ffff200009cc2020 ffff200009d2159d
    > 7ea0: 0000000000000000 ffff8000648d4380 0000000000000000 ffff8000648e7f00
    > 7ec0: ffff20000820a478 ffff8000648e7f00 ffff20000820a47c 0000000010000145
    > 7ee0: 0000000000000140 dfff200000000000 ffffffffffffffff ffff20000820a478
    > [<ffff2000080837f8>] el1_irq+0xb8/0x130 arch/arm64/kernel/entry.S:486
    > [<     inline     >] arch_local_irq_restore
    > ./arch/arm64/include/asm/irqflags.h:81
    > [<ffff20000820a47c>] rcu_idle_exit+0x64/0xa8 kernel/rcu/tree.c:1030
    > [<     inline     >] cpuidle_idle_call kernel/sched/idle.c:200
    > [<ffff2000081bcbfc>] do_idle+0x1dc/0x2d0 kernel/sched/idle.c:243
    > [<ffff2000081bd1cc>] cpu_startup_entry+0x24/0x28 kernel/sched/idle.c:345
    > [<ffff200008099f8c>] secondary_start_kernel+0x2cc/0x358
    > arch/arm64/kernel/smp.c:276
    > [<000000000279f1a4>] 0x279f1a4
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Fixes: add7c65ca426 ("pid: fix lockdep deadlock warning due to ucount_lock")
    Fixes: f333c700c610 ("pidns: Add a limit on the number of pid namespaces")
    Link: https://www.spinics.net/lists/kernel/msg2426637.html
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 57bfd5a3710bff25e35974de6db8816103d44973 ......
	 orig commit -> c8a6a09c1c617402cc9254b2bc8da359a0347d75 ......
checking 1f363639eb30c2a4ef9ff125e2fbfe213d82a2f9 ......
	 orig commit -> 6741f551a0b26479de2532ffa43a366747e6dbf3 ......
checking f9cf776b0555a55a6f64871bf9433f0555e846b6 ......
	 orig commit -> 9e4d59ada4d602e78eee9fb5f898ce61fdddb446 ......
checking 28dad9aa9b367b81f99a36a06d16e89e649133ce ......
	 orig commit -> ac0c7cf8be00f269f82964cf7b144ca3edc5dbc4 ......
checking 4d0f302bf56a03b8023f06a27b811c1a4625c20d ......
	 orig commit -> d6169d04097fd9ddf811e63eae4e5cd71e6666e2 ......
checking d06367ac1730ded79aa78307126236bf83af95a3 ......
	 orig commit -> b9dc6f65bc5e232d1c05fe34b5daadc7e8bbf1fb ......
checking ab8957396a692d46a357aec8ff57abc9bd5a878a ......
	 orig commit -> 30f939feaeee23e21391cfc7b484f012eb189c3c ......
checking 93c94ec23faeea8d9a501b6188c701fc282672b1 ......
	 orig commit -> 6f724fb3039522486fce2e32e4c0fbe238a6ab02 ......
checking 61a8c3372adbfc64ee9bcae400908656602c3a92 ......
	 orig commit -> 1c3415a06b1016a596bfe59e0cfee56c773aa958 ......
checking 0556a65e8b7d562ad99f10f36a59f7c87af0ca55 ......
	 orig commit -> a20047f36e2f6a1eea4f1fd261aaa55882369868 ......
checking 3ed1f6da3a179cde1ccb3d72fe8a0f1d169f9800 ......
	 orig commit -> 2d5a9c72d0c4ac73cf97f4b7814ed6c44b1e49ae ......
		 2d5a9c72d0c4ac73cf97f4b7814ed6c44b1e49ae has problem. Fixes commit -> e33eab9ded328ccc14308afa51b5be7cbe78d30b
commit 4c73f193b320d8463c280ef8b4df314fb291f76b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 4 12:29:38 2018 +0300

    USB: serial: ch341: fix type promotion bug in ch341_control_in()
    
    commit e33eab9ded328ccc14308afa51b5be7cbe78d30b upstream.
    
    The "r" variable is an int and "bufsize" is an unsigned int so the
    comparison is type promoted to unsigned.  If usb_control_msg() returns a
    negative that is treated as a high positive value and the error handling
    doesn't work.
    
    Fixes: 2d5a9c72d0c4 ("USB: serial: ch341: fix control-message error handling")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 139556a98511929d0354389e5017d599dedf9498 ......
	 orig commit -> f2950b78547ffb8475297ada6b92bc2d774d5461 ......
checking 1685daad0b0cb117d6ec35fb93d848445da6b201 ......
	 orig commit -> ce5e292828117d1b71cbd3edf9e9137cf31acd30 ......
checking 4aeab97a051560835668fc5c61eb56b20bd485d0 ......
	 orig commit -> 4e2da44691cffbfffb1535f478d19bc2dca3e62b ......
checking 58ede4beda662c4e1681fee4fae2174028a1a841 ......
	 orig commit -> 146cc8a17a3b4996f6805ee5c080e7101277c410 ......
checking dfd48efcde844cd3710e05caf734484a974f32ea ......
	 orig commit -> 7b6c1b4c0e1e44544aa18161dba6a741c080a7ef ......
checking 88d3670a1de4246cd40dfacdc21289b313caf5ed ......
	 orig commit -> 620f1a632ebcc9811c2f8009ba52297c7006f805 ......
checking 99ff99b830c1d70d0c6ec50c64588d9bd8bd5d05 ......
	 orig commit -> a33d331761bc5dd330499ca5ceceb67f0640a8e6 ......
checking bd7e769457f964b0bb857e599fb0a914e0c05a3a ......
	 orig commit -> 3344ed30791af66dbbad5f375008f3d1863b6c99 ......
checking e2d9ad2c540bf15958812189700a812110b452bf ......
	 orig commit -> b6a50cddbcbda7105355898ead18f1a647c22520 ......
checking 259495a0440f6b8025277171d7becb8b92cece82 ......
	 orig commit -> 14221cc45caad2fcab3a8543234bb7eda9b540d5 ......
checking 6ba35da690f30af09706095b914d8031902fd3e5 ......
	 orig commit -> 0a417b8dc1f10b03e8f558b8a831f07ec4c23795 ......
checking 86673e9331c929f43ff4c89bee056273ac2e3ed5 ......
	 orig commit -> 5018ada69a04c8ac21d74bd682fceb8e42dc0f96 ......
checking 0a28f5393689576a7667a7ef42cb79eafe16b019 ......
	 orig commit -> 753aacfd2e95df6a0caf23c03dc309020765bea9 ......
checking 14d6c966744debbafd2f2815e052f2fed1dd154b ......
	 orig commit -> 20b1e22d01a4b0b11d3a1066e9feb04be38607ec ......
checking 99b17ac0014be19906669dd51d26a78d14363d1f ......
	 orig commit -> 0100a3e67a9cef64d72cd3a1da86f3ddbee50363 ......
checking 74ce3fd64bc44f89856ff57bf684882dc098f93b ......
	 orig commit -> abfb7b686a3e5be27bf81db62f9c5c895b76f5d1 ......
		 abfb7b686a3e5be27bf81db62f9c5c895b76f5d1 has problem. Fixes commit -> c8f325a59cfc718d13a50fbc746ed9b415c25e92
commit f2e24dd918189b355a2f7eeafede54778d18172d
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Wed Feb 1 17:45:02 2017 +0000

    efi/fdt: Avoid FDT manipulation after ExitBootServices()
    
    commit c8f325a59cfc718d13a50fbc746ed9b415c25e92 upstream.
    
    Some AArch64 UEFI implementations disable the MMU in ExitBootServices(),
    after which unaligned accesses to RAM are no longer supported.
    
    Commit:
    
      abfb7b686a3e ("efi/libstub/arm*: Pass latest memory map to the kernel")
    
    fixed an issue in the memory map handling of the stub FDT code, but
    inadvertently created an issue with such firmware, by moving some
    of the FDT manipulation to after the invocation of ExitBootServices().
    
    Given that the stub's libfdt implementation uses the ordinary, accelerated
    string functions, which rely on hardware handling of unaligned accesses,
    manipulating the FDT with the MMU off may result in alignment faults.
    
    So fix the situation by moving the update_fdt_memmap() call into the
    callback function invoked by efi_exit_boot_services() right before it
    calls the ExitBootServices() UEFI service (which is arguably a better
    place for it anyway)
    
    Note that disabling the MMU in ExitBootServices() is not compliant with
    the UEFI spec, and carries great risk due to the fact that switching from
    cached to uncached memory accesses halfway through compiler generated code
    (i.e., involving a stack) can never be done in a way that is architecturally
    safe.
    
    Fixes: abfb7b686a3e ("efi/libstub/arm*: Pass latest memory map to the kernel")
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Tested-by: Riku Voipio <riku.voipio@linaro.org>
    Cc: mark.rutland@arm.com
    Cc: linux-efi@vger.kernel.org
    Cc: matt@codeblueprint.co.uk
    Cc: leif.lindholm@linaro.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1485971102-23330-2-git-send-email-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 736e77c07fba8b49cead504b885a82ce52c0ff10 ......
	 orig commit -> 129a72a0d3c8e139a04512325384fe5ac119e74d ......
		 129a72a0d3c8e139a04512325384fe5ac119e74d has problem. Fixes commit -> 3c9fa24ca7c9c47605672916491f79e8ccacb9e6
ce14e868a54edeb2e30cb7a7b104a2fc4b9d76ca
79367a65743975e5cac8d24d08eccc7fdae832b0
commit 838b0e900a7e16799dbecc031739de1ee40741af
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 17:37:49 2018 +0200

    KVM: x86: pass kvm_vcpu to kvm_read_guest_virt and kvm_write_guest_virt_system
    
    commit ce14e868a54edeb2e30cb7a7b104a2fc4b9d76ca upstream.
    
    Int the next patch the emulator's .read_std and .write_std callbacks will
    grow another argument, which is not needed in kvm_read_guest_virt and
    kvm_write_guest_virt_system's callers.  Since we have to make separate
    functions, let's give the currently existing names a nicer interface, too.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00b1391f9539711945e75b856230ee751a02b385
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 16:43:02 2018 +0200

    KVM: x86: introduce linear_{read,write}_system
    
    commit 79367a65743975e5cac8d24d08eccc7fdae832b0 upstream.
    
    Wrap the common invocation of ctxt->ops->read_std and ctxt->ops->write_std, so
    as to have a smaller patch when the functions grow another argument.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 13d1c5b17d127afbd947210c5cdd80eaded5d9f4
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 17:38:09 2018 +0200

    kvm: x86: use correct privilege level for sgdt/sidt/fxsave/fxrstor access
    
    commit 3c9fa24ca7c9c47605672916491f79e8ccacb9e6 upstream.
    
    The functions that were used in the emulation of fxrstor, fxsave, sgdt and
    sidt were originally meant for task switching, and as such they did not
    check privilege levels.  This is very bad when the same functions are used
    in the emulation of unprivileged instructions.  This is CVE-2018-10853.
    
    The obvious fix is to add a new argument to ops->read_std and ops->write_std,
    which decides whether the access is a "system" access or should use the
    processor's CPL.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 838b0e900a7e16799dbecc031739de1ee40741af
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 17:37:49 2018 +0200

    KVM: x86: pass kvm_vcpu to kvm_read_guest_virt and kvm_write_guest_virt_system
    
    commit ce14e868a54edeb2e30cb7a7b104a2fc4b9d76ca upstream.
    
    Int the next patch the emulator's .read_std and .write_std callbacks will
    grow another argument, which is not needed in kvm_read_guest_virt and
    kvm_write_guest_virt_system's callers.  Since we have to make separate
    functions, let's give the currently existing names a nicer interface, too.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00b1391f9539711945e75b856230ee751a02b385
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 16:43:02 2018 +0200

    KVM: x86: introduce linear_{read,write}_system
    
    commit 79367a65743975e5cac8d24d08eccc7fdae832b0 upstream.
    
    Wrap the common invocation of ctxt->ops->read_std and ctxt->ops->write_std, so
    as to have a smaller patch when the functions grow another argument.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 83fedbb76051003fe734653852efc173ae04cb87 ......
	 orig commit -> 283c95d0e3891b64087706b344a4b545d04a6e62 ......
		 283c95d0e3891b64087706b344a4b545d04a6e62 has problem. Fixes commit -> 129a72a0d3c8e139a04512325384fe5ac119e74d
commit 736e77c07fba8b49cead504b885a82ce52c0ff10
Author: Steve Rutherford <srutherford@google.com>
Date:   Wed Jan 11 18:28:29 2017 -0800

    KVM: x86: Introduce segmented_write_std
    
    commit 129a72a0d3c8e139a04512325384fe5ac119e74d upstream.
    
    Introduces segemented_write_std.
    
    Switches from emulated reads/writes to standard read/writes in fxsave,
    fxrstor, sgdt, and sidt.  This fixes CVE-2017-2584, a longstanding
    kernel memory leak.
    
    Since commit 283c95d0e389 ("KVM: x86: emulate FXSAVE and FXRSTOR",
    2016-11-09), which is luckily not yet in any final release, this would
    also be an exploitable kernel memory *write*!
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Fixes: 96051572c819194c37a8367624b285be10297eca
    Fixes: 283c95d0e3891b64087706b344a4b545d04a6e62
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Steve Rutherford <srutherford@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking aae8f3464b1f4daee192b59f5d56d31ff2098b68 ......
	 orig commit -> aabba3c6abd50b05b1fc2c6ec44244aa6bcda576 ......
checking bc5e1316efd6758beae4e7fe17daaef8dcd43ae3 ......
	 orig commit -> d3fe959f81024072068e9ed86b39c2acfd7462a9 ......
checking 90f70fcd6f72e5d7797866f8bae78ac504b9de31 ......
	 orig commit -> 546d87e5c903a7f3ee7b9f998949a94729fbc65b ......
checking 5ed21cc0cf2650756167dfd492799e214a69384e ......
	 orig commit -> cef84c302fe051744b983a92764d3fcca933415d ......
checking 483ecebb22c16369ecb607e4bfd5f9767b56555f ......
	 orig commit -> b6416e61012429e0277bd15a229222fd17afc1c1 ......
checking 7caf473f99b8c3537cc2196d3d508dd6c139048b ......
	 orig commit -> 4f3dbdf47e150016aacd734e663347fcaa768303 ......
checking 7718ffcf9a64830bbae148432f625346cde2f2d6 ......
	 orig commit -> 33ab91103b3415e12457e3104f0e4517ce12d0f3 ......
checking 1e26cec60668091201d490dd8709352696336211 ......
	 orig commit -> e5bbc8a6c992901058bc09e2ce01d16c111ff047 ......
checking 8315c22ea879082bba365d46dd2cc7881fbfb49a ......
	 orig commit -> c4e490cf148e85ead0d1b1c2caaba833f1d5b29f ......
checking 6ca29ee3ca0dd517f616cb4eae0b7c83701b8f4e ......
	 orig commit -> f05714293a591038304ddae7cb0dd747bb3786cc ......
checking 07fc9575e88aae0ac82997b282343b1ed757957e ......
	 orig commit -> b4536f0c829c8586544c94735c343f9b5070bd01 ......
checking 6c9bd81cb9eab3508227186f3e036d38146d2c0d ......
	 orig commit -> e7ee2c089e94067d68475990bdeed211c8852917 ......
checking 692755b1006d1e603ae7b86e40a90fcdfb166209 ......
	 orig commit -> f931ab479dd24cf7a2c6e2df19778406892591fb ......
		 f931ab479dd24cf7a2c6e2df19778406892591fb has problem. Fixes commit -> b5d24fda9c3dce51fcb4eee459550a458eaaf1e2
commit f1faaec4843a6bfcb795887f5b1a280fb874789d
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Feb 24 14:55:45 2017 -0800

    mm, devm_memremap_pages: hold device_hotplug lock over mem_hotplug_{begin, done}
    
    commit b5d24fda9c3dce51fcb4eee459550a458eaaf1e2 upstream.
    
    The mem_hotplug_{begin,done} lock coordinates with {get,put}_online_mems()
    to hold off "readers" of the current state of memory from new hotplug
    actions.  mem_hotplug_begin() expects exclusive access, via the
    device_hotplug lock, to set mem_hotplug.active_writer.  Calling
    mem_hotplug_begin() without locking device_hotplug can lead to
    corrupting mem_hotplug.refcount and missed wakeups / soft lockups.
    
    [dan.j.williams@intel.com: v2]
      Link: http://lkml.kernel.org/r/148728203365.38457.17804568297887708345.stgit@dwillia2-desk3.amr.corp.intel.com
    Link: http://lkml.kernel.org/r/148693885680.16345.17802627926777862337.stgit@dwillia2-desk3.amr.corp.intel.com
    Fixes: f931ab479dd2 ("mm: fix devm_memremap_pages crash, use mem_hotplug_{begin, done}")
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Toshi Kani <toshi.kani@hpe.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Logan Gunthorpe <logang@deltatee.com>
    Cc: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8edd365ee94ca4541270ee00b90705c634a085c6 ......
	 orig commit -> 20f664aabeb88d582b623a625f83b0454fa34f07 ......
checking 87fa6f37fa29565f13a1db0cdcf8ad2d0eb0f76e ......
	 orig commit -> 965d004af54088d138f806d04d803fb60d441986 ......
checking 2e264fb546fa5eade611dca09d8734e3232ff9b2 ......
	 orig commit -> b09ab054b69b07077bd3292f67e777861ac796e5 ......
checking ad4764b4c8ebb48da0680ac0e7b20d4f49fc6cd1 ......
	 orig commit -> e7ccfc4ccb703e0f033bd4617580039898e912dd ......
checking 057ac4429aef93831aa90daae1fad840297274fa ......
	 orig commit -> a2b1e8a20c992b01eeb76de00d4f534cbe9f3822 ......
checking 91ee732cb5632b0546d514daed6a72b7ed516f7b ......
	 orig commit -> 3659f98b5375d195f1870c3e508fe51e52206839 ......
checking d65146c7fb91797d14edcd092a07d4432688f7d5 ......
	 orig commit -> f7741aa75e76440f4e9ecfe512feebe9bce33ca8 ......
checking c730a84aff6f3eca7dbe8b5e7bbc3cdd94418a54 ......
	 orig commit -> b2cdeb19f16ad984eb5bb9193f793d05a8101511 ......
checking a63bb198dc14b43558618bac461936661af74450 ......
	 orig commit -> 9376cad2073d2c122864754ea5f80025c8507b0b ......
checking 6b94626c9edfb434a779d59d8409c982d206b25d ......
	 orig commit -> 618c808968852609d2d9f0e5cfc351a4807ef8d0 ......
checking 8ac055af47aef130a124527aebecb25172107d0b ......
	 orig commit -> d8ca5bd158f738c4fa6974ee388c381f64db7905 ......
checking 9229336861cbe0f0c81dbe884d5721b4d81c21b2 ......
	 orig commit -> c314c9f15aa5f43f0e5c0e2602cc65798dbd1598 ......
checking 5e1595223a2c703b810c567b3071a6cc87af5890 ......
	 orig commit -> d3b861bccdee2fa9963a2b6c64f74a8d752b9315 ......
checking b01bbf221fcc26764c8845c7c6ebd66c230b9157 ......
	 orig commit -> 8f5983ad6b81070376db9487ce81000c85a16027 ......
checking f34fbb92fe81ed486d2d84af4ec572b5e9b0f9aa ......
	 orig commit -> 41c567a5d7d1a986763e58c3394782813c3bcb03 ......
checking 5975358bf2ad7e3153ac34b56b5a1abe58075d76 ......
	 orig commit -> b6fc513da50c5dbc457a8ad6b58b046a6a68fd9d ......

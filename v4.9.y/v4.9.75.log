Check from v4.9.75 to v4.9.76
Commit count: 22
checking 7bbc6ca4887794cc44b41412a35bdfbe0cbd1c50 ......
checking 5e1f377fc8101a221ff762a4735cf076c336a4ab ......
	 orig commit -> fee4380f368e84ed216b62ccd2fbc4126f2bf40b ......
checking beca4e2d994464f5a0f629c1ff91b98398725efa ......
checking 47f3cea393ab5188d1a1409259e71099314dc530 ......
	 orig commit -> 1e5476815fd7f98b888e01a0f9522b63085f96c9 ......
checking 91dfc41e753bb4e7d3948b02baca60ac40c4cbfd ......
	 orig commit -> 310d82784fb4d60c80569f5ca9f53a7f3bf1d477 ......
		 310d82784fb4d60c80569f5ca9f53a7f3bf1d477 has problem. Fixes commit -> d006e95b5561f708d0385e9677ffe2c46f2ae345
commit a957aa573c1e8c4e2bed1fa253b70ec6008fbde8
Author: Helge Deller <deller@gmx.de>
Date:   Tue Apr 2 12:13:27 2019 +0200

    parisc: Detect QEMU earlier in boot process
    
    commit d006e95b5561f708d0385e9677ffe2c46f2ae345 upstream.
    
    While adding LASI support to QEMU, I noticed that the QEMU detection in
    the kernel happens much too late. For example, when a LASI chip is found
    by the kernel, it registers the LASI LED driver as well.  But when we
    run on QEMU it makes sense to avoid spending unnecessary CPU cycles, so
    we need to access the running_on_QEMU flag earlier than before.
    
    This patch now makes the QEMU detection the fist task of the Linux
    kernel by moving it to where the kernel enters the C-coding.
    
    Fixes: 310d82784fb4 ("parisc: qemu idle sleep support")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 14c06206b98f3d11ff250875f6046df8d825f13d ......
	 orig commit -> 88776c0e70be0290f8357019d844aae15edaa967 ......
checking dd43c465ba24d7f482bd50c0ceda50b1740b8dce ......
	 orig commit -> f4e9b7af0cd58dd039a0fb2cd67d57cea4889abf ......
checking 2b009d33f42797d6ba7ebd23729c34871e1ec7ec ......
	 orig commit -> 10d900303f1c3a821eb0bef4e7b7ece16768fba4 ......
checking cc1349fa9c22b5d330ac396240c8884d4f7b68ac ......
	 orig commit -> 79435ac78d160e4c245544d457850a56f805ac0d ......
checking e6a897a684c2434d98828887a0afa344b7b2082b ......
	 orig commit -> 563b5cbe334e9503ab2b234e279d500fc4f76018 ......
checking 03975faee7cee814773ee98b7b499e71a4d157df ......
	 orig commit -> 57d72e159b60456c8bb281736c02ddd3164037aa ......
checking 4d53eb494950de4dc898a014600b56254a913a6d ......
	 orig commit -> 426915796ccaf9c2bd9bb06dc5702225957bc2e5 ......
checking 794ac8ef9b06bd51186f6e54b763ecf4f94d7171 ......
	 orig commit -> ac25385089f673560867eb5179228a44ade0cfc1 ......
checking 1453b3ac6cf8c62abb5a50680c6626d460c63044 ......
	 orig commit -> 628c1bcba204052d19b686b5bac149a644cdb72e ......
checking 79258d9834803518a80b0ed0603c790638f0478b ......
	 orig commit -> bdcf0a423ea1c40bbb40e7ee483b50fc8aa3d758 ......
		 bdcf0a423ea1c40bbb40e7ee483b50fc8aa3d758 has problem. Fixes commit -> 1995266727fa8143897e89b55f5d3c79aa828420
commit f12d0602633decf073796f3aaa59eec7ff2da9e2
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Mon Jan 22 20:11:06 2018 +0000

    nfsd: auth: Fix gid sorting when rootsquash enabled
    
    commit 1995266727fa8143897e89b55f5d3c79aa828420 upstream.
    
    Commit bdcf0a423ea1 ("kernel: make groups_sort calling a responsibility
    group_info allocators") appears to break nfsd rootsquash in a pretty
    major way.
    
    It adds a call to groups_sort() inside the loop that copies/squashes
    gids, which means the valid gids are sorted along with the following
    garbage.  The net result is that the highest numbered valid gids are
    replaced with any lower-valued garbage gids, possibly including 0.
    
    We should sort only once, after filling in all the gids.
    
    Fixes: bdcf0a423ea1 ("kernel: make groups_sort calling a responsibility ...")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Acked-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Wolfgang Walter <linux@stwm.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3a381abc5b703c0f10c2792e97ec805674e9197e ......
	 orig commit -> 429a787be6793554ee02aacc7e1f11ebcecc4453 ......
		 429a787be6793554ee02aacc7e1f11ebcecc4453 has problem. Fixes commit -> d61b7f972dab2a7d187c38254845546dfc8eed85
commit 4b7c09a5f74ad25dd2e3ee6d43732f9a0e0c1ff3
Author: Josef Bacik <jbacik@fb.com>
Date:   Thu Jan 19 16:08:49 2017 -0500

    nbd: only set MSG_MORE when we have more to send
    
    [ Upstream commit d61b7f972dab2a7d187c38254845546dfc8eed85 ]
    
    A user noticed that write performance was horrible over loopback and we
    traced it to an inversion of when we need to set MSG_MORE.  It should be
    set when we have more bvec's to send, not when we are on the last bvec.
    This patch made the test go from 20 iops to 78k iops.
    
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Fixes: 429a787be679 ("nbd: fix use-after-free of rq/bio in the xmit path")
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 2b9b2002e05d1aa7d8c930d09d4342a6abacd2dd ......
	 orig commit -> 98801506552593c9b8ac11021b0cdad12cab4f6b ......
checking 34fa2eede095c84cbf7f636b0c21f8dacf1686aa ......
	 orig commit -> e2bf801ecd4e62222a46d1ba9e57e710171d29c1 ......
checking c195a4c0230d7a1dafb53cdbd5eed4dea4493504 ......
	 orig commit -> d76c68109f37cb85b243a1cf0f40313afd2bae68 ......
checking 868f50b95dbef609e73b48acd89c8631dfa0215d ......
	 orig commit -> e57121d08c38dabec15cf3e1e2ad46721af30cae ......
checking f6db86f31b47a630134689fe1e425b78e6626c22 ......
	 orig commit -> 203f45003a3d03eea8fa28d74cfc74c354416fdb ......
checking 790080ce0e3288c2d289d0771aa63814949c6da5 ......
	 orig commit -> 4d9570158b6260f449e317a5f9ed030c2504a615 ......

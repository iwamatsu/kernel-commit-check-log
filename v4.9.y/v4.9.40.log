Check from v4.9.40 to v4.9.41
Commit count: 106
checking db397d9c6e66afdd34ae430172db122632b5f8a7 ......
checking 007dffc661cf20f9e924eccc7b161ce2419ba81b ......
	 orig commit -> 9f169b9f52a4afccdab7a7d2311b0c53a78a1e6b ......
checking 27ef0283b60ecb0445a7530db1f3a997ce89715a ......
	 orig commit -> bc65a326c579e93a5c2120a65ede72f11369ee5a ......
checking 23ab274ddf83931ecc21968d11c773a2a972e462 ......
	 orig commit -> 2d1148f0f45079d25a0fa0d67e4fdb2a656d12fb ......
checking 5f704071920299073d23be138939545158ce42d1 ......
	 orig commit -> 0371adcdaca92912baaa3256ed13e058a016e62d ......
checking 2803ea76366a735f69d81dbaeae19b8dbf44a48d ......
	 orig commit -> 9698b6f473555a722bf81a3371998427d5d27bde ......
checking 3b6f4e292cbdd46c03303a20417e0c05ddb73bda ......
	 orig commit -> 08f9572671c8047e7234cbf150869aa3c3d59a97 ......
checking 3f0dfa11cc0da608fc513f53b50efebb9827f371 ......
	 orig commit -> 60448b077ed93d227e6c117a9e87db76ff0c1911 ......
checking b899142ce21d53b496fe7d1534ba7ca62538ca37 ......
	 orig commit -> 74545f63890e38520eb4d1dbedcadaa9c0dbc824 ......
checking efa225254a4a57b871b279cc38fd4048a0fbfa76 ......
	 orig commit -> 159d3726db12b3476bc59ea0ab0a702103d466b5 ......
checking 12dac5fcf5ec156f9f056aff1a8cbed04fde5538 ......
	 orig commit -> 13a6c8328e6056932dc680e447d4c5e8ad9add17 ......
checking 301681d60003b172af1a70fdd833567e16f55d9a ......
	 orig commit -> e51d5d02f688c45b6f644f472f0c80fdfa73f0cb ......
checking f10e2065ce76b8ca54301d2de40aa9b351daf407 ......
	 orig commit -> 71eae1ca77fd6be218d8a952d97bba827e56516d ......
checking 2909c9c2d7138f1900bddf16d0515025306a8e05 ......
	 orig commit -> 4ee437fbf626b5ad756889d8bc0fcead3d66dde7 ......
checking 2548d893a542bab079ef72266ff297ff61a20ef3 ......
	 orig commit -> 63dfb0dac9055145db85ce764355aef2f563739a ......
checking a7526723b7fced9fc0dfa033c4227f040e351e78 ......
	 orig commit -> 14ba972842f9e84e6d3264bc0302101b8a792288 ......
checking e95ec3582a295d95de8d9ebf5e31426599563c7f ......
	 orig commit -> 6ef4fb387d50fa8f3bffdffc868b57e981cdd709 ......
checking 812a7df6556faae25deb42dbcc9e47829855556f ......
	 orig commit -> e19f32da5ded958238eac1bbe001192acef191a2 ......
checking a417ea5b9d22dc5733f6fac5cee72735cb7f8d99 ......
	 orig commit -> 4dcd19bfabaee8f9f4bcf203afba09b98ccbaf76 ......
checking ddc0ec3be8077a689e0136c873519bf851a741e6 ......
	 orig commit -> 7934c98a6e04028eb34c1293bfb5a6b0ab630b66 ......
checking d8086c3bd3a556e7598c93e5d303f771356adf9f ......
	 orig commit -> 30a9c6444810429aa2b7cbfbd453ce339baaadbf ......
checking 0b8656414e29578f00e40e7d19c411039b9ab71e ......
	 orig commit -> 4c86d77743a54fb2d8a4d18a037a074c892bb3be ......
checking ab5e7df9e064d54f442108544d5dfb8116cb2f41 ......
	 orig commit -> 074859184d770824f4437dca716bdeb625ae8b1c ......
checking 704a6d719d4c4228c7f0b1fbaf6bc35fe2ccf1d8 ......
	 orig commit -> 0b47a6bd1150f4846b1d61925a4cc5a96593a541 ......
checking f76ddff6c5215131483efed20acc896e021abb9f ......
	 orig commit -> c2931667c83ded6504b3857e99cc45b21fa496fb ......
checking 49fc90b443c71b3cdbfaf15c0c15fc7e3ffc5731 ......
	 orig commit -> 096de2f83ebc8e0404c5b7e847a4abd27b9739da ......
checking 6731212836059c7ac3575e21c499380e795516a9 ......
	 orig commit -> 781feef7e6befafd4d9787d1f7ada1f9ccd504e4 ......
checking 78418b86733462c913aea82e081594b1005751ba ......
	 orig commit -> e321f8a801d7b4c40da8005257b05b9c2b51b072 ......
checking 92d6a813b03a576dd821667b6566a1ddf7617137 ......
	 orig commit -> 43aef5c2ca90535b3227e97e71604291875444ed ......
checking a15a3d92eca8dd20f55ba574ff5cd1c527af4272 ......
	 orig commit -> c2a6bbaf0c5f90463a7011a295bbdb7e33c80b51 ......
		 c2a6bbaf0c5f90463a7011a295bbdb7e33c80b51 has problem. Fixes commit -> fdad4e7a876a2cb3d2c1f04e5418c324e79fffef
checking ebd4642ee412ba3719274d80658a4c785fc43678 ......
	 orig commit -> 3ef01c968fbfb21c2f16281445d30a865ee4412c ......
checking 69f3df1fd01322d90a35bac071c53b9497ea3601 ......
	 orig commit -> 1f2ed153b916c95a49a1ca9d7107738664224b7f ......
checking 3209f3f69eeb187d5174f253b1b91fbdbf264f33 ......
	 orig commit -> c415f9e8304a1d235ef118d912f374ee2e46c45d ......
checking e3603533ae6394f377bf3a767787cddecc176696 ......
	 orig commit -> 4ea2a6be9565455f152c12f80222af1582ede0c7 ......
checking 8af0937aee50d1d1f41f1caf56aefcf364d3b1b9 ......
	 orig commit -> 12a7f17fac5b370bec87259e4c718faf563ce900 ......
checking 29e0adf8bacd3cb91893ec90eb6a61d938209a24 ......
	 orig commit -> 75bdc7f31a3a6e9a12e218b31a44a1f54a91554c ......
checking 000224c1106c2abc21a376c5bb851b1ffe4b4458 ......
	 orig commit -> 97b84fd6d91766ea57dcc350d78f42639e011c30 ......
checking c2804b21f2e7f46f76500aa58850127b31054c84 ......
	 orig commit -> 34a31f0af84158955a9747fb5c6712da5bbb5331 ......
checking 2987ce159fb9b0894d9bf000b8317e07cfed3fa8 ......
	 orig commit -> 1594c18fd297a8edcc72bc4b161f3f52603ebb92 ......
checking 88a86f8dfaad6b7185ad1658a8283f12dc4a351b ......
	 orig commit -> 086cc1c31a0ec075dac02425367c871bb65bc2c9 ......
checking 033d5ce4ad8d7b56bd562ff1107ac5780fb85eb7 ......
	 orig commit -> 88e20c74ee020f9e0c99dfce0dd9aa61c3f0cca0 ......
checking c612bba54b8c412ee81c8dd071fa81e4ab689505 ......
	 orig commit -> a1792cda51300e15b03549cccf0b09f3be82e697 ......
checking 14e5c8c61791d03e69de94affc149dcb6735aa66 ......
	 orig commit -> 13288bdf4adbaa6bd1267f10044c1bc25d90ce7f ......
checking ed788dc6fa65f74a5f82f9fe5d7ea46d17cdaf87 ......
	 orig commit -> 63c3194b82530bd71fd49db84eb7ab656b8d404a ......
checking ca40b2d039dc443ed82957260dbcc3097f8f80d6 ......
	 orig commit -> 2f884e6e688a0deb69e6c9552e51aef8b7e3f5f1 ......
checking c7d0c0d84808783740b69a06f5512b2c50200f5f ......
	 orig commit -> 45e869714489431625c569d21fc952428d761476 ......
checking 7d33b41d34f57547e66c27e96075f8210a47b1b5 ......
	 orig commit -> a6cb3b864b21b7345f824a4faa12b723c8aaf099 ......
checking 50e3950d77ba7d897c5509ca6192f1aaed426dd0 ......
	 orig commit -> 6490abc4bc35fa4f3bdb9c7e49096943c50e29ea ......
checking e0d5bb92c07bee2205212ad7aa6f1a85451db6ed ......
	 orig commit -> 88b333b0ed790f9433ff542b163bf972953b74d3 ......
checking 237652fae500c0ecacdd28281db18878ba46f521 ......
	 orig commit -> 10b1c04e92229ebeb38ccd0dcf2b6d3ec73c0575 ......
checking 7e150f79134e7eabb5315975ae34bf3169beff4c ......
	 orig commit -> c1d5f8ff80ea84768f5fae1ca9d1abfbb5e6bbaa ......
checking a8820678afe1289cd35431ff847d817cdeffcadf ......
	 orig commit -> 3b01fe7f91c8e4f9afc4fae3c5af72c14958d2d8 ......
checking aeb230318ddbfc4b06f0d4befd755090ec0c4d6f ......
	 orig commit -> e4c5e13aa45c23692e4acf56f0b3533f328199b2 ......
		 e4c5e13aa45c23692e4acf56f0b3533f328199b2 has problem. Fixes commit -> a5cb659bbc1c8644efa0c3138a757a1e432a4880
commit ef09c9ff343122a0b245416066992d096416ff19
Author: Michal Kubeƒçek <mkubecek@suse.cz>
Date:   Mon Jun 19 13:03:43 2017 +0200

    net: account for current skb length when deciding about UFO
    
    
    [ Upstream commit a5cb659bbc1c8644efa0c3138a757a1e432a4880 ]
    
    Our customer encountered stuck NFS writes for blocks starting at specific
    offsets w.r.t. page boundary caused by networking stack sending packets via
    UFO enabled device with wrong checksum. The problem can be reproduced by
    composing a long UDP datagram from multiple parts using MSG_MORE flag:
    
      sendto(sd, buff, 1000, MSG_MORE, ...);
      sendto(sd, buff, 1000, MSG_MORE, ...);
      sendto(sd, buff, 3000, 0, ...);
    
    Assume this packet is to be routed via a device with MTU 1500 and
    NETIF_F_UFO enabled. When second sendto() gets into __ip_append_data(),
    this condition is tested (among others) to decide whether to call
    ip_ufo_append_data():
    
      ((length + fragheaderlen) > mtu) || (skb && skb_is_gso(skb))
    
    At the moment, we already have skb with 1028 bytes of data which is not
    marked for GSO so that the test is false (fragheaderlen is usually 20).
    Thus we append second 1000 bytes to this skb without invoking UFO. Third
    sendto(), however, has sufficient length to trigger the UFO path so that we
    end up with non-UFO skb followed by a UFO one. Later on, udp_send_skb()
    uses udp_csum() to calculate the checksum but that assumes all fragments
    have correct checksum in skb->csum which is not true for UFO fragments.
    
    When checking against MTU, we need to add skb->len to length of new segment
    if we already have a partially filled skb and fragheaderlen only if there
    isn't one.
    
    In the IPv6 case, skb can only be null if this is the first segment so that
    we have to use headersize (length of the first IPv6 header) rather than
    fragheaderlen (length of IPv6 header of further fragments) for skb == NULL.
    
    Fixes: e89e9cf539a2 ("[IPv4/IPv6]: UFO Scatter-gather approach")
    Fixes: e4c5e13aa45c ("ipv6: Should use consistent conditional judgement for
            ip6 fragment between __ip6_append_data and ip6_finish_output")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Acked-by: Vlad Yasevich <vyasevic@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 53eed8aadc58a5c2b1563d8755d8546c88222f0c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 11 09:14:09 2017 -0700

    revert "net: account for current skb length when deciding about UFO"
    
    This reverts commit ef09c9ff343122a0b245416066992d096416ff19 which is
    commit a5cb659bbc1c8644efa0c3138a757a1e432a4880 upstream as it causes
    merge issues with later patches that are much more important...
    
    Cc: Michal Kubecek <mkubecek@suse.cz>
    Cc: Vlad Yasevich <vyasevic@redhat.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ea703cb0140bdeed8b5576816d3cbe6cf09c44d5 ......
	 orig commit -> 9da34cd34e85aacc55af8774b81b1f23e86014f9 ......
		 9da34cd34e85aacc55af8774b81b1f23e86014f9 has problem. Fixes commit -> 5bae8c031053c69b4aa74b7f1ba15d4ec8426208
commit a69f0d54fdc96914a041039c22e46da8e95c4d22
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Sun Jan 15 19:05:38 2017 +0200

    net/mlx5: E-Switch, Re-enable RoCE on mode change only after FDB destroy
    
    
    [ Upstream commit 5bae8c031053c69b4aa74b7f1ba15d4ec8426208 ]
    
    We must re-enable RoCE on the e-switch management port (PF) only after destroying
    the FDB in its switchdev/offloaded mode. Otherwise, when encapsulation is supported,
    this re-enablement will fail.
    
    Also, it's more natural and symmetric to disable RoCE on the PF before we create
    the FDB under switchdev mode, so do that as well and revert if getting into error
    during the mode change later.
    
    Fixes: 9da34cd34e85 ('net/mlx5: Disable RoCE on the e-switch management [..]')
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reviewed-by: Hadar Hen Zion <hadarh@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking a0a4dd4469048544407e5c6f7466af4dc48a2571 ......
	 orig commit -> 4cf48f1d7520a4d325af58eded4d8090e1b40be7 ......
checking 0ce84ef6a29655b9f985827e149dbf0d23b02dc2 ......
	 orig commit -> 5acd016c88937be3667ba4e6b60f0f74455b5e80 ......
checking 2bc4d1c9578454d1fae8fb731c50ad1f30656f69 ......
	 orig commit -> 820381572fc015baa4f5744f5d4583ec0c0f1b82 ......
checking b1164693f770988e6a164dd813d3408cb7c1762e ......
	 orig commit -> 81d7358d7038dd1001547950087e5b0641732f3f ......
checking 0686a9bc42adff7e70f345685a059ccd2de6f42d ......
	 orig commit -> 5066d5296ff2db20625e5f46e7338872c90c649f ......
checking 82338e9ffba55e611613f6a5dfd17697fd76e1e2 ......
	 orig commit -> 610c908773d30907c950ca3b2ee8ac4b2813537b ......
checking 34fae9c906ec93d7c783d17b365cf1b84db415ec ......
	 orig commit -> 0dad3a3014a0b9e72521ff44f17e0054f43dcdea ......
checking a3ff46097a1d05fc95e34f9c4ca493488d8fe766 ......
	 orig commit -> bbb3be170ac2891526ad07b18af7db226879a8e7 ......
checking 48a70be0de9e014994c4bd4749c9ccc15bc7731a ......
	 orig commit -> 6e7bc478c9a006c701c14476ec9d389a484b4864 ......
checking e10f7bd6a6b8484ebe140a793d30b0cc56603620 ......
	 orig commit -> e9a330c4289f2ba1ca4bf98c2b430ab165a8931b ......
checking a0840275e3ebddd5d1349cd4908777e11ba50311 ......
	 orig commit -> 76d5692a58031696e282384cbd893832bc92bd76 ......
		 76d5692a58031696e282384cbd893832bc92bd76 has problem. Fixes commit -> e9a330c4289f2ba1ca4bf98c2b430ab165a8931b
commit e10f7bd6a6b8484ebe140a793d30b0cc56603620
Author: Kees Cook <keescook@chromium.org>
Date:   Sun Mar 5 22:08:58 2017 -0800

    pstore: Use dynamic spinlock initializer
    
    commit e9a330c4289f2ba1ca4bf98c2b430ab165a8931b upstream.
    
    The per-prz spinlock should be using the dynamic initializer so that
    lockdep can correctly track it. Without this, under lockdep, we get a
    warning at boot that the lock is in non-static memory.
    
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Fixes: 76d5692a5803 ("pstore: Correctly initialize spinlock and flags")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4693080316e671580459875723795fdb805a6cf4 ......
	 orig commit -> 663deb47880f2283809669563c5a52ac7c6aef1a ......
		 663deb47880f2283809669563c5a52ac7c6aef1a has problem. Fixes commit -> 76d5692a58031696e282384cbd893832bc92bd76
commit a0840275e3ebddd5d1349cd4908777e11ba50311
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Feb 9 15:43:44 2017 -0800

    pstore: Correctly initialize spinlock and flags
    
    commit 76d5692a58031696e282384cbd893832bc92bd76 upstream.
    
    The ram backend wasn't always initializing its spinlock correctly. Since
    it was coming from kzalloc memory, though, it was harmless on
    architectures that initialize unlocked spinlocks to 0 (at least x86 and
    ARM). This also fixes a possibly ignored flag setting too.
    
    When running under CONFIG_DEBUG_SPINLOCK, the following Oops was visible:
    
    [    0.760836] persistent_ram: found existing buffer, size 29988, start 29988
    [    0.765112] persistent_ram: found existing buffer, size 30105, start 30105
    [    0.769435] persistent_ram: found existing buffer, size 118542, start 118542
    [    0.785960] persistent_ram: found existing buffer, size 0, start 0
    [    0.786098] persistent_ram: found existing buffer, size 0, start 0
    [    0.786131] pstore: using zlib compression
    [    0.790716] BUG: spinlock bad magic on CPU#0, swapper/0/1
    [    0.790729]  lock: 0xffffffc0d1ca9bb0, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
    [    0.790742] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc2+ #913
    [    0.790747] Hardware name: Google Kevin (DT)
    [    0.790750] Call trace:
    [    0.790768] [<ffffff900808ae88>] dump_backtrace+0x0/0x2bc
    [    0.790780] [<ffffff900808b164>] show_stack+0x20/0x28
    [    0.790794] [<ffffff9008460ee0>] dump_stack+0xa4/0xcc
    [    0.790809] [<ffffff9008113cfc>] spin_dump+0xe0/0xf0
    [    0.790821] [<ffffff9008113d3c>] spin_bug+0x30/0x3c
    [    0.790834] [<ffffff9008113e28>] do_raw_spin_lock+0x50/0x1b8
    [    0.790846] [<ffffff9008a2d2ec>] _raw_spin_lock_irqsave+0x54/0x6c
    [    0.790862] [<ffffff90083ac3b4>] buffer_size_add+0x48/0xcc
    [    0.790875] [<ffffff90083acb34>] persistent_ram_write+0x60/0x11c
    [    0.790888] [<ffffff90083aab1c>] ramoops_pstore_write_buf+0xd4/0x2a4
    [    0.790900] [<ffffff90083a9d3c>] pstore_console_write+0xf0/0x134
    [    0.790912] [<ffffff900811c304>] console_unlock+0x48c/0x5e8
    [    0.790923] [<ffffff900811da18>] register_console+0x3b0/0x4d4
    [    0.790935] [<ffffff90083aa7d0>] pstore_register+0x1a8/0x234
    [    0.790947] [<ffffff90083ac250>] ramoops_probe+0x6b8/0x7d4
    [    0.790961] [<ffffff90085ca548>] platform_drv_probe+0x7c/0xd0
    [    0.790972] [<ffffff90085c76ac>] driver_probe_device+0x1b4/0x3bc
    [    0.790982] [<ffffff90085c7ac8>] __device_attach_driver+0xc8/0xf4
    [    0.790996] [<ffffff90085c4bfc>] bus_for_each_drv+0xb4/0xe4
    [    0.791006] [<ffffff90085c7414>] __device_attach+0xd0/0x158
    [    0.791016] [<ffffff90085c7b18>] device_initial_probe+0x24/0x30
    [    0.791026] [<ffffff90085c648c>] bus_probe_device+0x50/0xe4
    [    0.791038] [<ffffff90085c35b8>] device_add+0x3a4/0x76c
    [    0.791051] [<ffffff90087d0e84>] of_device_add+0x74/0x84
    [    0.791062] [<ffffff90087d19b8>] of_platform_device_create_pdata+0xc0/0x100
    [    0.791073] [<ffffff90087d1a2c>] of_platform_device_create+0x34/0x40
    [    0.791086] [<ffffff900903c910>] of_platform_default_populate_init+0x58/0x78
    [    0.791097] [<ffffff90080831fc>] do_one_initcall+0x88/0x160
    [    0.791109] [<ffffff90090010ac>] kernel_init_freeable+0x264/0x31c
    [    0.791123] [<ffffff9008a25bd0>] kernel_init+0x18/0x11c
    [    0.791133] [<ffffff9008082ec0>] ret_from_fork+0x10/0x50
    [    0.793717] console [pstore-1] enabled
    [    0.797845] pstore: Registered ramoops as persistent store backend
    [    0.804647] ramoops: attached 0x100000@0xf7edc000, ecc: 0/0
    
    Fixes: 663deb47880f ("pstore: Allow prz to control need for locking")
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Reported-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 5463a3dccf10204577b8c1c170ca66efa7b65e3e ......
	 orig commit -> a2370ba2752538404e363346b339869c9973aeac ......
checking ad25f11ed216d5ce3b5566b2f187b59fa3061b40 ......
	 orig commit -> 49d31c2f389acfe83417083e1208422b4091cd9e ......
checking d933777b1b1b15c61bb464f715afdc249606ac00 ......
	 orig commit -> 860f01e96981a68553f3ca49f574ff14fe955e72 ......
checking 196553666dced915c535ee6fb6cacd98ad80cdff ......
	 orig commit -> 5a7a88f1b488e4ee49eb3d5b82612d4d9ffdf2c3 ......
checking 62b5776c8c86bc91acf7693a00d1ca82d3aa6a9c ......
	 orig commit -> 96b777452d8881480fd5be50112f791c17db4b6b ......
checking 016a638a518c828719147e2f2d9cd9a0941fe6dd ......
	 orig commit -> cb710ab1d8a23f68ff8f45aedf3e552bb90e70de ......
checking abe9090ac07b1294c88686336ea881e833312a9e ......
	 orig commit -> cc6eeaa3029a6dbcb4ad41b1f92876483bd88965 ......
checking a23fba8182039d7162d6b19c9030a414f43f7f62 ......
	 orig commit -> c61b781ee084e69855477d23dd33e7e6caad652c ......
checking 2f16bcd4dba9980a1d237b0fa0c697aa7547c2d6 ......
	 orig commit -> dfb5b098e0f40b68aa07f2ec55f4dd762efefbfa ......
checking 59153e6589366f09eb42b92c8bc8c2fce72fe8fe ......
	 orig commit -> 18ae68fff392e445af3c2d8be9bef8a16e1c72a7 ......
checking 7b3a66739ff01fcd9b8007a18ddd29edd2cb74f7 ......
	 orig commit -> 9f5af546e6acc30f075828cb58c7f09665033967 ......
checking b756862459d2b8a977538e5f61345e3633c51d0f ......
	 orig commit -> e8f4ae85439f34bec3b0ab69223a41809dab28c9 ......
checking 6c78197e4a69c19e61dfe904fdc661b2aee8ec20 ......
	 orig commit -> 0878fff1f42c18e448ab5b8b4f6a3eb32365b5b6 ......
checking 57154f0302cd39a7ff5f3f4ceef23bda4112c77e ......
	 orig commit -> b6355fb3f5f40bbce165847d277e64896cab8f95 ......
checking 35bdf9a61dc9bd8e47f988b729e038a1ac8b7c9d ......
	 orig commit -> 2497128133f8169b24b928852ba6eae34fc495e5 ......
checking 6b3d13fe67da15aca3186c11c016b6abd00f0469 ......
	 orig commit -> dea1d0f5f1284e3defee4b8484d9fc230686cd42 ......
checking 7b4e4b18ea64f95a8502199e792cbe75297c66ef ......
	 orig commit -> 9cd4f1a4e7a858849e889a081a99adff83e08e4c ......
		 9cd4f1a4e7a858849e889a081a99adff83e08e4c has problem. Fixes commit -> dea1d0f5f1284e3defee4b8484d9fc230686cd42
commit 6b3d13fe67da15aca3186c11c016b6abd00f0469
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jul 11 22:06:24 2017 +0200

    smp/hotplug: Replace BUG_ON and react useful
    
    commit dea1d0f5f1284e3defee4b8484d9fc230686cd42 upstream.
    
    The move of the unpark functions to the control thread moved the BUG_ON()
    there as well. While it made some sense in the idle thread of the upcoming
    CPU, it's bogus to crash the control thread on the already online CPU,
    especially as the function has a return value and the callsite is prepared
    to handle an error return.
    
    Replace it with a WARN_ON_ONCE() and return a proper error code.
    
    Fixes: 9cd4f1a4e7a8 ("smp/hotplug: Move unparking of percpu threads to the control CPU")
    Rightfully-ranted-at-by: Linux Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 755f65501f704219eab609601c9fa043f2131fb9 ......
	 orig commit -> 4f7b0d263833928e947e172eff2d2997179c5cb9 ......
checking 9bf0d78bf640c95a3e9e7e1eeb9e0596a651bbe7 ......
	 orig commit -> bf279ece37d2a3eaaa9813fcd7a1d8a81eb29c20 ......
checking 0f31691508c64a139da303f17b31ed3dcbf63de1 ......
	 orig commit -> b4624ff952ec7d268a9651cd9184a1995befc271 ......
	 orig commit -> ba4a648f12f4cd0a8003dd229b6ca8a53348ee4b ......
checking c39c3aeb2b417f0f12ab729f9631d9f90cd830f3 ......
	 orig commit -> 7ceaa6dcd8c6f59588428cec37f3c8093dd1011f ......
checking e5cd34d10459e20a78514efcd7a45cfc370743c2 ......
	 orig commit -> 4c3bb4ccd074e1a0552078c0bf94c662367a1658 ......
checking ae8faca6e2e727105f8ed485783ea25a25a425ee ......
	 orig commit -> 38bcb208f60924a031b9f809f7cd252ea4a94e5f ......
checking 34da5f74eb5caf1ae3873463aa5e2b801fa450c3 ......
	 orig commit -> a90e049cacd965dade4dae7263b4d3fd550e78b6 ......
checking e41779886b90cf928cdc3e790dd31104fdab00fa ......
	 orig commit -> fcfffdd8f98ac305285dca568b5065ef86be6458 ......
checking fabc7dffe9e123e5be2456139853a7e12c5adce8 ......
	 orig commit -> 7e96d559634b73a8158ee99a7abece2eacec2668 ......
checking d745f0f67b70afafd4d5f300ec422dae26bbd938 ......
	 orig commit -> e47057151422a67ce08747176fa21cb3b526a2c9 ......
checking 9eb088e57edd9aa38e7d7a6c86424b4e6d5400eb ......
	 orig commit -> 41cdf7a45389e01991ee31e3301ed83cb3e3f7dc ......
checking 7d2a354861e9257824a201d39a11e6a4d2a60cb4 ......
	 orig commit -> b7dbcc0e433f0f61acb89ed9861ec996be4f2b38 ......
checking b087b8b11e52f3ae9278d01f62db7cddb7236fee ......
	 orig commit -> 442ce0499c0535f8972b68fa1fda357357a5c953 ......
checking 6d3d93ca2ef8ae97f68f1aa03ec5b826a7f29f1e ......
	 orig commit -> 4fd1bd443e80b12f0a01a45fb9a793206b41cb72 ......
checking fa2aa76efe7d07b8920defea92072bf1df2df7b1 ......
	 orig commit -> 56188832a50f09998cb570ba3771a1d25c193c0e ......
checking f0d23fa632430cee981ea2b662b52c62915fc9bc ......
	 orig commit -> 56008c04ebc099940021b714da2d7779117cf6a7 ......
checking afe9fc012bc1ba720d83959af3918de501fda3d5 ......
	 orig commit -> ae7a609c34b6fb12328c553b5f9aab26ae74a28e ......
checking 5f8bdd5edc82987b40db73e8af93c1f0b9e10048 ......
	 orig commit -> 74ec118152ea494a25ebb677cbc83a75c982ac5f ......
checking 3d955095c597a6deac43ab2f388da12d11af7aee ......
	 orig commit -> 610e1ae9b533be82b3aa118b907e0a703256913d ......
checking 3a79e1c8e709db0174dbafc5dcd9785e4bf36250 ......
	 orig commit -> 9bcf66c72d726322441ec82962994e69157613e4 ......
checking 26d01aa8a110b9809d2bd138be42ee39ed4e3183 ......
	 orig commit -> b2504a5dbef3305ef41988ad270b0e8ec289331c ......
		 b2504a5dbef3305ef41988ad270b0e8ec289331c has problem. Fixes commit -> 8d63bee643f1fb53e472f0e135cae4eb99d62d19
6e7bc478c9a006c701c14476ec9d389a484b4864
commit 69ffc9644ffec424cd3f74794b2d616405576e1e
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Aug 8 14:22:55 2017 -0400

    net: avoid skb_warn_bad_offload false positives on UFO
    
    
    [ Upstream commit 8d63bee643f1fb53e472f0e135cae4eb99d62d19 ]
    
    skb_warn_bad_offload triggers a warning when an skb enters the GSO
    stack at __skb_gso_segment that does not have CHECKSUM_PARTIAL
    checksum offload set.
    
    Commit b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    observed that SKB_GSO_DODGY producers can trigger the check and
    that passing those packets through the GSO handlers will fix it
    up. But, the software UFO handler will set ip_summed to
    CHECKSUM_NONE.
    
    When __skb_gso_segment is called from the receive path, this
    triggers the warning again.
    
    Make UFO set CHECKSUM_UNNECESSARY instead of CHECKSUM_NONE. On
    Tx these two are equivalent. On Rx, this better matches the
    skb state (checksum computed), as CHECKSUM_NONE here means no
    checksum computed.
    
    See also this thread for context:
    http://patchwork.ozlabs.org/patch/799015/
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48a70be0de9e014994c4bd4749c9ccc15bc7731a
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Feb 3 14:29:42 2017 -0800

    net: skb_needs_check() accepts CHECKSUM_NONE for tx
    
    commit 6e7bc478c9a006c701c14476ec9d389a484b4864 upstream.
    
    My recent change missed fact that UFO would perform a complete
    UDP checksum before segmenting in frags.
    
    In this case skb->ip_summed is set to CHECKSUM_NONE.
    
    We need to add this valid case to skb_needs_check()
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 69ffc9644ffec424cd3f74794b2d616405576e1e
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Aug 8 14:22:55 2017 -0400

    net: avoid skb_warn_bad_offload false positives on UFO
    
    
    [ Upstream commit 8d63bee643f1fb53e472f0e135cae4eb99d62d19 ]
    
    skb_warn_bad_offload triggers a warning when an skb enters the GSO
    stack at __skb_gso_segment that does not have CHECKSUM_PARTIAL
    checksum offload set.
    
    Commit b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    observed that SKB_GSO_DODGY producers can trigger the check and
    that passing those packets through the GSO handlers will fix it
    up. But, the software UFO handler will set ip_summed to
    CHECKSUM_NONE.
    
    When __skb_gso_segment is called from the receive path, this
    triggers the warning again.
    
    Make UFO set CHECKSUM_UNNECESSARY instead of CHECKSUM_NONE. On
    Tx these two are equivalent. On Rx, this better matches the
    skb state (checksum computed), as CHECKSUM_NONE here means no
    checksum computed.
    
    See also this thread for context:
    http://patchwork.ozlabs.org/patch/799015/
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48a70be0de9e014994c4bd4749c9ccc15bc7731a
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Feb 3 14:29:42 2017 -0800

    net: skb_needs_check() accepts CHECKSUM_NONE for tx
    
    commit 6e7bc478c9a006c701c14476ec9d389a484b4864 upstream.
    
    My recent change missed fact that UFO would perform a complete
    UDP checksum before segmenting in frags.
    
    In this case skb->ip_summed is set to CHECKSUM_NONE.
    
    We need to add this valid case to skb_needs_check()
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d97aff4f9770582a14461ed57c0985a7288d3480 ......
	 orig commit -> 109704492ef637956265ec2eb72ae7b3b39eb6f4 ......
		 109704492ef637956265ec2eb72ae7b3b39eb6f4 has problem. Fixes commit -> e9a330c4289f2ba1ca4bf98c2b430ab165a8931b
76d5692a58031696e282384cbd893832bc92bd76
commit a0840275e3ebddd5d1349cd4908777e11ba50311
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Feb 9 15:43:44 2017 -0800

    pstore: Correctly initialize spinlock and flags
    
    commit 76d5692a58031696e282384cbd893832bc92bd76 upstream.
    
    The ram backend wasn't always initializing its spinlock correctly. Since
    it was coming from kzalloc memory, though, it was harmless on
    architectures that initialize unlocked spinlocks to 0 (at least x86 and
    ARM). This also fixes a possibly ignored flag setting too.
    
    When running under CONFIG_DEBUG_SPINLOCK, the following Oops was visible:
    
    [    0.760836] persistent_ram: found existing buffer, size 29988, start 29988
    [    0.765112] persistent_ram: found existing buffer, size 30105, start 30105
    [    0.769435] persistent_ram: found existing buffer, size 118542, start 118542
    [    0.785960] persistent_ram: found existing buffer, size 0, start 0
    [    0.786098] persistent_ram: found existing buffer, size 0, start 0
    [    0.786131] pstore: using zlib compression
    [    0.790716] BUG: spinlock bad magic on CPU#0, swapper/0/1
    [    0.790729]  lock: 0xffffffc0d1ca9bb0, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
    [    0.790742] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc2+ #913
    [    0.790747] Hardware name: Google Kevin (DT)
    [    0.790750] Call trace:
    [    0.790768] [<ffffff900808ae88>] dump_backtrace+0x0/0x2bc
    [    0.790780] [<ffffff900808b164>] show_stack+0x20/0x28
    [    0.790794] [<ffffff9008460ee0>] dump_stack+0xa4/0xcc
    [    0.790809] [<ffffff9008113cfc>] spin_dump+0xe0/0xf0
    [    0.790821] [<ffffff9008113d3c>] spin_bug+0x30/0x3c
    [    0.790834] [<ffffff9008113e28>] do_raw_spin_lock+0x50/0x1b8
    [    0.790846] [<ffffff9008a2d2ec>] _raw_spin_lock_irqsave+0x54/0x6c
    [    0.790862] [<ffffff90083ac3b4>] buffer_size_add+0x48/0xcc
    [    0.790875] [<ffffff90083acb34>] persistent_ram_write+0x60/0x11c
    [    0.790888] [<ffffff90083aab1c>] ramoops_pstore_write_buf+0xd4/0x2a4
    [    0.790900] [<ffffff90083a9d3c>] pstore_console_write+0xf0/0x134
    [    0.790912] [<ffffff900811c304>] console_unlock+0x48c/0x5e8
    [    0.790923] [<ffffff900811da18>] register_console+0x3b0/0x4d4
    [    0.790935] [<ffffff90083aa7d0>] pstore_register+0x1a8/0x234
    [    0.790947] [<ffffff90083ac250>] ramoops_probe+0x6b8/0x7d4
    [    0.790961] [<ffffff90085ca548>] platform_drv_probe+0x7c/0xd0
    [    0.790972] [<ffffff90085c76ac>] driver_probe_device+0x1b4/0x3bc
    [    0.790982] [<ffffff90085c7ac8>] __device_attach_driver+0xc8/0xf4
    [    0.790996] [<ffffff90085c4bfc>] bus_for_each_drv+0xb4/0xe4
    [    0.791006] [<ffffff90085c7414>] __device_attach+0xd0/0x158
    [    0.791016] [<ffffff90085c7b18>] device_initial_probe+0x24/0x30
    [    0.791026] [<ffffff90085c648c>] bus_probe_device+0x50/0xe4
    [    0.791038] [<ffffff90085c35b8>] device_add+0x3a4/0x76c
    [    0.791051] [<ffffff90087d0e84>] of_device_add+0x74/0x84
    [    0.791062] [<ffffff90087d19b8>] of_platform_device_create_pdata+0xc0/0x100
    [    0.791073] [<ffffff90087d1a2c>] of_platform_device_create+0x34/0x40
    [    0.791086] [<ffffff900903c910>] of_platform_default_populate_init+0x58/0x78
    [    0.791097] [<ffffff90080831fc>] do_one_initcall+0x88/0x160
    [    0.791109] [<ffffff90090010ac>] kernel_init_freeable+0x264/0x31c
    [    0.791123] [<ffffff9008a25bd0>] kernel_init+0x18/0x11c
    [    0.791133] [<ffffff9008082ec0>] ret_from_fork+0x10/0x50
    [    0.793717] console [pstore-1] enabled
    [    0.797845] pstore: Registered ramoops as persistent store backend
    [    0.804647] ramoops: attached 0x100000@0xf7edc000, ecc: 0/0
    
    Fixes: 663deb47880f ("pstore: Allow prz to control need for locking")
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Reported-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit e10f7bd6a6b8484ebe140a793d30b0cc56603620
Author: Kees Cook <keescook@chromium.org>
Date:   Sun Mar 5 22:08:58 2017 -0800

    pstore: Use dynamic spinlock initializer
    
    commit e9a330c4289f2ba1ca4bf98c2b430ab165a8931b upstream.
    
    The per-prz spinlock should be using the dynamic initializer so that
    lockdep can correctly track it. Without this, under lockdep, we get a
    warning at boot that the lock is in non-static memory.
    
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Fixes: 76d5692a5803 ("pstore: Correctly initialize spinlock and flags")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0840275e3ebddd5d1349cd4908777e11ba50311
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Feb 9 15:43:44 2017 -0800

    pstore: Correctly initialize spinlock and flags
    
    commit 76d5692a58031696e282384cbd893832bc92bd76 upstream.
    
    The ram backend wasn't always initializing its spinlock correctly. Since
    it was coming from kzalloc memory, though, it was harmless on
    architectures that initialize unlocked spinlocks to 0 (at least x86 and
    ARM). This also fixes a possibly ignored flag setting too.
    
    When running under CONFIG_DEBUG_SPINLOCK, the following Oops was visible:
    
    [    0.760836] persistent_ram: found existing buffer, size 29988, start 29988
    [    0.765112] persistent_ram: found existing buffer, size 30105, start 30105
    [    0.769435] persistent_ram: found existing buffer, size 118542, start 118542
    [    0.785960] persistent_ram: found existing buffer, size 0, start 0
    [    0.786098] persistent_ram: found existing buffer, size 0, start 0
    [    0.786131] pstore: using zlib compression
    [    0.790716] BUG: spinlock bad magic on CPU#0, swapper/0/1
    [    0.790729]  lock: 0xffffffc0d1ca9bb0, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
    [    0.790742] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc2+ #913
    [    0.790747] Hardware name: Google Kevin (DT)
    [    0.790750] Call trace:
    [    0.790768] [<ffffff900808ae88>] dump_backtrace+0x0/0x2bc
    [    0.790780] [<ffffff900808b164>] show_stack+0x20/0x28
    [    0.790794] [<ffffff9008460ee0>] dump_stack+0xa4/0xcc
    [    0.790809] [<ffffff9008113cfc>] spin_dump+0xe0/0xf0
    [    0.790821] [<ffffff9008113d3c>] spin_bug+0x30/0x3c
    [    0.790834] [<ffffff9008113e28>] do_raw_spin_lock+0x50/0x1b8
    [    0.790846] [<ffffff9008a2d2ec>] _raw_spin_lock_irqsave+0x54/0x6c
    [    0.790862] [<ffffff90083ac3b4>] buffer_size_add+0x48/0xcc
    [    0.790875] [<ffffff90083acb34>] persistent_ram_write+0x60/0x11c
    [    0.790888] [<ffffff90083aab1c>] ramoops_pstore_write_buf+0xd4/0x2a4
    [    0.790900] [<ffffff90083a9d3c>] pstore_console_write+0xf0/0x134
    [    0.790912] [<ffffff900811c304>] console_unlock+0x48c/0x5e8
    [    0.790923] [<ffffff900811da18>] register_console+0x3b0/0x4d4
    [    0.790935] [<ffffff90083aa7d0>] pstore_register+0x1a8/0x234
    [    0.790947] [<ffffff90083ac250>] ramoops_probe+0x6b8/0x7d4
    [    0.790961] [<ffffff90085ca548>] platform_drv_probe+0x7c/0xd0
    [    0.790972] [<ffffff90085c76ac>] driver_probe_device+0x1b4/0x3bc
    [    0.790982] [<ffffff90085c7ac8>] __device_attach_driver+0xc8/0xf4
    [    0.790996] [<ffffff90085c4bfc>] bus_for_each_drv+0xb4/0xe4
    [    0.791006] [<ffffff90085c7414>] __device_attach+0xd0/0x158
    [    0.791016] [<ffffff90085c7b18>] device_initial_probe+0x24/0x30
    [    0.791026] [<ffffff90085c648c>] bus_probe_device+0x50/0xe4
    [    0.791038] [<ffffff90085c35b8>] device_add+0x3a4/0x76c
    [    0.791051] [<ffffff90087d0e84>] of_device_add+0x74/0x84
    [    0.791062] [<ffffff90087d19b8>] of_platform_device_create_pdata+0xc0/0x100
    [    0.791073] [<ffffff90087d1a2c>] of_platform_device_create+0x34/0x40
    [    0.791086] [<ffffff900903c910>] of_platform_default_populate_init+0x58/0x78
    [    0.791097] [<ffffff90080831fc>] do_one_initcall+0x88/0x160
    [    0.791109] [<ffffff90090010ac>] kernel_init_freeable+0x264/0x31c
    [    0.791123] [<ffffff9008a25bd0>] kernel_init+0x18/0x11c
    [    0.791133] [<ffffff9008082ec0>] ret_from_fork+0x10/0x50
    [    0.793717] console [pstore-1] enabled
    [    0.797845] pstore: Registered ramoops as persistent store backend
    [    0.804647] ramoops: attached 0x100000@0xf7edc000, ecc: 0/0
    
    Fixes: 663deb47880f ("pstore: Allow prz to control need for locking")
    Fixes: 109704492ef6 ("pstore: Make spinlock per zone instead of global")
    Reported-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0f94b36de37c73bdb3affe7352acac819082d360 ......
	 orig commit -> 89e357d83c06b6fac581c3ca7f0ee3ae7e67109e ......

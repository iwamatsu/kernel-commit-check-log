Check from v4.9.83 to v4.9.84
Commit count: 146
checking 19c04ca5b239e6e2277a5b381d1e79482ab9bbc5 ......
checking 266da9f8d0e650d1d27e06b9cfdbc47e7ad820f4 ......
	 orig commit -> c927b080c67e3e97193c81fc1d27f4251bf4e036 ......
checking 04c776eecc6ddf37166cd30f4e9c50d19480b18f ......
	 orig commit -> bcdde302b8268ef7dbc4ddbdaffb5b44eafe9a1e ......
checking f157269c0607effa13c1478be96f1ebebad2a714 ......
	 orig commit -> 63f3ac48133a19110c8a3666028dbd9b1bf3dcb3 ......
checking afff83e6733b50803c26ac761bbc0926848939e9 ......
	 orig commit -> 9a6e7c39810e4a8bc7fc95056cefb40583fe07ef ......
checking 1acf767c213a0be16a9e1bacb140dd5bf0bb644a ......
	 orig commit -> dac6ca243c4c49a9ca7507d3d66140ebfac8b04b ......
checking 353727e3b4565aaf0eeff57278fac3e1d01547f8 ......
checking fd2e662a75a319c3d10d23a9f218a04acb8ed210 ......
	 orig commit -> 12f043ff2b28fa64c9123b454cbe30a8a9e1967e ......
checking b7f3e605fca372a54cce63ee6f447fa25672337d ......
checking c30e6636ce101fd61331092c490b9d9c55b2d143 ......
checking 890c52ab3d2a7e19714f698d36e83ef8e1a8e1b3 ......
checking 5fe751401360595346f375cabcb8c04a5aa2bf37 ......
	 orig commit -> 900a9020af7a023f9b64c919fddf8a7486108962 ......
checking 6429e2f183c9fcfb446a4e6595a8811956cbf4f5 ......
	 orig commit -> fd94d53e55bd487368dfee9f1af24da78b2bb582 ......
checking ef3af3465ab4ed02b0d3ca5243752d3ef1d98eda ......
	 orig commit -> e7c52b84fb18f08ce49b6067ae6285aca79084a8 ......
checking e4f0069c647e94d8070fc6f6ae1d753d14684c14 ......
	 orig commit -> dbed87a9d3a857a86f602775b5845f5f6d9652b5 ......
checking 04c64a88ceaf7f27da37a375de519fab1b6080fa ......
	 orig commit -> 27d807180ae0a9e50d90adf9b22573c21be904c2 ......
checking 7cc1178e8ccf9a0816ebf8f82ec4a778d4ca68ac ......
	 orig commit -> 27430d19a91615245babaa9b216d0807636903a0 ......
checking 507baad9ffb8fc01985337a964e3c6530e9ad5ab ......
	 orig commit -> 190b23b4eb997767afad186bd8c96badceabf39e ......
checking 25df0c385c5a856dd24c74cb74295ccb805fe93a ......
	 orig commit -> fa6317eedd6341f2144ed1097706d8c34f18b6e4 ......
checking e4e204f548a0577781f228f92b5fb879af5e32d5 ......
	 orig commit -> 3538aa6ecfb2dd727a40f9ebbbf25a0c2afe6226 ......
		 3538aa6ecfb2dd727a40f9ebbbf25a0c2afe6226 has problem. Fixes commit -> 4b0755e90ae03ba40174842af6fa810355960fbc
f2c61f98e0b5f8b53b8fb860e5dcdd661bde7d0b
commit b323768e610b3108bd8ad48329f420d91e7b336b
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Thu May 4 12:20:17 2017 -0300

    tc358743: fix register i2c_rd/wr function fix
    
    commit f2c61f98e0b5f8b53b8fb860e5dcdd661bde7d0b upstream.
    
    The below mentioned fix contains a small but severe bug,
    fix it to make the driver work again.
    
    Fixes: 3538aa6ecfb2 ("[media] tc358743: fix register i2c_rd/wr functions")
    
    Cc: Hans Verkuil <hans.verkuil@cisco.com>
    Cc: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Hans Verkuil <hansverk@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit b323768e610b3108bd8ad48329f420d91e7b336b
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Thu May 4 12:20:17 2017 -0300

    tc358743: fix register i2c_rd/wr function fix
    
    commit f2c61f98e0b5f8b53b8fb860e5dcdd661bde7d0b upstream.
    
    The below mentioned fix contains a small but severe bug,
    fix it to make the driver work again.
    
    Fixes: 3538aa6ecfb2 ("[media] tc358743: fix register i2c_rd/wr functions")
    
    Cc: Hans Verkuil <hans.verkuil@cisco.com>
    Cc: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Hans Verkuil <hansverk@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 8bec83b2cfd92597bcbd928a78ca904f7de90908 ......
	 orig commit -> f1f5929cd9715c1cdfe07a890f12ac7d2c5304ec ......
checking 703d672a63e1feeb6f86a17b8bd09ce37bb3a31a ......
	 orig commit -> e42eef4ba38806b18c4a74f0c276fb2e0b548173 ......
checking b7c3e5db3a92a3c92b0acd63f39974cae0b6f35d ......
	 orig commit -> ea4348c8462a20e8b1b6455a7145d2b86f8a49b6 ......
		 ea4348c8462a20e8b1b6455a7145d2b86f8a49b6 has problem. Fixes commit -> 9dd46c02532a6bed6240101ecf4bbc407f8c6adf
commit c9763bfc7d27dca13d4b6ac93207b98cbd46dda8
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Feb 13 15:45:59 2017 -0800

    Input: tca8418_keypad - remove double read of key event register
    
    commit 9dd46c02532a6bed6240101ecf4bbc407f8c6adf upstream.
    
    There is no need to tread the same register twice in a row.
    
    Fixes: ea4348c8462a ("Input: tca8418_keypad - hide gcc-4.9 -Wmaybe-un ...")
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking edba1c1f78748cc5c0195433346c8bd87ee75b29 ......
	 orig commit -> b74c0a9969f25217a5e5bbcac56a11bee16718d3 ......
checking 282a7a472f597bd70b5a731524d448abf88fff2a ......
	 orig commit -> d4c2269b3d5d06a8ea434b1841fbcaec336ed396 ......
checking 2105905bc5831a4bf110de6c2c4479843aa78454 ......
	 orig commit -> 7e1751001818209b214b8c3df0b3c91fae250ea2 ......
checking 077463be4fd5ec4ea2eb2101074893498a152066 ......
	 orig commit -> 3cd18d1981731d5f74b8e437009124ac99905d14 ......
checking ee2f58b4d33710cbbcbc87e078b709320c10b1d9 ......
	 orig commit -> 7fc1503c906f0fac62d3506a6e993e49fb996248 ......
checking 445e8f85d87d1a56982c3f9ccdce3faa6e091654 ......
	 orig commit -> ab4949640d6674b617b314ad3c2c00353304bab9 ......
checking 37b440a995114c897f70426a2f36f673239fa96b ......
	 orig commit -> 46a049dae771b95e77ac6c823330f4a60f600236 ......
checking e631a1aa0075930d107cd7ae0537825ec70ebd0b ......
	 orig commit -> 2e449048a25eb75d48dff12882b93f26d130a1c6 ......
checking c0ecbd663fe6961c6ff181a211f090005858656f ......
	 orig commit -> 44a5b977128c0ffff0654392b40f4c2ce72a619b ......
checking 6215c811b3a8a5fef320588ac0193ea70574c8e6 ......
	 orig commit -> 3ba5b5ea7dc3a10ef50819b43a9f8de2705f4eec ......
checking bb70b2a03c7c150b292ba2ba83afd31481b11fd6 ......
	 orig commit -> d689c64d189e43d782fec5649fb0afe303c5b3f9 ......
checking c5d98b6400263309b9208a63ee3d273f730ef80f ......
	 orig commit -> 067fdeb2f391bfa071f741a2b3eb74b8ff3785cd ......
checking fb0519fb37e9c59e31393e5cf6c94d71261f25bd ......
	 orig commit -> c2ce3f5d89d57301e2756ac325fe2ebc33bfec30 ......
checking 3bdcbc647bd0cae4b28ef6c92eb068f0a1bb3eba ......
	 orig commit -> 68fd77cf8a4b045594231f07e5fc92e1a34c0a9e ......
checking 7fd22bcdaf62e83fa7f7af083bae83334856df65 ......
	 orig commit -> d460131dd50599e0e9405d5f4ae02c27d529a44a ......
checking afdfe5f58fe1ced6da222d7d058b4c522dc0ce05 ......
	 orig commit -> e572d0887137acfc53f18175522964ec19d88175 ......
checking 826a83a2f94019e8b7dfc957448c156a06c98452 ......
	 orig commit -> 75e2f0a6b16141cb347f442033ec907380d4d66e ......
checking 2e44ee5fc97657ef53b79118814f787449fbd6b8 ......
	 orig commit -> f13d52cb3fad03c237572be2ee691e1fe2d1d7bb ......
checking 9f47b68eabcf126cd1caec7fcbbb16e1ecc0f09c ......
	 orig commit -> b115bebc07f282067eccc06fd5aa3060ab1426da ......
checking 10170a9abae7fbe34ddf2c0ecf230c30e21afc53 ......
	 orig commit -> d4b2ac63b0eae461fc10c9791084be24724ef57a ......
checking 630e2b891cfdae9680a1a43597c05143d7c7ad88 ......
	 orig commit -> f46e7cd36b5f2ce2bfb567e278a10ca717f85b84 ......
checking 6d07cb5cc399651b6d0c172d699052bc2aac1fc1 ......
	 orig commit -> 484c7bbf2649831714da3a0fa30213977458e9b5 ......
checking 28fab4ff2e9c404e9720776e2d06c4d00980ed56 ......
	 orig commit -> c0bfc549e96231e0ead4424de6e4933fde819d70 ......
checking 4890abc7814be49a7d4e448c7b7421e1cea44ec1 ......
	 orig commit -> de5bbdd01cf9ee3cd4586b5a970d3ea015c6d7e3 ......
checking 157c02d2feaefd4eb8ae02ec37c7bd73d869f7d0 ......
	 orig commit -> c8bd2ac3b4c6c84c4a7cdceaed626247db698ab2 ......
checking c0d61d463d0de1c6ebc69bdb9bd9da01773c831f ......
	 orig commit -> b4aca383f9afb5f84b05de272656e6d4a919d995 ......
checking 092bddf5c848ca5f3a865846b372ae1a3ffd2f42 ......
	 orig commit -> fbc2a294f29e726787a0f5238b27137904f26b81 ......
checking 8947af550462c600d90cd672dad732a1575b9f36 ......
	 orig commit -> 42db500a551f97551a901e2258f84a60baf4edfc ......
checking e72c7a3b48db4b72abb201c3d85f68a3c41c9448 ......
	 orig commit -> 11d8b05855f3749bcb6c57e2c4052921b9605c77 ......
checking ad47e672e47e5a70d9c3750800c017503786598a ......
	 orig commit -> fbdf0e28d061708cf18ba0f8e0db5360dc9a15b9 ......
checking 89b6f091e7d7d4724aadb489026f2a5b5044af5e ......
	 orig commit -> aa01338c018469274848a973bcbd287ef341937c ......
checking 1dc6839336341d4091a3bc33379c32cdd4fc1139 ......
	 orig commit -> 23f919d4ad0eb325595f10f55be4301b2965d6d6 ......
checking 7af1c18c2736c9bf3b1fec23e83ff587454fdb24 ......
	 orig commit -> ac29fc66855b79c2960c63a4a66952d5b721d698 ......
checking c4cef78556df50c3f15dc0e98d92a3098971bde7 ......
	 orig commit -> 87a81dce53b1ea61acaeefa5191a0376a2d1d721 ......
checking ec0084d082137b73460303b39f4089970a213ad7 ......
	 orig commit -> bdcb1aefc5b3f7d0f1dc8b02673602bca2ff7a4b ......
checking efe8bc07c47fff196bbc0822e249a27ae0574d24 ......
	 orig commit -> 222f20f140623ef6033491d0103ee0875fe87d35 ......
checking 3146a32b39cd78722869bca6e839b3c59155e012 ......
checking e767d353299a9be2acaa0dd618fdedefff184546 ......
	 orig commit -> 6e266610eb6553cfb7e7eb5d11914bd01509c406 ......
checking d295bb9993524119cdca6226dafa76a448a4c71b ......
	 orig commit -> c4f9d9cb2c29ff04c6b4bb09b72802d8aedfc7cb ......
checking debe057b1ff529ee958cfc9b77d1900c9c9d4411 ......
	 orig commit -> 68a213d325c23d39f109f4c7c824b906a7d209de ......
checking 0f77841b74963effcc2087f520083efe6ff3e653 ......
	 orig commit -> 6d60ce384d1d5ca32b595244db4077a419acc687 ......
checking 4b5b4f6f553e47f0a675d60cbaf48445e27abd04 ......
	 orig commit -> 7f6f60a1ba52538c16f26930bfbcfe193d9d746a ......
checking 93c9e1c63ac6f5d87dc262dd268d735447b0abf9 ......
	 orig commit -> ded600ea9fb51a495d2fcd21e90351df876488e8 ......
checking d947e0d510a328d30c399c99a41be558e35a4390 ......
	 orig commit -> 8722e095f5a44d0e409e45c5ddc2ee9cf589c777 ......
checking b3e60306161cedda47cb961d27632c9b083aeb8e ......
	 orig commit -> eb9436966fdc84cebdf222952a99898ab46d9bb0 ......
checking 5dcc25c233b66c3446a2c249e1a4ed83118f2f0b ......
	 orig commit -> 33cd3c07a976e11c3c4cc6b0b3db6760ad1590c5 ......
checking 9a54c510014b3a1d24d6a2e13dbb6a2eacb5a46c ......
	 orig commit -> 732706afe1cc46ef48493b3d2b69c98f36314ae4 ......
checking 5ae4f528030800598c91cd1e814997d6284ca2c1 ......
	 orig commit -> c810daba0ab5226084a56893a789af427a801146 ......
checking f99ff84b3654ab5fda483fee9a2b3d28ac8307b6 ......
	 orig commit -> c7b92172a61b91936be985cb9bc499a4ebc6489b ......
checking 82acb5fc22ece01395dc01e51159c4544bb75297 ......
	 orig commit -> 975b820b6836b6b6c42fb84cd2e772e2b41bca67 ......
checking 3250df9fa82bb8c25af7acfd5875d684b9995119 ......
	 orig commit -> 62a277d43d47e74972de44d33bd3763e31992414 ......
checking b3df69b4abe6cfd8efc8c3c187cff7f02aeff642 ......
	 orig commit -> 5c9afbda911ce20b3f2181d1e440a0222e1027dd ......
checking 6ac3ffdb493fa80645c51030d6344a8bf7189197 ......
	 orig commit -> b6b5e8a691185606dfffff3198c89e3b4fd9d4f6 ......
		 b6b5e8a691185606dfffff3198c89e3b4fd9d4f6 has problem. Fixes commit -> 0231b1a074c672f8c00da00a57144072890d816b
5df7af85ecd88e8b5f1f31d6456c3cf38a8bbdda
checking d39838a5565984e9488775c0dff7dc95dd10994f ......
	 orig commit -> 8dfd2f22d3bf3ab7714f7495ad5d897b8845e8c1 ......
checking 472a0d5bc8ec20eda9d1abe89b24acf6a8c78f04 ......
	 orig commit -> e46772a6946a7d1f3fbbc1415871851d6651f1d4 ......
checking 31d3d76094a1e07f21a89b4b30a41bae86c292e5 ......
	 orig commit -> 51ef7925e10688c57186d438e784532e063492e4 ......
checking 1c3aae50cec79164955e920432a7aba748c1b09a ......
	 orig commit -> c8bcbfbd239ed60a6562964b58034ac8a25f4c31 ......
checking a0514c0ba76a5a941ed3b8efa7a952273c1ca421 ......
	 orig commit -> 8afa10cbe281b10371fee5a87ab266e48d71a7f9 ......
checking 1c03903e973c276f9e75d6f7f3727b51b97c803b ......
	 orig commit -> 5c472203421ab4f928aa1ae9e1dbcfdd80324148 ......
checking 1cb73895efa3cb4420452d89e17984410612c3fc ......
	 orig commit -> 58117672943734715bbe7565ac9f062effa524f0 ......
checking 013cf65277a576af1e067ab65c619320bcc38dc3 ......
	 orig commit -> d364b038bc962f494cffb8f6cb6cddbe41bcb5b6 ......
checking b659e15da5ab95e68cee9860d18d41e1926cc08b ......
	 orig commit -> da340f921d3454f1521671c7a5a43ad3331fbe50 ......
checking d532f6283928bfe0b028ca0972f42997837468e7 ......
	 orig commit -> 5aa04b3eb6fca63d2e9827be656dcadc26d54e11 ......
checking 7693bb5dd56eb5e8746373d65ce414ab6d6ac838 ......
	 orig commit -> 969de0988b77e5a57aac2f7270191a3c50540c52 ......
checking 671d901f226beccbb528ccbf4c1fa99ed7d9e118 ......
	 orig commit -> a98a4ebc8c61d20f0150d6be66e0e65223a347af ......
checking e985f5a9487f2c9c30fe652a9922ff78a700aebd ......
	 orig commit -> e814bccbafece52a24e152d2395b5d49eef55841 ......
checking 4f4ed764ad1834fc0d64b903cf1e43b23e3f9f21 ......
	 orig commit -> d30fc5126efb0c33b7adf5966d3051db2c3d7721 ......
checking 7fb8b5d4867eb99d1f936c06add86603020c97d2 ......
	 orig commit -> 23a9cd2ad90543e9da3786878d2b2729c095439d ......
checking 82f9ba5ee2f7bde5f894786f74f0bb401130fafe ......
	 orig commit -> a283cdc4d3670700182c820b59078387f9a01a30 ......
checking 2e535dafc07baa606d238e8f4d869b0a732d11d5 ......
	 orig commit -> 7c5c2c2d18d778e51fd8b899965097168306031c ......
checking 416871776a0147475850a0eeb870540682207f74 ......
	 orig commit -> 6ad4cc8d1ac483e0fd33f605fb2788b0ecf51ed4 ......
checking 74e9c5b29b12217e37e3c626110a7d0eb187ccca ......
	 orig commit -> 070250a1715cee2297de0d9e7e2cea58be999d37 ......
checking 510b5d8dd8b8d197c3401fee7dd7e0595cf01d99 ......
	 orig commit -> 321a7c35c90cc834851ceda18a8ee18f1d032b92 ......
checking a2eca0cda2d6fb4a539f3369172d0d045d872360 ......
	 orig commit -> 89d0aeab4252adc2a7ea693637dd21c588bfa2d1 ......
checking e41d6c98e893db96105d8fe3ed8a81469f815554 ......
	 orig commit -> ca41e244517d6d3f1600c229ff7ca615049c1e9c ......
checking 0497ca7dda9e9e2bf0f2589d6f3cbf057c067fb9 ......
	 orig commit -> 627395a6f8091c0aa18f49dca7df59ba3ec147ef ......
checking 10a889b659f3a1b0a07a60f07267f7c0fc1d9a24 ......
	 orig commit -> cd7594ac3281722cb8f10d6f6c7e4287747c7a9d ......
checking 84adf1934a75eac40c75356d213b525c50b7fb0e ......
	 orig commit -> 3c18bbf3d11d2005da08b57ff26f44ff1c2b12d0 ......
checking 898efc96227aa2fcc9d1b2a94e8e428deed9d580 ......
	 orig commit -> cf87634c8b24e24bf379b8c6807c8b0fb5f23567 ......
checking 1c56be1d94eeeb68d4247e15a616082e1c1f8b09 ......
	 orig commit -> b6d6af7226465b6d11eac09d0be2ab78a4a9eb62 ......
checking 909ae61c74f6bd404aaeddbcf78e5cd81f9ceaed ......
	 orig commit -> d09220a887f70368afa79e850c95e74890c0a32d ......
		 d09220a887f70368afa79e850c95e74890c0a32d has problem. Fixes commit -> 863204cfdae98626a92535ac928ad79f4d6b74ff
commit c20eb490e7381c83f99922831cb74a6730d40ce0
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Dec 6 14:17:17 2017 +0100

    ARM: omap2: hide omap3_save_secure_ram on non-OMAP3 builds
    
    commit 863204cfdae98626a92535ac928ad79f4d6b74ff upstream.
    
    In configurations without CONFIG_OMAP3 but with secure RAM support,
    we now run into a link failure:
    
    arch/arm/mach-omap2/omap-secure.o: In function `omap3_save_secure_ram':
    omap-secure.c:(.text+0x130): undefined reference to `save_secure_ram_context'
    
    The omap3_save_secure_ram() function is only called from the OMAP34xx
    power management code, so we can simply hide that function in the
    appropriate #ifdef.
    
    Fixes: d09220a887f7 ("ARM: OMAP2+: Fix SRAM virt to phys translation for save_secure_ram_context")
    Acked-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Dan Murphy <dmurphy@ti.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b25d766c27a053284fb23f6805071f5555cf3592 ......
	 orig commit -> c9d24f78268be444e803fb2bb138a2f598de9c23 ......
checking 8690825ea691c689a1c21fbf5f8000df35cf043b ......
	 orig commit -> 009f41aed4b3e11e6dc1e3c07377a10c20f1a5ed ......
checking f23830925a33186636f229f5d20abd3178aa38e1 ......
	 orig commit -> 7d2b8e6aaf9ee87910c2337e1c59bb5d3e3ba8c5 ......
checking d00bf35965be429e5426f84baafd3c2d8df435cd ......
	 orig commit -> e31b617d0a63c6558485aaa730fd162faa95a766 ......
checking 4be5a281048964854c0b1c145e57597e7116ea9f ......
	 orig commit -> f88982679f54f75daa5b8eff3da72508f1e7422f ......
checking 2dfe49da487cf92b45083deb38e37062a5b8f83e ......
	 orig commit -> ce8a3a9e76d0193e2e8d74a06d275b3c324ca652 ......
		 ce8a3a9e76d0193e2e8d74a06d275b3c324ca652 has problem. Fixes commit -> 740a5759bf222332fbb5eda42f89aa25ba38f9b2
commit d3c79a38843b7d44734dacc17694a72a0b269b74
Author: Yisheng Xie <xieyisheng1@huawei.com>
Date:   Wed Feb 28 14:59:22 2018 +0800

    staging: android: ashmem: Fix possible deadlock in ashmem_ioctl
    
    commit 740a5759bf222332fbb5eda42f89aa25ba38f9b2 upstream.
    
    ashmem_mutex may create a chain of dependencies like:
    
    CPU0                                    CPU1
     mmap syscall                           ioctl syscall
     -> mmap_sem (acquired)                 -> ashmem_ioctl
     -> ashmem_mmap                            -> ashmem_mutex (acquired)
        -> ashmem_mutex (try to acquire)       -> copy_from_user
                                                  -> mmap_sem (try to acquire)
    
    There is a lock odering problem between mmap_sem and ashmem_mutex causing
    a lockdep splat[1] during a syzcaller test. This patch fixes the problem
    by move copy_from_user out of ashmem_mutex.
    
    [1] https://www.spinics.net/lists/kernel/msg2733200.html
    
    Fixes: ce8a3a9e76d0 (staging: android: ashmem: Fix a race condition in pin ioctls)
    Reported-by: syzbot+d7a918a7a8e1c952bc36@syzkaller.appspotmail.com
    Signed-off-by: Yisheng Xie <xieyisheng1@huawei.com>
    Cc: "Joel Fernandes (Google)" <joel.opensrc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking fedae0f64845933a0f28604a09be2e0323d66236 ......
	 orig commit -> dfec091439bb2acf763497cfc58f2bdfc67c56b7 ......
checking a5a8a31db2cc2ddc549df75f7beaada6eaf4060e ......
	 orig commit -> acbf76ee05067c3942852019993f7beb69a0f45f ......
checking f10bcae2c98ea15bf67148d9f52ed63ed8ee6287 ......
	 orig commit -> a21b4c10c7bf5b58112afa20d6fa829e8d74e3e6 ......
checking fc428560984ce1705a092fe94305689849ccb7f6 ......
	 orig commit -> c1530ac5a3ce93a1f02adabc4508b5fbf862dfe2 ......
checking ec677e0687ded48154852faa7d5ff25d171a691b ......
	 orig commit -> 1783c9d7cb7bc3181b9271665959b87280d98d8e ......
checking adf26e87f4b73d1f820352b0bfa085f6aaf3f51a ......
	 orig commit -> 9fa68f620041be04720d0cbfb1bd3ddfc6310b24 ......
		 9fa68f620041be04720d0cbfb1bd3ddfc6310b24 has problem. Fixes commit -> ba7d7433a0e998c902132bd47330e355a1eaa894
f3aefb6a7066e24bfea7fcf1b07907576de69d63
commit 994baf8abdac7555e7008643053c13d69fb5e3e5
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Mar 28 10:57:22 2018 -0700

    sunrpc: remove incorrect HMAC request initialization
    
    commit f3aefb6a7066e24bfea7fcf1b07907576de69d63 upstream.
    
    make_checksum_hmac_md5() is allocating an HMAC transform and doing
    crypto API calls in the following order:
    
        crypto_ahash_init()
        crypto_ahash_setkey()
        crypto_ahash_digest()
    
    This is wrong because it makes no sense to init() the request before a
    key has been set, given that the initial state depends on the key.  And
    digest() is short for init() + update() + final(), so in this case
    there's no need to explicitly call init() at all.
    
    Before commit 9fa68f620041 ("crypto: hash - prevent using keyed hashes
    without setting key") the extra init() had no real effect, at least for
    the software HMAC implementation.  (There are also hardware drivers that
    implement HMAC-MD5, and it's not immediately obvious how gracefully they
    handle init() before setkey().)  But now the crypto API detects this
    incorrect initialization and returns -ENOKEY.  This is breaking NFS
    mounts in some cases.
    
    Fix it by removing the incorrect call to crypto_ahash_init().
    
    Reported-by: Michael Young <m.a.young@durham.ac.uk>
    Fixes: 9fa68f620041 ("crypto: hash - prevent using keyed hashes without setting key")
    Fixes: fffdaef2eb4a ("gss_krb5: Add support for rc4-hmac encryption")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit dd39affb256611071d7f689a72e6e96f3405c6ce
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Jan 6 18:47:42 2019 -0800

    crypto: hash - set CRYPTO_TFM_NEED_KEY if ->setkey() fails
    
    commit ba7d7433a0e998c902132bd47330e355a1eaa894 upstream.
    
    Some algorithms have a ->setkey() method that is not atomic, in the
    sense that setting a key can fail after changes were already made to the
    tfm context.  In this case, if a key was already set the tfm can end up
    in a state that corresponds to neither the old key nor the new key.
    
    It's not feasible to make all ->setkey() methods atomic, especially ones
    that have to key multiple sub-tfms.  Therefore, make the crypto API set
    CRYPTO_TFM_NEED_KEY if ->setkey() fails and the algorithm requires a
    key, to prevent the tfm from being used until a new key is set.
    
    Note: we can't set CRYPTO_TFM_NEED_KEY for OPTIONAL_KEY algorithms, so
    ->setkey() for those must nevertheless be atomic.  That's fine for now
    since only the crc32 and crc32c algorithms set OPTIONAL_KEY, and it's
    not intended that OPTIONAL_KEY be used much.
    
    [Cc stable mainly because when introducing the NEED_KEY flag I changed
     AF_ALG to rely on it; and unlike in-kernel crypto API users, AF_ALG
     previously didn't have this problem.  So these "incompletely keyed"
     states became theoretically accessible via AF_ALG -- though, the
     opportunities for causing real mischief seem pretty limited.]
    
    Fixes: 9fa68f620041 ("crypto: hash - prevent using keyed hashes without setting key")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 994baf8abdac7555e7008643053c13d69fb5e3e5
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Mar 28 10:57:22 2018 -0700

    sunrpc: remove incorrect HMAC request initialization
    
    commit f3aefb6a7066e24bfea7fcf1b07907576de69d63 upstream.
    
    make_checksum_hmac_md5() is allocating an HMAC transform and doing
    crypto API calls in the following order:
    
        crypto_ahash_init()
        crypto_ahash_setkey()
        crypto_ahash_digest()
    
    This is wrong because it makes no sense to init() the request before a
    key has been set, given that the initial state depends on the key.  And
    digest() is short for init() + update() + final(), so in this case
    there's no need to explicitly call init() at all.
    
    Before commit 9fa68f620041 ("crypto: hash - prevent using keyed hashes
    without setting key") the extra init() had no real effect, at least for
    the software HMAC implementation.  (There are also hardware drivers that
    implement HMAC-MD5, and it's not immediately obvious how gracefully they
    handle init() before setkey().)  But now the crypto API detects this
    incorrect initialization and returns -ENOKEY.  This is breaking NFS
    mounts in some cases.
    
    Fix it by removing the incorrect call to crypto_ahash_init().
    
    Reported-by: Michael Young <m.a.young@durham.ac.uk>
    Fixes: 9fa68f620041 ("crypto: hash - prevent using keyed hashes without setting key")
    Fixes: fffdaef2eb4a ("gss_krb5: Add support for rc4-hmac encryption")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking b392a53b11f325b30b7d54e575352a8cac4c300d ......
	 orig commit -> a208fa8f33031b9e0aba44c7d1b7e68eb0cbd29e ......
checking eb9c7c7d9542a33011b1e217e5a283ebf94fac01 ......
	 orig commit -> 8d74e9f88d65af8bb2e095aff506aa6eac755ada ......
checking 4dc0159458d607c8ccf36ba91a262d7bba7d4bbc ......
	 orig commit -> f10b4cff98c6977668434fbf5dd58695eeca2897 ......
checking 8d5c422fc709def69d574b03052c73bb6442a638 ......
	 orig commit -> 7dc68e98757a8eccf8ca7a53a29b896f1eef1f76 ......
checking c6f3be756b784b69253a1d4bcd72c2e891f87a74 ......
	 orig commit -> ba7cd5d95f25cc6005f687dabdb4e7a6063adda9 ......
checking 4ec264d8128958e66d048f45fd1c4c28cfedb119 ......
	 orig commit -> 3f34cfae1238848fd53f25e5c8fd59da57901f4b ......
		 3f34cfae1238848fd53f25e5c8fd59da57901f4b has problem. Fixes commit -> dfec091439bb2acf763497cfc58f2bdfc67c56b7
01ea306f2ac2baff98d472da719193e738759d93
commit d58d78c207a348a87cb143dadcbf839ea35443b6
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Feb 8 12:19:00 2018 +0100

    netfilter: drop outermost socket lock in getsockopt()
    
    commit 01ea306f2ac2baff98d472da719193e738759d93 upstream.
    
    The Syzbot reported a possible deadlock in the netfilter area caused by
    rtnl lock, xt lock and socket lock being acquired with a different order
    on different code paths, leading to the following backtrace:
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    
    ======================================================
    WARNING: possible circular locking dependency detected
    4.15.0+ #301 Not tainted
    ------------------------------------------------------
    syzkaller233489/4179 is trying to acquire lock:
      (rtnl_mutex){+.+.}, at: [<0000000048e996fd>] rtnl_lock+0x17/0x20
    net/core/rtnetlink.c:74
    
    but task is already holding lock:
      (&xt[i].mutex){+.+.}, at: [<00000000328553a2>]
    xt_find_table_lock+0x3e/0x3e0 net/netfilter/x_tables.c:1041
    
    which lock already depends on the new lock.
    ===
    
    Since commit 3f34cfae1230 ("netfilter: on sockopt() acquire sock lock
    only in the required scope"), we already acquire the socket lock in
    the innermost scope, where needed. In such commit I forgot to remove
    the outer-most socket lock from the getsockopt() path, this commit
    addresses the issues dropping it now.
    
    v1 -> v2: fix bad subj, added relavant 'fixes' tag
    
    Fixes: 22265a5c3c10 ("netfilter: xt_TEE: resolve oif using netdevice notifiers")
    Fixes: 202f59afd441 ("netfilter: ipt_CLUSTERIP: do not hold dev")
    Fixes: 3f34cfae1230 ("netfilter: on sockopt() acquire sock lock only in the required scope")
    Reported-by: syzbot+ddde1c7b7ff7442d7f2d@syzkaller.appspotmail.com
    Suggested-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Tested-by: Krzysztof Piotr Oledzki <ole@ans.pl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit d58d78c207a348a87cb143dadcbf839ea35443b6
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Feb 8 12:19:00 2018 +0100

    netfilter: drop outermost socket lock in getsockopt()
    
    commit 01ea306f2ac2baff98d472da719193e738759d93 upstream.
    
    The Syzbot reported a possible deadlock in the netfilter area caused by
    rtnl lock, xt lock and socket lock being acquired with a different order
    on different code paths, leading to the following backtrace:
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    
    ======================================================
    WARNING: possible circular locking dependency detected
    4.15.0+ #301 Not tainted
    ------------------------------------------------------
    syzkaller233489/4179 is trying to acquire lock:
      (rtnl_mutex){+.+.}, at: [<0000000048e996fd>] rtnl_lock+0x17/0x20
    net/core/rtnetlink.c:74
    
    but task is already holding lock:
      (&xt[i].mutex){+.+.}, at: [<00000000328553a2>]
    xt_find_table_lock+0x3e/0x3e0 net/netfilter/x_tables.c:1041
    
    which lock already depends on the new lock.
    ===
    
    Since commit 3f34cfae1230 ("netfilter: on sockopt() acquire sock lock
    only in the required scope"), we already acquire the socket lock in
    the innermost scope, where needed. In such commit I forgot to remove
    the outer-most socket lock from the getsockopt() path, this commit
    addresses the issues dropping it now.
    
    v1 -> v2: fix bad subj, added relavant 'fixes' tag
    
    Fixes: 22265a5c3c10 ("netfilter: xt_TEE: resolve oif using netdevice notifiers")
    Fixes: 202f59afd441 ("netfilter: ipt_CLUSTERIP: do not hold dev")
    Fixes: 3f34cfae1230 ("netfilter: on sockopt() acquire sock lock only in the required scope")
    Reported-by: syzbot+ddde1c7b7ff7442d7f2d@syzkaller.appspotmail.com
    Suggested-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Tested-by: Krzysztof Piotr Oledzki <ole@ans.pl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fedae0f64845933a0f28604a09be2e0323d66236
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Feb 15 16:59:49 2018 +0100

    dn_getsockoptdecnet: move nf_{get/set}sockopt outside sock lock
    
    commit dfec091439bb2acf763497cfc58f2bdfc67c56b7 upstream.
    
    After commit 3f34cfae1238 ("netfilter: on sockopt() acquire sock lock
    only in the required scope"), the caller of nf_{get/set}sockopt() must
    not hold any lock, but, in such changeset, I forgot to cope with DECnet.
    
    This commit addresses the issue moving the nf call outside the lock,
    in the dn_{get,set}sockopt() with the same schema currently used by
    ipv4 and ipv6. Also moves the unhandled sockopts of the end of the main
    switch statements, to improve code readability.
    
    Reported-by: Petr Vandrovec <petr@vandrovec.name>
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=198791#c2
    Fixes: 3f34cfae1238 ("netfilter: on sockopt() acquire sock lock only in the required scope")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ab2b0f7b23447d138be6c4147ec5d2596a94c5ce ......
	 orig commit -> 1a38956cce5eabd7b74f94bab70265e4df83165e ......
checking b39f3f381bf3ba387d62655539a8979085cb6ff6 ......
	 orig commit -> da17c73b6eb74aad3c3c0654394635675b623b3e ......
checking 1099c708d7b7bcb701ac9f892d8f26811842abdd ......
	 orig commit -> 889c604fd0b5f6d3b8694ade229ee44124de1127 ......
checking c33f9272eefe349fed598999943e626fcef8a708 ......
	 orig commit -> a77660d231f8b3d84fd23ed482e0964f7aa546d6 ......
checking 9748fd5ba546bb93d403208d2fd40dd5fc557b6b ......
	 orig commit -> efdab992813fb2ed825745625b83c05032e9cda2 ......
checking 7abb5e9dd5683d693376635ff05ec729216fd726 ......
	 orig commit -> 69e0927b3774563c19b5fb32e91d75edc147fb62 ......
checking 3ee287d35b25076b626898284d610465145aa43b ......
	 orig commit -> e4e179a844f52e907e550f887d0a2171f1508af1 ......
checking 458d2fc92405836fc949c6779170dad18a508f0f ......
	 orig commit -> 0c75f10312a35b149b2cebb1832316b35c2337ca ......
checking eda4a83657b8e289560b40bb2dc33ed3b654142f ......
	 orig commit -> d8c7fe9f2a486a6e5f0d5229ca43807af5ab22c6 ......
checking 5e6f51aac15ac93605187fd11b9bc75a240a53f8 ......
	 orig commit -> 4b14752ec4e0d87126e636384cf37c8dd9df157c ......
checking fe1cb580e84865f3c6be99b952a626323228e781 ......
	 orig commit -> ef28df55ac27e1e5cd122e19fa311d886d47a756 ......
checking 5cab144f072bdae16f37a06efb0dad210c7ff7bb ......
	 orig commit -> f35157417215ec138c920320c746fdb3e04ef1d5 ......
checking 5fd4db305f2750418151d2d5553bfaec2956167a ......
	 orig commit -> 6e6e41c3112276288ccaf80c70916779b84bb276 ......
		 6e6e41c3112276288ccaf80c70916779b84bb276 has problem. Fixes commit -> 54e02162d4454a99227f520948bf4494c3d972d0
commit 2e857aaf091f00b342f5d66e1ffa77bcb25c1f6a
Author: Jason Wang <jasowang@redhat.com>
Date:   Sun Feb 11 11:28:12 2018 +0800

    ptr_ring: prevent integer overflow when calculating size
    
    [ Upstream commit 54e02162d4454a99227f520948bf4494c3d972d0 ]
    
    Switch to use dividing to prevent integer overflow when size is too
    big to calculate allocation size properly.
    
    Reported-by: Eric Biggers <ebiggers3@gmail.com>
    Fixes: 6e6e41c31122 ("ptr_ring: fail early if queue occupies more than KMALLOC_MAX_SIZE")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking eeb1f9bd2480eab16f77aeafacec08c82f71a972 ......
	 orig commit -> d18d1a5ac811d12f7ebc1129230312b5f2c50cb8 ......
checking 7569adcf396a2b17fcc45d4172c0857e60ed32df ......
	 orig commit -> a6da0024ffc19e0d47712bb5ca4fd083f76b07df ......
checking 2e6712234606ce4b155723f71a3c9f52128d9266 ......
	 orig commit -> ecca8f88da5c4260cc2bccfefd2a24976704c366 ......
checking 85552886b454b27588d4d7a01456ab5e82daaa47 ......
	 orig commit -> 6a53b7593233ab9e4f96873ebacc0f653a55c3e1 ......
		 6a53b7593233ab9e4f96873ebacc0f653a55c3e1 has problem. Fixes commit -> dbb2483b2a46fbaf833cfb5deb5ed9cace9c7399
checking 46b317167d01130c5cc98ad042b2955c58f14597 ......
	 orig commit -> ddc47e4404b58f03e98345398fb12d38fe291512 ......
checking 274ee93f0b12ce1865579ea2bbb783642c72c31f ......
	 orig commit -> bb422a738f6566f7439cd347d54e321e4fe92a9f ......
checking 5d89917c5a0fbe2f5fe04bb15c6bcd0b1ebf4d24 ......
	 orig commit -> 862591bf4f519d1b8d859af720fafeaebdd0162a ......
checking 758980347e174abf068ea9c8f20b6a891cffa683 ......
	 orig commit -> 59b179b48ce2a6076448a44531242ac2b3f6cef2 ......
checking 2bb174afca6cdb90499bcd2c46e5d966d9976834 ......
	 orig commit -> 581e7226a5d43f629eb6399a121f85f6a15f81be ......
checking 085cbbda4b4cc7dd2ba63806346881c2c2e10107 ......
	 orig commit -> e5571240236c5652f3e079b1d5866716a7ad819c ......
		 e5571240236c5652f3e079b1d5866716a7ad819c has problem. Fixes commit -> dff8baa261174de689a44572d0ea182d7aa70598
commit 383250363daf01eb7aa3728c09ef8a4f6d8a3252
Author: Tom Herbert <tom@quantonium.net>
Date:   Wed Feb 14 09:22:42 2018 -0800

    kcm: Call strp_stop before strp_done in kcm_attach
    
    commit dff8baa261174de689a44572d0ea182d7aa70598 upstream.
    
    In kcm_attach strp_done is called when sk_user_data is already
    set to fail the attach. strp_done needs the strp to be stopped and
    warns if it isn't. Call strp_stop in this case to eliminate the
    warning message.
    
    Reported-by: syzbot+88dfb55e4c8b770d86e3@syzkaller.appspotmail.com
    Fixes: e5571240236c5652f ("kcm: Check if sk_user_data already set in kcm_attach"
    Signed-off-by: Tom Herbert <tom@quantonium.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking bd3ccdc6f922c6b7db4b7075d1b6596ddb986a98 ......
	 orig commit -> e9cb4239134c860e5f92c75bf5321bd377bb505b ......

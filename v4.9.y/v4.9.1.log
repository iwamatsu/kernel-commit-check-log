Check from v4.9.1 to v4.9.2
Commit count: 117
checking 6f2fabab8d63908940450fa27136516323cc3ae9 ......
checking 8ed8791885aa14d545d8d5429f2be560c19addd2 ......
	 orig commit -> b1b7ec985805e005055d1d471ca586a715ffc10a ......
checking 18a00ac6d7f106901356e1fa9c082730a2318ed5 ......
	 orig commit -> 6ba0566cf2afcdb17bff882e3a95cbbcb22c4a83 ......
checking 6396411054430a6473233735b6e0208759b68291 ......
	 orig commit -> 1f3dc3e334c1192ebe2939ea17ba12f4776f90c3 ......
checking 159e2ea9ed4996e3398cb9174921a4543c785ed2 ......
	 orig commit -> 14676ec6b1a6f2f7fa0bafd98ab42ce77be7a7d4 ......
		 14676ec6b1a6f2f7fa0bafd98ab42ce77be7a7d4 has problem. Fixes commit -> 1f3dc3e334c1192ebe2939ea17ba12f4776f90c3
commit 6396411054430a6473233735b6e0208759b68291
Author: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Date:   Tue Nov 29 16:13:57 2016 +0200

    drm/i915: Initialize dev_priv->atomic_cdclk_freq at init time
    
    commit 1f3dc3e334c1192ebe2939ea17ba12f4776f90c3 upstream.
    
    Looks like we're only initializing dev_priv->atomic_cdclk_freq
    at resume and commit times, not at init time. Let's do that as
    well.
    
    We're now hitting the 'WARN_ON(intel_state->cdclk == 0)' in
    hsw_compute_linetime_wm() on account of populating
    intel_state->cdclk from dev_priv->atomic_cdclk_freq.
    Previously we were mispopulating intel_state->cdclk with
    dev_priv->cdclk_freq which always had a proper value at init
    time and hence the WARN_ON() didn't trigger.
    
    Cc: Matthew Auld <matthew.auld@intel.com>
    Reported-by: Matthew Auld <matthew.auld@intel.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=98902
    Fixes: 14676ec6b1a6 ("drm/i915: Fix cdclk vs. dev_cdclk mess when not recomputing things")
    Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1480428837-4207-1-git-send-email-ville.syrjala@linux.intel.com
    Tested-by: Matthew Auld <matthew.auld@intel.com>
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>
    (cherry picked from commit 6a259b1f8a9e99b1ed114f8bf8b0cfccee130e54)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d816da6f57661157b3e056da426141f98d3bddde ......
	 orig commit -> bb98e72adaf9d19719aba35f802d4836f5d5176c ......
checking 6cb4179f97cf666639f2f11b40d45766bc1b4d85 ......
	 orig commit -> 22ca0d4991169b76e753d767a45f1105c356bbb8 ......
checking 2037b1b46cdb2cb073b835473bd6c168929edbbd ......
	 orig commit -> 8354491c9d5b06709384cea91d13019bf5e61449 ......
checking 3f3a6bbe6f9f5e895d8945494173594ee51632da ......
	 orig commit -> 128394eff343fc6d2f32172f03e24829539c5835 ......
checking d024532a97db32db4b0fc4cd27c7a9ac15b84e5b ......
	 orig commit -> 79e51b5c2deea542b3bb8c66e0d502230b017dde ......
checking 173fd37a3d2135fcf17a3240a71ca9c79ae151ab ......
	 orig commit -> d0905ca757bc40bd1ebc261a448a521b064777d7 ......
checking 630a2ef354bb569e84a874ec59f45f82c6c5ff04 ......
	 orig commit -> af7d9f0c57941b465043681cb5c3410f7f3f1a41 ......
checking 6838ac125324b91eeab5ccaf99e4a9bd1f8a7895 ......
	 orig commit -> b6cc9474e2dd9f0c19b694b40961d81117f1e918 ......
checking d5cf5ae25c95f915b2c7a2dfc3e3767d72bf2b85 ......
	 orig commit -> ff45000fcb56b5b0f1a14a865d3541746d838a0a ......
checking efcb3d9442fffe6dd4d12a8c70fe9e6a5423c4df ......
	 orig commit -> 6dff5b67054e17c91bd630bcdda17cfca5aa4215 ......
checking 4b23132d6cf56607626760458ff18d3a30a88bd9 ......
	 orig commit -> f87f253bac3ce4a4eb2a60a1ae604d74e65f9042 ......
checking 369b330c9d821196af71cc37f362f37b59e4ba59 ......
	 orig commit -> 1cded9d2974fe4fe339fc0ccd6638b80d465ab2c ......
checking ba15defe1807ff546ab4d14beb2f9602789c0170 ......
	 orig commit -> 54e4a0dfa25d9365c4e80a639e80d9213eb6edbe ......
checking e523ce8c99f9bbd530fda7d46c35409fee88a50f ......
	 orig commit -> ae5a459d5f65c3e83f3e14068dde5fb9c9d81807 ......
checking f32659df6e154b40391afe7a5db3f0879ad6e70a ......
	 orig commit -> 7b650994ab07434ae58a247dc9ac87d2488ca75c ......
checking 24b049fa0cd93e9e3e4166de8937b197b101a585 ......
	 orig commit -> 6604b203fb6394ed1f24c21bfa3c207e5ae8e461 ......
checking b775b86a5fe8f45500ce027a60ca0f1e1f49a13e ......
	 orig commit -> c0cf3ef5e0f47e385920450b245d22bead93e7ad ......
checking fc6cb9c303e289e0772cd9db593db9acd15cd678 ......
	 orig commit -> 5c056fdc5b474329037f2aa18401bd73033e0ce0 ......
		 5c056fdc5b474329037f2aa18401bd73033e0ce0 has problem. Fixes commit -> 0fd3fd0a9bb0b02b6435bb7070e9f7b82a23f068
commit a1f11de42378ef4c9fab701f6f2ff21b266a5c87
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Tue Feb 5 20:30:27 2019 +0100

    libceph: handle an empty authorize reply
    
    commit 0fd3fd0a9bb0b02b6435bb7070e9f7b82a23f068 upstream.
    
    The authorize reply can be empty, for example when the ticket used to
    build the authorizer is too old and TAG_BADAUTHORIZER is returned from
    the service.  Calling ->verify_authorizer_reply() results in an attempt
    to decrypt and validate (somewhat) random data in au->buf (most likely
    the signature block from calc_signature()), which fails and ends up in
    con_fault_finish() with !con->auth_retry.  The ticket isn't invalidated
    and the connection is retried again and again until a new ticket is
    obtained from the monitor:
    
      libceph: osd2 192.168.122.1:6809 bad authorize reply
      libceph: osd2 192.168.122.1:6809 bad authorize reply
      libceph: osd2 192.168.122.1:6809 bad authorize reply
      libceph: osd2 192.168.122.1:6809 bad authorize reply
    
    Let TAG_BADAUTHORIZER handler kick in and increment con->auth_retry.
    
    Cc: stable@vger.kernel.org
    Fixes: 5c056fdc5b47 ("libceph: verify authorize reply on connect")
    Link: https://tracker.ceph.com/issues/20164
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Sage Weil <sage@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking d8c34b0cc0be6c70d9a7a5e5bb8da86af42771f9 ......
	 orig commit -> 6496ebd7edf446fccf8266a1a70ffcb64252593e ......
checking 7cc603e9a828e205c393e49711980c9e9e3938ba ......
	 orig commit -> 91c42b72f8e8b45961ff05a05009b644e6316ca2 ......
checking 6195cd1a9628281a10a7132ae0f664a496b2b33c ......
	 orig commit -> 3f9ca75516a7e581ff803f751a869c1da5ae5fa5 ......
checking afd2a1994ea4e37fb602410b350827d5909714fe ......
	 orig commit -> 5a8a6b89c15766446d845671d574a9243b6d8786 ......
checking e5d92c0c84f3b821c65210ab20bb4583879a03c9 ......
	 orig commit -> d183e4efcae8d88a2f252e546978658ca6d273cc ......
		 d183e4efcae8d88a2f252e546978658ca6d273cc has problem. Fixes commit -> 2d29bcc8c237874795175b2930fa9a45a115175a
checking 7f89c1373637395de72f53cb20a170fe24d1f371 ......
	 orig commit -> 5fc4b067ec082c3127e0156f800769b7e0dce078 ......
checking 3fbe140e9d360a31ec88ee1126df778b33dde9f2 ......
	 orig commit -> 3467c9a7e7f9209a9ecd8f9db65b04a323a13932 ......
checking 9fd64b8302593a6398e4e05571e84309b017fd55 ......
	 orig commit -> d930b5b5bf122a61952cfebabb1e618682a2631a ......
checking eb9afff9513dff7862eba01679fb6587e97fc2b7 ......
	 orig commit -> 365fe4e0ce218dc5ad10df17b150a366b6015499 ......
checking 9aff8b170fe01cb01cdcce2590dd135925570f1b ......
	 orig commit -> fba332b079029c2f4f7e84c1c1cd8e3867310c90 ......
checking 476ed812c42d20ebd26468ce55e34b02ebe1239d ......
	 orig commit -> e259934d4df7f99f2a5c2c4f074f6a55bd4b1722 ......
checking 5984423bf7ebea12f953e4665aa72ccff83623d1 ......
	 orig commit -> d3a2418ee36a59bc02e9d454723f3175dcf4bfd9 ......
checking 4187dfa67fa9bfdfa3ddc14796b42302faf1f357 ......
	 orig commit -> 11b642b84e8c43e8597de031678d15c08dd057bc ......
checking 382072e09f19ba0fa6a3c8e3373d36bb7247cd44 ......
	 orig commit -> 2fe2f378dd45847d2643638c07a7658822087836 ......
checking 239b40eb6189e49610e1e614c3670f92d74b9c7b ......
	 orig commit -> 794de08a16cf1fc1bf785dc48f66d36218cf6d88 ......
checking a035dc674dd477e61e5b917c60c30622b6d083f8 ......
	 orig commit -> 9d85eb9119f4eeeb48e87adfcd71f752655700e9 ......
		 9d85eb9119f4eeeb48e87adfcd71f752655700e9 has problem. Fixes commit -> fff4b87e594ad3d2e4f51e8d3d86a6f9d3d8b654
dd86e373e09fb16b83e8adf5c48c421a4ca76468
commit 3df3b2efc065e71ba5edda9fa9b3cab1933d131c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 31 23:58:38 2017 +0100

    perf/x86/intel/rapl: Make package handling more robust
    
    commit dd86e373e09fb16b83e8adf5c48c421a4ca76468 upstream.
    
    The package management code in RAPL relies on package mapping being
    available before a CPU is started. This changed with:
    
      9d85eb9119f4 ("x86/smpboot: Make logical package management more robust")
    
    because the ACPI/BIOS information turned out to be unreliable, but that
    left RAPL in broken state. This was not noticed because on a regular boot
    all CPUs are online before RAPL is initialized.
    
    A possible fix would be to reintroduce the mess which allocates a package
    data structure in CPU prepare and when it turns out to already exist in
    starting throw it away later in the CPU online callback. But that's a
    horrible hack and not required at all because RAPL becomes functional for
    perf only in the CPU online callback. That's correct because user space is
    not yet informed about the CPU being onlined, so nothing caan rely on RAPL
    being available on that particular CPU.
    
    Move the allocation to the CPU online callback and simplify the hotplug
    handling. At this point the package mapping is established and correct.
    
    This also adds a missing check for available package data in the
    event_init() function.
    
    Reported-by: Yasuaki Ishimatsu <yasu.isimatu@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sebastian Siewior <bigeasy@linutronix.de>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: 9d85eb9119f4 ("x86/smpboot: Make logical package management more robust")
    Link: http://lkml.kernel.org/r/20170131230141.212593966@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    [ jwang: backport to 4.9 fix Null pointer deref during hotplug cpu.]
    Signed-off-by: Jack Wang <jinpu.wang@profitbricks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 3df3b2efc065e71ba5edda9fa9b3cab1933d131c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 31 23:58:38 2017 +0100

    perf/x86/intel/rapl: Make package handling more robust
    
    commit dd86e373e09fb16b83e8adf5c48c421a4ca76468 upstream.
    
    The package management code in RAPL relies on package mapping being
    available before a CPU is started. This changed with:
    
      9d85eb9119f4 ("x86/smpboot: Make logical package management more robust")
    
    because the ACPI/BIOS information turned out to be unreliable, but that
    left RAPL in broken state. This was not noticed because on a regular boot
    all CPUs are online before RAPL is initialized.
    
    A possible fix would be to reintroduce the mess which allocates a package
    data structure in CPU prepare and when it turns out to already exist in
    starting throw it away later in the CPU online callback. But that's a
    horrible hack and not required at all because RAPL becomes functional for
    perf only in the CPU online callback. That's correct because user space is
    not yet informed about the CPU being onlined, so nothing caan rely on RAPL
    being available on that particular CPU.
    
    Move the allocation to the CPU online callback and simplify the hotplug
    handling. At this point the package mapping is established and correct.
    
    This also adds a missing check for available package data in the
    event_init() function.
    
    Reported-by: Yasuaki Ishimatsu <yasu.isimatu@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sebastian Siewior <bigeasy@linutronix.de>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: 9d85eb9119f4 ("x86/smpboot: Make logical package management more robust")
    Link: http://lkml.kernel.org/r/20170131230141.212593966@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    [ jwang: backport to 4.9 fix Null pointer deref during hotplug cpu.]
    Signed-off-by: Jack Wang <jinpu.wang@profitbricks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3168762e8ad3600392b0b6e230e550271c68fe36 ......
	 orig commit -> e74e259939275a5dd4e0d02845c694f421e249ad ......
checking 21be088c36c604af29810b3fe5a7a8c7bb42b0e9 ......
	 orig commit -> 847fa1a6d3d00f3bdf68ef5fa4a786f644a0dd67 ......
checking e80ceb2da52e0aae8e0ae9632c3abbfdd579cf61 ......
	 orig commit -> f83f12d660d11718d3eed9d979ee03e83aa55544 ......
checking d06485e0fcf58a88daadcbe119a7d433cdaad8e6 ......
	 orig commit -> 5716863e0f8251d3360d4cbfc0e44e08007075df ......
checking 3f618a0b872fea38c7d1d1f79eda40f88c6466c2 ......
	 orig commit -> ef85b67385436ddc1998f45f1d6a210f935b3388 ......
checking 94107133ae811e0175803639ae7ab2411e6cdb3c ......
	 orig commit -> f064a0de1579fabded8990bed93971e30deb9ecb ......
checking 75b1053c2b8c01baedf85f17be8455dadc63a383 ......
	 orig commit -> 0d808df06a44200f52262b6eb72bcb6042f5a7c5 ......
checking 483eeca2cf389ea717cece86cce8494a050cb3f4 ......
	 orig commit -> ae2aae2421983f6f68eb7c4692624bc43ea50712 ......
checking 8beb252f2be2d1dcd6a6bef199dc62261f597b15 ......
	 orig commit -> e8d7c33232e5fdfa761c3416539bc5b4acd12db5 ......
checking a0357979d62049bd029e4b6efbaedbf4b0ea15ff ......
	 orig commit -> 04da73803c05dc1150ccc31cbf93e8cd56679c09 ......
checking 7d5ec9eb3eea8e6efc6a5795e70bd4057adaf8a9 ......
	 orig commit -> 9988f4d577f42f43b7612d755477585f35424af7 ......
checking 959e95305f1316475dbbfa5b366d82d5ac65562b ......
	 orig commit -> 21cbe3cc8a48ff17059912e019fbde28ed54745a ......
checking 111e0ccaf979c688ca8b56e96561e7207e971b6a ......
	 orig commit -> 9f88eb4df728aebcd2ddd154d99f1d75b428b897 ......
checking 53bbee3348d88b9f68946e249a67beaff82aee6a ......
	 orig commit -> 5457e03de918f7a3e294eb9d26a608ab8a579976 ......
checking b3854cefe3d24af43fb8abb3eda09612899bb604 ......
	 orig commit -> 2e700f8d85975f516ccaad821278c1fe66b2cc98 ......
checking ce7ec3d7526cb26307eb5fee516b2873a88ca3ef ......
	 orig commit -> 08fe007968b2b45e831daf74899f79a54d73f773 ......
checking 9d33a399566771b023a08f490344b70a200c87da ......
	 orig commit -> d2a145252c52792bc59e4767b486b26c430af4bb ......
checking 2a940b853ef679cd981e38f23c756d4335a3375c ......
	 orig commit -> 6f2ce1c6af37191640ee3ff6e8fc39ea10352f4c ......
		 6f2ce1c6af37191640ee3ff6e8fc39ea10352f4c has problem. Fixes commit -> fe67888fc007a76b81e37da23ce5bd8fb95890b0
ab31fd0ce65ec93828b617123792c1bb7c6dcc42
commit 88acde81e80f23d05ecdb0163600d7616f67426a
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Oct 13 15:40:07 2017 +0200

    scsi: zfcp: fix erp_action use-before-initialize in REC action trace
    
    commit ab31fd0ce65ec93828b617123792c1bb7c6dcc42 upstream.
    
    v4.10 commit 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN
    recovery") extended accessing parent pointer fields of struct
    zfcp_erp_action for tracing.  If an erp_action has never been enqueued
    before, these parent pointer fields are uninitialized and NULL. Examples
    are zfcp objects freshly added to the parent object's children list,
    before enqueueing their first recovery subsequently. In
    zfcp_erp_try_rport_unblock(), we iterate such list. Accessing erp_action
    fields can cause a NULL pointer dereference.  Since the kernel can read
    from lowcore on s390, it does not immediately cause a kernel page
    fault. Instead it can cause hangs on trying to acquire the wrong
    erp_action->adapter->dbf->rec_lock in zfcp_dbf_rec_action_lvl()
                          ^bogus^
    while holding already other locks with IRQs disabled.
    
    Real life example from attaching lots of LUNs in parallel on many CPUs:
    
    crash> bt 17723
    PID: 17723  TASK: ...               CPU: 25  COMMAND: "zfcperp0.0.1800"
     LOWCORE INFO:
      -psw      : 0x0404300180000000 0x000000000038e424
      -function : _raw_spin_lock_wait_flags at 38e424
    ...
     #0 [fdde8fc90] zfcp_dbf_rec_action_lvl at 3e0004e9862 [zfcp]
     #1 [fdde8fce8] zfcp_erp_try_rport_unblock at 3e0004dfddc [zfcp]
     #2 [fdde8fd38] zfcp_erp_strategy at 3e0004e0234 [zfcp]
     #3 [fdde8fda8] zfcp_erp_thread at 3e0004e0a12 [zfcp]
     #4 [fdde8fe60] kthread at 173550
     #5 [fdde8feb8] kernel_thread_starter at 10add2
    
    zfcp_adapter
     zfcp_port
      zfcp_unit <address>, 0x404040d600000000
      scsi_device NULL, returning early!
    zfcp_scsi_dev.status = 0x40000000
    0x40000000 ZFCP_STATUS_COMMON_RUNNING
    
    crash> zfcp_unit <address>
    struct zfcp_unit {
      erp_action = {
        adapter = 0x0,
        port = 0x0,
        unit = 0x0,
      },
    }
    
    zfcp_erp_action is always fully embedded into its container object. Such
    container object is never moved in its object tree (only add or delete).
    Hence, erp_action parent pointers can never change.
    
    To fix the issue, initialize the erp_action parent pointers before
    adding the erp_action container to any list and thus before it becomes
    accessible from outside of its initializing function.
    
    In order to also close the time window between zfcp_erp_setup_act()
    memsetting the entire erp_action to zero and setting the parent pointers
    again, drop the memset and instead explicitly initialize individually
    all erp_action fields except for parent pointers. To be extra careful
    not to introduce any other unintended side effect, even keep zeroing the
    erp_action fields for list and timer. Also double-check with
    WARN_ON_ONCE that erp_action parent pointers never change, so we get to
    know when we would deviate from previous behavior.
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN recovery")
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit a63e13426cc6a0b9757b493285f8064872b38431
Author: Steffen Maier <maier@linux.ibm.com>
Date:   Tue Mar 26 14:36:58 2019 +0100

    scsi: zfcp: fix rport unblock if deleted SCSI devices on Scsi_Host
    
    commit fe67888fc007a76b81e37da23ce5bd8fb95890b0 upstream.
    
    An already deleted SCSI device can exist on the Scsi_Host and remain there
    because something still holds a reference.  A new SCSI device with the same
    H:C:T:L and FCP device, target port WWPN, and FCP LUN can be created.  When
    we try to unblock an rport, we still find the deleted SCSI device and
    return early because the zfcp_scsi_dev of that SCSI device is not
    ZFCP_STATUS_COMMON_UNBLOCKED. Hence we miss to unblock the rport, even if
    the new proper SCSI device would be in good state.
    
    Therefore, skip deleted SCSI devices when iterating the sdevs of the shost.
    [cf. __scsi_device_lookup{_by_target}() or scsi_device_get()]
    
    The following abbreviated trace sequence can indicate such problem:
    
    Area           : REC
    Tag            : ersfs_3
    LUN            : 0x4045400300000000
    WWPN           : 0x50050763031bd327
    LUN status     : 0x40000000     not ZFCP_STATUS_COMMON_UNBLOCKED
    Ready count    : n              not incremented yet
    Running count  : 0x00000000
    ERP want       : 0x01
    ERP need       : 0xc1           ZFCP_ERP_ACTION_NONE
    
    Area           : REC
    Tag            : ersfs_3
    LUN            : 0x4045400300000000
    WWPN           : 0x50050763031bd327
    LUN status     : 0x41000000
    Ready count    : n+1
    Running count  : 0x00000000
    ERP want       : 0x01
    ERP need       : 0x01
    
    ...
    
    Area           : REC
    Level          : 4              only with increased trace level
    Tag            : ertru_l
    LUN            : 0x4045400300000000
    WWPN           : 0x50050763031bd327
    LUN status     : 0x40000000
    Request ID     : 0x0000000000000000
    ERP status     : 0x01800000
    ERP step       : 0x1000
    ERP action     : 0x01
    ERP count      : 0x00
    
    NOT followed by a trace record with tag "scpaddy"
    for WWPN 0x50050763031bd327.
    
    Signed-off-by: Steffen Maier <maier@linux.ibm.com>
    Fixes: 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN recovery")
    Cc: <stable@vger.kernel.org> #2.6.32+
    Reviewed-by: Jens Remus <jremus@linux.ibm.com>
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88acde81e80f23d05ecdb0163600d7616f67426a
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Oct 13 15:40:07 2017 +0200

    scsi: zfcp: fix erp_action use-before-initialize in REC action trace
    
    commit ab31fd0ce65ec93828b617123792c1bb7c6dcc42 upstream.
    
    v4.10 commit 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN
    recovery") extended accessing parent pointer fields of struct
    zfcp_erp_action for tracing.  If an erp_action has never been enqueued
    before, these parent pointer fields are uninitialized and NULL. Examples
    are zfcp objects freshly added to the parent object's children list,
    before enqueueing their first recovery subsequently. In
    zfcp_erp_try_rport_unblock(), we iterate such list. Accessing erp_action
    fields can cause a NULL pointer dereference.  Since the kernel can read
    from lowcore on s390, it does not immediately cause a kernel page
    fault. Instead it can cause hangs on trying to acquire the wrong
    erp_action->adapter->dbf->rec_lock in zfcp_dbf_rec_action_lvl()
                          ^bogus^
    while holding already other locks with IRQs disabled.
    
    Real life example from attaching lots of LUNs in parallel on many CPUs:
    
    crash> bt 17723
    PID: 17723  TASK: ...               CPU: 25  COMMAND: "zfcperp0.0.1800"
     LOWCORE INFO:
      -psw      : 0x0404300180000000 0x000000000038e424
      -function : _raw_spin_lock_wait_flags at 38e424
    ...
     #0 [fdde8fc90] zfcp_dbf_rec_action_lvl at 3e0004e9862 [zfcp]
     #1 [fdde8fce8] zfcp_erp_try_rport_unblock at 3e0004dfddc [zfcp]
     #2 [fdde8fd38] zfcp_erp_strategy at 3e0004e0234 [zfcp]
     #3 [fdde8fda8] zfcp_erp_thread at 3e0004e0a12 [zfcp]
     #4 [fdde8fe60] kthread at 173550
     #5 [fdde8feb8] kernel_thread_starter at 10add2
    
    zfcp_adapter
     zfcp_port
      zfcp_unit <address>, 0x404040d600000000
      scsi_device NULL, returning early!
    zfcp_scsi_dev.status = 0x40000000
    0x40000000 ZFCP_STATUS_COMMON_RUNNING
    
    crash> zfcp_unit <address>
    struct zfcp_unit {
      erp_action = {
        adapter = 0x0,
        port = 0x0,
        unit = 0x0,
      },
    }
    
    zfcp_erp_action is always fully embedded into its container object. Such
    container object is never moved in its object tree (only add or delete).
    Hence, erp_action parent pointers can never change.
    
    To fix the issue, initialize the erp_action parent pointers before
    adding the erp_action container to any list and thus before it becomes
    accessible from outside of its initializing function.
    
    In order to also close the time window between zfcp_erp_setup_act()
    memsetting the entire erp_action to zero and setting the parent pointers
    again, drop the memset and instead explicitly initialize individually
    all erp_action fields except for parent pointers. To be extra careful
    not to introduce any other unintended side effect, even keep zeroing the
    erp_action fields for list and timer. Also double-check with
    WARN_ON_ONCE that erp_action parent pointers never change, so we get to
    know when we would deviate from previous behavior.
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN recovery")
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 744807cb251f331ca0720b8c81a54e9db7b13ac5 ......
	 orig commit -> 56d23ed7adf3974f10e91b643bd230e9c65b5f79 ......
checking 2ce34d9da4273b10ad8a680a8258278bcf805c9e ......
	 orig commit -> dac37e15b7d511e026a9313c8c46794c144103cd ......
checking 8032a30081c1361e06ba70f08f34fd972772060b ......
	 orig commit -> 83337e544323a8bd7492994d64af339175ac7107 ......
checking 113783ec1cdbc208ca10927348cf37b983ea3b34 ......
	 orig commit -> d5573584429254a14708cf8375c47092b5edaf2c ......
checking 6089f8712dcbfc2ee20f6d9af2f4550ddf88e7d9 ......
	 orig commit -> 18e1c7f68a5814442abad849abe6eacbf02ffd7c ......
checking 2d2914349286d29e57b6536c01251c1332a8e784 ......
	 orig commit -> a0ebf519b8a2666438d999c62995618c710573e5 ......
checking fbb28e76454fd7b9c59e5e35702982ee6d0dae8b ......
	 orig commit -> 31b5929d533f5183972cf57a7844b456ed996f3c ......
checking 11aa5c10102a425dde885b6b056e1fe354bcbb88 ......
	 orig commit -> af309226db916e2c6e08d3eba3fa5c34225200c4 ......
checking 09c154920e7738f9a597354432b81d99b9105f5e ......
	 orig commit -> 9ff2007bea1f1bfc53ac0bc7ccf8200bb275fd52 ......
checking 0814c3ede27a5c1f7994ccd8998f6b41e802949d ......
	 orig commit -> d5f8e166c25750adc147b0adf64a62a91653438a ......
checking 66469319c01a1a36c78d0a8535e3dcbc1349bb19 ......
	 orig commit -> 298360af3dab45659810fdc51aba0c9f4097e4f6 ......
checking 8dbd6f709e62394fedb4fe75a3e553cbb6cbdbd3 ......
	 orig commit -> 202e0b227b906cb80a2791f21216a55d9468d61b ......
checking f2d3d7f84cdf60d2e7e103a3381910005a4ca669 ......
	 orig commit -> eb584241226958d45aa1f07f4f6a6ea9da98b29e ......
checking 326760ba1802a5b2f73de06f3bac4e9752a3257a ......
	 orig commit -> 10e2ca346bf74561ff1b7fff6287716ab976cd8c ......
checking aa286e88fd914aecfdf5c4807fb814233c0d092b ......
	 orig commit -> 0a97c81a9717431e6c57ea845b59c3c345edce67 ......
checking 6187f21f8c97f66a15e7c5392bd10fcf2cbc395a ......
	 orig commit -> abb2e3c1ce64c8bba678973800c34ea1dc97c42c ......
checking 851bedd86b95516ca3334b1eadf8b68eb220c5e9 ......
	 orig commit -> 8729675c00a8d13cb2094d617d70a4a4da7d83c5 ......
checking 126f676b087d091e714fcae1ebe87182062d138b ......
	 orig commit -> 6b16cf7785a4200b1bddf4f70c9dda2efc49e278 ......
		 6b16cf7785a4200b1bddf4f70c9dda2efc49e278 has problem. Fixes commit -> d74c67dd7800fc7aae381f272875c337f268806c
commit 7499da90c0ccaabea9b2b71f3f9c5603585715db
Author: Michel D채nzer <michel.daenzer@amd.com>
Date:   Wed Feb 15 11:28:45 2017 +0900

    drm/radeon: Use mode h/vdisplay fields to hide out of bounds HW cursor
    
    commit d74c67dd7800fc7aae381f272875c337f268806c upstream.
    
    The crtc_h/vdisplay fields may not match the CRTC viewport dimensions
    with special modes such as interlaced ones.
    
    Fixes the HW cursor disappearing in the bottom half of the screen with
    interlaced modes.
    
    Fixes: 6b16cf7785a4 ("drm/radeon: Hide the HW cursor while it's out of bounds")
    Reported-by: Ashutosh Kumar <ashutosh.kumar@amd.com>
    Tested-by: Sonny Jiang <sonny.jiang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Michel D채nzer <michel.daenzer@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 45ec673dfe0f8b1564289067a35f4abde3bd8472 ......
	 orig commit -> dcab0fa64e300afa18f39cd98d05e0950f652adf ......
checking 9195157f7d03758655ea6940348152b2c563fa1a ......
	 orig commit -> b27add13f500469127afdf011dbcc9c649e16e54 ......
checking 64a5c4725fd385cb51c0b6b63b3f65d68d4aa2a8 ......
	 orig commit -> 5b3800a6b763874e4a23702fb9628d3bd3315ce9 ......
checking bfa563bae25131fc084c273b43a789819e302fe7 ......
	 orig commit -> 10dcab3e7f477bffee88d518aad57d06777cfdf4 ......
checking a5b4c77c92da629bf10926fe05cdf972e0e08f86 ......
	 orig commit -> f4e65efc88b64c1dbca275d42a188edccedb56c6 ......
checking d95ef8af5425f7ac99427b7d4fad5b4c8e54c879 ......
	 orig commit -> 5dc7f4aa9d84ea94b54a9bfcef095f0289f1ebda ......
checking 2c256b8e81bf7ce751531b679421df517e8e0ec5 ......
	 orig commit -> 768e847759d551c96e129e194588dbfb11a1d576 ......
checking 42e5fd6bce5bec03590aa4467c30f6338db0bbbc ......
	 orig commit -> e137040e0d0376b404fc5155eba44ea07126e3bd ......
checking c2a51dd3138df107432fc2ff452cf43ee49a7dff ......
	 orig commit -> dd31ae9ac933636c3712b7dd0f6152c1d71f81fe ......
checking 8e1b86f30bc1e3d213d269a74b3375a06ba8199f ......
	 orig commit -> 8b02cde994e3025b6886c82eac6cd1e7bc4d1fe9 ......
checking 2cea2151623122f78b5287acba658208bb0ee4a7 ......
	 orig commit -> 8e57ec613df7d6bfa8ffe7512290c5415ebb8657 ......
checking eb0d743b41882ad2987f4fe4000dce595fce1b7f ......
	 orig commit -> ce66cb1e9cbf91fcb216de64a0fe65aa17f97bc1 ......
checking f3dd47e0f683cfcca9e1d31f61d33aed37c5f122 ......
	 orig commit -> 5a23f2720589ec4757bc62183902d2518f02026e ......
checking a04465251f948a345b7642bf292c063dc482146a ......
	 orig commit -> 6276e53fa8c06a3a5cf7b95b77b079966de9ad66 ......
		 6276e53fa8c06a3a5cf7b95b77b079966de9ad66 has problem. Fixes commit -> fd25ea29093e275195d0ae8b2573021a1c98959f
checking 6d46601e656412d351ceda73226419a9bf5cb2d7 ......
	 orig commit -> 350fa038c31b056fc509624efb66348ac2c1e3d0 ......
checking 745f7d0d1951e1109ad159860732c3ef157aba17 ......
	 orig commit -> 857a661020a2de3a0304edf33ad656abee100891 ......
checking bd1692bed615fd31cd04ae19369130060fa4ec04 ......
	 orig commit -> 655c4d442d1213b617926cc6d54e2a9a793fb46b ......
checking 3b2f287b7795aa08cab1c61d99a4a615b63076a7 ......
	 orig commit -> b8cb86fd95bb461c3496e1f4b4083b198c963a9c ......
checking 38b2dc0b0f380984cd4fcc208497f8366f85f856 ......
	 orig commit -> cd15dd6ef4ea11df87f717b8b1b83aaa738ec8af ......
checking bf6a9b31e8a9cbdb6f67f84882fcf7d252e43d6f ......
	 orig commit -> abd1026da4a7700a8db370947f75cd17b6ae6f76 ......
checking 5bd6ccd9c95fdf068e125e08992c7424eb2ceabb ......
	 orig commit -> 217e2bfab22e740227df09f22165e834cddd8a3b ......
checking fab303ba78ee2bae3da057f750139fc6222c66d5 ......
	 orig commit -> f37fabb8643eaf8e3b613333a72f683770c85eca ......
checking 05bc2071b11b0c422d36fae33e701cf297563f04 ......
	 orig commit -> 68af4fa8f39b542a6cde7ac19518d88e9b3099dc ......
checking b6d666315b999df88a5fa5da65dda992dbe4556b ......
	 orig commit -> 5e6b9a89afceadb1ee45472098f7d20af260335c ......
checking 5f654078b760104019e851247ae84d5498ff8a0e ......
	 orig commit -> f4e81c529767b9a33d1b27695c54dc84a14af30d ......
checking acd0993f8e97968b97291060ec553e4550f816fc ......
	 orig commit -> 1516c6350aa2770b8a5e36d40c3ec5078f92ba70 ......
checking ca22975afa144d5bb648dcff22f598d623493e9f ......
	 orig commit -> 9c1645727b8fa90d07256fdfcc45bf831242a3ab ......
checking efd16f76f4da8293e8ccd196a20dd2f52042227a ......
	 orig commit -> e85baa8868b016513c0f5738362402495b1a66a5 ......
checking dbcde92b1b44011c3993ba7a2ee2469a9350ffd3 ......
	 orig commit -> 295070e9aa015abb9b92cccfbb1e43954e938133 ......
checking cee935845420e2ffe81293d396ad44a5630ba743 ......
	 orig commit -> 61e53bd0047d58caee0c7170613045bf96de4458 ......
checking 5bb425033ef1783eec0a40d3846dca5a5e2c03a8 ......
	 orig commit -> 2ca71c27eeaeddae38efe24a84b20e22708a3d1d ......
checking 71717a3ef900dafe6e9854320491de5b8e972b08 ......
	 orig commit -> d1f1c0e289e1bc46cd6873ba6dd6c627f459e7fa ......
checking de5d62f892c382aae83f454190db55e7be3536d6 ......
	 orig commit -> 79e57dd113d307a6c74773b8aaecf5442068988a ......
checking 072ebf89ca2385028d85300af036aa1a7cf691df ......
	 orig commit -> 91851cc7a939039bd401adb6ca3da4402bec1d0c ......
checking 1976c7689a58405e076d7443e4f9f4805d86d935 ......
	 orig commit -> e6f462df9acd2a3295e5d34eb29e2823220cf129 ......
checking 3f23f7f21ac5a5e7b0d780d595c70f4242099485 ......
	 orig commit -> c59f13bbead475096bdfebc7ef59c12e180858de ......
checking 19d55b9f32b6888411c6d09090537dd1ddbf8025 ......
	 orig commit -> 834fcd298003c10ce450e66960c78893cb1cc4b5 ......
checking ba12b35fbd69020d1fad79f0cead0fbd9ea4822a ......
	 orig commit -> edee44be59190bf22d5c6e521f3852b7ff16862f ......
		 edee44be59190bf22d5c6e521f3852b7ff16862f has problem. Fixes commit -> 331c7cb307971eac38e9470340e10c87855bf4bc
commit 698f6acd22d3944f67cc54ae881f34aeafae96c5
Author: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
Date:   Tue Oct 24 19:50:06 2017 +0530

    perf symbols: Fix memory corruption because of zero length symbols
    
    [ Upstream commit 331c7cb307971eac38e9470340e10c87855bf4bc ]
    
    Perf top is often crashing at very random locations on powerpc.  After
    investigating, I found the crash only happens when sample is of zero
    length symbol. Powerpc kernel has many such symbols which does not
    contain length details in vmlinux binary and thus start and end
    addresses of such symbols are same.
    
    Structure
    
      struct sym_hist {
            u64                   nr_samples;
            u64                   period;
            struct sym_hist_entry addr[0];
      };
    
    has last member 'addr[]' of size zero. 'addr[]' is an array of addresses
    that belongs to one symbol (function). If function consist of 100
    instructions, 'addr' points to an array of 100 'struct sym_hist_entry'
    elements. For zero length symbol, it points to the *empty* array, i.e.
    no members in the array and thus offset 0 is also invalid for such
    array.
    
      static int __symbol__inc_addr_samples(...)
      {
            ...
            offset = addr - sym->start;
            h = annotation__histogram(notes, evidx);
            h->nr_samples++;
            h->addr[offset].nr_samples++;
            h->period += sample->period;
            h->addr[offset].period += sample->period;
            ...
      }
    
    Here, when 'addr' is same as 'sym->start', 'offset' becomes 0, which is
    valid for normal symbols but *invalid* for zero length symbols and thus
    updating h->addr[offset] causes memory corruption.
    
    Fix this by adding one dummy element for zero length symbols.
    
    Link: https://lkml.org/lkml/2016/10/10/148
    Fixes: edee44be5919 ("perf annotate: Don't throw error for zero length symbols")
    Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jin Yao <yao.jin@linux.intel.com>
    Cc: Kim Phillips <kim.phillips@arm.com>
    Cc: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Taeung Song <treeze.taeung@gmail.com>
    Link: http://lkml.kernel.org/r/1508854806-10542-1-git-send-email-ravi.bangoria@linux.vnet.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 54fa190d0a548f7e403aa5d73e830b8aeecbf27b ......
	 orig commit -> b0c1ef52959582144bbea9a2b37db7f4c9e399f7 ......
checking 98068574928f499b30f136ff57ef9a03cc575a36 ......
	 orig commit -> ba9f93f82abafe2552eac942ebb11c2df4f8dd7f ......
		 ba9f93f82abafe2552eac942ebb11c2df4f8dd7f has problem. Fixes commit -> 60f59ce0278557f7896d5158ae6d12a4855a72cc
commit 6fea974494af50921a5201ebb30c65dde30a1a2b
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Wed Dec 21 11:18:55 2016 -0600

    rtlwifi: rtl_usb: Fix missing entry in USB driver's private data
    
    commit 60f59ce0278557f7896d5158ae6d12a4855a72cc upstream.
    
    These drivers need to be able to reference "struct ieee80211_hw" from
    the driver's private data, and vice versa. The USB driver failed to
    store the address of ieee80211_hw in the private data. Although this
    bug has been present for a long time, it was not exposed until
    commit ba9f93f82aba ("rtlwifi: Fix enter/exit power_save").
    
    Fixes: ba9f93f82aba ("rtlwifi: Fix enter/exit power_save")
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking ea23fca0c60045afbbeceef1926893d905eb1b36 ......
	 orig commit -> c2cac2f74ab4bcf0db0dcf3a612f1e5b52d145c8 ......
checking b8425f41346610bd2137eee2c374227ee532e497 ......
	 orig commit -> 8052d7245b6089992343c80b38b14dbbd8354651 ......

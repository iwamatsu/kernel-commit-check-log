Check from v4.9.143 to v4.9.144
Commit count: 103
checking 1aa861ff238ecd17a3095b0dbd2d20bdf7bfaf14 ......
checking 0c82bca7cd1ae580dc34069d42edfd5102603e7e ......
	 orig commit -> 5df63c2a149ae65a9ec239e7c2af44efa6f79beb ......
checking 4ec44e98ab08c704d0ff1a35a21a0682a5562a27 ......
	 orig commit -> 7b38460dc8e4eafba06c78f8e37099d3b34d473c ......
checking 91fe514bedf4c72ae8046fe4cfa98c5e201f6b84 ......
	 orig commit -> e494c2f995d6181d6e29c4927d68e0f295ecf75b ......
checking 2c605dd1ad233dc793e24f7074a5e0ad8a06337b ......
	 orig commit -> a2125ff7dd1ed3a2a53cdc1f8f9c9cec9cfaa7ab ......
checking b10a6ac262f8c1c0c70a90e992137a5590325f0b ......
	 orig commit -> 91291e9998d208370eb8156c760691b873bd7522 ......
checking e33c1e29d4c3afbdca7390ee97efcb29275d4061 ......
	 orig commit -> 89d13c38501df730cbb2e02c4499da1b5187119d ......
checking aafb371575161e315a98dee978b72f9d5357791b ......
	 orig commit -> c9b60788fc760d136211853f10ce73dc152d1f4a ......
		 c9b60788fc760d136211853f10ce73dc152d1f4a has problem. Fixes commit -> 89d13c38501df730cbb2e02c4499da1b5187119d
commit e33c1e29d4c3afbdca7390ee97efcb29275d4061
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Thu Sep 27 22:15:31 2018 -0700

    f2fs: fix missing up_read
    
    commit 89d13c38501df730cbb2e02c4499da1b5187119d upstream.
    
    This patch fixes missing up_read call.
    
    Fixes: c9b60788fc76 ("f2fs: fix to do sanity check with block address in main area")
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 1c87980591a1dc8c5eafdcc5f9953fca4e518465 ......
	 orig commit -> e34438c903b653daca2b2a7de95aed46226f8ed3 ......
checking fd8c7d35bd1305317f5eaab62cc7f86eafbf76b3 ......
checking 06e606acedaf8bb00c83c4cee43acdd264287a92 ......
	 orig commit -> 9dc956b2c8523aed39d1e6508438be9fea28c8fc ......
checking a3dccfacd3a574365ab6c5118f8a944a4ba691fa ......
	 orig commit -> 42bf546c1fe3f3654bdf914e977acbc2b80a5be5 ......
checking d451188135016a78d71fa8848a0999eebf142ae5 ......
	 orig commit -> e1da7872f6eda977bd812346bf588c35e4495a1e ......
checking 6012d18d4bf626da4f64eeb2c59d14d5db90411b ......
	 orig commit -> 7b525dd01365c6764018e374d391c92466be1b7a ......
checking 65e1055a6987616ad58761ca03c9a82b19ad5f86 ......
	 orig commit -> 0cfe75c5b011994651a4ca6d74f20aa997bfc69a ......
		 0cfe75c5b011994651a4ca6d74f20aa997bfc69a has problem. Fixes commit -> 88960068f25fcc3759455d85460234dcc9d43fef
commit 362e8cbc7c72ec76a793b8e6ac5adc687e292539
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Dec 22 11:22:26 2018 +0100

    f2fs: fix validation of the block count in sanity_check_raw_super
    
    commit 88960068f25fcc3759455d85460234dcc9d43fef upstream.
    
    Treat "block_count" from struct f2fs_super_block as 64-bit little endian
    value in sanity_check_raw_super() because struct f2fs_super_block
    declares "block_count" as "__le64".
    
    This fixes a bug where the superblock validation fails on big endian
    devices with the following error:
      F2FS-fs (sda1): Wrong segment_count / block_count (61439 > 0)
      F2FS-fs (sda1): Can't find valid F2FS filesystem in 1th superblock
      F2FS-fs (sda1): Wrong segment_count / block_count (61439 > 0)
      F2FS-fs (sda1): Can't find valid F2FS filesystem in 2th superblock
    As result of this the partition cannot be mounted.
    
    With this patch applied the superblock validation works fine and the
    partition can be mounted again:
      F2FS-fs (sda1): Mounted with checkpoint version = 7c84
    
    My little endian x86-64 hardware was able to mount the partition without
    this fix.
    To confirm that mounting f2fs filesystems works on big endian machines
    again I tested this on a 32-bit MIPS big endian (lantiq) device.
    
    Fixes: 0cfe75c5b01199 ("f2fs: enhance sanity_check_raw_super() to avoid potential overflows")
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 6e182e91c722dac5450eaa6810a9654d537da638 ......
	 orig commit -> b2ca374f33bd33fd822eb871876e4888cf79dc97 ......
checking 89d78cf58f278e1f239a3bacc1b5e94c77567911 ......
	 orig commit -> 0833721ec3658a4e9d5e58b6fa82cf9edc431e59 ......
checking 3fd96204809836661291be92a678a07c8b44883b ......
	 orig commit -> c39a1b348c4fe172729eff77c533dabc3c7cdaa7 ......
checking 240ceff482becbda9ef20f7a9cd3a3727b057072 ......
	 orig commit -> 2040fce83fe17763b07c97c1f691da2bb85e4135 ......
checking cb9b1d4ec206702a4df1cb42ba8142f39acfdd91 ......
	 orig commit -> 30a61ddf8117c26ac5b295e1233eaa9629a94ca3 ......
checking 3b19f961d260d1ae12b497e5eb77e5ecc1039fac ......
	 orig commit -> d4fdf8ba0e5808ba9ad6b44337783bd9935e0982 ......
checking d558df73f9bef21e9a32270423319c5fc0701525 ......
	 orig commit -> 761333f2f50ccc887aa9957ae829300262c0d15b ......
checking fbf8bd363066b7d652b6d289ac94e82e7a68409d ......
	 orig commit -> f556faa46eb4e96d0d0772e74ecf66781e132f72 ......
checking 7a72f918825ddece7a4ed79583836f6f1e06e478 ......
	 orig commit -> 514c7dca85a0bf40be984dab0b477403a6db901f ......
checking 6f33d3d8dca8683a4df94e9944296a1a1a2a6f10 ......
	 orig commit -> ba480dd4db9f1798541eb2d1c423fc95feee8d36 ......
checking 058e388e42c8dc5b6ce6248990c75a0459e20197 ......
	 orig commit -> fce466eab7ac6baa9d2dcd88abcf945be3d4a089 ......
		 fce466eab7ac6baa9d2dcd88abcf945be3d4a089 has problem. Fixes commit -> 10950929e994c5ecee149ff0873388d3c98f12b5
761333f2f50ccc887aa9957ae829300262c0d15b
commit d558df73f9bef21e9a32270423319c5fc0701525
Author: Shaokun Zhang <zhangshaokun@hisilicon.com>
Date:   Mon Nov 5 18:49:09 2018 +0800

    btrfs: tree-checker: Fix misleading group system information
    
    commit 761333f2f50ccc887aa9957ae829300262c0d15b upstream.
    
    block_group_err shows the group system as a decimal value with a '0x'
    prefix, which is somewhat misleading.
    
    Fix it to print hexadecimal, as was intended.
    
    Fixes: fce466eab7ac6 ("btrfs: tree-checker: Verify block_group_item")
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit d558df73f9bef21e9a32270423319c5fc0701525
Author: Shaokun Zhang <zhangshaokun@hisilicon.com>
Date:   Mon Nov 5 18:49:09 2018 +0800

    btrfs: tree-checker: Fix misleading group system information
    
    commit 761333f2f50ccc887aa9957ae829300262c0d15b upstream.
    
    block_group_err shows the group system as a decimal value with a '0x'
    prefix, which is somewhat misleading.
    
    Fix it to print hexadecimal, as was intended.
    
    Fixes: fce466eab7ac6 ("btrfs: tree-checker: Verify block_group_item")
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking db438c33374349aaa5a8ae138ababaffed19f1dc ......
	 orig commit -> e2683fc9d219430f5b78889b50cde7f40efeba7b ......
checking 6b66f518c57dd4437cf8e644eb53e9b899da24b4 ......
	 orig commit -> 7cfad65297bfe0aa2996cd72d21c898aa84436d9 ......
checking e48e62f5a0976a8824d56fc58897f28df637a8d8 ......
	 orig commit -> ad7b0368f33cffe67fecd302028915926e50ef7e ......
checking f7438e62370bfd5278ed58107191917a816e2b88 ......
	 orig commit -> 69fc6cbbac542c349b3d350d10f6e394c253c81d ......
checking f4209d9db395190552297cfebc3ffb40b736b26f ......
	 orig commit -> bba4f29896c986c4cec17bc0f19f2ce644fceae1 ......
checking 20b30415513621106d1a39202ed63cceb73ba18a ......
	 orig commit -> 1cbb1f454e5321e47fc1e6b233066c7ccc979d15 ......
checking 90eb4c02418bb479c1d154b57437fe4c2593ffb3 ......
	 orig commit -> 557ea5dd003d371536f6b4e8f7c8209a2b6fd4e3 ......
checking dc564649a2917e0d8e7c00e60023ce3e90ebd7d2 ......
	 orig commit -> 4b865cab96fe2a30ed512cf667b354bd291b3b0a ......
checking c5b29071313f249c9da6f4ca4adfd857f9f7666d ......
	 orig commit -> 40c3c40947324d9f40bf47830c92c59a9bbadf4a ......
checking ece4bb551be6a63cdfbc74348f12d73df3ab9b0e ......
	 orig commit -> 7f43d4affb2a254d421ab20b0cf65ac2569909fb ......
checking b0a67e43dc53407cb03095232eb7c65a6d46e477 ......
	 orig commit -> c3267bbaa9cae09b62960eafe33ad19196803285 ......
checking 23eb2f435a07e1e09d48ea10c4a22bc96e16fde6 ......
	 orig commit -> 7ef49515fa6727cb4b6f2f5b0ffbc5fc20a9f8c6 ......
checking 3c77b07dc365a7ed2644ca0dd38e6e40a9652d57 ......
	 orig commit -> 315409b0098fb2651d86553f0436b70502b29bb2 ......
checking 447effd30f9d12f7925595ba9a6ffb01969d6cce ......
	 orig commit -> 63489f8e821144000e0bdca7e65a8d1cc23a7ee7 ......
		 63489f8e821144000e0bdca7e65a8d1cc23a7ee7 has problem. Fixes commit -> 5df63c2a149ae65a9ec239e7c2af44efa6f79beb
commit 0c82bca7cd1ae580dc34069d42edfd5102603e7e
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Thu Apr 5 16:18:21 2018 -0700

    hugetlbfs: fix bug in pgoff overflow checking
    
    commit 5df63c2a149ae65a9ec239e7c2af44efa6f79beb upstream.
    
    This is a fix for a regression in 32 bit kernels caused by an invalid
    check for pgoff overflow in hugetlbfs mmap setup.  The check incorrectly
    specified that the size of a loff_t was the same as the size of a long.
    The regression prevents mapping hugetlbfs files at offsets greater than
    4GB on 32 bit kernels.
    
    On 32 bit kernels conversion from a page based unsigned long can not
    overflow a loff_t byte offset.  Therefore, skip this check if
    sizeof(unsigned long) != sizeof(loff_t).
    
    Link: http://lkml.kernel.org/r/20180330145402.5053-1-mike.kravetz@oracle.com
    Fixes: 63489f8e8211 ("hugetlbfs: check for pgoff value overflow")
    Reported-by: Dan Rue <dan.rue@linaro.org>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Yisheng Xie <xieyisheng1@huawei.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Nic Losby <blurbdust@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3d101f33acb2312ad544106212e0b9ff0d9917f3 ......
	 orig commit -> 045c7a3f53d9403b62d396b6d051c4be5044cdb4 ......
		 045c7a3f53d9403b62d396b6d051c4be5044cdb4 has problem. Fixes commit -> 63489f8e821144000e0bdca7e65a8d1cc23a7ee7
commit 447effd30f9d12f7925595ba9a6ffb01969d6cce
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Thu Mar 22 16:17:13 2018 -0700

    hugetlbfs: check for pgoff value overflow
    
    commit 63489f8e821144000e0bdca7e65a8d1cc23a7ee7 upstream.
    
    A vma with vm_pgoff large enough to overflow a loff_t type when
    converted to a byte offset can be passed via the remap_file_pages system
    call.  The hugetlbfs mmap routine uses the byte offset to calculate
    reservations and file size.
    
    A sequence such as:
    
      mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);
      remap_file_pages(0x20a00000, 0x600000, 0, 0x20000000000000, 0);
    
    will result in the following when task exits/file closed,
    
      kernel BUG at mm/hugetlb.c:749!
      Call Trace:
        hugetlbfs_evict_inode+0x2f/0x40
        evict+0xcb/0x190
        __dentry_kill+0xcb/0x150
        __fput+0x164/0x1e0
        task_work_run+0x84/0xa0
        exit_to_usermode_loop+0x7d/0x80
        do_syscall_64+0x18b/0x190
        entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    The overflowed pgoff value causes hugetlbfs to try to set up a mapping
    with a negative range (end < start) that leaves invalid state which
    causes the BUG.
    
    The previous overflow fix to this code was incomplete and did not take
    the remap_file_pages system call into account.
    
    [mike.kravetz@oracle.com: v3]
      Link: http://lkml.kernel.org/r/20180309002726.7248-1-mike.kravetz@oracle.com
    [akpm@linux-foundation.org: include mmdebug.h]
    [akpm@linux-foundation.org: fix -ve left shift count on sh]
    Link: http://lkml.kernel.org/r/20180308210502.15952-1-mike.kravetz@oracle.com
    Fixes: 045c7a3f53d9 ("hugetlbfs: fix offset overflow in hugetlbfs mmap")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reported-by: Nic Losby <blurbdust@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Yisheng Xie <xieyisheng1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking e5deaa544138b5b01531d06cfee05a969375a5f6 ......
	 orig commit -> ff8c0c53c47530ffea82c22a0a6df6332b56c957 ......
		 ff8c0c53c47530ffea82c22a0a6df6332b56c957 has problem. Fixes commit -> 045c7a3f53d9403b62d396b6d051c4be5044cdb4
commit 3d101f33acb2312ad544106212e0b9ff0d9917f3
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Thu Apr 13 14:56:32 2017 -0700

    hugetlbfs: fix offset overflow in hugetlbfs mmap
    
    commit 045c7a3f53d9403b62d396b6d051c4be5044cdb4 upstream.
    
    If mmap() maps a file, it can be passed an offset into the file at which
    the mapping is to start.  Offset could be a negative value when
    represented as a loff_t.  The offset plus length will be used to update
    the file size (i_size) which is also a loff_t.
    
    Validate the value of offset and offset + length to make sure they do
    not overflow and appear as negative.
    
    Found by syzcaller with commit ff8c0c53c475 ("mm/hugetlb.c: don't call
    region_abort if region_chg fails") applied.  Prior to this commit, the
    overflow would still occur but we would luckily return ENOMEM.
    
    To reproduce:
    
       mmap(0, 0x2000, 0, 0x40021, 0xffffffffffffffffULL, 0x8000000000000000ULL);
    
    Resulted in,
    
      kernel BUG at mm/hugetlb.c:742!
      Call Trace:
       hugetlbfs_evict_inode+0x80/0xa0
       evict+0x24a/0x620
       iput+0x48f/0x8c0
       dentry_unlink_inode+0x31f/0x4d0
       __dentry_kill+0x292/0x5e0
       dput+0x730/0x830
       __fput+0x438/0x720
       ____fput+0x1a/0x20
       task_work_run+0xfe/0x180
       exit_to_usermode_loop+0x133/0x150
       syscall_return_slowpath+0x184/0x1c0
       entry_SYSCALL_64_fastpath+0xab/0xad
    
    Fixes: ff8c0c53c475 ("mm/hugetlb.c: don't call region_abort if region_chg fails")
    Link: http://lkml.kernel.org/r/1491951118-30678-1-git-send-email-mike.kravetz@oracle.com
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 35db4d1ed8a344899a87887fa7bf11be5b057bec ......
	 orig commit -> b5a8ffcae4103a9d823ea3aa3a761f65779fbe2a ......
checking def8c1d045a0fb457a1136f7edcc5ed8b2d81af6 ......
	 orig commit -> af86ca4e3088fe5eacf2f7e58c01fa68ca067672 ......
checking 62e0865f2015af8bdc56da33243f66091b0a918d ......
checking 9c33b84ba0c4073c2ac7a0a40773ea9134090b55 ......
checking e190b826f93c23ed48de7b41f4a1d9180ddbfeec ......
	 orig commit -> 130f52f2b203aa0aec179341916ffb2e905f3afd ......
checking 985a55126453f55299cc55fcfffbeb157eb42c59 ......
	 orig commit -> f1d10e04637924f2b00a0fecdd2ca4565f5cfc3f ......
checking 18a23fb2632030888fc56a7df73a80f57445718f ......
	 orig commit -> cc255c76c70f7a87d97939621eae04b600d9f4a1 ......
checking 06e925920d4de3da2114876bc607447e929604af ......
	 orig commit -> 6daca13d2e72bedaaacfc08f873114c9307d5aea ......
checking 2e901ea8b448a7f5899104a3917ecca2a5e8ab7f ......
	 orig commit -> 149cac4a50b0b4081b38b2f38de6ef71c27eaa85 ......
checking 9da9bb4a0ff67af49c1ca96a313c2cf8e079b46a ......
	 orig commit -> c571fe24d243bfe7017f0e67fe800b3cc2a1d1f7 ......
checking 2617cd5743c6d6207de26e51b95c3fcb171ff70e ......
	 orig commit -> c0f56b483aa09c99bfe97409a43ad786f33b8a5a ......
checking 08115452f865b39c9ecbd468201f606ff5434619 ......
	 orig commit -> 262614c4294d33b1f19e0d18c0091d9c329b544a ......
checking bd180ec81f73c3af8c6ce45a72f45a3365d493ce ......
	 orig commit -> b3bbd3f2ab19c8ca319003b4b51ce4c4ca74da06 ......
checking 9041d1e200c74ec613964d218c8f485db0cadbe2 ......
	 orig commit -> 0dde584882ade13dc9708d611fbf69b0ae8a9e48 ......
checking 5acc58cd99489cf3b511741078802cccd2eb8ca6 ......
	 orig commit -> 29e270fc32192e7729057963ae7120663856c93e ......
checking 11de2fae3441670b5b9d7a287a33bfb6dff93af5 ......
	 orig commit -> 11f711081af0eb54190dc0de96ba4a9cd494666b ......
checking f3e31bbef6ed3c2787e75cd3b03fa88c530fb943 ......
	 orig commit -> 7661ca09b2ff98f48693f431bb01fed62830e433 ......
checking 60b3d44f05c148f6f7f5e5b2a8165d328c3f22a0 ......
	 orig commit -> 6ff38bd40230af35e446239396e5fc8ebd6a5248 ......
checking 0e67f1cd9658ee99974ae13f47316dedcddc156e ......
	 orig commit -> bb6c7768385b200063a14d6615cc1246c3d00760 ......
checking f109deb22ee0a9bb5aa96b40251d859b3be13de1 ......
	 orig commit -> 1554bbd4ad401b7f0f916c0891874111c10befe5 ......
checking ee6e7fba7f45eaa533639ac7489afabb97d2e6ee ......
	 orig commit -> 62e24c5775ecb387a3eb33701378ccfa6dbc98ee ......
checking 7be26008ef1742ed0d26ca1a3ff69d58b793e511 ......
	 orig commit -> 0ca10b60ceeb5372da01798ca68c116ae45a6eb6 ......
checking d4b89ecc29514792c3e37ec509fba9e283dbd5e7 ......
	 orig commit -> 4891486fb2c80eaf3bb0f9eb065d15ecd357702f ......
checking ca58e3b2fc54bec2b740f391a713c92e0cbf9a76 ......
	 orig commit -> bb475230b8e59a547ab66ac3b02572df21a580e9 ......
		 bb475230b8e59a547ab66ac3b02572df21a580e9 has problem. Fixes commit -> 62e24c5775ecb387a3eb33701378ccfa6dbc98ee
0ca10b60ceeb5372da01798ca68c116ae45a6eb6
4891486fb2c80eaf3bb0f9eb065d15ecd357702f
commit 7be26008ef1742ed0d26ca1a3ff69d58b793e511
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Mon Mar 20 11:25:16 2017 +0100

    reset: fix optional reset_control_get stubs to return NULL
    
    commit 0ca10b60ceeb5372da01798ca68c116ae45a6eb6 upstream.
    
    When RESET_CONTROLLER is not enabled, the optional reset_control_get
    stubs should now also return NULL.
    
    Since it is now valid for reset_control_assert/deassert/reset/status/put
    to be called unconditionally, with NULL as an argument for optional
    resets, the stubs are not allowed to warn anymore.
    
    Fixes: bb475230b8e5 ("reset: make optional functions really optional")
    Reported-by: Andrzej Hajda <a.hajda@samsung.com>
    Tested-by: Andrzej Hajda <a.hajda@samsung.com>
    Reviewed-by: Andrzej Hajda <a.hajda@samsung.com>
    Cc: Ramiro Oliveira <Ramiro.Oliveira@synopsys.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4b89ecc29514792c3e37ec509fba9e283dbd5e7
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed Feb 1 08:05:22 2017 +0100

    reset: core: fix reset_control_put
    
    commit 4891486fb2c80eaf3bb0f9eb065d15ecd357702f upstream.
    
    Commit "reset: make optional functions really optional" missed to
    adjust one check in reset_control_put, causing a NULL pointer
    access for optional resets.
    
    Fixes: bb475230b8e5 "reset: make optional functions really optional"
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit ee6e7fba7f45eaa533639ac7489afabb97d2e6ee
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Fri Feb 5 13:41:39 2016 +0100

    reset: add exported __reset_control_get, return NULL if optional
    
    commit 62e24c5775ecb387a3eb33701378ccfa6dbc98ee upstream.
    
    Rename the internal __reset_control_get/put functions to
    __reset_control_get/put_internal and add an exported
    __reset_control_get equivalent to __of_reset_control_get
    that takes a struct device parameter.
    This avoids the confusing call to __of_reset_control_get in
    the non-DT case and fixes the devm_reset_control_get_optional
    function to return NULL if RESET_CONTROLLER is enabled but
    dev->of_node == NULL.
    
    Fixes: bb475230b8e5 ("reset: make optional functions really optional")
    Reported-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Tested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Ramiro Oliveira <Ramiro.Oliveira@synopsys.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7be26008ef1742ed0d26ca1a3ff69d58b793e511
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Mon Mar 20 11:25:16 2017 +0100

    reset: fix optional reset_control_get stubs to return NULL
    
    commit 0ca10b60ceeb5372da01798ca68c116ae45a6eb6 upstream.
    
    When RESET_CONTROLLER is not enabled, the optional reset_control_get
    stubs should now also return NULL.
    
    Since it is now valid for reset_control_assert/deassert/reset/status/put
    to be called unconditionally, with NULL as an argument for optional
    resets, the stubs are not allowed to warn anymore.
    
    Fixes: bb475230b8e5 ("reset: make optional functions really optional")
    Reported-by: Andrzej Hajda <a.hajda@samsung.com>
    Tested-by: Andrzej Hajda <a.hajda@samsung.com>
    Reviewed-by: Andrzej Hajda <a.hajda@samsung.com>
    Cc: Ramiro Oliveira <Ramiro.Oliveira@synopsys.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4b89ecc29514792c3e37ec509fba9e283dbd5e7
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed Feb 1 08:05:22 2017 +0100

    reset: core: fix reset_control_put
    
    commit 4891486fb2c80eaf3bb0f9eb065d15ecd357702f upstream.
    
    Commit "reset: make optional functions really optional" missed to
    adjust one check in reset_control_put, causing a NULL pointer
    access for optional resets.
    
    Fixes: bb475230b8e5 "reset: make optional functions really optional"
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 47fb2ff8acf2654ec20c67076617384812ec9ca4 ......
	 orig commit -> b54e41f5efcb4316b2f30b30c2535cc194270373 ......
checking 84fa7fcc557ebcf2537a7e70df8475b08e554fd5 ......
	 orig commit -> 6b04114f6fae5e84d33404c2970b1949c032546e ......
checking abbeacc0d35306a1fa4e2a100ec0fbc63a92cc07 ......
	 orig commit -> b7cc40c32a8bfa6f2581a71747f6a7d491fe43ba ......
checking ddc07d59fae34d2afbb0a16d1528fd15bd9ab081 ......
	 orig commit -> 9084cb6a24bf5838a665af92ded1af8363f9e563 ......
checking c50ccf2c755e5fab8e197ca7257a621202376e43 ......
	 orig commit -> f8397d69daef06d358430d3054662fb597e37c00 ......
checking b5e2333efe45fcd3c69aeca70ed747ea85361fba ......
	 orig commit -> bf87ade0dd7f8cf19dac4d3161d5e86abe0c062b ......
checking 0d70ce8c392a8247b84cd2b9ee4a2a1708833806 ......
	 orig commit -> ad33429cd02565c28404bb16ae7a4c2bdfda6626 ......
checking d5cb3f341c48314de05bc542f4ceef2c0bc3dcd8 ......
	 orig commit -> 3ed64da3b790be7c63601e8ca6341b7dff74a660 ......
checking 81bedda8a375b1447ea4bd0f2ca5c31e6e88b14e ......
	 orig commit -> d55bda1b3e7c5a87f10da54fdda866a9a9cef30b ......
checking 3ea71da2203dc62adeb4e0007a9f64ea3a4c8c3a ......
	 orig commit -> a6754fae1e66e9a40fed406290d7ca3f2b4d227c ......
checking d0095c5211b9b9ac5452eec0aa1320936ccd175e ......
	 orig commit -> ceff2f4dcd44abf35864d9a99f85ac619e89a01d ......
checking 8e9de89fedfce75f2f8f5f7d9aa81a707c29de2a ......
	 orig commit -> 30510387a5e45bfcf8190e03ec7aa15b295828e2 ......
checking c0d75dacffb9cf3c0e3812ba0c7607c063cd7e9d ......
	 orig commit -> 7f3dc0088b98533f17128058fac73cd8b2752ef1 ......
checking 412091e27d295c53582a9b038af1343dd544944c ......
	 orig commit -> 1cd25cbb2fedbc777f3a8c3cb1ba69b645aeaa64 ......
checking d0bf1cbeeb8e258799cfda11d14eeddd32a2062f ......
	 orig commit -> 2dd453168643d9475028cd867c57e65956a0f7f9 ......
		 2dd453168643d9475028cd867c57e65956a0f7f9 has problem. Fixes commit -> 3ec8002951ea173e24b466df1ea98c56b7920e63
1cd25cbb2fedbc777f3a8c3cb1ba69b645aeaa64
commit 412091e27d295c53582a9b038af1343dd544944c
Author: Laura Abbott <labbott@redhat.com>
Date:   Wed Sep 19 18:59:01 2018 -0700

    kgdboc: Fix warning with module build
    
    commit 1cd25cbb2fedbc777f3a8c3cb1ba69b645aeaa64 upstream.
    
    After 2dd453168643 ("kgdboc: Fix restrict error"), kgdboc_option_setup is
    now only used when built in, resulting in a warning when compiled as a
    module:
    
    drivers/tty/serial/kgdboc.c:134:12: warning: 'kgdboc_option_setup' defined but not used [-Wunused-function]
     static int kgdboc_option_setup(char *opt)
                ^~~~~~~~~~~~~~~~~~~
    
    Move the function under the appropriate ifdef for builtin only.
    
    Fixes: 2dd453168643 ("kgdboc: Fix restrict error")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 9b06a0b2682fa6d2820d0c36d32499f82a893f8f
Author: Wentao Wang <witallwang@gmail.com>
Date:   Wed Mar 20 15:30:39 2019 +0000

    Disable kgdboc failed by echo space to /sys/module/kgdboc/parameters/kgdboc
    
    commit 3ec8002951ea173e24b466df1ea98c56b7920e63 upstream.
    
    Echo "" to /sys/module/kgdboc/parameters/kgdboc will fail with "No such
    device” error.
    
    This is caused by function "configure_kgdboc" who init err to ENODEV
    when the config is empty (legal input) the code go out with ENODEV
    returned.
    
    Fixes: 2dd453168643 ("kgdboc: Fix restrict error")
    Signed-off-by: Wentao Wang <witallwang@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 412091e27d295c53582a9b038af1343dd544944c
Author: Laura Abbott <labbott@redhat.com>
Date:   Wed Sep 19 18:59:01 2018 -0700

    kgdboc: Fix warning with module build
    
    commit 1cd25cbb2fedbc777f3a8c3cb1ba69b645aeaa64 upstream.
    
    After 2dd453168643 ("kgdboc: Fix restrict error"), kgdboc_option_setup is
    now only used when built in, resulting in a warning when compiled as a
    module:
    
    drivers/tty/serial/kgdboc.c:134:12: warning: 'kgdboc_option_setup' defined but not used [-Wunused-function]
     static int kgdboc_option_setup(char *opt)
                ^~~~~~~~~~~~~~~~~~~
    
    Move the function under the appropriate ifdef for builtin only.
    
    Fixes: 2dd453168643 ("kgdboc: Fix restrict error")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 0256f875f23ac806e83befb3d7f3e7d545f59006 ......
	 orig commit -> 42c335f7e67029d2e01711f2f2bc6252277c8993 ......
checking b2b93631769364c4e40e8655d7e30915fddf69d3 ......
	 orig commit -> d6b340d7cb33c816ef4abe8143764ec5ab14a5cc ......
checking 5f41f8cacf643281dbb9027b06d4de37e5605f99 ......
	 orig commit -> 81df022b688d43d2a3667518b2f755d384397910 ......
checking de8268d0fe98b817eb1fe70a1326a90633a6b0a7 ......
	 orig commit -> 23a336b34258aba3b50ea6863cca4e81b5ef6384 ......
checking 96562b885dda2ec786310a523b38831da9b80310 ......
	 orig commit -> dc25ab067645eabd037f1a23d49a666f9e0b8c68 ......
checking 23aa2d8f26e80d43cdc1f918c3de9bc8b60f9733 ......
	 orig commit -> db7a691a1551a748cb92d9c89c6b190ea87e28d5 ......
checking 26c128748b17d1ea1b28867504fbe062721dd463 ......
	 orig commit -> c50cbd85cd7027d32ac5945bb60217936b4f7eaf ......
checking 1eef40b39f82bfa26f5e1371aa2067fece6cb479 ......
	 orig commit -> 7d35baa4e9ec4b717bc0e58a39cdb6a1c50f5465 ......
checking 0b58d902bfddea07e417145a84ee6e1d790de8c1 ......
	 orig commit -> 09d3f015d1e1b4fee7e9bbdcf54201d239393391 ......
checking 66739379d5c8be23fb67b77c80b7c02e9aa3a9f0 ......
	 orig commit -> 24c3456c8d5ee6fc1933ca40f7b4406130682668 ......
checking ad3af650aabd89b8562d9807cc1260b732c1cf67 ......
	 orig commit -> c0944883c97c0ddc71da67cc731590a7c878a1a2 ......
checking 21761c7034366a1b4d02685ccd6b57141a14aa65 ......
	 orig commit -> 2cf2f0d5b91fd1b06a6ae260462fc7945ea84add ......
checking e9490d7a727b3a9234c55f6aee8f0d6d1ac8b8dd ......
	 orig commit -> 58930cced012adb01bc78b3687049b17ef44d0a3 ......
checking 2de75633886acf5779af6d9c4188e7cc854f0656 ......
	 orig commit -> 8c5a50e8e7ad812a62f7ccf28d9a5e74fddf3000 ......
checking 0470662c9e5699ab95ce1d58d84d2cfd2077ec66 ......
	 orig commit -> 67a3b63a54cbe18944191f43d644686731cf30c7 ......
checking 5569c10858bebe3ac36d313610e11711087ec580 ......
	 orig commit -> 000ade8016400d93b4d7c89970d96b8c14773d45 ......
checking 52fc8c7243f34dc8cd8c6977b92943518b325ccf ......
	 orig commit -> 166126c1e54d927c2e8efa2702d420e0ce301fd9 ......
checking 0d4a2de44713ddc65bf4087e1424a55fa79f4a5c ......
	 orig commit -> 38c7b224ce22c25fed04007839edf974bd13439d ......
checking cd39e296c4d65a4598c882d17373ca5ec99d7416 ......
	 orig commit -> 77d2a24b6107bd9b3bf2403a65c1428a9da83dd0 ......
checking d041ed258e58e48aff222ad562bb44fdcfcc1482 ......
	 orig commit -> b1286ed7158e9b62787508066283ab0b8850b518 ......
checking 5e2669c978b2cd21c10ddc774d293d6974581c56 ......
	 orig commit -> 217c3e0196758662aa0429863b09d1c13da1c5d6 ......
checking dfb64b8c3d26b79b191eaeacd9e042becb1eca58 ......
	 orig commit -> 321cb0308a9e76841394b4bbab6a1107cfedbae0 ......

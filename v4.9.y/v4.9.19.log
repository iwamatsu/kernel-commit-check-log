Check from v4.9.19 to v4.9.20
Commit count: 17
checking f6767727467056943bf6d3433ffce0a8b2b05681 ......
checking 1dc3a068cc1123cbfb1d6340cfd795bfd453870a ......
	 orig commit -> bc1e2154542071e3cfe1734b143af9b8bdacf8bd ......
checking 916c5cfeab400f5260d20dc2e5c8e0ec52e64cfc ......
	 orig commit -> 619bd4a71874a8fd78eb6ccf9f272c5e98bcc7b7 ......
checking 2984e52c75c657db7901f6189f02e0251ca963c2 ......
	 orig commit -> 1b53cf9815bb4744958d41f3795d5d5a1d365e2d ......
checking 21c95eca627bf63fa56dc19f5fb5fb2a770dadc0 ......
	 orig commit -> 7195ee3120d878259e8d94a5d9f808116f34d5ea ......
checking 2d6532ceb45bffcc05036f93a0590ffa82c7794f ......
	 orig commit -> 5fe81fe98123ce41265c65e95d34418d30d005d1 ......
checking 2739b4874165acc5ce07e643c363e6768f44cf4f ......
	 orig commit -> a78ce80d2c9178351b34d78fec805140c29c193e ......
checking 84b94c4356c668ebe4532b3a999cf375f0089310 ......
	 orig commit -> d3805c546b275c8cc7d40f759d029ae92c7175f2 ......
checking 0ba34c87f7ce04232295ebf4991cd3ff36ea5abd ......
	 orig commit -> d614fd58a2834cfe4efa472c33c8f3ce2338b09b ......
		 d614fd58a2834cfe4efa472c33c8f3ce2338b09b has problem. Fixes commit -> 006501e039eec411842bb3150c41358867d320c2
80b3ffce0196ea50068885d085ff981e4b8396f4
commit f616180a8720b499ada54c830b7e028ed8a8e1c7
Author: Maciej W. Rozycki <macro@mips.com>
Date:   Mon Dec 11 22:53:14 2017 +0000

    MIPS: Consistently handle buffer counter with PTRACE_SETREGSET
    
    commit 80b3ffce0196ea50068885d085ff981e4b8396f4 upstream.
    
    Update commit d614fd58a283 ("mips/ptrace: Preserve previous registers
    for short regset write") bug and consistently consume all data supplied
    to `fpr_set_msa' with the ptrace(2) PTRACE_SETREGSET request, such that
    a zero data buffer counter is returned where insufficient data has been
    given to fill a whole number of FP general registers.
    
    In reality this is not going to happen, as the caller is supposed to
    only supply data covering a whole number of registers and it is verified
    in `ptrace_regset' and again asserted in `fpr_set', however structuring
    code such that the presence of trailing partial FP general register data
    causes `fpr_set_msa' to return with a non-zero data buffer counter makes
    it appear that this trailing data will be used if there are subsequent
    writes made to FP registers, which is going to be the case with the FCSR
    once the missing write to that register has been fixed.
    
    Fixes: d614fd58a283 ("mips/ptrace: Preserve previous registers for short regset write")
    Signed-off-by: Maciej W. Rozycki <macro@mips.com>
    Cc: James Hogan <james.hogan@mips.com>
    Cc: Paul Burton <Paul.Burton@mips.com>
    Cc: Alex Smith <alex@alex-smith.me.uk>
    Cc: Dave Martin <Dave.Martin@arm.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/17927/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 1f4cff1c364ba4d1b197af88fca63b8736a9d601
Author: Maciej W. Rozycki <macro@mips.com>
Date:   Mon Dec 11 22:55:40 2017 +0000

    MIPS: Also verify sizeof `elf_fpreg_t' with PTRACE_SETREGSET
    
    commit 006501e039eec411842bb3150c41358867d320c2 upstream.
    
    Complement commit d614fd58a283 ("mips/ptrace: Preserve previous
    registers for short regset write") and like with the PTRACE_GETREGSET
    ptrace(2) request also apply a BUILD_BUG_ON check for the size of the
    `elf_fpreg_t' type in the PTRACE_SETREGSET request handler.
    
    Signed-off-by: Maciej W. Rozycki <macro@mips.com>
    Fixes: d614fd58a283 ("mips/ptrace: Preserve previous registers for short regset write")
    Cc: James Hogan <james.hogan@mips.com>
    Cc: Paul Burton <Paul.Burton@mips.com>
    Cc: Alex Smith <alex@alex-smith.me.uk>
    Cc: Dave Martin <Dave.Martin@arm.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/17929/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f616180a8720b499ada54c830b7e028ed8a8e1c7
Author: Maciej W. Rozycki <macro@mips.com>
Date:   Mon Dec 11 22:53:14 2017 +0000

    MIPS: Consistently handle buffer counter with PTRACE_SETREGSET
    
    commit 80b3ffce0196ea50068885d085ff981e4b8396f4 upstream.
    
    Update commit d614fd58a283 ("mips/ptrace: Preserve previous registers
    for short regset write") bug and consistently consume all data supplied
    to `fpr_set_msa' with the ptrace(2) PTRACE_SETREGSET request, such that
    a zero data buffer counter is returned where insufficient data has been
    given to fill a whole number of FP general registers.
    
    In reality this is not going to happen, as the caller is supposed to
    only supply data covering a whole number of registers and it is verified
    in `ptrace_regset' and again asserted in `fpr_set', however structuring
    code such that the presence of trailing partial FP general register data
    causes `fpr_set_msa' to return with a non-zero data buffer counter makes
    it appear that this trailing data will be used if there are subsequent
    writes made to FP registers, which is going to be the case with the FCSR
    once the missing write to that register has been fixed.
    
    Fixes: d614fd58a283 ("mips/ptrace: Preserve previous registers for short regset write")
    Signed-off-by: Maciej W. Rozycki <macro@mips.com>
    Cc: James Hogan <james.hogan@mips.com>
    Cc: Paul Burton <Paul.Burton@mips.com>
    Cc: Alex Smith <alex@alex-smith.me.uk>
    Cc: Dave Martin <Dave.Martin@arm.com>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/17927/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 616fe993f410c589cd928dfb015ccaf9c931dcc1 ......
	 orig commit -> 502585c7555083d4a949c08350306b9ec196779e ......
checking d77bd2d6a478468127da79e6920b44c467baaa9e ......
	 orig commit -> fb411b837b587a32046dc4f369acb93a10b1def8 ......
checking dd6054234bd82065134f62ca0b5e2695c0d859b7 ......
	 orig commit -> a6566710adaa4a7dd5e0d99820ff9c9c30ee5951 ......
checking b82b2f930c2b090a51d429664454252c87b45a47 ......
	 orig commit -> fc8653228c8588a120f6b5dad6983b7b61ff669e ......
checking 3e8c6bd9dbc44630199892ad27ef745a45335191 ......
	 orig commit -> 2beb6dad2e8f95d710159d5befb390e4f62ab5cf ......
checking 79191ea36dc9be10a9c9b03d6b341ed2d2f76045 ......
	 orig commit -> f843ee6dd019bcece3e74e76ad9df0155655d0df ......
checking 64a5465799ee40e3d54d9da3037934cd4b7b502f ......
	 orig commit -> 677e806da4d916052585301785d847c3b3e6186a ......
checking f68a09c7944eca3bdfce2ef18b43dfd2359346b7 ......
	 orig commit -> c282222a45cb9503cbfbebfdb60491f06ae84b49 ......

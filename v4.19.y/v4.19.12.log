Check from v4.19.12 to v4.19.13
Commit count: 47
checking c04c050f5bf98845bfe22164b8a1503d696a6e26 ......
checking 7f3ebea19795eb38438cd3709fabf2afd53cf447 ......
	 orig commit -> 505b5240329b922f21f91d5b5d1e535c805eca6d ......
checking 6bb41321166fe7db834fd7137b596d4312e38273 ......
	 orig commit -> ea5751ccd665a2fd1b24f9af81f6167f0718c5f6 ......
checking 488f2c66dd46410edd9f67e40ea27420a0b8b4cb ......
	 orig commit -> d21ff5d7f8c397261e095393a1a8e199934720bc ......
checking a5e8809697136ec0dfbcb6af2c7375ece49cbeab ......
	 orig commit -> 68600f623d69da428c6163275f97ca126e1a8ec5 ......
checking e27666dd8ffad78cd82a39624b1be66bdd50f31e ......
	 orig commit -> 17e2e7d7e1b83fa324b3f099bfe426659aa3c2a4 ......
checking 161a5654cf0611cb5edff0bd288bf68b114d35d8 ......
	 orig commit -> 2e83ee1d8694a61d0d95a5b694f2e61e8dde8627 ......
checking 7592dbfaf3efcfa36d5652e5713298776c793d40 ......
	 orig commit -> 2830bf6f05fb3e05bc4743274b806c821807a684 ......
		 2830bf6f05fb3e05bc4743274b806c821807a684 has problem. Fixes commit -> 4aa9fc2a435abe95a1e8d7f8c7b3d6356514b37a
commit 6bab957396ce60d2c25d161657c7d3e744989fb5
Author: Michal Hocko <mhocko@suse.com>
Date:   Fri Jan 25 19:08:58 2019 +0100

    Revert "mm, memory_hotplug: initialize struct pages for the full memory section"
    
    commit 4aa9fc2a435abe95a1e8d7f8c7b3d6356514b37a upstream.
    
    This reverts commit 2830bf6f05fb3e05bc4743274b806c821807a684.
    
    The underlying assumption that one sparse section belongs into a single
    numa node doesn't hold really. Robert Shteynfeld has reported a boot
    failure. The boot log was not captured but his memory layout is as
    follows:
    
      Early memory node ranges
        node   1: [mem 0x0000000000001000-0x0000000000090fff]
        node   1: [mem 0x0000000000100000-0x00000000dbdf8fff]
        node   1: [mem 0x0000000100000000-0x0000001423ffffff]
        node   0: [mem 0x0000001424000000-0x0000002023ffffff]
    
    This means that node0 starts in the middle of a memory section which is
    also in node1.  memmap_init_zone tries to initialize padding of a
    section even when it is outside of the given pfn range because there are
    code paths (e.g.  memory hotplug) which assume that the full worth of
    memory section is always initialized.
    
    In this particular case, though, such a range is already intialized and
    most likely already managed by the page allocator.  Scribbling over
    those pages corrupts the internal state and likely blows up when any of
    those pages gets used.
    
    Reported-by: Robert Shteynfeld <robert.shteynfeld@gmail.com>
    Fixes: 2830bf6f05fb ("mm, memory_hotplug: initialize struct pages for the full memory section")
    Cc: stable@kernel.org
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3fbd4d87f1d1f4ed8a52a3d86a71d0c448a1be0f ......
	 orig commit -> 07115449919383548d094ff83cc27bd08639a8a1 ......
checking 7f30924b488fbbd7b728c3b108a838c74e5c523d ......
	 orig commit -> f108703cb5f199d0fc98517ac29a997c4c646c94 ......
checking 9007fba734d0f3438a204447e1006b84c224f5ec ......
	 orig commit -> 1aa48f088615ebfa5e139951a0d3e7dc2c2af4ec ......
checking c151740ff107ddd253447ff4d0825c438a8692f9 ......
	 orig commit -> eca1e56ceedd9cc185eb18baf307d3ff2e4af376 ......
checking fed44d6cb15f5e9dea806ae555dbe3b06a6c312d ......
	 orig commit -> 8cfa272b0d321160ebb5b45073e39ef0a6ad73f2 ......
checking 5ecdfbb0d9f0f588ca6bfcb7703bc816a2b9fab5 ......
	 orig commit -> 4a135e538962cb00a9667c82e7d2b9e4d7cd7177 ......
checking 89d6fff0747f50dfef8460527f74d296cc6cb7dc ......
	 orig commit -> 1071fc5779d9846fec56a4ff6089ab08cac1ab72 ......
checking ba38c3e788384aa7210340f9c54eceab00c3b31c ......
	 orig commit -> a8874e7e8a8896f2b6c641f4b8e2473eafd35204 ......
checking 28a3b553dd31ae447979eec0da7b9e9c83e5d6ee ......
	 orig commit -> 6d212db11947ae5464e4717536ed9faf61c01e86 ......
checking 384221cbb918136863016a582dd7475febc7d4b9 ......
	 orig commit -> c7c3f05e341a9a2bd1a92993d4f996cfd6e7348e ......
checking 0a95cba52bf2fb90b15c22e43aca80a1ad10c9bd ......
	 orig commit -> 80b71c340f17705ec145911b9a193ea781811b16 ......
checking 56f7bfac531a8cdb7f171d3dfb6cb598e561661c ......
	 orig commit -> cd01544a268ad8ee5b1dfe42c4393f1095f86879 ......
checking 1e3b98b28c0d531284b2ceaedba435e54201f2ff ......
	 orig commit -> 51c3fbd89d7554caa3290837604309f8d8669d99 ......
checking c623326a3398006154c9ec74eabc366b40b9aeb6 ......
	 orig commit -> 32043fa065b51e0b1433e48d118821c71b5cd65d ......
checking 9933bfb6d3f2aff30f9e32a674e79c06768f80dd ......
	 orig commit -> da791a667536bf8322042e38ca85d55a78d3c273 ......
checking c1f8e7acb0c249d2a3fc5fcc330f56e185a1f120 ......
	 orig commit -> fc96df16a1ce80cbb3c316ab7d4dc8cd5c2852ce ......
		 fc96df16a1ce80cbb3c316ab7d4dc8cd5c2852ce has problem. Fixes commit -> ba50bf1ce9a51fc97db58b96d01306aa70bc3979
commit a912e16faeda0f047aa334d062b70f20126f48bc
Author: Dexuan Cui <decui@microsoft.com>
Date:   Mon Dec 17 20:16:09 2018 +0000

    Drivers: hv: vmbus: Check for ring when getting debug info
    
    commit ba50bf1ce9a51fc97db58b96d01306aa70bc3979 upstream.
    
    fc96df16a1ce is good and can already fix the "return stack garbage" issue,
    but let's also improve hv_ringbuffer_get_debuginfo(), which would silently
    return stack garbage, if people forget to check channel->state or
    ring_info->ring_buffer, when using the function in the future.
    
    Having an error check in the function would eliminate the potential risk.
    
    Add a Fixes tag to indicate the patch depdendency.
    
    Fixes: fc96df16a1ce ("Drivers: hv: vmbus: Return -EINVAL for the sys files for unopened channels")
    Cc: stable@vger.kernel.org
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 1972ca04708330b0edd52956e644e3974065a613 ......
	 orig commit -> c2dd5146e9fe1f22c77c1b011adf84eea0245806 ......
checking 229468c62942ce0f4ec223c001009b58bbec25ce ......
	 orig commit -> 0e1b869fff60c81b510c2d00602d778f8f59dd9a ......
checking 76281d12dac98ed877b0f199451eaa8e39df0395 ......
	 orig commit -> dcbd3e49c2f0b2c2d8a321507ff8f3de4af76d7c ......
checking 82c8dbb376b9fa9b831c157cbb15664cb4a343e3 ......
	 orig commit -> 0e334db6bb4b1fd1e2d72c1f3d8f004313cd9f94 ......
		 0e334db6bb4b1fd1e2d72c1f3d8f004313cd9f94 has problem. Fixes commit -> 93ad0fc088c5b4631f796c995bdd27a082ef33a6
commit 21c0d1621b8d4b20f19f383de03d14095657016f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jan 11 14:33:16 2019 +0100

    posix-cpu-timers: Unbreak timer rearming
    
    commit 93ad0fc088c5b4631f796c995bdd27a082ef33a6 upstream.
    
    The recent commit which prevented a division by 0 issue in the alarm timer
    code broke posix CPU timers as an unwanted side effect.
    
    The reason is that the common rearm code checks for timer->it_interval
    being 0 now. What went unnoticed is that the posix cpu timer setup does not
    initialize timer->it_interval as it stores the interval in CPU timer
    specific storage. The reason for the separate storage is historical as the
    posix CPU timers always had a 64bit nanoseconds representation internally
    while timer->it_interval is type ktime_t which used to be a modified
    timespec representation on 32bit machines.
    
    Instead of reverting the offending commit and fixing the alarmtimer issue
    in the alarmtimer code, store the interval in timer->it_interval at CPU
    timer setup time so the common code check works. This also repairs the
    existing inconistency of the posix CPU timer code which kept a single shot
    timer armed despite of the interval being 0.
    
    The separate storage can be removed in mainline, but that needs to be a
    separate commit as the current one has to be backported to stable kernels.
    
    Fixes: 0e334db6bb4b ("posix-timers: Fix division by zero bug")
    Reported-by: H.J. Lu <hjl.tools@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190111133500.840117406@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 1f51527d020e9737cae4792c2fb09da39fe129dd ......
	 orig commit -> e59f5e08ece1060073d92c66ded52e1f2c43b5bb ......
checking 85ac860a5fdfd57f90d3a1163ebfa7906dbdf2c0 ......
	 orig commit -> abf221d2f51b8ce7b9959a8953f880a8b0a1400d ......
checking 0867cfaabcf7a05568fc9e75bd3e134d517e6a05 ......
	 orig commit -> 0b479790684192ab7024ce6a621f93f6d0a64d92 ......
checking b38f6898b60c09033caaa4383c62c25ff1ca331d ......
	 orig commit -> e3ae3401aa19432ee4943eb0bbc2ec704d07d793 ......
checking 12df9797d98c94d923f0fc3ccb5ef41f52971793 ......
	 orig commit -> ba9f39a785a9977e72233000711ef1eb48203551 ......
checking f465300aab0d0945969508dd951ab022c09856cb ......
	 orig commit -> a0741ba40a009f97c019ae7541dc61c1fdf41efb ......
checking 024d515aab9b2bbe9435939f910a0a63b4674f63 ......
	 orig commit -> 61cce6f6eeced5ddd9cac55e807fe28b4f18c1ba ......
checking 690699b271858d45587c868c5166cb6d495a953f ......
	 orig commit -> 60a89a3ce0cce515dc663bc1b45ac89202ad6c79 ......
checking 0736458856868c920079f42a1e881d271e201390 ......
	 orig commit -> e58725d51fa8da9133f3f1c54170aa2e43056b91 ......
checking 507a953af9259cff72375ba58c65ec2f33caf4ae ......
	 orig commit -> 28a86092b1753b802ef7e3de8a4c4a69a9c1bb03 ......
checking 81dfcd0b2c17e3938bd1a7c6d17abb26bc381446 ......
	 orig commit -> 30360224441ce89a98ed627861e735beb4010775 ......
checking 4e0f50024696966d1304de24a030e7930e87539b ......
	 orig commit -> cc6730df08a291e51e145bc65e24ffb5e2f17ab6 ......
checking cc0667b533a92281986c5d3551b7736ee07bf8ef ......
	 orig commit -> d57ec3c83b5153217a70b561d4fb6ed96f2f7a25 ......
checking 7a37019379d673256ec0da60c60b8cce7df2d54f ......
	 orig commit -> 70a7444c550a75584ffcfae95267058817eff6a7 ......
checking a67fb441decdd0c94e743f46f331991e2f06684c ......
	 orig commit -> 2419f30a4a4fcaa5f35111563b4c61f1b2b26841 ......
checking e13bfb357f5bc04f9e7ccff7d07770388062a8cc ......
	 orig commit -> 45f750c16cae3625014c14c77bd9005eda975d35 ......
checking 8f980122236c1fc8e11ffb57ec73315d01dc88e0 ......
	 orig commit -> 5146f95df782b0ac61abde36567e718692725c89 ......
checking 9c5ccadb7b42ee124d4009212a2b737c98590da7 ......
	 orig commit -> 94f82008ce30e2624537d240d64ce718255e0b80 ......
checking 38d072a4a71738d95a2b9e47a4bbd091d7e55af3 ......
	 orig commit -> a837eca2412051628c0529768c9bc4f3580b040e ......

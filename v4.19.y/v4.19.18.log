Check from v4.19.18 to v4.19.19
Commit count: 104
checking dffbba4348e9686d6bf42d54eb0f2cd1c4fb3520 ......
checking 3a3b6a6b15dbd99d83052070fda2ae2bfdd66dc6 ......
	 orig commit -> 141e5dcaa7356077028b4cd48ec351a38c70e5e5 ......
checking d4a6ac28d44a8ed2fdc80745d01136d81383d7ed ......
	 orig commit -> f8ff6c732d35904d773043f979b844ef330c701b ......
checking 25ad17d692ad54c3c33b2a31e5ce2a82e38de14e ......
	 orig commit -> bd6742249b9ca918565e4e3abaa06665e587f4b5 ......
checking 6bab957396ce60d2c25d161657c7d3e744989fb5 ......
	 orig commit -> 4aa9fc2a435abe95a1e8d7f8c7b3d6356514b37a ......
checking 7dbf12973d536a226acf5e18ab9ed6ff6364c876 ......
	 orig commit -> 5cbab6303b4791a3e6713dfe2c5fda6a867f9adc ......
checking fa9184be67a6c2f3d9ae38a832aa061c33c853cc ......
	 orig commit -> ad1f824948e4ed886529219cf7cd717d078c630d ......
checking 48046a0177e6f8d91df2416d8086915c77a30b67 ......
	 orig commit -> 60f1bf29c0b2519989927cae640cd1f50f59dc7f ......
checking 37c9e3ee42398badb7ae1f080b6a596936497f43 ......
	 orig commit -> 9d5564ddcf2a0f5ba3fa1c3a1f8a1b59ad309553 ......
checking eed84f94ff8d97abcbc5706f6f9427520fd60a10 ......
	 orig commit -> d3bd7413e0ca40b60cf60d4003246d067cafdeda ......
		 d3bd7413e0ca40b60cf60d4003246d067cafdeda has problem. Fixes commit -> 3612af783cf52c74a031a2f11b82247b2599d3cd
commit ca490a987365252c2785fc13714c8e4219363122
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Mar 1 22:05:29 2019 +0100

    bpf: fix sanitation rewrite in case of non-pointers
    
    commit 3612af783cf52c74a031a2f11b82247b2599d3cd upstream.
    
    Marek reported that he saw an issue with the below snippet in that
    timing measurements where off when loaded as unpriv while results
    were reasonable when loaded as privileged:
    
        [...]
        uint64_t a = bpf_ktime_get_ns();
        uint64_t b = bpf_ktime_get_ns();
        uint64_t delta = b - a;
        if ((int64_t)delta > 0) {
        [...]
    
    Turns out there is a bug where a corner case is missing in the fix
    d3bd7413e0ca ("bpf: fix sanitation of alu op with pointer / scalar
    type from different paths"), namely fixup_bpf_calls() only checks
    whether aux has a non-zero alu_state, but it also needs to test for
    the case of BPF_ALU_NON_POINTER since in both occasions we need to
    skip the masking rewrite (as there is nothing to mask).
    
    Fixes: d3bd7413e0ca ("bpf: fix sanitation of alu op with pointer / scalar type from different paths")
    Reported-by: Marek Majkowski <marek@cloudflare.com>
    Reported-by: Arthur Fabre <afabre@cloudflare.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/netdev/CAJPywTJqP34cK20iLM5YmUMz9KXQOdu1-+BZrGMAGgLuBWz7fg@mail.gmail.com/T/
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking f92a819b4cbef8c9527d9797110544b2055a4b96 ......
	 orig commit -> 979d63d50c0c0f7bc537bf821e056cc9fe5abd38 ......
		 979d63d50c0c0f7bc537bf821e056cc9fe5abd38 has problem. Fixes commit -> 0803278b0b4d8eeb2b461fb698785df65a725d9e
d3bd7413e0ca40b60cf60d4003246d067cafdeda
commit eed84f94ff8d97abcbc5706f6f9427520fd60a10
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Jan 28 21:28:29 2019 +0100

    bpf: fix sanitation of alu op with pointer / scalar type from different paths
    
    [ commit d3bd7413e0ca40b60cf60d4003246d067cafdeda upstream ]
    
    While 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer
    arithmetic") took care of rejecting alu op on pointer when e.g. pointer
    came from two different map values with different map properties such as
    value size, Jann reported that a case was not covered yet when a given
    alu op is used in both "ptr_reg += reg" and "numeric_reg += reg" from
    different branches where we would incorrectly try to sanitize based
    on the pointer's limit. Catch this corner case and reject the program
    instead.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
commit f5959dec081a59d1019509fa21320def183f78c8
Author: Xu Yu <xuyu@linux.alibaba.com>
Date:   Thu Mar 21 18:00:35 2019 +0800

    bpf: do not restore dst_reg when cur_state is freed
    
    commit 0803278b0b4d8eeb2b461fb698785df65a725d9e upstream.
    
    Syzkaller hit 'KASAN: use-after-free Write in sanitize_ptr_alu' bug.
    
    Call trace:
    
      dump_stack+0xbf/0x12e
      print_address_description+0x6a/0x280
      kasan_report+0x237/0x360
      sanitize_ptr_alu+0x85a/0x8d0
      adjust_ptr_min_max_vals+0x8f2/0x1ca0
      adjust_reg_min_max_vals+0x8ed/0x22e0
      do_check+0x1ca6/0x5d00
      bpf_check+0x9ca/0x2570
      bpf_prog_load+0xc91/0x1030
      __se_sys_bpf+0x61e/0x1f00
      do_syscall_64+0xc8/0x550
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fault injection trace:
    
      kfree+0xea/0x290
      free_func_state+0x4a/0x60
      free_verifier_state+0x61/0xe0
      push_stack+0x216/0x2f0                  <- inject failslab
      sanitize_ptr_alu+0x2b1/0x8d0
      adjust_ptr_min_max_vals+0x8f2/0x1ca0
      adjust_reg_min_max_vals+0x8ed/0x22e0
      do_check+0x1ca6/0x5d00
      bpf_check+0x9ca/0x2570
      bpf_prog_load+0xc91/0x1030
      __se_sys_bpf+0x61e/0x1f00
      do_syscall_64+0xc8/0x550
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    When kzalloc() fails in push_stack(), free_verifier_state() will free
    current verifier state. As push_stack() returns, dst_reg was restored
    if ptr_is_dst_reg is false. However, as member of the cur_state,
    dst_reg is also freed, and error occurs when dereferencing dst_reg.
    Simply fix it by testing ret of push_stack() before restoring dst_reg.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Signed-off-by: Xu Yu <xuyu@linux.alibaba.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eed84f94ff8d97abcbc5706f6f9427520fd60a10
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Jan 28 21:28:29 2019 +0100

    bpf: fix sanitation of alu op with pointer / scalar type from different paths
    
    [ commit d3bd7413e0ca40b60cf60d4003246d067cafdeda upstream ]
    
    While 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer
    arithmetic") took care of rejecting alu op on pointer when e.g. pointer
    came from two different map values with different map properties such as
    value size, Jann reported that a case was not covered yet when a given
    alu op is used in both "ptr_reg += reg" and "numeric_reg += reg" from
    different branches where we would incorrectly try to sanitize based
    on the pointer's limit. Catch this corner case and reject the program
    instead.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 4f7f708d0e6c7ba7dc3387b3561d950a3a2ff931 ......
	 orig commit -> b7137c4eab85c1cf3d46acdde90ce1163b28c873 ......
checking 44f8fc6499807c03d30921486e059b951dcea63d ......
	 orig commit -> 9d7eceede769f90b66cfa06ad5b357140d5141ed ......
checking 5332dda94f632e56444d1c081e4683463dd64278 ......
	 orig commit -> e4298d25830a866cc0f427d4bccb858e76715859 ......
checking 9e57b2969d4afa8fe08dda6d658963336c97b594 ......
	 orig commit -> 0d6303db7970e6f56ae700fa07e11eb510cda125 ......
checking 232ac70dd38bfae4899460c342aae7aa0a36aa64 ......
	 orig commit -> 9b73bfdd08e73231d6a90ae6db4b46b3fbf56c30 ......
checking b855e310374063360af5fb3bbbd0cc66ca189dc0 ......
	 orig commit -> 144cd91c4c2bced6eb8a7e25e590f6618a11e854 ......
checking 333a31c89ae2d991a8a54034e369526cbb384b13 ......
	 orig commit -> c08435ec7f2bc8f4109401f696fd55159b4b40cb ......
checking 437112946263de65ac32be20a040ce77b31926b7 ......
	 orig commit -> ceefbc96fa5c5b975d87bf8e89ba8416f6b764d9 ......
checking 7da6cd690c436cad101b23e1e54aa3f27f55088b ......
	 orig commit -> 4f7b3e82589e0de723780198ec7983e427144c0a ......
checking ce8d0581ae33b64b86fb6cd30d4385f90ddf19d8 ......
	 orig commit -> ce0210c12433031aba3bbacd75f4c02ab77f2004 ......
checking 8b4dffe8261a5079952222e5920303f6840ca211 ......
	 orig commit -> 0c9b1965faddad7534b6974b5b36c4ad37998f8e ......
checking 18ef43def81cebcdd3b7391b62de84b777814e08 ......
	 orig commit -> 7e1d226345f89ad5d0216a9092c81386c89b4983 ......
checking 855f7e64169f4da6691b30b1357a2b070515634c ......
	 orig commit -> 6609cff65c5b184ab889880ef5d41189611ea05f ......
checking 6f4f2a443d87e964ebdbb2543cbd7df285cd6080 ......
	 orig commit -> a55234dabe1f72cf22f9197980751d37e38ba020 ......
checking 576f474fb2d3f1355298dab6e3d87ccf2da9b800 ......
	 orig commit -> 93171ba6f1deffd82f381d36cb13177872d023f6 ......
checking 8d85aa96c54bb558fe923403084fc825bebef4a5 ......
	 orig commit -> 7b12c8189a3dc50638e7d53714c88007268d47ef ......
checking bdcf74e735b11b9b0309e685ef8d58635f5a0cee ......
	 orig commit -> 8208d1708b88b412ca97f50a6d951242c88cbbac ......
checking 6f4db68ab5ceae219fb97b667e4439cac5d820f0 ......
	 orig commit -> 56cb4e5034998b5522a657957321ca64ca2ea0a0 ......
checking 21c0d1621b8d4b20f19f383de03d14095657016f ......
	 orig commit -> 93ad0fc088c5b4631f796c995bdd27a082ef33a6 ......
checking dd085f9b1dc15dfbd3e5ced275a92324f5e16a44 ......
	 orig commit -> fc24d75a7f91837d7918e40719575951820b2b8f ......
checking ed334be9c2ed75b6fc348f5560f69cc418750c6b ......
	 orig commit -> 7e6fc2f50a3197d0e82d1c0e86282976c9e6c8a4 ......
checking 334c0e1b3cdd6dfbfd319dca47c3d0a1b17be896 ......
	 orig commit -> e1812933b17be7814f51b6c310c5d1ced7a9a5f5 ......
checking db01b8d40feb341833ac45f9173b569ec34773f3 ......
	 orig commit -> a31e184e4f69965c99c04cc5eb8a4920e0c63737 ......
checking f9203cd03125ab13a7c72c418f91ef9bdc4a92b9 ......
	 orig commit -> 22a7cdcae6a4a3c8974899e62851d270956f58ce ......
checking d58f5e638b18430593442083ee428d3783a185fc ......
	 orig commit -> 3a33d030daaa7c507e1c12d5adcf828248429593 ......
checking bbb8c5c75f6e99138bb1b44c7ed1f083f1d88acd ......
	 orig commit -> de81c2f912ef57917bdc6d63b410c534c3e07982 ......
checking b2598858ac219d68fac3b67883e56be59057a61e ......
	 orig commit -> 1ed199a41c70ad7bfaee8b14f78e791fcf43b278 ......
checking 6d3dabbdf46e9eb16b771465c8da4f0d5763e15d ......
	 orig commit -> 5cc244a20b86090c087073c124284381cdf47234 ......
checking c1bfae3403675429a28a9f9f05c3c18e85737699 ......
	 orig commit -> f15f3eb26e8d9d25ea2330ed1273473df2f039df ......
checking b911f1dcb60da14fe61bf3be37adc49f6b5b278e ......
	 orig commit -> 1856b9f7bcc8e9bdcccc360aabb56fbd4dd6c565 ......
checking 5b779f8417733e7b321b50d18116e15230da12e9 ......
	 orig commit -> d445bd9cec1a850c2100fcf53684c13b3fd934f2 ......
checking eba68bd456724a6128f25ad5c2f1573c9fae51d3 ......
	 orig commit -> d67247566450cf89a693307c9bc9f05a32d96cea ......
checking b18931c5fe0de20d61bf1dca8a472ee649636fe3 ......
	 orig commit -> 11189c1089da413aa4b5fd6be4c4d47c78968819 ......
		 11189c1089da413aa4b5fd6be4c4d47c78968819 has problem. Fixes commit -> 0171b6b78131110a6870d4b7296bc9dfc392116a
ebe9f6f19d80d8978d16078dff3d5bd93ad8d102
commit f5878c4f084dc6b1386dad03970bb61ad5e9dc4b
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Feb 7 14:56:50 2019 -0800

    acpi/nfit: Fix bus command validation
    
    commit ebe9f6f19d80d8978d16078dff3d5bd93ad8d102 upstream.
    
    Commit 11189c1089da "acpi/nfit: Fix command-supported detection" broke
    ND_CMD_CALL for bus-level commands. The "func = cmd" assumption is only
    valid for:
    
        ND_CMD_ARS_CAP
        ND_CMD_ARS_START
        ND_CMD_ARS_STATUS
        ND_CMD_CLEAR_ERROR
    
    The function number otherwise needs to be pulled from the command
    payload for:
    
        NFIT_CMD_TRANSLATE_SPA
        NFIT_CMD_ARS_INJECT_SET
        NFIT_CMD_ARS_INJECT_CLEAR
        NFIT_CMD_ARS_INJECT_GET
    
    Update cmd_to_func() for the bus case and call it in the common path.
    
    Fixes: 11189c1089da ("acpi/nfit: Fix command-supported detection")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
    Reported-by: Grzegorz Burzynski <grzegorz.burzynski@intel.com>
    Tested-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit f5878c4f084dc6b1386dad03970bb61ad5e9dc4b
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Feb 7 14:56:50 2019 -0800

    acpi/nfit: Fix bus command validation
    
    commit ebe9f6f19d80d8978d16078dff3d5bd93ad8d102 upstream.
    
    Commit 11189c1089da "acpi/nfit: Fix command-supported detection" broke
    ND_CMD_CALL for bus-level commands. The "func = cmd" assumption is only
    valid for:
    
        ND_CMD_ARS_CAP
        ND_CMD_ARS_START
        ND_CMD_ARS_STATUS
        ND_CMD_CLEAR_ERROR
    
    The function number otherwise needs to be pulled from the command
    payload for:
    
        NFIT_CMD_TRANSLATE_SPA
        NFIT_CMD_ARS_INJECT_SET
        NFIT_CMD_ARS_INJECT_CLEAR
        NFIT_CMD_ARS_INJECT_GET
    
    Update cmd_to_func() for the bus case and call it in the common path.
    
    Fixes: 11189c1089da ("acpi/nfit: Fix command-supported detection")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
    Reported-by: Grzegorz Burzynski <grzegorz.burzynski@intel.com>
    Tested-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 3cb00cfa3d37e46b3c8ee4af97fb52d29b07fbc0 ......
	 orig commit -> 5e9e38d0db1d29efed1dd4cf9a70115d33521be7 ......
checking 92fbac528fd0727eddf60476d73869383602fab0 ......
	 orig commit -> d77651a227f8920dd7ec179b84e400cce844eeb3 ......
checking 71b1af87749b917a2b6fd4afa0b8a9019f1259a4 ......
	 orig commit -> 2e746942ebacf1565caa72cf980745e5ce297c48 ......
		 2e746942ebacf1565caa72cf980745e5ce297c48 has problem. Fixes commit -> 141e5dcaa7356077028b4cd48ec351a38c70e5e5
commit 3a3b6a6b15dbd99d83052070fda2ae2bfdd66dc6
Author: Deepa Dinamani <deepa.kernel@gmail.com>
Date:   Thu Jan 24 00:29:20 2019 -0800

    Input: input_event - fix the CONFIG_SPARC64 mixup
    
    commit 141e5dcaa7356077028b4cd48ec351a38c70e5e5 upstream.
    
    Arnd Bergmann pointed out that CONFIG_* cannot be used in a uapi header.
    Override with an equivalent conditional.
    
    Fixes: 2e746942ebac ("Input: input_event - provide override for sparc64")
    Fixes: 152194fe9c3f ("Input: extend usable life of event timestamps to 2106 on 32 bit systems")
    Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 865a07956db55120d69876a202ce0fa35f46b218 ......
	 orig commit -> fe2bfd0d40c935763812973ce15f5764f1c12833 ......
checking 06d9f987201feeada1e48e501db5f4a202541db3 ......
	 orig commit -> 2e5700bdde438ed708b36d8acd0398dc73cbf759 ......
checking 779c65bb77391b9e096a0cd1d22c039e9a133911 ......
	 orig commit -> ef68e831840c40c7d01b328b3c0f5d8c4796c232 ......
checking 2ae6fedbd5cb4144f5cf40681b9a3ea5464d31bd ......
	 orig commit -> ec678eae746dd25766a61c4095e2b649d3b20b09 ......
checking 0380ed9b1cd39a582cd14b21072d59fb66bc7d50 ......
	 orig commit -> 8004c78c68e894e4fd5ac3c22cc22eb7dc24cabc ......
checking 07b9e5e35e8f4189a0a3b87beaca1094d5c18b24 ......
	 orig commit -> acc58d0bab55a50e02c25f00bd6a210ee121595f ......
checking f4abbb16ed9add95be72e85b9b5db8529e736b74 ......
	 orig commit -> bfd8d8fe98b8792f362cd210a7873969f8d2fc04 ......
checking a912e16faeda0f047aa334d062b70f20126f48bc ......
	 orig commit -> ba50bf1ce9a51fc97db58b96d01306aa70bc3979 ......
checking bfe482b9b299d4a79c76d6c7879b1faee85111b1 ......
	 orig commit -> da8ced360ca8ad72d8f41f5c8fcd5b0e63e1555f ......
checking 71d1a74f36a7b39623abfc71159b1b835c0750ab ......
	 orig commit -> fc01d8c61ce02c034e67378cd3e645734bc18c8c ......
checking 6d15ef2c912ab0ba3602322ea3227467212a4ca0 ......
	 orig commit -> aff9cf5955185d1f183227e46c5f8673fa483813 ......
checking 80250b48803ab0aa3eb8e0d798a4742b26ef84d9 ......
	 orig commit -> 27cfb3a53be46a54ec5e0bd04e51995b74c90343 ......
checking 3209eeded8635c8a96781f2dd362d460682a1cec ......
	 orig commit -> 5f74a8cbb38d10615ed46bc3e37d9a4c9af8045a ......
checking 75a08b9a0fcb5e87bbc8e0429a16665d045cd7de ......
	 orig commit -> bb364890323cca6e43f13e86d190ebf34a7d8cea ......
		 bb364890323cca6e43f13e86d190ebf34a7d8cea has problem. Fixes commit -> 83e418a805d880a8b18add07f94d19b2a5a80307
commit f9e6a18a44de0625a57e8b4fc2d10f0eb205047c
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Feb 9 01:58:50 2019 +0100

    mmc: meson-gx: fix interrupt name
    
    commit 83e418a805d880a8b18add07f94d19b2a5a80307 upstream.
    
    Commit bb364890323cca ("mmc: meson-gx: Free irq in release() callback")
    changed the _probe code to use request_threaded_irq() instead of
    devm_request_threaded_irq().
    Unfortunately this removes a fallback for the interrupt name:
    devm_request_threaded_irq() uses the device name as fallback if the
    given IRQ name is NULL. request_threaded_irq() has no such fallback,
    thus /proc/interrupts shows "(null)" instead.
    
    Explicitly pass the dev_name() so we get the IRQ name shown in
    /proc/interrupts again.
    While here, also fix the indentation of the request_threaded_irq()
    parameter list.
    
    Fixes: bb364890323cca ("mmc: meson-gx: Free irq in release() callback")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 4a559dfe660378507ccda1aeb556cb89a47be7eb ......
	 orig commit -> f3716b8ae9347797b73896725f192c3a7b0069b5 ......
checking d3faea2d152eba15ccf5f6e7e84ddb0c49f5dfca ......
	 orig commit -> 701956d4018e5d5438570e39e8bda47edd32c489 ......
checking 0479bdbf55d8ded806ca6b877f1e81d5733fe802 ......
	 orig commit -> e25df7812c91f62581301f9a7ac102acf92e4937 ......
checking 049c7b068dd15fedfb863bcfbde0241acbbb808f ......
	 orig commit -> b7cb707c373094ce4008d4a6ac9b6b366ec52da5 ......
checking e0d573a08f234722fe21a5729d2e945b775c5201 ......
	 orig commit -> 03aa047ef2db4985e444af6ee1c1dd084ad9fb4c ......
checking b563764443a302aab197550870ca57fda65662b8 ......
	 orig commit -> a38662084c8bdb829ff486468c7ea801c13fcc34 ......
checking 8cbca17381ac78e0e287a99fd3575114b6143345 ......
	 orig commit -> 3affbf0e154ee351add6fcc254c59c3f3947fa8f ......
checking 2f0d2f3ace1f752e868020fa21665570b8b5418c ......
	 orig commit -> a3010a0465383300f909f62b8a83f83ffa7b2517 ......
checking 7bb78e62f7126b060bd1a5391e3871aa9035ee64 ......
	 orig commit -> e6a72b7daeeb521753803550f0ed711152bb2555 ......
checking cf662d989425695f98b5dc6b00c29dceb896bd94 ......
	 orig commit -> 699390381a7bae2fab01a22f742a17235c44ed8a ......
checking 2173f5a1b0d7a8253c4b8a9e8cc71ccfe8257235 ......
	 orig commit -> 82aa0d7e09840704d9a37434fef1770179d663fb ......
checking a719cbe07847346f6f42a6133e231603d752c69d ......
	 orig commit -> 125892edfe69915a227d8d125ff0e1cd713178f4 ......
checking afb4a7ca7818c419bea3d26fc7b03c60ec5a2426 ......
	 orig commit -> b488517b28a47d16b228ce8dcf07f5cb8e5b3dc5 ......
checking cf8ea8d536a4db6f04f8c2ca06ad0a94f45042d7 ......
	 orig commit -> c0a636e4cc2eb39244d23c0417c117be4c96a7fe ......
checking 0af64fda917df00a8d199f7635e20a06acd2a3b7 ......
	 orig commit -> 667e9334fa64da2273e36ce131b05ac9e47c5769 ......
checking 4fedd516d5548aa3841b66b61d75ea4c40e7e08e ......
	 orig commit -> 060d0bf491874daece47053c4e1fb0489eb867d2 ......
checking d6847f539bd6ac2f8b75f0a6ae65c0955985d003 ......
	 orig commit -> 44fabd8cdaaa3acb80ad2bb3b5c61ae2136af661 ......
checking 3e05ceedf1439eea0a1306e30935ef5ee65e5d4f ......
	 orig commit -> d95e674c01cfb5461e8b9fdeebf6d878c9b80b2f ......
checking 8e7320b9f55159f8e006eadfb3b767407d3a8fe5 ......
	 orig commit -> 4dcf9ddc9ad5ab649abafa98c5a4d54b1a33dabb ......
checking 4d984aab54a6cc10cb7790fcd9d4a204fb67ecdd ......
	 orig commit -> b81c2c33eab79dfd3650293b2227ee5c6036585c ......
checking a70e5cd09361ff0e5ba8e1caa7167720667ea8bd ......
	 orig commit -> 91f7d2e89868fcac0e750a28230fdb1ad4512137 ......
checking f8982204cbea7bb392480c2d18192b3e5ba5acf6 ......
	 orig commit -> f7ee8ead151f9d0b8dac6ab6c3ff49bbe809c564 ......
checking adfda26bdf47e8b2d2979a018528304dfaa5bdb4 ......
	 orig commit -> 173436ba800d01178a8b19e5de4a8cb02c0db760 ......
checking 2cade15d58caad78600b6d23b4f6ec7ea48ec6c6 ......
	 orig commit -> 13d7f46386e060df31b727c9975e38306fa51e7a ......
checking 6c4d069aec0fbbfd2e244b84c014539d1daad988 ......
	 orig commit -> 80b3671e9377916bf2b02e56113fa7377ce5705a ......
checking c9fe9d194d4513d5902a4e79db0092ace010e572 ......
	 orig commit -> e0a7328fad9979104f73e19bedca821ef3262ae1 ......
checking 552cd931b483c8c0bd19fa67fb2453fa942edc32 ......
	 orig commit -> 20704bd1633dd5afb29a321d3a615c9c8e9c9d05 ......
checking 0449da6fc203562c56fd17f612230e2db05315b4 ......
	 orig commit -> ab5098fa25b91cb6fe0a0676f17abb64f2bbf024 ......
checking e3fa624ee7aff48d6933d31b50c93b77e54ef583 ......
	 orig commit -> 0f149c9fec3cd720628ecde83bfc6f64c1e7dcb6 ......
checking 84bf74307c881222a3387497cff896f60ea6b44f ......
	 orig commit -> 2cddd20147826aef283115abb00012d4dafe3cdb ......
checking bdafc159ac8ca616c6c7cd4ecee1f264c4d9606e ......
checking c82f4684d330c4aac94fae52b902799c4f76d190 ......
	 orig commit -> a11dcd6497915ba79d95ef4fe2541aaac27f6201 ......
checking adbf7e5809943d891baa0268cfede1c948a9217d ......
	 orig commit -> f97f4dd8b3bb9d0993d2491e0f22024c68109184 ......
checking bc4e2300e44ad206169d3370535d271329e79360 ......
	 orig commit -> d2f372ba0914e5722ac28e15f2ed2db61bcf0e44 ......
		 d2f372ba0914e5722ac28e15f2ed2db61bcf0e44 has problem. Fixes commit -> 1ab3030193d25878b3b1409060e1e0a879800c95
commit 21e47998d95973548778cafbb3fc44f92878a316
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Apr 18 07:14:14 2019 +0000

    mlxsw: pci: Reincrease PCI reset timeout
    
    [ Upstream commit 1ab3030193d25878b3b1409060e1e0a879800c95 ]
    
    During driver initialization the driver sends a reset to the device and
    waits for the firmware to signal that it is ready to continue.
    
    Commit d2f372ba0914 ("mlxsw: pci: Increase PCI SW reset timeout")
    increased the timeout to 13 seconds due to longer PHY calibration in
    Spectrum-2 compared to Spectrum-1.
    
    Recently it became apparent that this timeout is too short and therefore
    this patch increases it again to a safer limit that will be reduced in
    the future.
    
    Fixes: c3ab435466d5 ("mlxsw: spectrum: Extend to support Spectrum-2 ASIC")
    Fixes: d2f372ba0914 ("mlxsw: pci: Increase PCI SW reset timeout")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
checking 1688e75cae7dba65d5597b11dddf70d546e46d6c ......
	 orig commit -> cc5e710759470bc7f3c61d11fd54586f15fdbdf4 ......
		 cc5e710759470bc7f3c61d11fd54586f15fdbdf4 has problem. Fixes commit -> 816db7663565cd23f74ed3d5c9240522e3fb0dda
commit 9a752d37292bb377d3f7eb7755d78883fad5c439
Author: Jason Wang <jasowang@redhat.com>
Date:   Tue Feb 19 14:53:44 2019 +0800

    vhost: correctly check the return value of translate_desc() in log_used()
    
    [ Upstream commit 816db7663565cd23f74ed3d5c9240522e3fb0dda ]
    
    When fail, translate_desc() returns negative value, otherwise the
    number of iovs. So we should fail when the return value is negative
    instead of a blindly check against zero.
    
    Detected by CoverityScan, CID# 1442593:  Control flow issues  (DEADCODE)
    
    Fixes: cc5e71075947 ("vhost: log dirty page correctly")
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Reported-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
checking 3d997bf0074e0643842f0d554c732447a5f31e85 ......
	 orig commit -> 04a4af334b971814eedf4e4a413343ad3287d9a9 ......
checking 916c27c8cf883e4650c280223db520cd7a5f161b ......
	 orig commit -> cd0c4e70fc0ccfa705cdf55efb27519ce9337a26 ......
checking 02239e797ac75f89a05622a27d04695f08c1ca89 ......
	 orig commit -> 9174c3df1cd181c14913138d50ccbe539bb08335 ......
checking 3e4cd0677715b4ba2aee3a76f25f144c0f90b3d2 ......
	 orig commit -> e40e2a2e78664fa90ea4b9bdf4a84efce2fea9d9 ......
checking 1a864e38b39e9f28ae1d635379e6d52b2d8245a4 ......
	 orig commit -> 8cbcdc1a51999ca81db2956608b917aacd28d837 ......
checking 40f2f08030fa59f634ed8313f4c9578416f2a108 ......
	 orig commit -> 6c57f0458022298e4da1729c67bd33ce41c14e7a ......
checking e287968a3837458cd489bdfad7095bb5a10a61b6 ......
	 orig commit -> 28c1382fa28f2e2d9d0d6f25ae879b5af2ecbd03 ......
checking 779a5077d9cf5c53ad368a0843b814b10139dd1f ......
	 orig commit -> 5ab3121beeb76aa6090195b67d237115860dd9ec ......
